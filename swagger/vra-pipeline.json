{
    "swagger": "2.0",
    "info": {
        "description": "Code Stream is a continuous integration and continuous delivery (CICD) tool that you use to build Pipelines that model the software release process in your DevOps lifecycle. By creating Pipelines, you build the code infrastructure that delivers your software rapidly and continuously.\n\nThis page describes the RESTful APIs for Code Stream. The APIs facilitate CRUD operations on the various resources and entities used throughout Code Stream (Pipelines, Endpoints, Variables, etc.) and allow operations on them (executing a Pipeline, validating an Endpoint connection, etc.).\n\nThe APIs that list collections of resources  also support OData like implementation. Below query params can be used across Code Stream entities.\n\nExample:\n\n1. `$orderby` - returns a result with the rows being sorted by the values of provided attribute.\n\n    ```/codestream/api/endpoints?$orderby=name%20desc```\n\n2. `$top`, `$skip` - `$top` returns the requested number of resources. Used with `$skip`, the client can skip a given number of resources.\n\n    ```/codestream/api/endpoints?$expand=true&$top=10&$skip=2```\n\n3. `page` and `$size` - page used in conjunction with `$size` helps in pagination of resources.\n\n    ```/codestream/api/endpoints?$expand=true&page=0&$size=5```\n\n4. `$filter` - `$filter` returns a subset of resources that satisfy the given predicate expression.\n\n    ```\n    /codestream/api/endpoints?$filter=startswith(name, 'ABC')\n    /codestream/api/endpoints?$filter=toupper(name) eq 'ABCD-JENKINS'\n    /codestream/api/endpoints?$filter=substringof(%27bc%27,tolower(name))\n    /codestream/api/endpoints?$filter=name eq 'ABCD' and project eq 'demo'\n",
        "version": "2019-10-17",
        "title": "Code Stream APIs"
    },
    "host": "https://api.mgmt.cloud.vmware.com",
    "basePath": "/",
    "tags": [
        {
            "name": "About"
        },
        {
            "name": "Custom Integrations"
        },
        {
            "name": "Endpoints"
        },
        {
            "name": "Executions"
        },
        {
            "name": "Pipelines"
        },
        {
            "name": "Triggers"
        },
        {
            "name": "User-operations"
        },
        {
            "name": "Variables"
        }
    ],
    "schemes": [
        "https"
    ],
    "paths": {
        "/codestream/api/about": {
            "get": {
                "tags": [
                    "About"
                ],
                "summary": "Get about page",
                "description": "The page contains information about the supported API versions and the latest API version. The version parameter is optional but highly recommended.\nIf you do not specify explicitly an exact version, you will be calling the latest supported API version.\nHere is an example of a call which specifies the exact version you are using: `GET /codestream/api/pipelines?apiVersion=2019-10-17`",
                "operationId": "handleGetAboutUsingGET",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested Endpoint",
                        "schema": {
                            "$ref": "#/definitions/About"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/batch-user-operations": {
            "post": {
                "tags": [
                    "Executions"
                ],
                "summary": "Updates a batch of user operations",
                "description": "Approves/ Rejects a set of user operations",
                "operationId": "updateUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request",
                        "description": "request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BatchUserOperationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Approved/Rejected all selected user operations successfully.",
                        "schema": {
                            "$ref": "#/definitions/BatchUserOperationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/custom-integrations": {
            "get": {
                "tags": [
                    "Custom Integrations"
                ],
                "summary": "Get all Custom Integrations",
                "description": "Get all Custom Integrations with specified paging and filter parameters.",
                "operationId": "getCustomIntegrationsUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list Custom Integrations with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' Custom Integrations for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' Custom Integrations",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "type",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested Custom Integrations",
                        "schema": {
                            "$ref": "#/definitions/CustomIntegrations"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Custom Integrations"
                ],
                "summary": "Create a Custom Integration",
                "description": "Create a Custom Integration to be consumed in pipelines as custom tasks",
                "operationId": "createCustomIntegrationUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Custom Integration specification",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomIntegrationSpec"
                        }
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomIntegration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/custom-integrations/{id}": {
            "get": {
                "tags": [
                    "Custom Integrations"
                ],
                "summary": "Get a Custom Integration by id",
                "description": "Get details of a Custom Integration with the given id",
                "operationId": "getDraftByIdUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomIntegration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Custom Integrations"
                ],
                "summary": "Update a Custom Integration by id",
                "description": "Update a Custom Integration with the given id",
                "operationId": "updateByIdUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Custom Integration specification",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomIntegrationSpec"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomIntegration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Custom Integrations"
                ],
                "summary": "Delete a Custom Integration and its versions",
                "description": "Delete a Custom Integration with the given id and all its versions",
                "operationId": "deleteDraftByIdUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of the Custom Integration",
                        "required": true,
                        "type": "string",
                        "default": "all",
                        "allowEmptyValue": false,
                        "x-example": "draft"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomIntegration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/custom-integrations/{id}/versions": {
            "get": {
                "tags": [
                    "Custom Integrations"
                ],
                "summary": "Get all versions of a Custom Integration by id",
                "description": "Get all versions of a Custom Integration with specified id, paging and filter parameters",
                "operationId": "getAllCustomIntegrationVersionsByIdUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list Custom Integrations with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' Custom Integrations for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' Custom Integrations",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with requested versions for Custom Integration",
                        "schema": {
                            "$ref": "#/definitions/CustomIntegrations"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Custom Integrations"
                ],
                "summary": "Create a Custom Integration version",
                "description": "Create a Custom Integration version from the current draft",
                "operationId": "createVersionByIdUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Request object for version of a Custom Integration",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VersionRequest"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomIntegration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/custom-integrations/{id}/versions/{version}": {
            "get": {
                "tags": [
                    "Custom Integrations"
                ],
                "summary": "Get a Custom Integration by version",
                "description": "Get a Custom Integration with the given id and version",
                "operationId": "getCustomIntegrationVersionByIdUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomIntegration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Custom Integrations"
                ],
                "summary": "Delete a Custom Integration version",
                "description": "Delete a Custom Integration version with the given id and version",
                "operationId": "deleteVersionByIdUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomIntegration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/custom-integrations/{id}/versions/{version}/deprecate": {
            "post": {
                "tags": [
                    "Custom Integrations"
                ],
                "summary": "Deprecate a Custom Integration version",
                "description": "Deprecate a Custom Integration version",
                "operationId": "deprecateByIdAndVersionUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomIntegration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/custom-integrations/{id}/versions/{version}/release": {
            "post": {
                "tags": [
                    "Custom Integrations"
                ],
                "summary": "Release a Custom Integration version",
                "description": "Release a Custom Integration version to be consumable in pipelines",
                "operationId": "releaseByIdAndVersionUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomIntegration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/custom-integrations/{id}/versions/{version}/restore": {
            "post": {
                "tags": [
                    "Custom Integrations"
                ],
                "summary": "Restore a Custom Integration from a version to current draft",
                "description": "Restore a Custom Integration from the given version to the current draft",
                "operationId": "restoreByIdAndVersionUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomIntegration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/custom-integrations/{id}/versions/{version}/withdraw": {
            "post": {
                "tags": [
                    "Custom Integrations"
                ],
                "summary": "Withdraw a Custom Integration version",
                "description": "Withdraw a released/deprecated Custom Integration version to make it un-consumable in pipelines",
                "operationId": "withdrawByIdAndVersionUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of the Custom Integration",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CustomIntegration"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/endpoint-certificate": {
            "get": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Get endpoint certificate",
                "description": "Get endpoint certificate chain for validation",
                "operationId": "getUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with endpoint certificate details",
                        "schema": {
                            "$ref": "#/definitions/EndpointCertificateChain"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/endpoint-tiles": {
            "get": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Get all endpoint tiles",
                "description": "Get all supported endpoint tiles",
                "operationId": "getEndpointTilesUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with supported endpoint tiles",
                        "schema": {
                            "$ref": "#/definitions/Tiles"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/endpoint-tiles/{type}": {
            "get": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Get endpoint properties",
                "description": "Get endpoint properties with the given endpoint type",
                "operationId": "getEndpointPropertiesUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "description": "type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with endpoint properties",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/endpoint-validation": {
            "post": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Validate endpoint",
                "description": "Validates the given endpoint",
                "operationId": "validateEndpointUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Endpoint specification",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EndpointValidationSpec"
                        }
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with endpoint validations",
                        "schema": {
                            "$ref": "#/definitions/TileExecutorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/endpoints": {
            "get": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Get all Endpoints",
                "description": "Get all Endpoints with specified paging and filter parameters",
                "operationId": "getAllEndpointsUsingGET",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list Endpoints with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' Endpoints for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' Endpoints for listing",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested Endpoints",
                        "schema": {
                            "$ref": "#/definitions/Endpoints"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Create an Endpoint",
                "description": "Create an Endpoint based on the given project",
                "operationId": "createEndpointUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Endpoint specification",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EndpointSpec"
                        }
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the created Endpoint",
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/endpoints/{id}": {
            "get": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Get an Endpoint",
                "description": "Get an Endpoint with the given id",
                "operationId": "getEndpointByIdUsingGET",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Endpoint",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested Endpoint",
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Update an Endpoint by id",
                "description": "Update an Endpoint with the given id",
                "operationId": "updateEndpointByIdUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Endpoint specification",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EndpointSpec"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Endpoint",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the updated Endpoint",
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Delete an Endpoint by id",
                "description": "Delete an Endpoint with the given id",
                "operationId": "deleteEndpointByIdUsingDELETE",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Endpoint",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the deleted Endpoint",
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/endpoints/{project}/{name}": {
            "get": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Get an Endpoint by project and name",
                "description": "Get an Endpoint with the given project and name",
                "operationId": "getEndpointByNameUsingGET",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Endpoint",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Endpoint belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested Endpoint",
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Update an Endpoint by project and name",
                "description": "Update an Endpoint with the given project and name",
                "operationId": "updateEndpointByNameUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Endpoint specification",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EndpointSpec"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Endpoint",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Endpoint belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the updated Endpoint",
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Delete an Endpoint by project and name",
                "description": "Delete an Endpoint with the given name",
                "operationId": "deleteEndpointByNameUsingDELETE",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Endpoint",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Endpoint belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the deleted Endpoint",
                        "schema": {
                            "$ref": "#/definitions/Endpoint"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/executions": {
            "get": {
                "tags": [
                    "Executions"
                ],
                "summary": "Get all Executions",
                "description": "Get all Executions with specified paging and filter parameters.",
                "operationId": "getAllExecutionsUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' Executions for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' Executions for listing",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested Executions",
                        "schema": {
                            "$ref": "#/definitions/Executions"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Executions"
                ],
                "summary": "Delete all Executions",
                "description": "Delete executions that match the specified filter.",
                "operationId": "deleteAllExecutionsUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Count of executions to be deleted",
                        "schema": {
                            "$ref": "#/definitions/Executions"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/executions/{id}": {
            "get": {
                "tags": [
                    "Executions"
                ],
                "summary": "Get an Execution",
                "description": "Get an Execution by id",
                "operationId": "getExecutionByIdUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Execution",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "queryParams",
                        "in": "query",
                        "description": "queryParams",
                        "required": false,
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Execution",
                        "schema": {
                            "$ref": "#/definitions/Execution"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Executions"
                ],
                "summary": "Act on an Execution",
                "description": "Actions supported are pause, resume, cancel and tag",
                "operationId": "modifyExecutionUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "action",
                        "in": "query",
                        "description": "Action to perform on the Execution. Can be any of pause, resume, cancel and tag",
                        "required": true,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Execution Request specification",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ExecutionActionRequest"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Execution",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Execution",
                        "schema": {
                            "$ref": "#/definitions/Execution"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Executions"
                ],
                "summary": "Delete an Execution by id",
                "description": "Delete an Execution",
                "operationId": "deleteExecutionByIdUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Execution",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with execution delete",
                        "schema": {
                            "$ref": "#/definitions/Execution"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/export": {
            "get": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Export",
                "description": "Exports a single pipeline (and endpoints referred in that pipeline) or list of pipelines/ endpoints as 'YAML' in a given project",
                "operationId": "exportUsingGET",
                "produces": [
                    "application/x-yaml"
                ],
                "parameters": [
                    {
                        "name": "endpoints",
                        "in": "query",
                        "description": "Comma separated list of endpoints to be exported in a given project",
                        "required": false,
                        "type": "string",
                        "default": "Jenkins, Jira"
                    },
                    {
                        "name": "pipeline",
                        "in": "query",
                        "description": "Name of the Pipeline to be exported. Here, all endpoints referred in the pipeline also get exported",
                        "required": false,
                        "type": "string",
                        "default": "Deploy Production"
                    },
                    {
                        "name": "pipelines",
                        "in": "query",
                        "description": "Comma separated list of pipelines to be exported in a given project",
                        "required": false,
                        "type": "string",
                        "default": "Deploy Production, Dev"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "description": "Name of the Project to which Endpoint(s)/Pipeline(s) belong to",
                        "required": false,
                        "type": "string",
                        "default": "Project-1"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/gerrit-events": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get all Gerrit Events",
                "description": "Get all Gerrit Events",
                "operationId": "getAllGerritEventsUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list gerrit events with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' gerrit events for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' gerrit events for listing",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with get of gerrit events",
                        "schema": {
                            "$ref": "#/definitions/GerritEvents"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Manual trigger Gerrit event",
                "description": "Manual trigger Gerrit event",
                "operationId": "manualGerritEventTriggerUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gerritManualTrigger",
                        "description": "gerritManualTrigger",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GerritManualTrigger"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Manual trigger Gerrit event",
                        "schema": {
                            "$ref": "#/definitions/ManualTriggerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/gerrit-events/{id}": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get a gerrit Event",
                "description": "Get a gerrit Event based on id",
                "operationId": "getGerritEventByIDUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with gerrit Event",
                        "schema": {
                            "$ref": "#/definitions/GerritEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Re-run/Resume Gerrit event",
                "description": "Re-run/Resume Gerrit event",
                "operationId": "resumeOrRerunGerritEventUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "action",
                        "in": "query",
                        "description": "Resume/Rerun",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Re-run/Resume Gerrit event",
                        "schema": {
                            "$ref": "#/definitions/GerritEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Delete a Gerrit Event",
                "description": "Delete a Gerrit Event",
                "operationId": "deleteGerritEventByIdUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Delete a Gerrit Event",
                        "schema": {
                            "$ref": "#/definitions/GerritEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/gerrit-listeners": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get all gerrit listeners",
                "description": "Get all gerrit listeners",
                "operationId": "getAllGerritListenersUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list gerrit listeners with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' gerrit listeners for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' gerrit listeners for listing",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with get of gerrit listeners",
                        "schema": {
                            "$ref": "#/definitions/GerritListeners"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Create a Gerrit Listener",
                "description": "Create a Gerrit Listener",
                "operationId": "createGerritListenerUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gerritListenerspec",
                        "description": "gerritListenerspec",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GerritListenerSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Listener Creation",
                        "schema": {
                            "$ref": "#/definitions/GerritListener"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/gerrit-listeners/validate": {
            "post": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Validate a Gerrit Listener",
                "description": "Validate a Gerrit Listener",
                "operationId": "validateGerritListenerUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gerritListenerspec",
                        "description": "gerritListenerspec",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GerritListenerSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Listener Validation",
                        "schema": {
                            "$ref": "#/definitions/GerritListener"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/gerrit-listeners/{id}": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get a gerrit listener",
                "description": "Get a gerrit listeners based on id",
                "operationId": "getGerritListenerByIDUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with gerrit listener",
                        "schema": {
                            "$ref": "#/definitions/GerritListener"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Clone a Gerrit Listener",
                "description": "Clone a Gerrit Listener",
                "operationId": "cloneGerritListenerUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "serviceRequest",
                        "description": "serviceRequest",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Listener Clone",
                        "schema": {
                            "$ref": "#/definitions/GerritListener"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Update a Gerrit Listener with id",
                "description": "Update a Gerrit Listener with id",
                "operationId": "updateGerritListenerByIdUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gerritListenerSpec",
                        "description": "gerritListenerSpec",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GerritListenerSpec"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Listener Update",
                        "schema": {
                            "$ref": "#/definitions/GerritListener"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Delete a Gerrit Listener with id",
                "description": "Delete a Gerrit Listener with id",
                "operationId": "deleteGerritListenerByIdUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Listener Delete",
                        "schema": {
                            "$ref": "#/definitions/GerritListener"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Patch a Gerrit Listener with id",
                "description": "Patch a Gerrit Listener with id",
                "operationId": "patchGerritListenerByIdUsingPATCH",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gerritListenerPatch",
                        "description": "gerritListenerPatch",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GerritListenerPatch"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Listener patch",
                        "schema": {
                            "$ref": "#/definitions/GerritListener"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/gerrit-listeners/{id}/projects": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get Gerrit Projects from the Gerrit Listener using id",
                "description": "Get Gerrit Projects from the Gerrit Listener using id",
                "operationId": "getGerritProjectsByIdUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with gerrit projects",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/gerrit-listeners/{project}/{name}": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get a gerrit listener by project and name",
                "description": "Get a gerrit listener based on project and name",
                "operationId": "getGerritListenerByNameUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with gerrit listener",
                        "schema": {
                            "$ref": "#/definitions/GerritListener"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Clone a Gerrit Listener by project and name",
                "description": "Clone a Gerrit Listener with the given project and name",
                "operationId": "cloneGerritListenerByNameUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Request object for actions such as cloning",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceRequest"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Gerrit Listener",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Gerrit Listener belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the cloned Pipeline",
                        "schema": {
                            "$ref": "#/definitions/GerritListener"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Update a Gerrit Listener with project and name",
                "description": "Update a Gerrit Listener with project and name",
                "operationId": "updateGerritListenerByNameUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gerritListenerSpec",
                        "description": "gerritListenerSpec",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GerritListenerSpec"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Listener Update",
                        "schema": {
                            "$ref": "#/definitions/GerritListener"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Delete a Gerrit Listener with project and name",
                "description": "Delete a Gerrit Listener with project and name",
                "operationId": "deleteGerritListenerByNameUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Listener Delete",
                        "schema": {
                            "$ref": "#/definitions/GerritListener"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Patch a Gerrit Listener with project and name",
                "description": "Patch a Gerrit Listener with project and name",
                "operationId": "patchGerritListenerByNameUsingPATCH",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gerritListenerPatch",
                        "description": "gerritListenerPatch",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GerritListenerPatch"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Listener patch",
                        "schema": {
                            "$ref": "#/definitions/GerritListener"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/gerrit-listeners/{project}/{name}/projects": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get Gerrit Projects from the Gerrit Listener using project and name",
                "description": "Get Gerrit Projects from the Gerrit Listener using project and name",
                "operationId": "getGerritProjectsByNameUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with gerrit projects",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/gerrit-triggers": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get all gerrit triggers",
                "description": "Get all gerrit triggers",
                "operationId": "getAllGerritTriggersUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list gerrit triggers with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' gerrit triggers for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' gerrit triggers for listing",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with get of gerrit triggers",
                        "schema": {
                            "$ref": "#/definitions/GerritTriggers"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Create a Gerrit Trigger",
                "description": "Create a Gerrit Trigger",
                "operationId": "createGerritTriggerUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gerritTriggerSpec",
                        "description": "gerritTriggerSpec",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GerritTriggerSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Trigger Creation",
                        "schema": {
                            "$ref": "#/definitions/GerritTrigger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/gerrit-triggers/{id}": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get a gerrit trigger",
                "description": "Get a gerrit trigger based on id",
                "operationId": "getGerritTriggerByIdUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with gerrit trigger",
                        "schema": {
                            "$ref": "#/definitions/GerritTrigger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Clone a Gerrit Trigger",
                "description": "Clone a Gerrit Trigger",
                "operationId": "cloneGerritTriggerUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "serviceRequest",
                        "description": "serviceRequest",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Trigger Clone",
                        "schema": {
                            "$ref": "#/definitions/GerritTrigger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Update a Gerrit Trigger with id",
                "description": "Update a Gerrit Trigger with id",
                "operationId": "updateGerritTriggerByIdUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gerritTriggerSpec",
                        "description": "gerritTriggerSpec",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GerritTriggerSpec"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Trigger Update",
                        "schema": {
                            "$ref": "#/definitions/GerritTrigger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Delete a Gerrit Trigger with id",
                "description": "Delete a Gerrit Trigger with id",
                "operationId": "deleteGerritTriggerByIdUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Trigger Delete",
                        "schema": {
                            "$ref": "#/definitions/GerritTrigger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Patch a Gerrit Trigger with id",
                "description": "Patch a Gerrit Trigger with id",
                "operationId": "patchGerritTriggerByIdUsingPATCH",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gerritTriggerPatch",
                        "description": "gerritTriggerPatch",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GerritTriggerPatch"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Trigger patch",
                        "schema": {
                            "$ref": "#/definitions/GerritTrigger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/gerrit-triggers/{project}/{name}": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get a gerrit trigger by project and name",
                "description": "Get a gerrit trigger based on project and name",
                "operationId": "getGerritTriggerByNameUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with gerrit trigger",
                        "schema": {
                            "$ref": "#/definitions/GerritTrigger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Clone a Gerrit Trigger by project and name",
                "description": "Clone a Gerrit Trigger with the given project and name",
                "operationId": "cloneGerritTriggerByNameUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Request object for actions such as cloning",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceRequest"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Gerrit Trigger",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Gerrit Trigger belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the cloned Gerrit Trigger",
                        "schema": {
                            "$ref": "#/definitions/GerritTrigger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Update a Gerrit Trigger with project and name",
                "description": "Update a Gerrit Trigger with project and name",
                "operationId": "updateGerritTriggerByNameUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gerritTriggerSpec",
                        "description": "gerritTriggerSpec",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GerritTriggerSpec"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Trigger Update",
                        "schema": {
                            "$ref": "#/definitions/GerritTrigger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Delete a Gerrit Trigger with project and name",
                "description": "Delete a Gerrit Trigger with project and name",
                "operationId": "deleteGerritTriggerByNameUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Trigger Delete",
                        "schema": {
                            "$ref": "#/definitions/GerritTrigger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Patch a Gerrit Trigger with project and name",
                "description": "Patch a Gerrit Trigger with project and name",
                "operationId": "patchGerritTriggerByNameUsingPATCH",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gerritTriggerPatch",
                        "description": "gerritTriggerPatch",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GerritTriggerPatch"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Gerrit Trigger patch",
                        "schema": {
                            "$ref": "#/definitions/GerritTrigger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/git-events": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get all Git Events",
                "description": "Get all Git Events",
                "operationId": "getAllGitEventsUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list Git Events with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' Git Events for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' Git Events for listing",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with get of Git Events",
                        "schema": {
                            "$ref": "#/definitions/GitEvents"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/git-events/{id}": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get a Git Event",
                "description": "Get a Git Event based on id",
                "operationId": "getGitEventByIDUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Git Event",
                        "schema": {
                            "$ref": "#/definitions/GitEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Re-run/Resume Git Event",
                "description": "Re-run/Resume Git Event",
                "operationId": "resumeOrRerunGitEventUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "action",
                        "in": "query",
                        "description": "Resume/Rerun",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Re-run/Resume Git Event",
                        "schema": {
                            "$ref": "#/definitions/GitEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Delete a Git Event",
                "description": "Delete a Git Event",
                "operationId": "deleteGitEventsByIdUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Delete a Git Event",
                        "schema": {
                            "$ref": "#/definitions/GitEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/git-webhooks": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get all Git Webhooks",
                "description": "Get all Git Webhooks",
                "operationId": "getAllGitWebhooksUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list Git Webhooks with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' Git Webhooks for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' Git Webhooks for listing",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with get of Git Webhooks",
                        "schema": {
                            "$ref": "#/definitions/GitWebhooks"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Create a Git Webhook",
                "description": "Create a Git Webhook",
                "operationId": "createGitWebhookUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gitWebhookSpec",
                        "description": "gitWebhookSpec",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GitWebhookSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Git Webhook Creation",
                        "schema": {
                            "$ref": "#/definitions/GitWebhook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/git-webhooks/{id}": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get a Git Webhook",
                "description": "Get a Git Webhook based on id",
                "operationId": "getGitWebhookByIDUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Git Webhook",
                        "schema": {
                            "$ref": "#/definitions/GitWebhook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Update a Git Webhook",
                "description": "Update a Git Webhook",
                "operationId": "updateGitWebhookByIdUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gitWebhookSpec",
                        "description": "gitWebhookSpec",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GitWebhookSpec"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Git Webhook Update",
                        "schema": {
                            "$ref": "#/definitions/GitWebhook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Delete a Git Webhook",
                "description": "Delete a Git Webhook",
                "operationId": "deleteGitWebhookByIdUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Git Webhook Delete",
                        "schema": {
                            "$ref": "#/definitions/GitWebhook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/git-webhooks/{project}/{name}": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get a Git Webhook by name",
                "description": "Get a Git Webhook by Name",
                "operationId": "getGitWebhookByNameUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Git Webhook",
                        "schema": {
                            "$ref": "#/definitions/GitWebhook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Update a Git Webhook using name",
                "description": "Update a Git Webhook using name",
                "operationId": "updateGitWebhookByNameUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "gitWebhookSpec",
                        "description": "gitWebhookSpec",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GitWebhookSpec"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Git Webhook Update",
                        "schema": {
                            "$ref": "#/definitions/GitWebhook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Delete a Git Webhook by name",
                "description": "Delete a Git Webhook by name",
                "operationId": "deleteGitWebhookByNameUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Git Webhook Delete",
                        "schema": {
                            "$ref": "#/definitions/GitWebhook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/import": {
            "post": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Import",
                "description": "Imports pipeline(s)/endpoint(s) into Code Stream.",
                "operationId": "importYamlUsingPOST",
                "consumes": [
                    "application/x-yaml"
                ],
                "produces": [
                    "application/x-yaml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Pipeline/Endpoint specification/body in YAML.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data imported successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/pipeline-tiles": {
            "get": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Get Pipeline Tiles",
                "description": "Get Pipeline Tiles",
                "operationId": "getPipelineTilesUsingGET",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested Pipeline Tiles",
                        "schema": {
                            "$ref": "#/definitions/Tiles"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/pipelines": {
            "get": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Get all Pipelines",
                "description": "Get all Pipelines with specified paging and filter parameters.",
                "operationId": "getAllPipelinesUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' Pipelines for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' Pipelines for listing",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested Pipelines",
                        "schema": {
                            "$ref": "#/definitions/Pipelines"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Create a Pipeline",
                "description": "Create a Pipeline based on the given project",
                "operationId": "createPipelineUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Pipeline specification",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PipelineSpec"
                        }
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the created Pipeline",
                        "schema": {
                            "$ref": "#/definitions/Pipeline"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/pipelines/{id}": {
            "get": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Get a Pipeline",
                "description": "Get a Pipeline with the given id",
                "operationId": "getPipelineByIdUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested Pipeline",
                        "schema": {
                            "$ref": "#/definitions/Pipeline"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Clone a Pipeline",
                "description": "Clone a Pipeline with the given id",
                "operationId": "actOnPipelineUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Request object for actions such as cloning",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceRequest"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Pipeline to be cloned",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the cloned Pipeline",
                        "schema": {
                            "$ref": "#/definitions/Pipeline"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Update a Pipeline by id",
                "description": "Update a Pipeline with the given id",
                "operationId": "updatePipelineUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Pipeline specification",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PipelineSpec"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the updated Pipeline",
                        "schema": {
                            "$ref": "#/definitions/Pipeline"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Delete a Pipeline by id",
                "description": "Delete a Pipeline with the given id",
                "operationId": "deletePipelineByIdUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the deleted Pipeline",
                        "schema": {
                            "$ref": "#/definitions/Pipeline"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Update a Pipeline by id",
                "description": "Update a Pipeline with the given id",
                "operationId": "patchPipelineUsingPATCH",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Patch Request for a pipeline",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PipelinePatchRequest"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the updated Pipeline",
                        "schema": {
                            "$ref": "#/definitions/Pipeline"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/pipelines/{id}/executions": {
            "get": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Get all Executions of a Pipeline",
                "description": "Get all Executions of a Pipeline with specified paging and filter parameters.",
                "operationId": "getExecutionsByIdUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' Executions for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' Executions for listing",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Executions on pages",
                        "schema": {
                            "$ref": "#/definitions/Executions"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Execute a Pipeline",
                "description": "Execute a Pipeline based on the given id",
                "operationId": "executePipelineByIdUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Execution Request for a pipeline",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExecutionRequest"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the created execution response",
                        "schema": {
                            "$ref": "#/definitions/ExecutionResponse"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/ExecutionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/pipelines/{id}/executions/{index}": {
            "get": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Get an Execution",
                "description": "Get an Execution based on the given pipeline id and execution index",
                "operationId": "getExecutionByIndexAndPipelineIdUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The index of the Execution",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested Execution",
                        "schema": {
                            "$ref": "#/definitions/Execution"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/pipelines/{project}/{name}": {
            "get": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Get a Pipeline by project and name",
                "description": "Get a Pipeline with the given project and name",
                "operationId": "getPipelineByNameUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Pipeline belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested Pipeline",
                        "schema": {
                            "$ref": "#/definitions/Pipeline"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Clone a Pipeline by project and name",
                "description": "Clone a Pipeline with the given project and name",
                "operationId": "clonePipelineByNameUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Request object for actions such as cloning",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceRequest"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Pipeline belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the cloned Pipeline",
                        "schema": {
                            "$ref": "#/definitions/Pipeline"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Update a Pipeline by project and name",
                "description": "Update a Pipeline with the given project and name",
                "operationId": "updatePipelineByNameUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Pipeline specification",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PipelineSpec"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Pipeline belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the updated Pipeline",
                        "schema": {
                            "$ref": "#/definitions/Pipeline"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Delete a Pipeline by project and name",
                "description": "Delete a Pipeline with the given project and name",
                "operationId": "deletePipelineByNameUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Pipeline belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the deleted Pipeline",
                        "schema": {
                            "$ref": "#/definitions/Pipeline"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Update a Pipeline by project and name",
                "description": "Update a Pipeline with the given project and name",
                "operationId": "patchPipelineByNameUsingPATCH",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Patch Request for a pipeline",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PipelinePatchRequest"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Pipeline belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the updated Pipeline",
                        "schema": {
                            "$ref": "#/definitions/Pipeline"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/pipelines/{project}/{name}/executions": {
            "get": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Get all Executions of a Pipeline",
                "description": "Get all Executions of a Pipeline with specified paging and filter parameters.",
                "operationId": "getExecutionsByNameUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' Executions for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' Executions for listing",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Pipeline belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Executions on pages",
                        "schema": {
                            "$ref": "#/definitions/Executions"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Execute a Pipeline",
                "description": "Execute a Pipeline based on the given project and name",
                "operationId": "executePipelineByNameUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Execution Request for a pipeline",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExecutionRequest"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Pipeline belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the created execution response",
                        "schema": {
                            "$ref": "#/definitions/ExecutionResponse"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/ExecutionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/pipelines/{project}/{name}/executions/{index}": {
            "get": {
                "tags": [
                    "Pipelines"
                ],
                "summary": "Get an Execution",
                "description": "Get an Execution based on the given pipeline id and execution index",
                "operationId": "getExecutionByNameAndIndexUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "index",
                        "in": "path",
                        "description": "The index of the Execution",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Pipeline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Pipeline belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested Execution",
                        "schema": {
                            "$ref": "#/definitions/Execution"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/registry-events": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get all Docker Registry Events",
                "description": "Get all Docker Registry Events",
                "operationId": "getAllDockerRegistryEventsUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list Docker Registry Events with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' Docker Registry Events for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' Docker Registry Events for listing",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with get of Docker Registry Events",
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryEvents"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/registry-events/{id}": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get a Docker Registry Event",
                "description": "Get a Docker Registry Event based on id",
                "operationId": "getDockerRegistryEventByIDUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Docker Registry Event",
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Re-run/Resume Docker Registry Event",
                "description": "Re-run/Resume Docker Registry Event",
                "operationId": "resumeOrRerunDockerRegistryEventUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "action",
                        "in": "query",
                        "description": "Resume/Rerun",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Re-run/Resume Docker Registry Event",
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Delete a Docker Registry Event",
                "description": "Delete a Docker Registry Event",
                "operationId": "deleteDockerRegistryEventByIdUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Delete a Docker Registry Event",
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/registry-webhooks": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get all Docker Registry Webhooks",
                "description": "Get all Docker Registry Webhooks",
                "operationId": "getAllDockerRegistryWebhooksUsingGET",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list Docker Registry Webhooks with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' Docker Registry Webhooks for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' Docker Registry Webhooks for listing",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with get of Docker Registry Webhooks",
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebhooks"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Create a Docker Registry Webhook",
                "description": "Create a Docker Registry Webhook",
                "operationId": "createDockerRegistryWebhookUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "dockerRegistryWebHookSpec",
                        "description": "dockerRegistryWebHookSpec",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebHookSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Creation of Docker Registry Webhook",
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebHook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/registry-webhooks/{id}": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get a Docker Registry Webhook",
                "description": "Get a Docker Registry Webhook based on id",
                "operationId": "getDockerRegistryWebhookByIDUsingGET",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with get on Docker Registry Webhook",
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebHook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Update a Docker Registry Webhook",
                "description": "Update a Docker Registry Webhook",
                "operationId": "updateDockerRegistryWebhookByIdUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "dockerRegistryWebHookSpec",
                        "description": "dockerRegistryWebHookSpec",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebHookSpec"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Docker Registry Webhook Update",
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebHook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Delete a Docker Registry Webhook",
                "description": "Delete a Docker Registry Webhook",
                "operationId": "deleteDockerRegistryWebhookByIdUsingDELETE",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Docker Registry Webhook Delete",
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebHook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Patch a Docker Registry Webhook with id",
                "description": "Patch a Docker Registry Webhook with id",
                "operationId": "patchDockerRegistryWebhookByIdUsingPATCH",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "dockerRegistryWebhookPatch",
                        "description": "dockerRegistryWebhookPatch",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebhookPatch"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Docker Registry Webhook patch",
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebHook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/registry-webhooks/{project}/{name}": {
            "get": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Get a Docker Registry Webhook by name",
                "description": "Get a Docker Registry Webhook by Name",
                "operationId": "getDockerRegistryWebhookNameUsingGET",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Docker Registry Webhook",
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebHook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Update a Docker Registry Webhook using name",
                "description": "Update a Docker Registry Webhook using name",
                "operationId": "updateDockerRegistryWebhookByNameUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "dockerRegistryWebHookSpec",
                        "description": "dockerRegistryWebHookSpec",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebHookSpec"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Docker Registry Webhook Update",
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebHook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Delete a Docker Registry Webhook using name",
                "description": "Delete a Docker Registry Webhook using name",
                "operationId": "deleteDockerRegistryWebhookByNameUsingDELETE",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Docker Registry Webhook Delete",
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebHook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "Triggers"
                ],
                "summary": "Patch a Docker Registry Webhook with project and name",
                "description": "Patch a Docker Registry Webhook with project and name",
                "operationId": "patchDockerRegistryWebhookByNameUsingPATCH",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "dockerRegistryWebhookPatch",
                        "description": "dockerRegistryWebhookPatch",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebhookPatch"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Docker Registry Webhook patch",
                        "schema": {
                            "$ref": "#/definitions/DockerRegistryWebHook"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/user-operations": {
            "get": {
                "tags": [
                    "User-operations"
                ],
                "summary": "Get all User operations",
                "description": "Get all User operations with specified paging and filter parameters.",
                "operationId": "getAllUserOperationsUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list User Operations with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' User Operations for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' User Operations for listing",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested User Operations",
                        "schema": {
                            "$ref": "#/definitions/UserOperations"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/user-operations/{id}": {
            "get": {
                "tags": [
                    "User-operations"
                ],
                "summary": "Get a User Operation",
                "description": "Get a User Operation with the given id",
                "operationId": "getUserOperationByIdUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the User Operation",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested User Operation",
                        "schema": {
                            "$ref": "#/definitions/UserOperation"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "User-operations"
                ],
                "summary": "Modify a User Operation",
                "description": "Modify a User Operation with the given id",
                "operationId": "modifyPostUserOperationUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User's response to the User Operation request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserOpResponse"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the User Operation",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the modified User Operation",
                        "schema": {
                            "$ref": "#/definitions/UserOpResource"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "User-operations"
                ],
                "summary": "Delete a User Operation by id",
                "description": "Delete a User Operation with the given id",
                "operationId": "deleteUserOperationByIdUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the User Operation",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the deleted User Operation",
                        "schema": {
                            "$ref": "#/definitions/UserOperation"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "User-operations"
                ],
                "summary": "Modify a User Operation",
                "description": "Modify a User Operation with the given id",
                "operationId": "modifyPatchUserOperationUsingPATCH",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User's response to the User Operation request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserOpResponse"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the User Operation",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the modified User Operation",
                        "schema": {
                            "$ref": "#/definitions/UserOpResource"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/variables": {
            "get": {
                "tags": [
                    "Variables"
                ],
                "summary": "Get all Variables",
                "description": "Get all Variables with specified paging and filter parameters.",
                "operationId": "getAllVariablesUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "To list Variables with OData like filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Order by attribute",
                        "required": false,
                        "type": "string",
                        "default": "name desc"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "To skip 'n' Variables for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "To list top 'n' Variables for listing",
                        "required": false,
                        "type": "string",
                        "default": "25"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "To select 'n'th page for listing",
                        "required": false,
                        "type": "string",
                        "default": "0"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Variables on pages",
                        "schema": {
                            "$ref": "#/definitions/Variables"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Variables"
                ],
                "summary": "Create a Variable",
                "description": "Creates a Variable based on project name",
                "operationId": "createVariableUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Variable specification",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VariableSpec"
                        }
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with Variable creation",
                        "schema": {
                            "$ref": "#/definitions/Variable"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/variables/{id}": {
            "get": {
                "tags": [
                    "Variables"
                ],
                "summary": "Gets a Variable",
                "description": "Gets a Variable with the given id",
                "operationId": "getVariableByIdUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Variable",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested Variable",
                        "schema": {
                            "$ref": "#/definitions/Variable"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Variables"
                ],
                "summary": "Update a Variable by id",
                "description": "Updates a Variable with the given id",
                "operationId": "updateVariableByIdUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Variable specification",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VariableSpec"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Variable",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the updated Variable",
                        "schema": {
                            "$ref": "#/definitions/Variable"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Variables"
                ],
                "summary": "Deletes a Variable by Id",
                "description": "Deletes a Variable with the given Id",
                "operationId": "deleteVariableByIdUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the Variable",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with deleted Variable",
                        "schema": {
                            "$ref": "#/definitions/Variable"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/codestream/api/variables/{project}/{name}": {
            "get": {
                "tags": [
                    "Variables"
                ],
                "summary": "Gets a Variable by project and name",
                "description": "Get an Variable with the given project and name",
                "operationId": "getVariableByNameUsingGET",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Variable",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Variable belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with the requested Variable",
                        "schema": {
                            "$ref": "#/definitions/Variable"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Variables"
                ],
                "summary": "Updates a Variable by project and name",
                "description": "Update an Variable with the given project and name",
                "operationId": "updateVariableByNameUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Variable specification",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VariableSpec"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Variable",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Variable belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with updated Variable",
                        "schema": {
                            "$ref": "#/definitions/Variable"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Variables"
                ],
                "summary": "Deletes a Variable by project and name",
                "description": "Deletes a Variable with the given name",
                "operationId": "deleteVariableByNameUsingDELETE",
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Variable",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "path",
                        "description": "The project the Variable belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": true
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'Success' with deleted Variable",
                        "schema": {
                            "$ref": "#/definitions/Variable"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "deprecated": false
            }
        }
    },
    "definitions": {
        "About": {
            "type": "object",
            "required": [
                "latestApiVersion",
                "supportedApis"
            ],
            "discriminator": "State object representing an about page that includes api versioning information",
            "properties": {
                "latestApiVersion": {
                    "type": "string",
                    "description": "The latest version of the API in yyyy-MM-dd format (UTC)."
                },
                "supportedApis": {
                    "type": "array",
                    "description": "A collection of all currently supported api versions.",
                    "items": {
                        "$ref": "#/definitions/About$ApiDescription"
                    }
                }
            },
            "title": "About",
            "description": "State object representing an about page that includes api versioning information"
        },
        "About$ApiDescription": {
            "type": "object",
            "required": [
                "apiVersion",
                "documentationLink"
            ],
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The version of the API in yyyy-MM-dd format (UTC)."
                },
                "deprecationPolicy": {
                    "description": "The deprecation policy may contain information whether the api is in deprecated state and when it expires.",
                    "$ref": "#/definitions/About$DeprecationPolicy"
                },
                "documentationLink": {
                    "type": "string",
                    "description": "The link to the documentation of this api version"
                }
            },
            "title": "About$ApiDescription"
        },
        "About$DeprecationPolicy": {
            "type": "object",
            "properties": {
                "deprecatedAt": {
                    "type": "string",
                    "description": "The date the api was deprecated in yyyy-MM-dd format (UTC). Could be empty if the api is not deprecated."
                },
                "description": {
                    "type": "string",
                    "description": "A free text description that contains information about why this api is deprecated and how to migrate to a newer version."
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The date the api support will be dropped in yyyy-MM-dd format (UTC). The api may still be available for use after that date but this is not guaranteed."
                }
            },
            "title": "About$DeprecationPolicy"
        },
        "BatchUserOperationRequest": {
            "type": "object",
            "required": [
                "ids",
                "status"
            ],
            "discriminator": "Batch user operation request.",
            "properties": {
                "ids": {
                    "type": "array",
                    "description": "The list of user-op ids to be batch approved/rejected.",
                    "items": {
                        "type": "string"
                    }
                },
                "responseMessage": {
                    "type": "string",
                    "example": "Approved on Monday.",
                    "description": "The response message which the responder would like to give."
                },
                "status": {
                    "type": "string",
                    "example": "Approved",
                    "description": "The status of approval requests."
                }
            },
            "title": "BatchUserOperationRequest",
            "description": "Batch user operation request."
        },
        "BatchUserOperationResponse": {
            "type": "object",
            "discriminator": "Batch user operation response.",
            "properties": {
                "errors": {
                    "type": "array",
                    "example": [
                        "User operation response received from unauthorized user fritz. Ignoring the response."
                    ],
                    "description": "The list of errors encountered during the operation.",
                    "items": {
                        "$ref": "#/definitions/BatchUserOperationStatus"
                    }
                },
                "failure": {
                    "type": "integer",
                    "format": "int32",
                    "example": 5,
                    "description": "The number of approval requests failed."
                },
                "success": {
                    "type": "integer",
                    "format": "int32",
                    "example": 10,
                    "description": "The number of approval requests succeeded."
                }
            },
            "title": "BatchUserOperationResponse",
            "description": "Batch user operation response."
        },
        "BatchUserOperationStatus": {
            "type": "object",
            "discriminator": "Batch user operation status.",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "User operation response received from unauthorized user exampleUser. Ignoring the response.",
                    "description": "The error message corresponding to the failed approval operation."
                },
                "id": {
                    "type": "string",
                    "example": "9288cad7-eaaa-4e46-83b3-e077d6308b81",
                    "description": "The id associated with each entity in the error list in batch approval operation."
                }
            },
            "title": "BatchUserOperationStatus",
            "description": "Batch user operation status."
        },
        "CertificateFingerprint": {
            "type": "object",
            "discriminator": "Certificates are represented in cryptographic hash algorithms (such as SHA-256 and SHA-1). Used during Endpoint creation.",
            "properties": {
                "SHA-1": {
                    "type": "string",
                    "example": "F38585A104F37726CFCCE5CEE223ED63A18F54DC",
                    "description": "String representing the SHA-1 encoding of the Certificate."
                },
                "SHA-256": {
                    "type": "string",
                    "example": "1E47299CCE0081B73FC6AEA3FD35BA2309A033A858EDD518789477C20C910CA4",
                    "description": "String representing the SHA-256 encoding of the Certificate."
                }
            },
            "title": "CertificateFingerprint",
            "description": "Certificates are represented in cryptographic hash algorithms (such as SHA-256 and SHA-1). Used during Endpoint creation."
        },
        "CertificateIssuedTo": {
            "type": "object",
            "discriminator": "Holding body of the Certificate.",
            "properties": {
                "commonName": {
                    "type": "string",
                    "example": "vmware.com",
                    "description": "A human-friendly name used as an identifier for the holding body."
                },
                "organization": {
                    "type": "string",
                    "example": "VMware Inc.",
                    "description": "Name of the organisation."
                },
                "serialNumber": {
                    "type": "string",
                    "example": 278969561018901340486471282831158785578,
                    "description": "Unique ID given to the issued organization."
                }
            },
            "title": "CertificateIssuedTo",
            "description": "Holding body of the Certificate."
        },
        "CertificateIssuer": {
            "type": "object",
            "properties": {
                "commonName": {
                    "type": "string",
                    "example": "vmware.com",
                    "description": "A human-friendly name used as an identifier for the holding body."
                },
                "organization": {
                    "type": "string",
                    "example": "VMware Inc.",
                    "description": "Name of the organisation."
                }
            },
            "title": "CertificateIssuer"
        },
        "CertificateValidity": {
            "type": "object",
            "discriminator": "Describes the validity of the Certificate in terms of dates.",
            "properties": {
                "beginsOn": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1541116800000,
                    "description": "A UNIX timestamp in microseconds represnting when the validaty of the Certificate begins."
                },
                "expiresOn": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1924991999000,
                    "description": "A UNIX timestamp in microseconds represnting when the validaty of the Certificate expires."
                }
            },
            "title": "CertificateValidity",
            "description": "Describes the validity of the Certificate in terms of dates."
        },
        "CustomIntegration": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "Represents a Custom Integration.",
            "properties": {
                "_createTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds"
                },
                "_createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdBy' field"
                },
                "_link": {
                    "type": "string",
                    "example": "/codestream/api/<prefix>/8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "Partial URL that provides details of the resource."
                },
                "_projectId": {
                    "type": "string",
                    "example": "abcd-abcd-abcd",
                    "description": "Contains project id of the entity"
                },
                "_updateTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds"
                },
                "_updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedBy' field"
                },
                "changeLog": {
                    "type": "string",
                    "example": "Modified input property.",
                    "description": "Changes from the previous version."
                },
                "createdAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was created. The date is in ISO 8601 with time zone"
                },
                "createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that created this entity"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "The id of this resource."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "parentId": {
                    "type": "string",
                    "example": "1abd1fd6-ae2c-459c-ab75-8c595631a11f",
                    "description": "The id of the parent of this resource."
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "status": {
                    "type": "string",
                    "example": "NONE/RELEASED/DEPRECATED",
                    "description": "Release status of the Custom Integration"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was last updated. The date is in ISO 8601 with time zone."
                },
                "updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that last updated this entity"
                },
                "version": {
                    "type": "string",
                    "example": "v1",
                    "description": "Version of the resource."
                },
                "yaml": {
                    "type": "string",
                    "example": "---\nruntime: \"nodejs\"\ncode: |\n    var context = require(\"./context.js\")\n    var start = Date.now();\n    var message = context.getInput(\"message\");\n    console.log(\"starting timer is good \" + message);\n    \n    setTimeout(function() {\n      var millis = Date.now() - start;\n      console.log(\"seconds elapsed = \" + Math.floor(millis/1000));\n      context.setOutput(\"time\", millis);\n    }, 2000);\ninputProperties:\n  - name: message\n    type: text\n    title: Message\n    placeHolder: Time\n    defaultValue: \n    bindable: true\n    labelInfo: true\n    labelMessage: What is time\n    \noutputProperties:\n  - name: time\n    type: label\n    title: Time",
                    "description": "YAML describing Custom integration details."
                }
            },
            "title": "CustomIntegration",
            "description": "Represents a Custom Integration."
        },
        "CustomIntegrationSpec": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "Custom Integration specification.",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "yaml": {
                    "type": "string",
                    "example": "---\nruntime: \"nodejs\"\ncode: |\n    var context = require(\"./context.js\")\n    var start = Date.now();\n    var message = context.getInput(\"message\");\n    console.log(\"starting timer is good \" + message);\n    \n    setTimeout(function() {\n      var millis = Date.now() - start;\n      console.log(\"seconds elapsed = \" + Math.floor(millis/1000));\n      context.setOutput(\"time\", millis);\n    }, 2000);\ninputProperties:\n  - name: message\n    type: text\n    title: Message\n    placeHolder: Time\n    defaultValue: \n    bindable: true\n    labelInfo: true\n    labelMessage: What is time\n    \noutputProperties:\n  - name: time\n    type: label\n    title: Time",
                    "description": "YAML describing Custom integration details."
                }
            },
            "title": "CustomIntegrationSpec",
            "description": "Custom Integration specification."
        },
        "CustomIntegrations": {
            "type": "object",
            "discriminator": "List of Custom Integration instances.",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources within the current page."
                },
                "documents": {
                    "type": "object",
                    "example": "\"documents\": {\n        \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\": {\n            \"project\": \"test-project\",\n            \"id\": \"b80254a7-fcff-4918-ad88-501d08096337\",\n            \"name\": \"test\",\n            \"updatedAt\": \"2019-09-23 13:48:54.483\",\n            \"tags\": [],\n            \"_link\": \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\",\n            \"_updateTimeInMicros\": 1569226734483000,\n            \"_createTimeInMicros\": 1569226720988000,\n            \"index\": 1,\n            \"notifications\": [],\n            \"comments\": \"\",\n            \"starred\": {},\n            \"input\": {},\n            \"output\": {},\n            \"stageOrder\": [],\n            \"stages\": {},\n            \"status\": \"COMPLETED\",\n            \"statusMessage\": \"Execution Completed.\",\n            \"_durationInMicros\": 13495000,\n            \"_requestTimeInMicros\": 1569226720988000,\n            \"_executedBy\": \"exampleuser\",\n            \"_pipelineLink\": \"/codestream/api/pipelines/b49898f9-d42d-4f19-8bda-e77a373c41b9\",\n            \"_nested\": false,\n            \"_rollback\": false,\n            \"_inputMeta\": {},\n            \"_outputMeta\": {},\n            \"workspaceResults\": []\n        }\n    }",
                    "description": "Details of the queried resources.",
                    "additionalProperties": {
                        "$ref": "#/definitions/CustomIntegration"
                    }
                },
                "links": {
                    "type": "array",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Partial URLs representing the links to the queried resources.",
                    "items": {
                        "type": "string"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources across all pages."
                }
            },
            "title": "CustomIntegrations",
            "description": "List of Custom Integration instances."
        },
        "DockerRegistryEvent": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "Docker Registry Event details.",
            "properties": {
                "_createTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds"
                },
                "_createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdBy' field"
                },
                "_link": {
                    "type": "string",
                    "example": "/codestream/api/<prefix>/8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "Partial URL that provides details of the resource."
                },
                "_projectId": {
                    "type": "string",
                    "example": "abcd-abcd-abcd",
                    "description": "Contains project id of the entity"
                },
                "_updateTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds"
                },
                "_updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedBy' field"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was created. The date is in ISO 8601 with time zone"
                },
                "createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that created this entity"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "executionIndex": {
                    "type": "integer",
                    "format": "int64",
                    "example": 2,
                    "description": "Pipeline execution index."
                },
                "executionLink": {
                    "type": "string",
                    "example": "codestream/api/execution/sdscfvefw34rfrdsvdsat43erwfdf",
                    "description": "Pipeline execution link."
                },
                "executionStatus": {
                    "type": "string",
                    "example": "STARTED",
                    "description": "Pipeline execution status."
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "The id of this resource."
                },
                "imageName": {
                    "type": "string",
                    "example": "fedora",
                    "description": "Name of the image."
                },
                "message": {
                    "type": "string",
                    "example": "Invalid Oauth Refresh token. Verify webhook configuration.",
                    "description": "Message is populated when an error occurs."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "owner": {
                    "type": "string",
                    "example": "username",
                    "description": "Owner Name who triggered the event."
                },
                "pipeline": {
                    "type": "string",
                    "example": "MyPipeline",
                    "description": "Pipeline to be executed when event is triggered."
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "repo": {
                    "type": "string",
                    "example": "MyRepository",
                    "description": "RepoName corresponding to the event."
                },
                "repoNamespace": {
                    "type": "string",
                    "example": "MyNamespace",
                    "description": "Namespace inside the Docker Repository."
                },
                "tag": {
                    "type": "string",
                    "example": "latest",
                    "description": "Tag name associated with the image."
                },
                "timeStampInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": "2019-09-18T07:38:25.907+0000",
                    "description": "Commit Time for the event."
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was last updated. The date is in ISO 8601 with time zone."
                },
                "updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that last updated this entity"
                },
                "version": {
                    "type": "string",
                    "example": "v1",
                    "description": "Version of the resource."
                }
            },
            "title": "DockerRegistryEvent",
            "description": "Docker Registry Event details."
        },
        "DockerRegistryEvents": {
            "type": "object",
            "discriminator": "List of Docker Registry Events.",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources within the current page."
                },
                "documents": {
                    "type": "object",
                    "example": "\"documents\": {\n        \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\": {\n            \"project\": \"test-project\",\n            \"id\": \"b80254a7-fcff-4918-ad88-501d08096337\",\n            \"name\": \"test\",\n            \"updatedAt\": \"2019-09-23 13:48:54.483\",\n            \"tags\": [],\n            \"_link\": \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\",\n            \"_updateTimeInMicros\": 1569226734483000,\n            \"_createTimeInMicros\": 1569226720988000,\n            \"index\": 1,\n            \"notifications\": [],\n            \"comments\": \"\",\n            \"starred\": {},\n            \"input\": {},\n            \"output\": {},\n            \"stageOrder\": [],\n            \"stages\": {},\n            \"status\": \"COMPLETED\",\n            \"statusMessage\": \"Execution Completed.\",\n            \"_durationInMicros\": 13495000,\n            \"_requestTimeInMicros\": 1569226720988000,\n            \"_executedBy\": \"exampleuser\",\n            \"_pipelineLink\": \"/codestream/api/pipelines/b49898f9-d42d-4f19-8bda-e77a373c41b9\",\n            \"_nested\": false,\n            \"_rollback\": false,\n            \"_inputMeta\": {},\n            \"_outputMeta\": {},\n            \"workspaceResults\": []\n        }\n    }",
                    "description": "Details of the queried resources.",
                    "additionalProperties": {
                        "$ref": "#/definitions/DockerRegistryEvent"
                    }
                },
                "links": {
                    "type": "array",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Partial URLs representing the links to the queried resources.",
                    "items": {
                        "type": "string"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources across all pages."
                }
            },
            "title": "DockerRegistryEvents",
            "description": "List of Docker Registry Events."
        },
        "DockerRegistryWebHook": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "Docker Registry Webhook details.",
            "properties": {
                "_createTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds"
                },
                "_createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdBy' field"
                },
                "_link": {
                    "type": "string",
                    "example": "/codestream/api/<prefix>/8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "Partial URL that provides details of the resource."
                },
                "_projectId": {
                    "type": "string",
                    "example": "abcd-abcd-abcd",
                    "description": "Contains project id of the entity"
                },
                "_updateTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds"
                },
                "_updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedBy' field"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was created. The date is in ISO 8601 with time zone"
                },
                "createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that created this entity"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates whether Docker webhook is enabled or not."
                },
                "endpoint": {
                    "type": "string",
                    "example": "Docker Endpoint",
                    "description": "Name of the Docker Endpoint."
                },
                "externalListenerLink": {
                    "type": "string",
                    "example": "codestream/api/registry-webhooks/sdscfvefw34rfrdsvdsat43erwfdf",
                    "description": "Docker webhook listener link."
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "The id of this resource."
                },
                "imageNameRegExPattern": {
                    "type": "string",
                    "example": "admin/wordpress",
                    "description": "If provided then the pipeline execution is triggered only when the given image name regex matches the image name in the received payload."
                },
                "input": {
                    "type": "object",
                    "example": [
                        {
                            "ip": "10.5.23.84",
                            "script": "testScript.sh"
                        }
                    ],
                    "description": "Pipeline execution input properties."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "pipeline": {
                    "type": "string",
                    "example": "DemoPipeline",
                    "description": "Pipeline name which is meant to be triggered when a docker event occur."
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "refreshToken": {
                    "type": "string",
                    "example": "cKNNVCSHijnaxlrfnVsxUYr6wM2g5Bg11tfnotmWb9XdA5kpUCvI2ubJojTIGp9g",
                    "description": "This token is used to authenticate when calling VMware Cloud Services APIs. These tokens are scoped within the organization."
                },
                "repoName": {
                    "type": "string",
                    "example": "MyRepository",
                    "description": "Docker Repo Name."
                },
                "secretToken": {
                    "type": "string",
                    "example": "dvcdefrffsdvdfvfdgfdvbfdbvrefg3ff=",
                    "description": "Secret token to validate received payloads."
                },
                "serverType": {
                    "type": "string",
                    "example": "DockerHub/Docker_Trusted_Registry",
                    "description": "Docker server type."
                },
                "slug": {
                    "type": "string",
                    "example": "docker-webhook",
                    "description": "Docker webhook name."
                },
                "tagNamePattern": {
                    "type": "string",
                    "example": "tag1",
                    "description": "If provided then the pipeline execution is triggered only when the given tag name regex matches the tag name(s) in the received payload."
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was last updated. The date is in ISO 8601 with time zone."
                },
                "updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that last updated this entity"
                },
                "version": {
                    "type": "string",
                    "example": "v1",
                    "description": "Version of the resource."
                }
            },
            "title": "DockerRegistryWebHook",
            "description": "Docker Registry Webhook details."
        },
        "DockerRegistryWebHookSpec": {
            "type": "object",
            "required": [
                "name"
            ],
            "discriminator": "Docker Registry Webhook specification.",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "It is a docker saas webhook",
                    "description": "Docker webhook description."
                },
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates whether Docker webhook is enabled or not."
                },
                "endpoint": {
                    "type": "string",
                    "example": "Dcocker-SaaS",
                    "description": "Docker endpoint."
                },
                "externalListenerLink": {
                    "type": "string",
                    "example": "/codestream/api/registry-webhook-listeners/412aa461-6d46-47d6-af93-152bb0d88682",
                    "description": "Docker webhook listener link."
                },
                "imageNameRegExPattern": {
                    "type": "string",
                    "example": "admin/wordpress",
                    "description": "If provided then the pipeline execution is triggered only when the given image name regex matches the image name in the received payload."
                },
                "input": {
                    "type": "object",
                    "example": {
                        "test": {
                            "description": "test-value",
                            "mandatory": false
                        }
                    },
                    "description": "Pipeline Execution input properties."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "pipeline": {
                    "type": "string",
                    "example": "CD-Pipeline",
                    "description": "Pipeline name which is meant to be triggered when a docker event occur."
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "refreshToken": {
                    "type": "string",
                    "example": "I5FLA8iQhlZwoos6OL3goKciAF5e",
                    "description": "Codestream API token."
                },
                "repoName": {
                    "type": "string",
                    "example": "codestream",
                    "description": "Docker Repo Name."
                },
                "secretToken": {
                    "type": "string",
                    "example": "DSkUyJJ8KA8rOSk=Ci",
                    "description": "Secret token to validate received payloads."
                },
                "serverType": {
                    "type": "string",
                    "example": "DockerHub/Docker_Trusted_Registry",
                    "description": "Docker server type."
                },
                "slug": {
                    "type": "string",
                    "example": "docker-webhook",
                    "description": "Docker webhook name."
                },
                "tagNamePattern": {
                    "type": "string",
                    "example": "tag1",
                    "description": "If provided then the pipeline execution is triggered only when the given tag name regex matches the tag name(s) in the received payload."
                }
            },
            "title": "DockerRegistryWebHookSpec",
            "description": "Docker Registry Webhook specification."
        },
        "DockerRegistryWebhookPatch": {
            "type": "object",
            "discriminator": "Docker Registry Webhook Patch details.",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates whether Docker webhook is enabled or not."
                }
            },
            "title": "DockerRegistryWebhookPatch",
            "description": "Docker Registry Webhook Patch details."
        },
        "DockerRegistryWebhooks": {
            "type": "object",
            "discriminator": "List of Docker Registry Webhooks.",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources within the current page."
                },
                "documents": {
                    "type": "object",
                    "example": "\"documents\": {\n        \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\": {\n            \"project\": \"test-project\",\n            \"id\": \"b80254a7-fcff-4918-ad88-501d08096337\",\n            \"name\": \"test\",\n            \"updatedAt\": \"2019-09-23 13:48:54.483\",\n            \"tags\": [],\n            \"_link\": \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\",\n            \"_updateTimeInMicros\": 1569226734483000,\n            \"_createTimeInMicros\": 1569226720988000,\n            \"index\": 1,\n            \"notifications\": [],\n            \"comments\": \"\",\n            \"starred\": {},\n            \"input\": {},\n            \"output\": {},\n            \"stageOrder\": [],\n            \"stages\": {},\n            \"status\": \"COMPLETED\",\n            \"statusMessage\": \"Execution Completed.\",\n            \"_durationInMicros\": 13495000,\n            \"_requestTimeInMicros\": 1569226720988000,\n            \"_executedBy\": \"exampleuser\",\n            \"_pipelineLink\": \"/codestream/api/pipelines/b49898f9-d42d-4f19-8bda-e77a373c41b9\",\n            \"_nested\": false,\n            \"_rollback\": false,\n            \"_inputMeta\": {},\n            \"_outputMeta\": {},\n            \"workspaceResults\": []\n        }\n    }",
                    "description": "Details of the queried resources.",
                    "additionalProperties": {
                        "$ref": "#/definitions/DockerRegistryWebHook"
                    }
                },
                "links": {
                    "type": "array",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Partial URLs representing the links to the queried resources.",
                    "items": {
                        "type": "string"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources across all pages."
                }
            },
            "title": "DockerRegistryWebhooks",
            "description": "List of Docker Registry Webhooks."
        },
        "EmailEventConfig": {
            "type": "object",
            "discriminator": "Represents an Email Event configuration.",
            "properties": {
                "body": {
                    "type": "string",
                    "example": "Pipeline-1 execution was successful",
                    "description": "Email Body."
                },
                "endpoint": {
                    "type": "string"
                },
                "event": {
                    "type": "string",
                    "enum": [
                        "SUCCESS",
                        "FAILURE",
                        "WAITING",
                        "CANCELED",
                        "STARTED"
                    ]
                },
                "stage": {
                    "type": "string"
                },
                "subject": {
                    "type": "string",
                    "example": "Pipeline-1 execution notification",
                    "description": "Subject for the email notification."
                },
                "task": {
                    "type": "string"
                },
                "to": {
                    "type": "array",
                    "example": [
                        "abc@vmware.com",
                        "def@vmware.com"
                    ],
                    "description": "List of Email IDs of the recipients.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "title": "EmailEventConfig",
            "description": "Represents an Email Event configuration."
        },
        "Endpoint": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "An Endpoint is an instance of a DevOps application that connects to Code Stream to provide data for your Pipelines to run, such as a data source, repository, or notification system. Endpoints can be cloud-based or on-premises.",
            "properties": {
                "_createTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds"
                },
                "_createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdBy' field"
                },
                "_link": {
                    "type": "string",
                    "example": "/codestream/api/<prefix>/8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "Partial URL that provides details of the resource."
                },
                "_projectId": {
                    "type": "string",
                    "example": "abcd-abcd-abcd",
                    "description": "Contains project id of the entity"
                },
                "_updateTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds"
                },
                "_updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedBy' field"
                },
                "cloudProxyId": {
                    "type": "string",
                    "example": "c3f5037c-0c94-466d-9220-b7429fa07f50",
                    "description": "The id of the Cloud Proxy. It is required to connect with Endpoint servers hosted on different network (on-prem). In case of cloud-based Endpoint servers, set the cloud proxy to \"Default\"."
                },
                "createdAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was created. The date is in ISO 8601 with time zone"
                },
                "createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that created this entity"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "The id of this resource."
                },
                "isRestricted": {
                    "type": "boolean",
                    "example": false,
                    "description": "This type of Endpoint can be created, updated or deleted by admin only. If a restricted Endpoint is consumed in a Pipeline, and that Pipeline is executed by a non-admin user, then the execution will fail at the task which is consuming this restricted Endpoint. Only admin can then resume this Pipeline to make it progress."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "properties": {
                    "type": "object",
                    "description": "Endpoint specific properties."
                },
                "type": {
                    "type": "string",
                    "example": "jenkins",
                    "description": "The type of this Endpoint instance."
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was last updated. The date is in ISO 8601 with time zone."
                },
                "updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that last updated this entity"
                },
                "validationOutput": {
                    "type": "object",
                    "description": "Stores the vaidation errors."
                },
                "version": {
                    "type": "string",
                    "example": "v1",
                    "description": "Version of the resource."
                }
            },
            "title": "Endpoint",
            "description": "An Endpoint is an instance of a DevOps application that connects to Code Stream to provide data for your Pipelines to run, such as a data source, repository, or notification system. Endpoints can be cloud-based or on-premises."
        },
        "EndpointCertificate": {
            "type": "object",
            "discriminator": "Represents the complete SSL Certificate information of a FQDN.",
            "properties": {
                "fingerprints": {
                    "description": "Certificates are represented in cryptographic hash algorithms (such as SHA-256 and SHA-1). Used during Endpoint creation.",
                    "$ref": "#/definitions/CertificateFingerprint"
                },
                "issuedBy": {
                    "description": "Represents the entity issuing the Certificate to the holding body.",
                    "$ref": "#/definitions/CertificateIssuer"
                },
                "issuedTo": {
                    "description": "Holding body of the Certificate.",
                    "$ref": "#/definitions/CertificateIssuedTo"
                },
                "periodOfValidity": {
                    "description": "Describes the validity of the Certificate in terms of dates.",
                    "$ref": "#/definitions/CertificateValidity"
                }
            },
            "title": "EndpointCertificate",
            "description": "Represents the complete SSL Certificate information of a FQDN."
        },
        "EndpointCertificateChain": {
            "type": "object",
            "discriminator": "EndpointCertificateChain is a tree of SSL Certificates.",
            "properties": {
                "certificates": {
                    "type": "array",
                    "description": "A list of Endpoint Certificates.",
                    "items": {
                        "$ref": "#/definitions/EndpointCertificate"
                    }
                }
            },
            "title": "EndpointCertificateChain",
            "description": "EndpointCertificateChain is a tree of SSL Certificates."
        },
        "EndpointSpec": {
            "type": "object",
            "required": [
                "description",
                "name",
                "properties",
                "type"
            ],
            "discriminator": "An Endpoint is an instance of a DevOps application that connects to Code Stream to provide data for your Pipelines to run, such as a data source, repository, or notification system. Endpoints can be cloud-based or on-premises.",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "isRestricted": {
                    "type": "boolean",
                    "example": false,
                    "description": "This type of Endpoint can be created, updated or deleted by admin only. If a restricted Endpoint is consumed in a pipeline, and that pipeline is executed by a non-admin user, then the execution will fail at the task which is consuming this restricted Endpoint. Only admin can then resume this pipeline to make it progress."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "properties": {
                    "type": "object",
                    "description": "Endpoint specific properties"
                },
                "type": {
                    "type": "string",
                    "example": "jenkins",
                    "description": "The type of this Endpoint instance."
                }
            },
            "title": "EndpointSpec",
            "description": "An Endpoint is an instance of a DevOps application that connects to Code Stream to provide data for your Pipelines to run, such as a data source, repository, or notification system. Endpoints can be cloud-based or on-premises."
        },
        "EndpointValidationSpec": {
            "type": "object",
            "required": [
                "description",
                "name",
                "properties",
                "type"
            ],
            "discriminator": "Endpoint validation specification",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "id": {
                    "type": "string",
                    "description": "id of the endpoint, if already present"
                },
                "isRestricted": {
                    "type": "boolean",
                    "example": false,
                    "description": "This type of Endpoint can be created, updated or deleted by admin only. If a restricted Endpoint is consumed in a pipeline, and that pipeline is executed by a non-admin user, then the execution will fail at the task which is consuming this restricted Endpoint. Only admin can then resume this pipeline to make it progress."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "properties": {
                    "type": "object",
                    "description": "Endpoint specific properties"
                },
                "type": {
                    "type": "string",
                    "example": "jenkins",
                    "description": "The type of this Endpoint instance."
                }
            },
            "title": "EndpointValidationSpec",
            "description": "Endpoint validation specification"
        },
        "Endpoints": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources within the current page."
                },
                "documents": {
                    "type": "object",
                    "example": "\"documents\": {\n        \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\": {\n            \"project\": \"test-project\",\n            \"id\": \"b80254a7-fcff-4918-ad88-501d08096337\",\n            \"name\": \"test\",\n            \"updatedAt\": \"2019-09-23 13:48:54.483\",\n            \"tags\": [],\n            \"_link\": \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\",\n            \"_updateTimeInMicros\": 1569226734483000,\n            \"_createTimeInMicros\": 1569226720988000,\n            \"index\": 1,\n            \"notifications\": [],\n            \"comments\": \"\",\n            \"starred\": {},\n            \"input\": {},\n            \"output\": {},\n            \"stageOrder\": [],\n            \"stages\": {},\n            \"status\": \"COMPLETED\",\n            \"statusMessage\": \"Execution Completed.\",\n            \"_durationInMicros\": 13495000,\n            \"_requestTimeInMicros\": 1569226720988000,\n            \"_executedBy\": \"exampleuser\",\n            \"_pipelineLink\": \"/codestream/api/pipelines/b49898f9-d42d-4f19-8bda-e77a373c41b9\",\n            \"_nested\": false,\n            \"_rollback\": false,\n            \"_inputMeta\": {},\n            \"_outputMeta\": {},\n            \"workspaceResults\": []\n        }\n    }",
                    "description": "Details of the queried resources.",
                    "additionalProperties": {
                        "$ref": "#/definitions/Endpoint"
                    }
                },
                "links": {
                    "type": "array",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Partial URLs representing the links to the queried resources.",
                    "items": {
                        "type": "string"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources across all pages."
                }
            },
            "title": "Endpoints"
        },
        "Execution": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "Execution",
            "properties": {
                "_createTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds"
                },
                "_createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdBy' field"
                },
                "_durationInMicros": {
                    "type": "integer",
                    "format": "int64"
                },
                "_executedBy": {
                    "type": "string"
                },
                "_inputMeta": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PropertyMetaData"
                    }
                },
                "_link": {
                    "type": "string",
                    "example": "/codestream/api/<prefix>/8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "Partial URL that provides details of the resource."
                },
                "_nested": {
                    "type": "boolean"
                },
                "_outputMeta": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PropertyMetaData"
                    }
                },
                "_pipelineLink": {
                    "type": "string"
                },
                "_projectId": {
                    "type": "string",
                    "example": "abcd-abcd-abcd",
                    "description": "Contains project id of the entity"
                },
                "_requestTimeInMicros": {
                    "type": "integer",
                    "format": "int64"
                },
                "_rollback": {
                    "type": "boolean"
                },
                "_source": {
                    "type": "string"
                },
                "_totalDurationInMicros": {
                    "type": "integer",
                    "format": "int64"
                },
                "_triggeredBy": {
                    "type": "string"
                },
                "_updateTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds"
                },
                "_updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedBy' field"
                },
                "comments": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was created. The date is in ISO 8601 with time zone"
                },
                "createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that created this entity"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "The id of this resource."
                },
                "index": {
                    "type": "integer",
                    "format": "int64"
                },
                "input": {
                    "type": "object"
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Notification"
                    }
                },
                "output": {
                    "type": "object"
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "reason": {
                    "type": "string"
                },
                "resumed_at": {
                    "type": "string"
                },
                "stageOrder": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "stages": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/StageExecution"
                    }
                },
                "starred": {
                    "$ref": "#/definitions/Pipeline$StarredProperty"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "NOT_STARTED",
                        "STARTED",
                        "RUNNING",
                        "CANCELING",
                        "WAITING",
                        "RESUMING",
                        "PAUSING",
                        "PAUSED",
                        "CANCELED",
                        "COMPLETED",
                        "FAILED",
                        "SKIPPED",
                        "QUEUED",
                        "FAILED_CONTINUE",
                        "ROLLING_BACK",
                        "ROLLBACK_FAILED",
                        "PREPARING_WORKSPACE",
                        "ROLLBACK_COMPLETED"
                    ]
                },
                "statusMessage": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "example": [
                        {
                            "key": "env",
                            "value": "dev"
                        }
                    ],
                    "description": "A set of tag keys and optional values that were set on on the resource.",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was last updated. The date is in ISO 8601 with time zone."
                },
                "updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that last updated this entity"
                },
                "version": {
                    "type": "string",
                    "example": "v1",
                    "description": "Version of the resource."
                },
                "workspaceResults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WorkspaceResult"
                    }
                }
            },
            "title": "Execution",
            "description": "Execution"
        },
        "ExecutionActionRequest": {
            "type": "object",
            "discriminator": "Request body for acting on an Execution.",
            "properties": {
                "reason": {
                    "type": "string",
                    "example": "Pipeline cancelled due to infra issues.",
                    "description": "Reason for performing the action on the given Execution."
                },
                "tags": {
                    "type": "array",
                    "example": [
                        {
                            "key": "env",
                            "value": "dev"
                        }
                    ],
                    "description": "A set of tag keys and optional values that were set on on the resource.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "title": "ExecutionActionRequest",
            "description": "Request body for acting on an Execution."
        },
        "ExecutionRequest": {
            "type": "object",
            "discriminator": "Execution Request for a pipeline",
            "properties": {
                "comments": {
                    "type": "string"
                },
                "executionId": {
                    "type": "string"
                },
                "executionLink": {
                    "type": "string"
                },
                "input": {
                    "type": "object"
                },
                "source": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "title": "ExecutionRequest",
            "description": "Execution Request for a pipeline"
        },
        "ExecutionResponse": {
            "type": "object",
            "discriminator": "Represents the response object for when a Pipeline is executed.",
            "properties": {
                "executionId": {
                    "type": "string",
                    "example": "b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Id of the Execution."
                },
                "executionIndex": {
                    "type": "integer",
                    "format": "int64",
                    "example": 3,
                    "description": "Index of the Execution."
                },
                "executionLink": {
                    "type": "string",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Link of the Execution."
                }
            },
            "title": "ExecutionResponse",
            "description": "Represents the response object for when a Pipeline is executed."
        },
        "Executions": {
            "type": "object",
            "discriminator": "A list of Pipeline Executions.",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources within the current page."
                },
                "documents": {
                    "type": "object",
                    "example": "\"documents\": {\n        \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\": {\n            \"project\": \"test-project\",\n            \"id\": \"b80254a7-fcff-4918-ad88-501d08096337\",\n            \"name\": \"test\",\n            \"updatedAt\": \"2019-09-23 13:48:54.483\",\n            \"tags\": [],\n            \"_link\": \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\",\n            \"_updateTimeInMicros\": 1569226734483000,\n            \"_createTimeInMicros\": 1569226720988000,\n            \"index\": 1,\n            \"notifications\": [],\n            \"comments\": \"\",\n            \"starred\": {},\n            \"input\": {},\n            \"output\": {},\n            \"stageOrder\": [],\n            \"stages\": {},\n            \"status\": \"COMPLETED\",\n            \"statusMessage\": \"Execution Completed.\",\n            \"_durationInMicros\": 13495000,\n            \"_requestTimeInMicros\": 1569226720988000,\n            \"_executedBy\": \"exampleuser\",\n            \"_pipelineLink\": \"/codestream/api/pipelines/b49898f9-d42d-4f19-8bda-e77a373c41b9\",\n            \"_nested\": false,\n            \"_rollback\": false,\n            \"_inputMeta\": {},\n            \"_outputMeta\": {},\n            \"workspaceResults\": []\n        }\n    }",
                    "description": "Details of the queried resources.",
                    "additionalProperties": {
                        "$ref": "#/definitions/Execution"
                    }
                },
                "links": {
                    "type": "array",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Partial URLs representing the links to the queried resources.",
                    "items": {
                        "type": "string"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources across all pages."
                }
            },
            "title": "Executions",
            "description": "A list of Pipeline Executions."
        },
        "GerritEvent": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "Contains all the details of a Gerrit Event.",
            "properties": {
                "_createTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds"
                },
                "_createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdBy' field"
                },
                "_link": {
                    "type": "string",
                    "example": "/codestream/api/<prefix>/8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "Partial URL that provides details of the resource."
                },
                "_projectId": {
                    "type": "string",
                    "example": "abcd-abcd-abcd",
                    "description": "Contains project id of the entity"
                },
                "_updateTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds"
                },
                "_updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedBy' field"
                },
                "actionTaken": {
                    "type": "string",
                    "example": "Verified +1",
                    "description": "Verified Label value along with the action posted to the gerrit server."
                },
                "branch": {
                    "type": "string",
                    "example": "master",
                    "description": "Gerrit Project branch on which the change has happened."
                },
                "changeNumber": {
                    "type": "integer",
                    "format": "int64",
                    "example": 18823,
                    "description": "Gerrit ChangeSet Number provided by Gerrit Server in the event."
                },
                "createdAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was created. The date is in ISO 8601 with time zone"
                },
                "createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that created this entity"
                },
                "createdOn": {
                    "type": "integer",
                    "format": "int64",
                    "example": "2019-09-18T07:38:25.907+0000",
                    "description": "Date and time on which this event is created."
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "executionIndex": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "Index of the Execution."
                },
                "executionLink": {
                    "type": "string",
                    "example": "/codestream/api/executions/08c20cb8-17b6-4d9c-9f15-c77cf4913bc5",
                    "description": "Link of the execution."
                },
                "executionStatus": {
                    "type": "string",
                    "example": "STARTED",
                    "description": "Indicates the current status of the Execution."
                },
                "gerritProject": {
                    "type": "string",
                    "example": "TestGerritProject",
                    "description": "Gerrit Project on which the change has happened."
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "The id of this resource."
                },
                "listener": {
                    "type": "string",
                    "example": "Demo-Listener",
                    "description": "Name of the Gerrit Listener which contains details of the Gerrit Server which has sent this event."
                },
                "message": {
                    "type": "string",
                    "example": "Execution Completed",
                    "description": "This includes detailed message regarding state of the execution."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "owner": {
                    "type": "string",
                    "example": "Dummy User",
                    "description": "Name and Email details of ChangeSet Owner."
                },
                "patchSetNumber": {
                    "type": "integer",
                    "format": "int64",
                    "example": 32,
                    "description": "Patch number of the ChangeSet provided by Gerrit Server in the event."
                },
                "pipeline": {
                    "type": "string",
                    "example": "DemoPipeline",
                    "description": "Name of the pipeline which got triggered."
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "properties": {
                    "type": "object",
                    "example": {
                        "GERRIT_BRANCH": "master",
                        "GERRIT_EVENT_CREATED_ON": "1568792304",
                        "GERRIT_PATCHSET_REVISION": "8a3edf15d36d0fe8026ffefbd58bafdb77b4ab80",
                        "GERRIT_HOST": "gerrit.eng.vmware.com",
                        "GERRIT_CHANGE_OWNER_EMAIL": "demouser@vmware.com",
                        "GERRIT_EVENT_ACCOUNT_NAME": "Demo User",
                        "GERRIT_CHANGE_URL": "https://gerrit.eng.vmware.com/18868",
                        "GERRIT_PATCHSET_UPLOADER_EMAIL": "demouser@vmware.com",
                        "GERRIT_EVENT_TYPE": "patchset-created",
                        "GERRIT_PROJECT": "TestProjectForCodestream",
                        "GERRIT_PATCHSET_UPLOADER_USERNAME": "demouser",
                        "GERRIT_CHANGE_FILELIST": "[/COMMIT_MSG, file.txt]",
                        "GERRIT_CHANGE_NUMBER": "18868",
                        "GERRIT_SCHEME": "ssh",
                        "GERRIT_PATCHSET_UPLOADER": "Demo User demouser@vmware.com",
                        "GERRIT_URL": "http://gerrit.eng.vmware.com:8080",
                        "GERRIT_PORT": "29418",
                        "GERRIT_REFSPEC": "refs/changes/68/18868/32",
                        "GERRIT_PATCHSET_UPLOADER_NAME": "Demo User",
                        "GERRIT_CHANGE_OWNER": "Demo User \n demouser@vmware.com",
                        "GERRIT_CHANGE_COMMIT_MESSAGE": "1sdfsf\n\nChange-Id: I522eab3b678dedd68dad3e2c04d3cccc0eb9fa00\n",
                        "GERRIT_NAME": "gerrit-listener",
                        "GERRIT_TOPIC": "branch",
                        "GERRIT_CHANGE_SUBJECT": "1sdfsf",
                        "GERRIT_EVENT_ACCOUNT_USERNAME": "demouser",
                        "GERRIT_CHANGE_OWNER_USERNAME": "demouser",
                        "GERRIT_EVENT_ACCOUNT": "Demo User \n demouser@vmware.com",
                        "GERRIT_CHANGE_ID": "I522eab3b678dedd68dad3e2c04d3cccc0eb9fa00",
                        "GERRIT_VERSION": "Not supported",
                        "GERRIT_EVENT_ACCOUNT_EMAIL": "demouser@vmware.com",
                        "GERRIT_PATCHSET_NUMBER": "32",
                        "GERRIT_CHANGE_OWNER_NAME": "Demo User"
                    },
                    "description": "Map containing all ChangeSet related details.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "subject": {
                    "type": "string",
                    "example": "Demo Commit Message",
                    "description": "Contains the commit message."
                },
                "trigger": {
                    "type": "string",
                    "example": "Demo-Trigger",
                    "description": "Name of the Gerrit Trigger which contains the configuration leading to this event."
                },
                "triggerType": {
                    "type": "string",
                    "example": "AUTOMATIC",
                    "description": "Indicates whether it was a manual trigger or not."
                },
                "type": {
                    "type": "string",
                    "example": "patchset-created",
                    "description": "Type of the gerrit event."
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was last updated. The date is in ISO 8601 with time zone."
                },
                "updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that last updated this entity"
                },
                "version": {
                    "type": "string",
                    "example": "v1",
                    "description": "Version of the resource."
                }
            },
            "title": "GerritEvent",
            "description": "Contains all the details of a Gerrit Event."
        },
        "GerritEvents": {
            "type": "object",
            "discriminator": "A list of Gerrit Event instances.",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources within the current page."
                },
                "documents": {
                    "type": "object",
                    "example": "\"documents\": {\n        \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\": {\n            \"project\": \"test-project\",\n            \"id\": \"b80254a7-fcff-4918-ad88-501d08096337\",\n            \"name\": \"test\",\n            \"updatedAt\": \"2019-09-23 13:48:54.483\",\n            \"tags\": [],\n            \"_link\": \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\",\n            \"_updateTimeInMicros\": 1569226734483000,\n            \"_createTimeInMicros\": 1569226720988000,\n            \"index\": 1,\n            \"notifications\": [],\n            \"comments\": \"\",\n            \"starred\": {},\n            \"input\": {},\n            \"output\": {},\n            \"stageOrder\": [],\n            \"stages\": {},\n            \"status\": \"COMPLETED\",\n            \"statusMessage\": \"Execution Completed.\",\n            \"_durationInMicros\": 13495000,\n            \"_requestTimeInMicros\": 1569226720988000,\n            \"_executedBy\": \"exampleuser\",\n            \"_pipelineLink\": \"/codestream/api/pipelines/b49898f9-d42d-4f19-8bda-e77a373c41b9\",\n            \"_nested\": false,\n            \"_rollback\": false,\n            \"_inputMeta\": {},\n            \"_outputMeta\": {},\n            \"workspaceResults\": []\n        }\n    }",
                    "description": "Details of the queried resources.",
                    "additionalProperties": {
                        "$ref": "#/definitions/GerritEvent"
                    }
                },
                "links": {
                    "type": "array",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Partial URLs representing the links to the queried resources.",
                    "items": {
                        "type": "string"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources across all pages."
                }
            },
            "title": "GerritEvents",
            "description": "A list of Gerrit Event instances."
        },
        "GerritListener": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "A Gerrit Listener streams for events on the Gerrit server.",
            "properties": {
                "_createTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds"
                },
                "_createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdBy' field"
                },
                "_expiresAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the API token will expire."
                },
                "_link": {
                    "type": "string",
                    "example": "/codestream/api/<prefix>/8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "Partial URL that provides details of the resource."
                },
                "_projectId": {
                    "type": "string",
                    "example": "abcd-abcd-abcd",
                    "description": "Contains project id of the entity"
                },
                "_reason": {
                    "type": "string",
                    "example": "Validation Failed due to invalid credentials",
                    "description": "Contains reasons for validation failure."
                },
                "_updateTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds"
                },
                "_updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedBy' field"
                },
                "apiToken": {
                    "type": "string",
                    "example": "cKNNVCSHijnaxlrfnVsxUYr6wM2g5Bg11tfnotmWb9XdA5kpUCvI2ubJojTIGp9g",
                    "description": "This token is used to authenticate when calling VMware Cloud Services APIs. These tokens are scoped within the organization."
                },
                "connected": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates whether the connection with the Gerrit Server to start receiving events is created or not."
                },
                "createdAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was created. The date is in ISO 8601 with time zone"
                },
                "createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that created this entity"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "endpoint": {
                    "type": "string",
                    "example": "Gerrit-Endpoint",
                    "description": "The name of the Gerrit Endpoint."
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "The id of this resource."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was last updated. The date is in ISO 8601 with time zone."
                },
                "updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that last updated this entity"
                },
                "version": {
                    "type": "string",
                    "example": "v1",
                    "description": "Version of the resource."
                }
            },
            "title": "GerritListener",
            "description": "A Gerrit Listener streams for events on the Gerrit server."
        },
        "GerritListenerPatch": {
            "type": "object",
            "required": [
                "connected"
            ],
            "discriminator": "Contains the flag to connect or disconnect a Gerrit Listener.",
            "properties": {
                "connected": {
                    "type": "boolean",
                    "example": true,
                    "description": "Connect/Disconnect a Gerrit Listener."
                }
            },
            "title": "GerritListenerPatch",
            "description": "Contains the flag to connect or disconnect a Gerrit Listener."
        },
        "GerritListenerSpec": {
            "type": "object",
            "required": [
                "apiToken",
                "description",
                "endpoint",
                "name"
            ],
            "discriminator": "A Gerrit Listener streams for events on the Gerrit server.",
            "properties": {
                "apiToken": {
                    "type": "string",
                    "example": "cKNNVCSHijnaxlrfnVsxUYr6wM2g5Bg11tfnotmWb9XdA5kpUCvI2ubJojTIGp9g",
                    "description": "This token is used to authenticate when calling VMware Cloud Services APIs. These tokens are scoped within the organization."
                },
                "connected": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates whether the connection with the Gerrit Server to start receiving events is created or not."
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "endpoint": {
                    "type": "string",
                    "example": "Gerrit-Endpoint",
                    "description": "The name of the Gerrit Endpoint."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                }
            },
            "title": "GerritListenerSpec",
            "description": "A Gerrit Listener streams for events on the Gerrit server."
        },
        "GerritListeners": {
            "type": "object",
            "discriminator": "A list of Gerrit Listener instances.",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources within the current page."
                },
                "documents": {
                    "type": "object",
                    "example": "\"documents\": {\n        \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\": {\n            \"project\": \"test-project\",\n            \"id\": \"b80254a7-fcff-4918-ad88-501d08096337\",\n            \"name\": \"test\",\n            \"updatedAt\": \"2019-09-23 13:48:54.483\",\n            \"tags\": [],\n            \"_link\": \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\",\n            \"_updateTimeInMicros\": 1569226734483000,\n            \"_createTimeInMicros\": 1569226720988000,\n            \"index\": 1,\n            \"notifications\": [],\n            \"comments\": \"\",\n            \"starred\": {},\n            \"input\": {},\n            \"output\": {},\n            \"stageOrder\": [],\n            \"stages\": {},\n            \"status\": \"COMPLETED\",\n            \"statusMessage\": \"Execution Completed.\",\n            \"_durationInMicros\": 13495000,\n            \"_requestTimeInMicros\": 1569226720988000,\n            \"_executedBy\": \"exampleuser\",\n            \"_pipelineLink\": \"/codestream/api/pipelines/b49898f9-d42d-4f19-8bda-e77a373c41b9\",\n            \"_nested\": false,\n            \"_rollback\": false,\n            \"_inputMeta\": {},\n            \"_outputMeta\": {},\n            \"workspaceResults\": []\n        }\n    }",
                    "description": "Details of the queried resources.",
                    "additionalProperties": {
                        "$ref": "#/definitions/GerritListener"
                    }
                },
                "links": {
                    "type": "array",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Partial URLs representing the links to the queried resources.",
                    "items": {
                        "type": "string"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources across all pages."
                }
            },
            "title": "GerritListeners",
            "description": "A list of Gerrit Listener instances."
        },
        "GerritManualTrigger": {
            "type": "object",
            "required": [
                "changeId",
                "project",
                "trigger"
            ],
            "discriminator": "Gerrit Manual Trigger feature is used to simulate an event corresponding to a change-id and match it against a Gerrit Trigger configuration to trigger pipeline(s) manually.",
            "properties": {
                "changeId": {
                    "type": "string",
                    "example": "I522eab3b678dedd68dad3e2c04d3cccc0eb9fa00",
                    "description": "The ChangeSet Id corresponding to which the manual trigger has to be performed."
                },
                "project": {
                    "type": "string",
                    "example": "Gerrit-Trigger-Project",
                    "description": "The tango project to which Gerrit Trigger belongs to."
                },
                "trigger": {
                    "type": "string",
                    "example": "Gerrit-Trigger",
                    "description": "Name of the Gerrit Trigger for which event has to be analysed."
                }
            },
            "title": "GerritManualTrigger",
            "description": "Gerrit Manual Trigger feature is used to simulate an event corresponding to a change-id and match it against a Gerrit Trigger configuration to trigger pipeline(s) manually."
        },
        "GerritTrigger": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "The configurations of a Gerrit Trigger decides which pipeline is required to be triggered depending on kind of event received.",
            "properties": {
                "_createTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds"
                },
                "_createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdBy' field"
                },
                "_link": {
                    "type": "string",
                    "example": "/codestream/api/<prefix>/8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "Partial URL that provides details of the resource."
                },
                "_projectId": {
                    "type": "string",
                    "example": "abcd-abcd-abcd",
                    "description": "Contains project id of the entity"
                },
                "_updateTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds"
                },
                "_updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedBy' field"
                },
                "branch": {
                    "type": "string",
                    "example": "master",
                    "description": "Gerrit Project Branch on which the change has to be monitored."
                },
                "configurations": {
                    "type": "array",
                    "example": [
                        {
                            "pipeline": "rest_pipeline",
                            "input": {},
                            "eventType": "change-merged",
                            "failureComment": "Pipeline Execution Failed",
                            "successComment": "Pipeline Execution Successful"
                        },
                        {
                            "pipeline": "rest_pipeline",
                            "input": {},
                            "eventType": "patchset-created",
                            "verifiedLabel": "Verified",
                            "failureComment": "Pipeline Failed",
                            "successComment": "Pipeline Completed"
                        }
                    ],
                    "description": "The configuration of an Gerrit Event.",
                    "items": {
                        "$ref": "#/definitions/GerritTrigger$GerritEventConfiguration"
                    }
                },
                "createdAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was created. The date is in ISO 8601 with time zone"
                },
                "createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that created this entity"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates that this trigger will be addressed on receiving respective events."
                },
                "exclusions": {
                    "type": "array",
                    "example": [
                        {
                            "type": "PLAIN",
                            "value": "example.txt"
                        }
                    ],
                    "description": "Provide file exclusions as conditions for the trigger.",
                    "items": {
                        "$ref": "#/definitions/GerritTrigger$FileFilter"
                    }
                },
                "gerritProject": {
                    "type": "string",
                    "example": "TestGerritProject",
                    "description": "Gerrit Project which is to be monitored for the change."
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "The id of this resource."
                },
                "inclusions": {
                    "type": "array",
                    "example": [
                        {
                            "type": "PLAIN",
                            "value": "example.txt"
                        }
                    ],
                    "description": "Provide file inclusions as conditions for the trigger.",
                    "items": {
                        "$ref": "#/definitions/GerritTrigger$FileFilter"
                    }
                },
                "listener": {
                    "type": "string",
                    "example": "Gerrit-Listener",
                    "description": "Gerrit Listener which will receive the events for this trigger."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "prioritizeExclusion": {
                    "type": "boolean",
                    "example": true,
                    "description": "Prioritize Exclusion ensures that Pipelines are not triggered even if any of the files in a commit match the specified files in the exclusion paths or regex."
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was last updated. The date is in ISO 8601 with time zone."
                },
                "updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that last updated this entity"
                },
                "version": {
                    "type": "string",
                    "example": "v1",
                    "description": "Version of the resource."
                }
            },
            "title": "GerritTrigger",
            "description": "The configurations of a Gerrit Trigger decides which pipeline is required to be triggered depending on kind of event received."
        },
        "GerritTrigger$FileFilter": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "example": "PLAIN",
                    "description": "Identifies the type of File Filter, that can be REGEX or PLAIN.",
                    "enum": [
                        "REGEX",
                        "PLAIN"
                    ]
                },
                "value": {
                    "type": "string",
                    "example": "example.txt",
                    "description": "The value can be either plain text or a regex."
                }
            },
            "title": "GerritTrigger$FileFilter"
        },
        "GerritTrigger$GerritEventConfiguration": {
            "type": "object",
            "properties": {
                "eventType": {
                    "type": "string",
                    "example": "patchset-created",
                    "description": "Type of the gerrit event."
                },
                "failureComment": {
                    "type": "string",
                    "example": "Pipeline Execution Failed",
                    "description": "Comment to be posted to the ChangeSet on execution termination."
                },
                "input": {
                    "type": "object",
                    "example": [
                        {
                            "ip": "10.5.23.84",
                            "script": "testScript.sh"
                        }
                    ],
                    "description": "Map representing the Input properties for the Pipeline.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "pipeline": {
                    "type": "string",
                    "example": "DemoPipeline",
                    "description": "Pipeline that needs to be triggered on receiving this event."
                },
                "successComment": {
                    "type": "string",
                    "example": "Pipeline Execution Completed",
                    "description": "Comment to be posted to the ChangeSet on execution termination."
                },
                "verifiedLabel": {
                    "type": "string",
                    "example": "Verified +1",
                    "description": "The label to be posted on Gerrit Server to perform actions."
                }
            },
            "title": "GerritTrigger$GerritEventConfiguration"
        },
        "GerritTriggerPatch": {
            "type": "object",
            "required": [
                "enabled"
            ],
            "discriminator": "Contains the flag to enable or disable a Gerrit Trigger.",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Enable/Disable a Gerrit Trigger."
                }
            },
            "title": "GerritTriggerPatch",
            "description": "Contains the flag to enable or disable a Gerrit Trigger."
        },
        "GerritTriggerSpec": {
            "type": "object",
            "required": [
                "branch",
                "description",
                "gerritProject",
                "listener",
                "name"
            ],
            "discriminator": "The configurations of a Gerrit Trigger decides which pipeline is required to be triggered depending on kind of event received.",
            "properties": {
                "branch": {
                    "type": "string",
                    "example": "master",
                    "description": "Gerrit Project Branch on which the change has to be monitored."
                },
                "configurations": {
                    "type": "array",
                    "example": [
                        {
                            "pipeline": "rest_pipeline",
                            "input": {},
                            "eventType": "change-merged",
                            "failureComment": "Pipeline Execution Failed",
                            "successComment": "Pipeline Execution Successful"
                        },
                        {
                            "pipeline": "rest_pipeline",
                            "input": {},
                            "eventType": "patchset-created",
                            "verifiedLabel": "Verified",
                            "failureComment": "Pipeline Failed",
                            "successComment": "Pipeline Completed"
                        }
                    ],
                    "description": "The configuration of an Gerrit Event.",
                    "items": {
                        "$ref": "#/definitions/GerritTriggerSpec$GerritEventConfiguration"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates that this trigger will be addressed on receiving respective events."
                },
                "exclusions": {
                    "type": "array",
                    "example": [
                        {
                            "type": "PLAIN",
                            "value": "example.txt"
                        }
                    ],
                    "description": "Provide file exclusions as conditions for the trigger.",
                    "items": {
                        "$ref": "#/definitions/GerritTrigger$FileFilter"
                    }
                },
                "gerritProject": {
                    "type": "string",
                    "example": "TestGerritProject",
                    "description": "Gerrit Project which is to be monitored for the change."
                },
                "inclusions": {
                    "type": "array",
                    "example": [
                        {
                            "type": "PLAIN",
                            "value": "example.txt"
                        }
                    ],
                    "description": "Provide file inclusions as conditions for the trigger.",
                    "items": {
                        "$ref": "#/definitions/GerritTrigger$FileFilter"
                    }
                },
                "listener": {
                    "type": "string",
                    "example": "Gerrit-Listener",
                    "description": "Gerrit Listener which will receive the events for this trigger."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "prioritizeExclusion": {
                    "type": "boolean",
                    "example": true,
                    "description": "Prioritize Exclusion ensures that pipelines are not triggered even if any of the files in a commit match the specified files in the exclusion paths or regex."
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                }
            },
            "title": "GerritTriggerSpec",
            "description": "The configurations of a Gerrit Trigger decides which pipeline is required to be triggered depending on kind of event received."
        },
        "GerritTriggerSpec$GerritEventConfiguration": {
            "type": "object",
            "required": [
                "eventType",
                "pipeline"
            ],
            "properties": {
                "eventType": {
                    "type": "string",
                    "example": "patchset-created",
                    "description": "Type of the gerrit event."
                },
                "failureComment": {
                    "type": "string",
                    "example": "Pipeline Execution Failed",
                    "description": "Comment to be posted to the ChangeSet on execution termination."
                },
                "input": {
                    "type": "object",
                    "example": [
                        {
                            "ip": "10.5.23.84",
                            "script": "testScript.sh"
                        }
                    ],
                    "description": "Map representing the Input properties for the Pipeline.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "pipeline": {
                    "type": "string",
                    "example": "DemoPipeline",
                    "description": "Pipeline that needs to be triggered on receiving this event."
                },
                "successComment": {
                    "type": "string",
                    "example": "Pipeline Execution Completed",
                    "description": "Comment to be posted to the ChangeSet on execution termination."
                },
                "verifiedLabel": {
                    "type": "string",
                    "example": "Verified +1",
                    "description": "The label to be posted on Gerrit Server to perform actions."
                }
            },
            "title": "GerritTriggerSpec$GerritEventConfiguration"
        },
        "GerritTriggers": {
            "type": "object",
            "discriminator": "A list of Gerrit Trigger instances.",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources within the current page."
                },
                "documents": {
                    "type": "object",
                    "example": "\"documents\": {\n        \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\": {\n            \"project\": \"test-project\",\n            \"id\": \"b80254a7-fcff-4918-ad88-501d08096337\",\n            \"name\": \"test\",\n            \"updatedAt\": \"2019-09-23 13:48:54.483\",\n            \"tags\": [],\n            \"_link\": \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\",\n            \"_updateTimeInMicros\": 1569226734483000,\n            \"_createTimeInMicros\": 1569226720988000,\n            \"index\": 1,\n            \"notifications\": [],\n            \"comments\": \"\",\n            \"starred\": {},\n            \"input\": {},\n            \"output\": {},\n            \"stageOrder\": [],\n            \"stages\": {},\n            \"status\": \"COMPLETED\",\n            \"statusMessage\": \"Execution Completed.\",\n            \"_durationInMicros\": 13495000,\n            \"_requestTimeInMicros\": 1569226720988000,\n            \"_executedBy\": \"exampleuser\",\n            \"_pipelineLink\": \"/codestream/api/pipelines/b49898f9-d42d-4f19-8bda-e77a373c41b9\",\n            \"_nested\": false,\n            \"_rollback\": false,\n            \"_inputMeta\": {},\n            \"_outputMeta\": {},\n            \"workspaceResults\": []\n        }\n    }",
                    "description": "Details of the queried resources.",
                    "additionalProperties": {
                        "$ref": "#/definitions/GerritTrigger"
                    }
                },
                "links": {
                    "type": "array",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Partial URLs representing the links to the queried resources.",
                    "items": {
                        "type": "string"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources across all pages."
                }
            },
            "title": "GerritTriggers",
            "description": "A list of Gerrit Trigger instances."
        },
        "GitEvent": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "Git Event Model.",
            "properties": {
                "_createTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds"
                },
                "_createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdBy' field"
                },
                "_link": {
                    "type": "string",
                    "example": "/codestream/api/<prefix>/8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "Partial URL that provides details of the resource."
                },
                "_projectId": {
                    "type": "string",
                    "example": "abcd-abcd-abcd",
                    "description": "Contains project id of the entity"
                },
                "_updateTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds"
                },
                "_updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedBy' field"
                },
                "commitId": {
                    "type": "string",
                    "example": "dvdsasfvaesvvffvgfbrrgeaerfare34fdgrt43",
                    "description": "CommitId of the event triggered."
                },
                "createdAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was created. The date is in ISO 8601 with time zone"
                },
                "createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that created this entity"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "executionIndex": {
                    "type": "integer",
                    "format": "int64",
                    "example": 2,
                    "description": "Pipeline execution index."
                },
                "executionLink": {
                    "type": "string",
                    "example": "/codestream/api/executions/08c20cb8-17b6-4d9c-9f15-c77cf4913bc5",
                    "description": "Pipeline execution link."
                },
                "executionStatus": {
                    "type": "string",
                    "example": "STARTED",
                    "description": "Pipeline execution status."
                },
                "httpURL": {
                    "type": "string",
                    "example": "https://<git-server-url>/<username>/<repo-name>",
                    "description": "Url of the Git Repository."
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "The id of this resource."
                },
                "message": {
                    "type": "string",
                    "example": "Invalid Oauth Refresh token. Verify webhook configuration.",
                    "description": "Message is populated when an error occurs."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "owner": {
                    "type": "string",
                    "example": "Demo User",
                    "description": "Owner Name who triggered the event."
                },
                "pipeline": {
                    "type": "string",
                    "example": "Demo Pipeline",
                    "description": "Pipeline to be executed when event is triggered."
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "repo": {
                    "type": "string",
                    "example": "MyRepository",
                    "description": "RepoName corresponding to the event."
                },
                "serverURL": {
                    "example": "https://<git-server-url>",
                    "description": "Url of the Git server.",
                    "$ref": "#/definitions/URI"
                },
                "serverWebhookId": {
                    "type": "string",
                    "example": "dvcsdweivcioekcxjhwiu4jd823idjekx",
                    "description": "Git webhook id."
                },
                "subject": {
                    "type": "string",
                    "example": "Updating codestream-service.yaml",
                    "description": "Subject for the commit."
                },
                "targetBranch": {
                    "type": "string",
                    "example": "master",
                    "description": "Branch name for which event is triggered."
                },
                "timeStampInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": "2019-09-18T07:38:25.907+0000",
                    "description": "Commit Time for the event."
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was last updated. The date is in ISO 8601 with time zone."
                },
                "updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that last updated this entity"
                },
                "version": {
                    "type": "string",
                    "example": "v1",
                    "description": "Version of the resource."
                }
            },
            "title": "GitEvent",
            "description": "Git Event Model."
        },
        "GitEvents": {
            "type": "object",
            "discriminator": "A list of Git Event instances.",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources within the current page."
                },
                "documents": {
                    "type": "object",
                    "example": "\"documents\": {\n        \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\": {\n            \"project\": \"test-project\",\n            \"id\": \"b80254a7-fcff-4918-ad88-501d08096337\",\n            \"name\": \"test\",\n            \"updatedAt\": \"2019-09-23 13:48:54.483\",\n            \"tags\": [],\n            \"_link\": \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\",\n            \"_updateTimeInMicros\": 1569226734483000,\n            \"_createTimeInMicros\": 1569226720988000,\n            \"index\": 1,\n            \"notifications\": [],\n            \"comments\": \"\",\n            \"starred\": {},\n            \"input\": {},\n            \"output\": {},\n            \"stageOrder\": [],\n            \"stages\": {},\n            \"status\": \"COMPLETED\",\n            \"statusMessage\": \"Execution Completed.\",\n            \"_durationInMicros\": 13495000,\n            \"_requestTimeInMicros\": 1569226720988000,\n            \"_executedBy\": \"exampleuser\",\n            \"_pipelineLink\": \"/codestream/api/pipelines/b49898f9-d42d-4f19-8bda-e77a373c41b9\",\n            \"_nested\": false,\n            \"_rollback\": false,\n            \"_inputMeta\": {},\n            \"_outputMeta\": {},\n            \"workspaceResults\": []\n        }\n    }",
                    "description": "Details of the queried resources.",
                    "additionalProperties": {
                        "$ref": "#/definitions/GitEvent"
                    }
                },
                "links": {
                    "type": "array",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Partial URLs representing the links to the queried resources.",
                    "items": {
                        "type": "string"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources across all pages."
                }
            },
            "title": "GitEvents",
            "description": "A list of Git Event instances."
        },
        "GitWebhook": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "Git Webhook details.",
            "properties": {
                "_createTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds"
                },
                "_createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdBy' field"
                },
                "_link": {
                    "type": "string",
                    "example": "/codestream/api/<prefix>/8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "Partial URL that provides details of the resource."
                },
                "_projectId": {
                    "type": "string",
                    "example": "abcd-abcd-abcd",
                    "description": "Contains project id of the entity"
                },
                "_updateTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds"
                },
                "_updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedBy' field"
                },
                "branchName": {
                    "type": "string",
                    "example": "master",
                    "description": "Branch name for which the webhook has been configured."
                },
                "createdAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was created. The date is in ISO 8601 with time zone"
                },
                "createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that created this entity"
                },
                "delayTimeInMins": {
                    "type": "integer",
                    "format": "int32",
                    "example": 2,
                    "description": "Delay time after which the Pipeline Execution is triggered."
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "endpoint": {
                    "type": "string",
                    "example": "GitHub-SaaS",
                    "description": "Git endpoint."
                },
                "eventCategory": {
                    "type": "string",
                    "example": "PUSH",
                    "description": "Git event type."
                },
                "exclusions": {
                    "type": "array",
                    "example": [
                        {
                            "type": "PLAIN",
                            "value": "example.txt"
                        }
                    ],
                    "description": "Provide file exclusions as conditions for the trigger.",
                    "items": {
                        "$ref": "#/definitions/GitWebhook$FileFilter"
                    }
                },
                "externalListenerLink": {
                    "type": "string",
                    "example": "codestream/api/git-webhook-listeners/173f5ed5-2197-4975-b782-a8679b2e4cd3",
                    "description": "Git webhook listener link."
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "The id of this resource."
                },
                "inclusions": {
                    "type": "array",
                    "example": [
                        {
                            "type": "PLAIN",
                            "value": "example.txt"
                        }
                    ],
                    "description": "Provide file inclusions as conditions for the trigger.",
                    "items": {
                        "$ref": "#/definitions/GitWebhook$FileFilter"
                    }
                },
                "input": {
                    "type": "object",
                    "example": {
                        "test": {
                            "description": "test-value",
                            "mandatory": false
                        }
                    },
                    "description": "Pipeline Execution input properties."
                },
                "insecureSsl": {
                    "type": "boolean",
                    "example": true,
                    "description": "verify SSL certificates when delivering payloads"
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "pipeline": {
                    "type": "string",
                    "example": "Git-Pipeline",
                    "description": "Pipeline name which is meant to be triggered when a git event occur."
                },
                "prioritizeExclusion": {
                    "type": "boolean",
                    "example": true,
                    "description": "Prioritize Exclusion ensures that pipelines are not triggered even if any \u201d +\n           \u201cof the files in a commit match the specified files in the exclusion paths or regex."
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "refreshToken": {
                    "type": "string",
                    "example": "I5FLA8iQhlZwoos6OL3goKciAF5e",
                    "description": "Codestream API token."
                },
                "repoName": {
                    "type": "string",
                    "example": "codestream",
                    "description": "Repo name for which the webhook has been configured."
                },
                "secretToken": {
                    "type": "string",
                    "example": "DSkUyJJ8KA8rOSk=Ci",
                    "description": "Secret token to validate received payloads."
                },
                "serverType": {
                    "type": "string",
                    "example": "GITHUB/GITLAB/BITBUCKET",
                    "description": "Git Server Type."
                },
                "serverWebhookId": {
                    "type": "string",
                    "example": 192837465,
                    "description": "Git webhook id."
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was last updated. The date is in ISO 8601 with time zone."
                },
                "updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that last updated this entity"
                },
                "version": {
                    "type": "string",
                    "example": "v1",
                    "description": "Version of the resource."
                }
            },
            "title": "GitWebhook",
            "description": "Git Webhook details."
        },
        "GitWebhook$FileFilter": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "example": "PLAIN",
                    "description": "Identifies the type of File Filter, that can be REGEX or PLAIN.",
                    "enum": [
                        "REGEX",
                        "PLAIN"
                    ]
                },
                "value": {
                    "type": "string",
                    "example": "example.txt",
                    "description": "The value can be either plain text or a regex."
                }
            },
            "title": "GitWebhook$FileFilter"
        },
        "GitWebhookSpec": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "Git Webhook specification.",
            "properties": {
                "branchName": {
                    "type": "string",
                    "example": "master",
                    "description": "Branch name for which the webhook has been configured."
                },
                "delayTimeInMins": {
                    "type": "integer",
                    "format": "int32",
                    "example": 2,
                    "description": "Delay time after which the pipeline execution is triggered."
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "endpoint": {
                    "type": "string",
                    "example": "GitHub-SaaS",
                    "description": "Git endpoint."
                },
                "eventCategory": {
                    "type": "string",
                    "example": "PUSH",
                    "description": "Git event type."
                },
                "exclusions": {
                    "type": "array",
                    "example": [
                        {
                            "type": "PLAIN",
                            "value": "example.txt"
                        }
                    ],
                    "description": "Provide file exclusions as conditions for the trigger.",
                    "items": {
                        "$ref": "#/definitions/GitWebhook$FileFilter"
                    }
                },
                "externalListenerLink": {
                    "type": "string",
                    "example": "codestream/api/git-webhook-listeners/173f5ed5-2197-4975-b782-a8679b2e4cd3",
                    "description": "Git webhook listener link."
                },
                "inclusions": {
                    "type": "array",
                    "example": [
                        {
                            "type": "PLAIN",
                            "value": "example.txt"
                        }
                    ],
                    "description": "Provide file inclusions as conditions for the trigger.",
                    "items": {
                        "$ref": "#/definitions/GitWebhook$FileFilter"
                    }
                },
                "input": {
                    "type": "object",
                    "example": {
                        "test": {
                            "description": "test-value",
                            "mandatory": false
                        }
                    },
                    "description": "Pipeline Execution input properties."
                },
                "insecureSsl": {
                    "type": "boolean",
                    "example": true,
                    "description": "verify SSL certificates when delivering payloads"
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "pipeline": {
                    "type": "string",
                    "example": "CICD-Pipeline",
                    "description": "Pipeline name which is meant to be triggered when a git event occur."
                },
                "prioritizeExclusion": {
                    "type": "boolean",
                    "example": true,
                    "description": "Prioritize Exclusion ensures that pipelines are not triggered even if any \u201d +\n           \u201cof the files in a commit match the specified files in the exclusion paths or regex."
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "refreshToken": {
                    "type": "string",
                    "example": "I5FLA8iQhlZwoos6OL3goKciAF5e",
                    "description": "Codestream API token."
                },
                "repoName": {
                    "type": "string",
                    "example": "Codestream",
                    "description": "Repo name for which the webhook has been configured."
                },
                "secretToken": {
                    "type": "string",
                    "example": "DSkUyJJ8KA8rOSk=Ci",
                    "description": "Secret token to validate received payloads."
                },
                "serverType": {
                    "type": "string",
                    "example": "GITHUB/GITLAB/BITBUCKET",
                    "description": "Git Server Type."
                },
                "serverWebhookId": {
                    "type": "string",
                    "example": "serverWebhookId\": \"12678345",
                    "description": "Git webhook id."
                }
            },
            "title": "GitWebhookSpec",
            "description": "Git Webhook specification."
        },
        "GitWebhooks": {
            "type": "object",
            "discriminator": "A list of Git Webhook instances.",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources within the current page."
                },
                "documents": {
                    "type": "object",
                    "example": "\"documents\": {\n        \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\": {\n            \"project\": \"test-project\",\n            \"id\": \"b80254a7-fcff-4918-ad88-501d08096337\",\n            \"name\": \"test\",\n            \"updatedAt\": \"2019-09-23 13:48:54.483\",\n            \"tags\": [],\n            \"_link\": \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\",\n            \"_updateTimeInMicros\": 1569226734483000,\n            \"_createTimeInMicros\": 1569226720988000,\n            \"index\": 1,\n            \"notifications\": [],\n            \"comments\": \"\",\n            \"starred\": {},\n            \"input\": {},\n            \"output\": {},\n            \"stageOrder\": [],\n            \"stages\": {},\n            \"status\": \"COMPLETED\",\n            \"statusMessage\": \"Execution Completed.\",\n            \"_durationInMicros\": 13495000,\n            \"_requestTimeInMicros\": 1569226720988000,\n            \"_executedBy\": \"exampleuser\",\n            \"_pipelineLink\": \"/codestream/api/pipelines/b49898f9-d42d-4f19-8bda-e77a373c41b9\",\n            \"_nested\": false,\n            \"_rollback\": false,\n            \"_inputMeta\": {},\n            \"_outputMeta\": {},\n            \"workspaceResults\": []\n        }\n    }",
                    "description": "Details of the queried resources.",
                    "additionalProperties": {
                        "$ref": "#/definitions/GitWebhook"
                    }
                },
                "links": {
                    "type": "array",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Partial URLs representing the links to the queried resources.",
                    "items": {
                        "type": "string"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources across all pages."
                }
            },
            "title": "GitWebhooks",
            "description": "A list of Git Webhook instances."
        },
        "JiraEventConfig": {
            "type": "object",
            "discriminator": "Represents a Jira Event configuration.",
            "properties": {
                "assignee": {
                    "type": "string",
                    "example": "jason@vmware.com",
                    "description": "User to whom the Jira will be assigned."
                },
                "description": {
                    "type": "string",
                    "example": "Details about the issue being reported",
                    "description": "Description for the Jira ticket."
                },
                "endpoint": {
                    "type": "string"
                },
                "event": {
                    "type": "string",
                    "enum": [
                        "SUCCESS",
                        "FAILURE",
                        "WAITING",
                        "CANCELED",
                        "STARTED"
                    ]
                },
                "issuetype": {
                    "type": "string",
                    "example": "Bug/Story",
                    "description": "Jira Issue Type."
                },
                "project": {
                    "type": "string",
                    "example": "VRCS",
                    "description": "Jira Project Name."
                },
                "stage": {
                    "type": "string"
                },
                "summary": {
                    "type": "string",
                    "example": "Pipeline-1 execution failed",
                    "description": "Summary for the Jira ticket."
                },
                "task": {
                    "type": "string"
                }
            },
            "title": "JiraEventConfig",
            "description": "Represents a Jira Event configuration."
        },
        "ManualTriggerResponse": {
            "type": "object",
            "discriminator": "Gerrit Manual Trigger response acknowledges the success or failure and in case of success, it lists the the pipelines which got triggered.",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Manual Trigger Successful",
                    "description": "Message to acknowledge success or failure of action."
                },
                "pipelinesTriggered": {
                    "type": "array",
                    "example": [
                        "Pipeline-1",
                        "Pipeline-2"
                    ],
                    "description": "List of pipeline which got manually triggered.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "title": "ManualTriggerResponse",
            "description": "Gerrit Manual Trigger response acknowledges the success or failure and in case of success, it lists the the pipelines which got triggered."
        },
        "Notification": {
            "type": "object",
            "discriminator": "Notifications are ways to communicate with your teams and let them know the status of your Pipelines in Code Stream.",
            "properties": {
                "eventGroup": {
                    "type": "string",
                    "example": "COMPLETED",
                    "description": "The event on which this Notification is triggered."
                },
                "jiraResponse": {
                    "type": "object",
                    "example": {
                        "ID": "VRCS-23",
                        "link": "/link/to/Jira/issue/VRCS-23"
                    },
                    "description": "Only for Jira. Contains the Jira issue ID for creating a ticket.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "providerType": {
                    "type": "string",
                    "example": "Email/Slack/Jira",
                    "description": "Mode of transmission of this Notification."
                },
                "responseCode": {
                    "type": "string",
                    "example": 200,
                    "description": "Only for Jira/Webhook. Specifies any HTTP response code received from any REST calls related to the Notification."
                },
                "responseMessage": {
                    "type": "string",
                    "example": 200,
                    "description": "Only for Jira/Webhook. Specifies any HTTP response message received from any REST calls related to the Notification."
                },
                "stage": {
                    "type": "string",
                    "description": "Stage that this Notification belongs to."
                },
                "success": {
                    "type": "boolean",
                    "example": true,
                    "description": "Flag that represents if the Notification was successfully posted or not."
                },
                "task": {
                    "type": "string",
                    "description": "Task that this Notification belongs to."
                }
            },
            "title": "Notification",
            "description": "Notifications are ways to communicate with your teams and let them know the status of your Pipelines in Code Stream."
        },
        "NotificationConfiguration": {
            "type": "object",
            "discriminator": "Represents collection of different Event configurations.",
            "properties": {
                "email": {
                    "type": "array",
                    "example": [
                        {
                            "to": [
                                "abc@vmware.com"
                            ],
                            "subject": "Pipeline execution notification",
                            "body": "pipeline-execution-1234",
                            "event": "SUCCESS",
                            "endpoint": "Codestream-Default-Email"
                        }
                    ],
                    "description": "List of email events configured as part of notification.",
                    "items": {
                        "$ref": "#/definitions/EmailEventConfig"
                    }
                },
                "jira": {
                    "type": "array",
                    "description": "List of Jira events configured as part of notification.",
                    "items": {
                        "$ref": "#/definitions/JiraEventConfig"
                    }
                },
                "webhook": {
                    "type": "array",
                    "description": "List of webhook events configured as part of notification.",
                    "items": {
                        "$ref": "#/definitions/WebhookEventConfig"
                    }
                }
            },
            "title": "NotificationConfiguration",
            "description": "Represents collection of different Event configurations."
        },
        "Pipeline": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "A pipeline is a continuous integration and delivery model of your software release process, from your source code, through testing, to production. It includes a sequence of stages with tasks that represent the activities in your software release cycle. Your software application flows from one stage to the next through the pipeline.",
            "properties": {
                "_createTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds"
                },
                "_createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdBy' field"
                },
                "_inputMeta": {
                    "type": "object",
                    "example": {
                        "test": {
                            "description": "test-value",
                            "mandatory": false
                        }
                    },
                    "description": "Additional information about Input Properties",
                    "additionalProperties": {
                        "$ref": "#/definitions/PropertyMetaData"
                    }
                },
                "_link": {
                    "type": "string",
                    "example": "/codestream/api/<prefix>/8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "Partial URL that provides details of the resource."
                },
                "_projectId": {
                    "type": "string",
                    "example": "abcd-abcd-abcd",
                    "description": "Contains project id of the entity"
                },
                "_updateTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds"
                },
                "_updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedBy' field"
                },
                "_warnings": {
                    "type": "array",
                    "example": "\"_warnings\": [\n    {\n      \"success\": true,\n      \"classType\": \"com.vmware.cs.validation.PipelineServiceValidator\",\n      \"message\": {\n        \"containerName\": \"test-pipeline\",\n        \"fieldName\": \"stages\",\n        \"level\": \"WARN\",\n        \"message\": \"Pipeline test-pipeline does not have any stage.\"\n      }\n    }\n  ],",
                    "description": "Contains any warnings that result from failed validations of any Pipeline fields",
                    "items": {
                        "$ref": "#/definitions/ValidatorResponse"
                    }
                },
                "concurrency": {
                    "type": "integer",
                    "format": "int32",
                    "example": 10,
                    "description": "Number of Executions of the Pipeline that can run concurrently."
                },
                "createdAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was created. The date is in ISO 8601 with time zone"
                },
                "createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that created this entity"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates if the Pipeline is in enabled state."
                },
                "icon": {
                    "type": "string",
                    "example": "tools,,is-success is-solid",
                    "description": "String description of the icon used for this Pipeline."
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "The id of this resource."
                },
                "input": {
                    "type": "object",
                    "example": [
                        {
                            "ip": "10.5.23.84",
                            "script": "testScript.sh"
                        }
                    ],
                    "description": "Map representing the Input properties for the Pipeline."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "notifications": {
                    "description": "Represents the various Notification Configurations for the Pipeline",
                    "$ref": "#/definitions/NotificationConfiguration"
                },
                "options": {
                    "type": "array",
                    "example": [
                        "DOCKER_TRIGGER"
                    ],
                    "description": "Represents the different options to trigger a Pipeline. Selecting an option auto injects the Input properties needed to execute a Pipeline with that trigger.",
                    "items": {
                        "type": "string"
                    }
                },
                "output": {
                    "type": "object",
                    "example": [
                        {
                            "deployedMachineIP": "10.108.35.54",
                            "result": "true"
                        }
                    ],
                    "description": "Map representing the Output properties for the Pipeline."
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "rollbacks": {
                    "type": "array",
                    "example": [
                        {
                            "stage": "Deploy to Prod",
                            "task": "Deploy",
                            "name": "Undo Deployment",
                            "inputs": {}
                        }
                    ],
                    "description": "Represents the various Rollback Configurations for the Pipeline",
                    "items": {
                        "$ref": "#/definitions/RollbackConfiguration"
                    }
                },
                "stageOrder": {
                    "type": "array",
                    "example": [
                        "AcquireToken",
                        "Upgrade",
                        "E2E"
                    ],
                    "description": "Represents the order in which Stages will be executed.",
                    "items": {
                        "type": "string"
                    }
                },
                "stages": {
                    "type": "object",
                    "description": "Map representing the details of the various Stages of the Pipeline.",
                    "additionalProperties": {
                        "$ref": "#/definitions/Stage"
                    }
                },
                "starred": {
                    "example": {
                        "test-output": "${Stage0.Task0.status}"
                    },
                    "description": "Highlights any given Input/Output properties",
                    "$ref": "#/definitions/Pipeline$StarredProperty"
                },
                "state": {
                    "type": "string",
                    "example": "RELEASED",
                    "description": "Indicates if the Pipeline is enabled/disabled/released to catalog."
                },
                "tags": {
                    "type": "array",
                    "example": [
                        {
                            "key": "env",
                            "value": "dev"
                        }
                    ],
                    "description": "A set of tag keys and optional values that were set on on the resource.",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was last updated. The date is in ISO 8601 with time zone."
                },
                "updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that last updated this entity"
                },
                "version": {
                    "type": "string",
                    "example": "v1",
                    "description": "Version of the resource."
                },
                "workspace": {
                    "description": "Represents the configuration to be used for CI and Custom tasks.",
                    "$ref": "#/definitions/Workspace"
                }
            },
            "title": "Pipeline",
            "description": "A pipeline is a continuous integration and delivery model of your software release process, from your source code, through testing, to production. It includes a sequence of stages with tasks that represent the activities in your software release cycle. Your software application flows from one stage to the next through the pipeline."
        },
        "Pipeline$StarredProperty": {
            "type": "object",
            "discriminator": "Represents properties that user can favourite or 'star' for convenience.",
            "properties": {
                "input": {
                    "type": "string",
                    "example": {
                        "input": "commitId"
                    },
                    "description": "Contains the starred input parameter"
                },
                "output": {
                    "type": "string",
                    "example": {
                        "output": "owner"
                    },
                    "description": "Contains the starred output parameter"
                }
            },
            "title": "Pipeline$StarredProperty",
            "description": "Represents properties that user can favourite or 'star' for convenience."
        },
        "PipelinePatchRequest": {
            "type": "object",
            "discriminator": "Patch Request for a Pipeline",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "My description for the Pipeline",
                    "description": "A human-friendly description for the Pipeline."
                },
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates if the Pipeline is in enabled state."
                },
                "name": {
                    "type": "string",
                    "example": "My name",
                    "description": "A human-friendly name used as an identifier for the Pipeline."
                },
                "state": {
                    "type": "string",
                    "example": "RELEASED",
                    "description": "Indicates if the Pipeline is enabled/disabled/released to catalog."
                },
                "tags": {
                    "type": "array",
                    "example": [
                        {
                            "key": "env",
                            "value": "dev"
                        }
                    ],
                    "description": "A set of tag keys and optional values that need to be set on the Pipeline.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "title": "PipelinePatchRequest",
            "description": "Patch Request for a Pipeline"
        },
        "PipelineSpec": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "Pipeline Specification",
            "properties": {
                "_inputMeta": {
                    "type": "object",
                    "example": {
                        "test": {
                            "description": "test-value",
                            "mandatory": false
                        }
                    },
                    "description": "Additional information about Input Properties",
                    "additionalProperties": {
                        "$ref": "#/definitions/PropertyMetaData"
                    }
                },
                "concurrency": {
                    "type": "integer",
                    "format": "int32",
                    "example": 10,
                    "description": "Number of Executions of the Pipeline that can run concurrently."
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates if the Pipeline is in enabled state."
                },
                "icon": {
                    "type": "string",
                    "example": "tools,,is-success is-solid",
                    "description": "String description of the icon used for this Pipeline."
                },
                "input": {
                    "type": "object",
                    "example": [
                        {
                            "ip": "10.5.23.84",
                            "script": "testScript.sh"
                        }
                    ],
                    "description": "Map representing the Input properties for the Pipeline."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "notifications": {
                    "description": "Represents the various Notification Configurations for the Pipeline",
                    "$ref": "#/definitions/NotificationConfiguration"
                },
                "options": {
                    "type": "array",
                    "example": [
                        "DOCKER_TRIGGER"
                    ],
                    "description": "Represents the different options to trigger a Pipeline. Selecting an option auto injects the Input properties needed to execute a Pipeline with that trigger.",
                    "items": {
                        "type": "string"
                    }
                },
                "output": {
                    "type": "object",
                    "example": [
                        {
                            "deployedMachineIP": "10.108.35.54",
                            "result": "true"
                        }
                    ],
                    "description": "Map representing the Output properties for the Pipeline."
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "rollbacks": {
                    "type": "array",
                    "example": [
                        {
                            "stage": "Deploy to Prod",
                            "task": "Deploy",
                            "name": "Undo Deployment",
                            "inputs": {}
                        }
                    ],
                    "description": "Represents the various Rollback Configurations for the Pipeline",
                    "items": {
                        "$ref": "#/definitions/RollbackConfiguration"
                    }
                },
                "stageOrder": {
                    "type": "array",
                    "example": [
                        "AcquireToken",
                        "Upgrade",
                        "E2E"
                    ],
                    "description": "Represents the order in which Stages will be executed.",
                    "items": {
                        "type": "string"
                    }
                },
                "stages": {
                    "type": "object",
                    "description": "Map representing the details of the various Stages of the Pipeline.",
                    "additionalProperties": {
                        "$ref": "#/definitions/Stage"
                    }
                },
                "starred": {
                    "example": {
                        "test-output": "${Stage0.Task0.status}"
                    },
                    "description": "Highlights any given Input/Output properties",
                    "$ref": "#/definitions/Pipeline$StarredProperty"
                },
                "state": {
                    "type": "string",
                    "example": "RELEASED",
                    "description": "Indicates if the Pipeline is enabled/disabled/released to catalog."
                },
                "tags": {
                    "type": "array",
                    "example": [
                        {
                            "key": "env",
                            "value": "dev"
                        }
                    ],
                    "description": "A set of tag keys and optional values that were set on on the resource.",
                    "items": {
                        "type": "string"
                    }
                },
                "workspace": {
                    "description": "Represents the configuration to be used for CI and Custom tasks.",
                    "$ref": "#/definitions/Workspace"
                }
            },
            "title": "PipelineSpec",
            "description": "Pipeline Specification"
        },
        "Pipelines": {
            "type": "object",
            "discriminator": "A list of Pipeline instances.",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources within the current page."
                },
                "documents": {
                    "type": "object",
                    "example": "\"documents\": {\n        \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\": {\n            \"project\": \"test-project\",\n            \"id\": \"b80254a7-fcff-4918-ad88-501d08096337\",\n            \"name\": \"test\",\n            \"updatedAt\": \"2019-09-23 13:48:54.483\",\n            \"tags\": [],\n            \"_link\": \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\",\n            \"_updateTimeInMicros\": 1569226734483000,\n            \"_createTimeInMicros\": 1569226720988000,\n            \"index\": 1,\n            \"notifications\": [],\n            \"comments\": \"\",\n            \"starred\": {},\n            \"input\": {},\n            \"output\": {},\n            \"stageOrder\": [],\n            \"stages\": {},\n            \"status\": \"COMPLETED\",\n            \"statusMessage\": \"Execution Completed.\",\n            \"_durationInMicros\": 13495000,\n            \"_requestTimeInMicros\": 1569226720988000,\n            \"_executedBy\": \"exampleuser\",\n            \"_pipelineLink\": \"/codestream/api/pipelines/b49898f9-d42d-4f19-8bda-e77a373c41b9\",\n            \"_nested\": false,\n            \"_rollback\": false,\n            \"_inputMeta\": {},\n            \"_outputMeta\": {},\n            \"workspaceResults\": []\n        }\n    }",
                    "description": "Details of the queried resources.",
                    "additionalProperties": {
                        "$ref": "#/definitions/Pipeline"
                    }
                },
                "links": {
                    "type": "array",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Partial URLs representing the links to the queried resources.",
                    "items": {
                        "type": "string"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources across all pages."
                }
            },
            "title": "Pipelines",
            "description": "A list of Pipeline instances."
        },
        "PropertyMetaData": {
            "type": "object",
            "discriminator": "Model for input/output properties.",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Repo Url",
                    "description": "Description for the input/output property."
                }
            },
            "title": "PropertyMetaData",
            "description": "Model for input/output properties."
        },
        "RollbackConfiguration": {
            "type": "object",
            "discriminator": "Model represents a Rollback configuration.",
            "properties": {
                "inputs": {
                    "type": "object",
                    "example": {
                        "test": {
                            "description": "test-value",
                            "mandatory": false
                        }
                    },
                    "description": "Map representing the Input properties for the Rollback Pipeline."
                },
                "name": {
                    "type": "string",
                    "example": "Rolback-Pipeline",
                    "description": "Rollback Pipeline name."
                },
                "stage": {
                    "type": "string",
                    "example": "Dev-Stage",
                    "description": "Stage name for which the rollback pipeline is configured."
                },
                "task": {
                    "type": "string",
                    "example": "Publish-Image-Task",
                    "description": "Task name for which the rollback pipeline is configured."
                }
            },
            "title": "RollbackConfiguration",
            "description": "Model represents a Rollback configuration."
        },
        "RollbackResponse": {
            "type": "object",
            "discriminator": "Represents the response after rolling back a Stage or Task.",
            "properties": {
                "_link": {
                    "type": "string",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Execution link of the rollback Pipeline."
                },
                "index": {
                    "type": "integer",
                    "format": "int64",
                    "example": 4,
                    "description": "Execution index of the rollback Pipeline."
                },
                "name": {
                    "type": "string",
                    "example": "My-Rolled-Back-Pipeline",
                    "description": "Name of the rollback Pipeline."
                },
                "output": {
                    "type": "object",
                    "example": [
                        {
                            "key": "env",
                            "value": "dev"
                        }
                    ],
                    "description": "Output properties of a rollback Pipeline."
                },
                "status": {
                    "type": "string",
                    "example": "COMPLETED",
                    "description": "Execution status of a rollback Pipeline.",
                    "enum": [
                        "NOT_STARTED",
                        "STARTED",
                        "RUNNING",
                        "CANCELING",
                        "WAITING",
                        "RESUMING",
                        "PAUSING",
                        "PAUSED",
                        "CANCELED",
                        "COMPLETED",
                        "FAILED",
                        "SKIPPED",
                        "QUEUED",
                        "FAILED_CONTINUE",
                        "ROLLING_BACK",
                        "ROLLBACK_FAILED",
                        "PREPARING_WORKSPACE",
                        "ROLLBACK_COMPLETED"
                    ]
                },
                "statusMessage": {
                    "type": "string",
                    "example": "Executing Stage0",
                    "description": "Execution status message of a rollback Pipeline."
                }
            },
            "title": "RollbackResponse",
            "description": "Represents the response after rolling back a Stage or Task."
        },
        "ServiceRequest": {
            "type": "object",
            "discriminator": "Request object for actions such as cloning.",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "cloned entity",
                    "description": "Description for the cloned entity."
                },
                "name": {
                    "type": "string",
                    "example": "Pipeline-1",
                    "description": "Name field for the cloned entity."
                },
                "requestType": {
                    "type": "string",
                    "example": "CLONE",
                    "description": "Action to be performed on the service."
                }
            },
            "title": "ServiceRequest",
            "description": "Request object for actions such as cloning."
        },
        "Stage": {
            "type": "object",
            "discriminator": "Data type for the Stage.",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Image Publish Stage",
                    "description": "Stage description."
                },
                "tags": {
                    "type": "array",
                    "example": [
                        "Tag1",
                        "Tag2"
                    ],
                    "description": "Tags are useful for ease in searching, grouping or filtering.",
                    "items": {
                        "type": "string"
                    }
                },
                "taskOrder": {
                    "type": "array",
                    "example": [
                        "Task1",
                        "Task0"
                    ],
                    "description": "Order in which tasks will be executed.",
                    "items": {
                        "type": "string"
                    }
                },
                "tasks": {
                    "type": "object",
                    "example": {
                        "Task1": {
                            "type": "REST",
                            "ignoreFailure": false,
                            "preCondition": "",
                            "input": {
                                "headers": {
                                    "Accept": "application/json",
                                    "Content-Type": "application/json"
                                },
                                "action": "get",
                                "url": "https://www.vmware.com"
                            }
                        }
                    },
                    "description": "Map representing details of various tasks present in the stage.",
                    "additionalProperties": {
                        "$ref": "#/definitions/Task"
                    }
                }
            },
            "title": "Stage",
            "description": "Data type for the Stage."
        },
        "StageExecution": {
            "type": "object",
            "required": [
                "name"
            ],
            "discriminator": "Contains Stage Execution details.",
            "properties": {
                "_durationInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "Execution duration of the Stage Execution (in micros)."
                },
                "_endTime": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "End time of the Stage Execution (in micros).."
                },
                "_startTime": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "Start time of the Stage Execution (in micros).."
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "The id of this Stage."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier For the Stage."
                },
                "notifications": {
                    "type": "array",
                    "description": "List of configured Notifications for Stage Events.",
                    "items": {
                        "$ref": "#/definitions/Notification"
                    }
                },
                "rollbackConfiguration": {
                    "description": "Rollback configuration for the Stage.",
                    "$ref": "#/definitions/RollbackConfiguration"
                },
                "rollbackResponse": {
                    "description": "Rollback response for the Stage if it is rolled back.",
                    "$ref": "#/definitions/RollbackResponse"
                },
                "status": {
                    "type": "string",
                    "example": "COMPLETED",
                    "description": "Execution status of the Stage Execution.",
                    "enum": [
                        "NOT_STARTED",
                        "STARTED",
                        "RUNNING",
                        "CANCELING",
                        "WAITING",
                        "RESUMING",
                        "PAUSING",
                        "PAUSED",
                        "CANCELED",
                        "COMPLETED",
                        "FAILED",
                        "SKIPPED",
                        "QUEUED",
                        "FAILED_CONTINUE",
                        "ROLLING_BACK",
                        "ROLLBACK_FAILED",
                        "PREPARING_WORKSPACE",
                        "ROLLBACK_COMPLETED"
                    ]
                },
                "statusMessage": {
                    "type": "string",
                    "example": "Executing Stage0",
                    "description": "Execution status message of the Stage Execution."
                },
                "taskOrder": {
                    "type": "array",
                    "example": "\"taskOrder\": [\n        \"Test1,Test2\",\n        \"Test3\"\n      ],",
                    "description": "Ordering of the various Tasks within the Stage.",
                    "items": {
                        "type": "string"
                    }
                },
                "tasks": {
                    "type": "object",
                    "description": "Represents the various Tasks in the Stage.",
                    "additionalProperties": {
                        "$ref": "#/definitions/TaskExecution"
                    }
                }
            },
            "title": "StageExecution",
            "description": "Contains Stage Execution details."
        },
        "Task": {
            "type": "object",
            "discriminator": "Represents the individual Tasks in a Pipeline.",
            "properties": {
                "endpoints": {
                    "type": "object",
                    "example": [
                        {
                            "deployedMachineIP": "10.108.35.54",
                            "result": "true"
                        }
                    ],
                    "description": "Map representing the Output properties for the Task.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ignoreFailure": {
                    "type": "boolean",
                    "example": true,
                    "description": "Ignores the failure of the Task execution if set to true, and continues with the Pipeline execution."
                },
                "input": {
                    "type": "object",
                    "example": [
                        {
                            "ip": "10.5.23.84",
                            "script": "testScript.sh"
                        }
                    ],
                    "description": "Map representing the Input properties for the Task."
                },
                "preCondition": {
                    "type": "string",
                    "example": "${input.buildNumber} != '100'",
                    "description": "The Task is executed only if this field evaluates to true."
                },
                "tags": {
                    "type": "array",
                    "example": [
                        {
                            "key": "env",
                            "value": "dev"
                        }
                    ],
                    "description": "A set of tag keys and optional values that were set on on the resource.",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "example": "jenkins",
                    "description": "Type of the Task."
                }
            },
            "title": "Task",
            "description": "Represents the individual Tasks in a Pipeline."
        },
        "TaskExecution": {
            "type": "object",
            "required": [
                "name"
            ],
            "discriminator": "Contains Task Execution details.",
            "properties": {
                "_durationInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "Execution duration of the Task Execution (in micros)."
                },
                "_endTime": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "End time of the Task Execution (in micros).."
                },
                "_startTime": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "Start time of the Task Execution (in micros).."
                },
                "endpoints": {
                    "type": "object",
                    "description": "Endpoints that the Task refers to.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "failureMessage": {
                    "type": "string",
                    "description": "Failure message associated with a 'FAILED' task."
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c~0.0",
                    "description": "The id of this Task."
                },
                "ignoreFailure": {
                    "type": "boolean",
                    "example": true,
                    "description": "Ignores the failure of the Task execution if set to true, and continues with the Pipeline execution."
                },
                "input": {
                    "type": "object",
                    "example": [
                        {
                            "ip": "10.5.23.84",
                            "script": "testScript.sh"
                        }
                    ],
                    "description": "Map representing the Input properties for the Task."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier For the Task."
                },
                "notifications": {
                    "type": "array",
                    "description": "List of configured Notifications for Task Events.",
                    "items": {
                        "$ref": "#/definitions/Notification"
                    }
                },
                "output": {
                    "type": "object",
                    "example": [
                        {
                            "deployedMachineIP": "10.108.35.54",
                            "result": "true"
                        }
                    ],
                    "description": "Map representing the Output properties for the Task."
                },
                "preCondition": {
                    "type": "string",
                    "example": "${input.buildNumber} != '100'",
                    "description": "The Task is executed only if this field evaluates to true."
                },
                "rollbackConfiguration": {
                    "description": "Rollback configuration for the Task.",
                    "$ref": "#/definitions/RollbackConfiguration"
                },
                "rollbackResponse": {
                    "description": "Rollback response for the Task if it is rolled back.",
                    "$ref": "#/definitions/RollbackResponse"
                },
                "status": {
                    "type": "string",
                    "example": "COMPLETED",
                    "description": "Execution status of the Task Execution.",
                    "enum": [
                        "NOT_STARTED",
                        "STARTED",
                        "RUNNING",
                        "CANCELING",
                        "WAITING",
                        "RESUMING",
                        "PAUSING",
                        "PAUSED",
                        "CANCELED",
                        "COMPLETED",
                        "FAILED",
                        "SKIPPED",
                        "QUEUED",
                        "FAILED_CONTINUE",
                        "ROLLING_BACK",
                        "ROLLBACK_FAILED",
                        "PREPARING_WORKSPACE",
                        "ROLLBACK_COMPLETED"
                    ]
                },
                "statusMessage": {
                    "type": "string",
                    "example": "Executing Task0",
                    "description": "Execution status message of the Task Execution."
                },
                "type": {
                    "type": "string",
                    "example": "jenkins",
                    "description": "Type of the Task."
                }
            },
            "title": "TaskExecution",
            "description": "Contains Task Execution details."
        },
        "TileExecutorResponse": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "integer",
                    "format": "int64",
                    "description": "time taken for the Tile execution to finish."
                },
                "output": {
                    "type": "object",
                    "description": "Output properties from the Tile execution."
                },
                "status": {
                    "type": "string",
                    "example": "COMPLETED",
                    "description": "Status of the Tile execution.",
                    "enum": [
                        "CREATED",
                        "STARTED",
                        "PAUSED",
                        "CANCELED",
                        "COMPLETED",
                        "FAILED"
                    ]
                },
                "statusMessage": {
                    "type": "string",
                    "example": "Failed to connect to jenkins server endpoint",
                    "description": "Status message of the Tile execution."
                }
            },
            "title": "TileExecutorResponse"
        },
        "TileInfo": {
            "type": "object",
            "discriminator": "Contains information about a Tile.",
            "properties": {
                "displayName": {
                    "type": "string",
                    "example": "Kubernetes",
                    "description": "Tile name."
                },
                "inputProperties": {
                    "type": "object",
                    "example": {
                        "cloudProxyId": {
                            "type": "String",
                            "description": "",
                            "mandatory": false
                        },
                        "fingerprint": {
                            "type": "String",
                            "description": "",
                            "mandatory": false
                        }
                    },
                    "description": "Task input properties.",
                    "additionalProperties": {
                        "$ref": "#/definitions/PropertyMetaData"
                    }
                },
                "outputProperties": {
                    "type": "object",
                    "example": {
                        "isFailed": {
                            "type": "String",
                            "description": "",
                            "mandatory": false
                        },
                        "buildUrlId": {
                            "type": "String",
                            "description": "",
                            "mandatory": false
                        }
                    },
                    "description": "Task output properties.",
                    "additionalProperties": {
                        "$ref": "#/definitions/PropertyMetaData"
                    }
                },
                "tileId": {
                    "type": "string",
                    "example": "k8s",
                    "description": "Unique Id associated with the tile."
                }
            },
            "title": "TileInfo",
            "description": "Contains information about a Tile."
        },
        "Tiles": {
            "type": "object",
            "discriminator": "A list of Tile instances.",
            "properties": {
                "tiles": {
                    "type": "array",
                    "description": "List of Tiles.",
                    "items": {
                        "$ref": "#/definitions/TileInfo"
                    }
                }
            },
            "title": "Tiles",
            "description": "A list of Tile instances."
        },
        "URI": {
            "type": "object",
            "properties": {
                "absolute": {
                    "type": "boolean"
                },
                "authority": {
                    "type": "string"
                },
                "fragment": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "opaque": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "format": "int32"
                },
                "query": {
                    "type": "string"
                },
                "rawAuthority": {
                    "type": "string"
                },
                "rawFragment": {
                    "type": "string"
                },
                "rawPath": {
                    "type": "string"
                },
                "rawQuery": {
                    "type": "string"
                },
                "rawSchemeSpecificPart": {
                    "type": "string"
                },
                "rawUserInfo": {
                    "type": "string"
                },
                "scheme": {
                    "type": "string"
                },
                "schemeSpecificPart": {
                    "type": "string"
                },
                "userInfo": {
                    "type": "string"
                }
            },
            "title": "URI"
        },
        "UserOpResource": {
            "type": "object",
            "properties": {
                "approverGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "approvers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cancelPreviousPendingUserOp": {
                    "type": "boolean"
                },
                "changeLog": {
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "executionId": {
                    "type": "string"
                },
                "executionIndex": {
                    "type": "integer",
                    "format": "int64"
                },
                "expiration": {
                    "type": "integer",
                    "format": "int32"
                },
                "expirationInDays": {
                    "type": "integer",
                    "format": "int32"
                },
                "expirationInSeconds": {
                    "type": "integer",
                    "format": "int64"
                },
                "expirationUnit": {
                    "type": "string",
                    "enum": [
                        "MINUTES",
                        "HOURS",
                        "DAYS"
                    ]
                },
                "expiresOnInMicros": {
                    "type": "integer",
                    "format": "int64"
                },
                "id": {
                    "type": "string"
                },
                "index": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                },
                "pipeline": {
                    "type": "string"
                },
                "pipelineId": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "requestedBy": {
                    "type": "string"
                },
                "requestedOnInMicros": {
                    "type": "integer",
                    "format": "int64"
                },
                "respondedBy": {
                    "type": "string"
                },
                "respondedByEmail": {
                    "type": "string"
                },
                "respondedOnInMicros": {
                    "type": "integer",
                    "format": "int64"
                },
                "responderRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "responderToken": {
                    "type": "string"
                },
                "resumeCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "sendemail": {
                    "type": "boolean"
                },
                "stageKey": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "ACTIVE",
                        "APPROVED",
                        "CANCELED",
                        "EXPIRED",
                        "REJECTED"
                    ]
                },
                "summary": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "taskExecutionId": {
                    "type": "string"
                },
                "taskKey": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "updatedBy": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "title": "UserOpResource"
        },
        "UserOpResponse": {
            "type": "object",
            "discriminator": "User operation response.",
            "properties": {
                "cancelPreviousPendingUserOp": {
                    "type": "boolean",
                    "example": true,
                    "description": "This property tells whether to cancel previous pending user operations for this pipeline."
                },
                "responseMessage": {
                    "type": "string",
                    "example": "Approved on Monday.",
                    "description": "The response message which the responder would like to give."
                },
                "status": {
                    "type": "string",
                    "example": "Approved",
                    "description": "The status of this entity."
                }
            },
            "title": "UserOpResponse",
            "description": "User operation response."
        },
        "UserOperation": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "UserOperation details.",
            "properties": {
                "_createTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds"
                },
                "_createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdBy' field"
                },
                "_expiresOnInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1569216876209000,
                    "description": "The time in micros when it would expire."
                },
                "_link": {
                    "type": "string",
                    "example": "/codestream/api/<prefix>/8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "Partial URL that provides details of the resource."
                },
                "_projectId": {
                    "type": "string",
                    "example": "abcd-abcd-abcd",
                    "description": "Contains project id of the entity"
                },
                "_requestedOnInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568957676209000,
                    "description": "The time in micros when the request was made."
                },
                "_updateTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds"
                },
                "_updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedBy' field"
                },
                "approvers": {
                    "type": "array",
                    "example": "exampleUser@vmware.com",
                    "description": "The list of approver emails who can approve it.",
                    "items": {
                        "type": "string"
                    }
                },
                "cancelPreviousPendingUserOp": {
                    "type": "boolean",
                    "example": true,
                    "description": "The flag to determine whether to cancel previous pending user op of the pipeline."
                },
                "createdAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was created. The date is in ISO 8601 with time zone"
                },
                "createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that created this entity"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "endpoint": {
                    "type": "string",
                    "example": "My-email-endpoint",
                    "description": "The email Endpoint to be used if the sendemail is set to true."
                },
                "executionId": {
                    "type": "string",
                    "example": "19e2d2c3-41b6-4bc0-9f27-b3f935d25366",
                    "description": "The Execution id of the Pipeline Execution consisting of this task."
                },
                "executionIndex": {
                    "type": "integer",
                    "format": "int64",
                    "example": 8,
                    "description": "The index of the Pipeline Execution in which the entity is present."
                },
                "executionLink": {
                    "type": "string",
                    "example": "/codestream/api/executions/c1c08fc4-0bef-46fa-b5d2-c8aa10d18f6e",
                    "description": "The Execution link of the Pipeline Execution consisting of this task."
                },
                "expiration": {
                    "type": "integer",
                    "format": "int32",
                    "example": 3,
                    "description": "The time after which this entity would expire based on expirationUnit."
                },
                "expirationInDays": {
                    "type": "integer",
                    "format": "int32",
                    "example": 3,
                    "description": "The time in days after which this entity would expire."
                },
                "expirationUnit": {
                    "type": "string",
                    "example": "DAYS",
                    "description": "The time unit after which this entity would expire."
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "The id of this resource."
                },
                "index": {
                    "type": "string",
                    "example": "45b4d8",
                    "description": "The index of the entity."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "pipelineId": {
                    "type": "string",
                    "example": "6f6b006b-7fec-4684-9200-21a4a782c82b",
                    "description": "The id of the Pipeline consisting of this task."
                },
                "pipelineName": {
                    "type": "string",
                    "example": "My-Pipeline",
                    "description": "The name of the Pipeline this task is configured in."
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "requestedBy": {
                    "type": "string",
                    "example": "fritz",
                    "description": "The user who requested this."
                },
                "respondedBy": {
                    "type": "string",
                    "example": "fritz",
                    "description": "The user who responded to this approval."
                },
                "responseMessage": {
                    "type": "string",
                    "example": "Approved on Monday",
                    "description": "The response message which the responder would like to give."
                },
                "sendemail": {
                    "type": "boolean",
                    "example": true,
                    "description": "The flag to determine if an email has to be sent."
                },
                "status": {
                    "type": "string",
                    "example": "Approved",
                    "description": "The status of this entity."
                },
                "summary": {
                    "type": "string",
                    "example": "To be approved only by admin",
                    "description": "The summary of this entity."
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was last updated. The date is in ISO 8601 with time zone."
                },
                "updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that last updated this entity"
                },
                "version": {
                    "type": "string",
                    "example": "v1",
                    "description": "Version of the resource."
                }
            },
            "title": "UserOperation",
            "description": "UserOperation details."
        },
        "UserOperations": {
            "type": "object",
            "discriminator": "UserOperations details.",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources within the current page."
                },
                "documents": {
                    "type": "object",
                    "example": "\"documents\": {\n        \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\": {\n            \"project\": \"test-project\",\n            \"id\": \"b80254a7-fcff-4918-ad88-501d08096337\",\n            \"name\": \"test\",\n            \"updatedAt\": \"2019-09-23 13:48:54.483\",\n            \"tags\": [],\n            \"_link\": \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\",\n            \"_updateTimeInMicros\": 1569226734483000,\n            \"_createTimeInMicros\": 1569226720988000,\n            \"index\": 1,\n            \"notifications\": [],\n            \"comments\": \"\",\n            \"starred\": {},\n            \"input\": {},\n            \"output\": {},\n            \"stageOrder\": [],\n            \"stages\": {},\n            \"status\": \"COMPLETED\",\n            \"statusMessage\": \"Execution Completed.\",\n            \"_durationInMicros\": 13495000,\n            \"_requestTimeInMicros\": 1569226720988000,\n            \"_executedBy\": \"exampleuser\",\n            \"_pipelineLink\": \"/codestream/api/pipelines/b49898f9-d42d-4f19-8bda-e77a373c41b9\",\n            \"_nested\": false,\n            \"_rollback\": false,\n            \"_inputMeta\": {},\n            \"_outputMeta\": {},\n            \"workspaceResults\": []\n        }\n    }",
                    "description": "Details of the queried resources.",
                    "additionalProperties": {
                        "$ref": "#/definitions/UserOperation"
                    }
                },
                "links": {
                    "type": "array",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Partial URLs representing the links to the queried resources.",
                    "items": {
                        "type": "string"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources across all pages."
                }
            },
            "title": "UserOperations",
            "description": "UserOperations details."
        },
        "ValidationMessage": {
            "type": "object",
            "discriminator": "Model used for validation responses.",
            "properties": {
                "containerName": {
                    "type": "string",
                    "example": "vrcsPipeline.DEV for a stage",
                    "description": "Name of pipeline / stage / name in the hierarchy where they belong to."
                },
                "fieldName": {
                    "type": "string",
                    "example": "inputProperties.jobName.value",
                    "description": "Field in the input which is causing validation to fail in the deeper JSON."
                },
                "level": {
                    "type": "string",
                    "example": "SEVERE/WARNING/INFO",
                    "description": "Message level."
                },
                "message": {
                    "type": "string",
                    "example": "Validation successful",
                    "description": "Validation message."
                }
            },
            "title": "ValidationMessage",
            "description": "Model used for validation responses."
        },
        "ValidatorResponse": {
            "type": "object",
            "discriminator": "Model used for validation responses.",
            "properties": {
                "classType": {
                    "type": "string",
                    "example": "Pipeline",
                    "description": "Class which will be validated."
                },
                "message": {
                    "example": "Validation Successful",
                    "description": "Contains details about the validation.",
                    "$ref": "#/definitions/ValidationMessage"
                },
                "success": {
                    "type": "boolean",
                    "example": false,
                    "description": "Indicates whether validation was successful or not."
                }
            },
            "title": "ValidatorResponse",
            "description": "Model used for validation responses."
        },
        "Variable": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "discriminator": "A Variable is used to store re-usable/sensitive strings within Code Stream in an encrypted format so as to be able to consume in other areas like Endpoint, Pipeline, Task or Stage etc.",
            "properties": {
                "_createTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds"
                },
                "_createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'createdBy' field"
                },
                "_link": {
                    "type": "string",
                    "example": "/codestream/api/<prefix>/8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "Partial URL that provides details of the resource."
                },
                "_projectId": {
                    "type": "string",
                    "example": "abcd-abcd-abcd",
                    "description": "Contains project id of the entity"
                },
                "_updateTimeInMicros": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1568625938000000,
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds"
                },
                "_updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "This field is provided for backward compatibility. Contains the same value as the 'updatedBy' field"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was created. The date is in ISO 8601 with time zone"
                },
                "createdBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that created this entity"
                },
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "id": {
                    "type": "string",
                    "example": "8365ef3b-8bf3-48aa-bd5d-7113fcff827c",
                    "description": "The id of this resource."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "type": {
                    "type": "string",
                    "example": "REGULAR",
                    "description": "The type of this Variable. Ex: REGULAR / SECRET / RESTRICTED"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-09-16 09:25:38.065065+00",
                    "description": "Date when the entity was last updated. The date is in ISO 8601 with time zone."
                },
                "updatedBy": {
                    "type": "string",
                    "example": "exampleuser",
                    "description": "The user that last updated this entity"
                },
                "value": {
                    "type": "object",
                    "example": "my-value",
                    "description": "The value for this Variable."
                },
                "version": {
                    "type": "string",
                    "example": "v1",
                    "description": "Version of the resource."
                }
            },
            "title": "Variable",
            "description": "A Variable is used to store re-usable/sensitive strings within Code Stream in an encrypted format so as to be able to consume in other areas like Endpoint, Pipeline, Task or Stage etc."
        },
        "VariableSpec": {
            "type": "object",
            "required": [
                "description",
                "name",
                "type",
                "value"
            ],
            "discriminator": "A Variable is used to store re-usable/sensitive strings within Code Stream in an encrypted format so as to be able to consume in other areas like Endpoint, Pipeline, Task or Stage etc.",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A human-friendly description."
                },
                "name": {
                    "type": "string",
                    "example": "My-Name",
                    "description": "A human-friendly name used as an identifier in APIs that support this option"
                },
                "project": {
                    "type": "string",
                    "example": "My-Project",
                    "description": "The project this entity belongs to."
                },
                "type": {
                    "type": "string",
                    "example": "REGULAR",
                    "description": "The type of this Variable. Ex: REGULAR / SECRET / RESTRICTED"
                },
                "value": {
                    "type": "string",
                    "example": "my-value",
                    "description": "The value for this Variable."
                }
            },
            "title": "VariableSpec",
            "description": "A Variable is used to store re-usable/sensitive strings within Code Stream in an encrypted format so as to be able to consume in other areas like Endpoint, Pipeline, Task or Stage etc."
        },
        "Variables": {
            "type": "object",
            "discriminator": "A list of Variable instances",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources within the current page."
                },
                "documents": {
                    "type": "object",
                    "example": "\"documents\": {\n        \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\": {\n            \"project\": \"test-project\",\n            \"id\": \"b80254a7-fcff-4918-ad88-501d08096337\",\n            \"name\": \"test\",\n            \"updatedAt\": \"2019-09-23 13:48:54.483\",\n            \"tags\": [],\n            \"_link\": \"/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337\",\n            \"_updateTimeInMicros\": 1569226734483000,\n            \"_createTimeInMicros\": 1569226720988000,\n            \"index\": 1,\n            \"notifications\": [],\n            \"comments\": \"\",\n            \"starred\": {},\n            \"input\": {},\n            \"output\": {},\n            \"stageOrder\": [],\n            \"stages\": {},\n            \"status\": \"COMPLETED\",\n            \"statusMessage\": \"Execution Completed.\",\n            \"_durationInMicros\": 13495000,\n            \"_requestTimeInMicros\": 1569226720988000,\n            \"_executedBy\": \"exampleuser\",\n            \"_pipelineLink\": \"/codestream/api/pipelines/b49898f9-d42d-4f19-8bda-e77a373c41b9\",\n            \"_nested\": false,\n            \"_rollback\": false,\n            \"_inputMeta\": {},\n            \"_outputMeta\": {},\n            \"workspaceResults\": []\n        }\n    }",
                    "description": "Details of the queried resources.",
                    "additionalProperties": {
                        "$ref": "#/definitions/Variable"
                    }
                },
                "links": {
                    "type": "array",
                    "example": "/codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337",
                    "description": "Partial URLs representing the links to the queried resources.",
                    "items": {
                        "type": "string"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Number of resources across all pages."
                }
            },
            "title": "Variables",
            "description": "A list of Variable instances"
        },
        "VersionRequest": {
            "type": "object",
            "discriminator": "Request object for version of a Custom Integration.",
            "properties": {
                "changeLog": {
                    "type": "string",
                    "example": "Modified API signatures.",
                    "description": "Changelog describing the changes between this and previous versions."
                },
                "description": {
                    "type": "string",
                    "example": "This is the latest version.",
                    "description": "Description of the version."
                },
                "version": {
                    "type": "string",
                    "example": "v1",
                    "description": "Version of the Custom Integration."
                }
            },
            "title": "VersionRequest",
            "description": "Request object for version of a Custom Integration."
        },
        "WebhookEventConfig": {
            "type": "object",
            "discriminator": "Represents a Webhook Event configuration.",
            "properties": {
                "action": {
                    "type": "string",
                    "example": "POST/PUT/PATCH",
                    "description": "Action Type."
                },
                "cloudProxyId": {
                    "type": "string",
                    "example": {
                        "text": "executionId",
                        "username": "codestream@vmware.com"
                    },
                    "description": "cloudProxyId configured in the webhook."
                },
                "endpoint": {
                    "type": "string"
                },
                "event": {
                    "type": "string",
                    "enum": [
                        "SUCCESS",
                        "FAILURE",
                        "WAITING",
                        "CANCELED",
                        "STARTED"
                    ]
                },
                "headers": {
                    "type": "object",
                    "example": "content-type: application/json",
                    "description": "The headers required to perform HTTP action on the provided url.",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "payload": {
                    "type": "string",
                    "example": {
                        "text": "executionId",
                        "username": "codestream@vmware.com"
                    },
                    "description": "Payload to be sent to the webhook."
                },
                "stage": {
                    "type": "string"
                },
                "task": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "WebhookURL to send payload."
                }
            },
            "title": "WebhookEventConfig",
            "description": "Represents a Webhook Event configuration."
        },
        "Workspace": {
            "type": "object",
            "discriminator": "Model which contains details about container and host for executing continuous integration tasks.",
            "properties": {
                "autoCloneForTrigger": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates that git clone will be performed automatically."
                },
                "cache": {
                    "type": "array",
                    "example": [
                        "/root/.m2",
                        "/temp/"
                    ],
                    "description": "List of paths to store artifacts and logs.",
                    "items": {
                        "type": "string"
                    }
                },
                "customProperties": {
                    "type": "object",
                    "example": {
                        "namespace": "builds"
                    },
                    "description": "List of custom properties",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "Name of the endpoint."
                },
                "environmentVariables": {
                    "type": "object",
                    "example": {
                        "foo": "bar",
                        "property_one": "value_one",
                        "property_two": "value_two"
                    },
                    "description": "List of environment variables and their values",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string",
                    "example": "fedora:latest",
                    "description": "Image to create CI container."
                },
                "path": {
                    "type": "string",
                    "example": "/usr/administrator/",
                    "description": "Working directory for executing commands."
                },
                "registry": {
                    "type": "string",
                    "example": "Docker Trusted Registry",
                    "description": "Name of the docker registry."
                },
                "type": {
                    "type": "string",
                    "example": "DOCKER|K8S",
                    "description": "Type of the workspace."
                }
            },
            "title": "Workspace",
            "description": "Model which contains details about container and host for executing continuous integration tasks."
        },
        "WorkspaceResult": {
            "type": "object",
            "properties": {
                "logs": {
                    "type": "array",
                    "description": "Logs for the executing step.",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "COMPLETED",
                    "description": "Status of the Git clone/creating a container for the Workspace."
                },
                "step": {
                    "type": "string",
                    "example": "GIT_CLONE",
                    "description": "The current step for Git clone/creating a container for the Workspace."
                }
            },
            "title": "WorkspaceResult"
        }
    }
}
