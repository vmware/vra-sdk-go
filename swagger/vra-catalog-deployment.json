{
    "swagger": "2.0",
    "info": {
        "description": "A multi-cloud API for Cloud Automation Services",
        "version": "2020-08-25",
        "title": "VMware Service Broker API"
    },
    "host": "api.mgmt.cloud.vmware.com",
    "basePath": "/",
    "tags": [
        {
            "name": "Applications",
            "description": "Application Controller"
        },
        {
            "name": "Catalog Admin Items",
            "description": "Catalog Admin Items API"
        },
        {
            "name": "Catalog Entitlements",
            "description": "Entitlements API"
        },
        {
            "name": "Catalog Item Types",
            "description": "Catalog Item Type API"
        },
        {
            "name": "Catalog Items",
            "description": "Catalog Items API"
        },
        {
            "name": "Catalog Sources",
            "description": "Catalog Sources API"
        },
        {
            "name": "Deployment Actions",
            "description": "Deployment Resource Action Controller"
        },
        {
            "name": "Deployments",
            "description": "Deployment Controller"
        },
        {
            "name": "Icons",
            "description": "Icons API"
        },
        {
            "name": "Notification Scenario Configuration",
            "description": "Notification Scenario Configuration Controller"
        },
        {
            "name": "Perspective Sync",
            "description": "Perspective Sync Controller"
        },
        {
            "name": "Policies",
            "description": "Policy API"
        },
        {
            "name": "Policy Decisions",
            "description": "Policy Decision Controller"
        },
        {
            "name": "Policy Types",
            "description": "Policy Type API"
        },
        {
            "name": "Pricing Card Assignments",
            "description": "Metering Policy Assignment Controller"
        },
        {
            "name": "Pricing Cards",
            "description": "Metering Policy Controller"
        },
        {
            "name": "Requests",
            "description": "Deployment Request Controller"
        },
        {
            "name": "Resource Actions",
            "description": "Resource Action Controller"
        },
        {
            "name": "Resource types",
            "description": "Resource Type Controller"
        },
        {
            "name": "Resources",
            "description": "Resource Controller"
        }
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/application/api/applications": {
            "get": {
                "tags": [
                    "Applications"
                ],
                "summary": "Fetch all applications.",
                "description": "Returns a paginated list of applications. Applications with more than 100 resources is not supported.",
                "operationId": "getApplicationsUsingGET_2",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "createdAt",
                        "in": "query",
                        "description": "Comma-separated start and end dates where start date or end date is optional (e.g. [2020-12-01T08:00:00.000Z,2020-12-11T23:59:00.000Z], [2020-11-03T08:00:00.000Z,], [,2020-11-08T08:00:00.000Z]",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "The expanded details of the requested comma separated objects. 'resources' option returns resources with all properties.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "resources"
                            ]
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false,
                        "enum": [
                            "resources"
                        ]
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "A comma-separated list. Only applications with these IDs will be included in the results.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "lastUpdatedAt",
                        "in": "query",
                        "description": "Comma-separated start and end dates where start date or end date is optional (e.g. [2020-12-01T08:00:00.000Z,2020-12-11T23:59:00.000Z], [2020-11-03T08:00:00.000Z,], [,2020-11-08T08:00:00.000Z]",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Results must have exactly this name.",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "resourceTypes",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these resourceType Names.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Given string should either be part of a searchable field in a application or one of application's resources.",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these tags",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfApplication"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/application/api/applications/{appId}": {
            "get": {
                "tags": [
                    "Applications"
                ],
                "summary": "Fetch a specific application.",
                "description": "Returns the application with the supplied ID.",
                "operationId": "getApplciationByIdUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "appId",
                        "in": "path",
                        "description": "Application ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "The expanded details of the requested comma separated objects. 'resources' option returns resources with all properties.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "resources"
                            ]
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false,
                        "enum": [
                            "resources"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Application"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/admin/entitlements": {
            "get": {
                "tags": [
                    "Catalog Entitlements"
                ],
                "summary": "Returns all entitlements filtered by projectId.",
                "description": "Returns all entitlements (filtered by projectId).",
                "operationId": "getEntitlementsUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "The project id for which to return .",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Entitlement"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Catalog Entitlements"
                ],
                "summary": "Create an entitlement.",
                "description": "Creates an entitlement for a given project.",
                "operationId": "createEntitlementUsingPOST_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "entitlement",
                        "description": "The entitlement to be created",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Entitlement"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Entitlement"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Entitlement"
                        }
                    },
                    "400": {
                        "description": "Catalog item or source cannot be entitled to the project"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Catalog item or catalog source not found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/admin/entitlements/{id}": {
            "delete": {
                "tags": [
                    "Catalog Entitlements"
                ],
                "summary": "Delete an entitlement.",
                "description": "Deletes the entitlement with the specified id.",
                "operationId": "deleteEntitlementUsingDELETE_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Entitlement id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/admin/items": {
            "get": {
                "tags": [
                    "Catalog Admin Items"
                ],
                "summary": "Fetch a list of catalog items.",
                "description": "Returns a paginated list of catalog items.",
                "operationId": "getCatalogItemsUsingGET_4",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Matches which can be requested within project with the given projectId",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Matches will have this string somewhere in their name or description.",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "sourceIds",
                        "in": "query",
                        "description": "A list of Content Source IDs. Results will be from one of these sources.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "description": "A list of Catalog Item Type IDs. Results will be one of these types.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfCatalogItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/admin/items/{id}": {
            "get": {
                "tags": [
                    "Catalog Admin Items"
                ],
                "summary": "Find a catalog item with specified id.",
                "description": "Returns the catalog item with the specified id.",
                "operationId": "getCatalogItemUsingGET_4",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Catalog item id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CatalogItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "Catalog Admin Items"
                ],
                "summary": "Set an icon or request limit to a catalog item.",
                "description": "Updates a catalog item with specified icon id or request limit.",
                "operationId": "updateCatalogItemUsingPATCH_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The unique id of item to update.",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "name": "patch",
                        "description": "The patch that apply to the item",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AdminCatalogItemPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/admin/sources": {
            "get": {
                "tags": [
                    "Catalog Sources"
                ],
                "summary": "Fetch catalog sources.",
                "description": "Returns a paginated list of catalog sources.",
                "operationId": "getPageUsingGET_2",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Find sources which contains items that can be requested in the given projectId",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Matches will have this string in their name or description.",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfCatalogSource"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Catalog Sources"
                ],
                "summary": "Create or update a catalog source. Creating or updating also imports (or re-imports) the associated catalog items.",
                "description": "Creates a new catalog source or updates an existing catalog source based on the request body and imports catalog items from it.",
                "operationId": "postUsingPOST_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "source",
                        "description": "The catalog source to be created",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CatalogSource"
                        }
                    },
                    {
                        "name": "validationOnly",
                        "in": "query",
                        "description": "If true, the source will not be created. It returns the number of items belonging to the source. The request will still return an error code if the source is invalid.",
                        "required": false,
                        "type": "boolean",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Validation is ok",
                        "schema": {
                            "$ref": "#/definitions/CatalogSource"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/CatalogSource"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/admin/sources/{sourceId}": {
            "get": {
                "tags": [
                    "Catalog Sources"
                ],
                "summary": "Fetch a specific catalog source for the given ID.",
                "description": "Returns the catalog source with the supplied ID.",
                "operationId": "getUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sourceId",
                        "in": "path",
                        "description": "Catalog source ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CatalogSource"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Catalog Sources"
                ],
                "summary": "Delete catalog source.",
                "description": "Deletes the catalog source with the supplied ID.",
                "operationId": "deleteUsingDELETE_4",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sourceId",
                        "in": "path",
                        "description": "Catalog source ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/items": {
            "get": {
                "tags": [
                    "Catalog Items"
                ],
                "summary": "Fetch a list of catalog items.",
                "description": "Returns a paginated list of catalog items.",
                "operationId": "getCatalogItemsUsingGET_5",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "expandProjects",
                        "in": "query",
                        "description": "Whether or not to return detailed project data for each result.",
                        "required": false,
                        "type": "boolean",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "projects",
                        "in": "query",
                        "description": "A list of project IDs. Results will belong to one of these projects.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Matches will have this string somewhere in their name or description.",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "description": "A list of Catalog Item Type IDs. Results will be one of these types.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfCatalogItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/items/{id}": {
            "get": {
                "tags": [
                    "Catalog Items"
                ],
                "summary": "Find a catalog item with specified ID.",
                "description": "Returns the catalog item with the specified ID.",
                "operationId": "getCatalogItemUsingGET_5",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "expandProjects",
                        "in": "query",
                        "description": "Retrieves the 'projects' field of the catalog item",
                        "required": false,
                        "type": "boolean",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Catalog item ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CatalogItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/items/{id}/request": {
            "post": {
                "tags": [
                    "Catalog Items"
                ],
                "summary": "Create deployments.",
                "description": "Creates deployments from a catalog item.",
                "operationId": "requestCatalogItemInstancesUsingPOST_1",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Catalog item ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "name": "request",
                        "description": "request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CatalogItemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CatalogItemRequestResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request - bad data."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden."
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/items/{id}/upfront-prices": {
            "post": {
                "tags": [
                    "Catalog Items"
                ],
                "summary": "Create a request to calculate upfront price for a given catalog item.",
                "description": "Returns upfront price response for a given catalog item.",
                "operationId": "submitUpfrontPriceRequestForCatalogItemUsingPOST_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Catalog Item ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "name": "request",
                        "description": "request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CatalogItemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CatalogItemUpfrontPriceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/items/{id}/upfront-prices/{upfrontPriceId}": {
            "get": {
                "tags": [
                    "Catalog Items"
                ],
                "summary": "Get a response with upfront prices for a given catalog item.",
                "description": "Returns upfront prices of a given catalog item.",
                "operationId": "getUpfrontPriceResponseForCatalogItemUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Catalog Item ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "upfrontPriceId",
                        "in": "path",
                        "description": "Upfront Price Request ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CatalogItemUpfrontPriceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/items/{id}/versions": {
            "get": {
                "tags": [
                    "Catalog Items"
                ],
                "summary": "Fetch a list of catalog items with versions.",
                "description": "Returns a paginated list of catalog item versions.",
                "operationId": "getVersionsUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Catalog Item ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Results page you want to retrieve (0..N)",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 0
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Number of records per page.",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 20
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfCatalogItemVersion"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/items/{id}/versions/{versionId}": {
            "get": {
                "tags": [
                    "Catalog Items"
                ],
                "summary": "Fetch detailed catalog item version.",
                "description": "Returns a detailed catalog item version.",
                "operationId": "getVersionByIdUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Catalog Item ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "versionId",
                        "in": "path",
                        "description": "Catalog Item Version ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CatalogItemVersion"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/types": {
            "get": {
                "tags": [
                    "Catalog Item Types"
                ],
                "summary": "Find all Catalog Item Types.",
                "description": "Returns a paginated list of all available Catalog Item Types.",
                "operationId": "getTypesUsingGET_4",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfCatalogItemType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/catalog/api/types/{id}": {
            "get": {
                "tags": [
                    "Catalog Item Types"
                ],
                "summary": "Fetch catalog item type associated with the specified ID.",
                "description": "Returns the Catalog Item Type with the specified ID.",
                "operationId": "getTypeByIdUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Catalog Type ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CatalogItemType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/deployments": {
            "get": {
                "tags": [
                    "Deployments"
                ],
                "summary": "Fetch all deployments.",
                "description": "Returns a paginated list of deployments.",
                "operationId": "getDeploymentsV3UsingGET",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "cloudAccounts",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these cloud accounts.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "cloudTypes",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these endpoint Types",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "createdAt",
                        "in": "query",
                        "description": "Comma-separated start and end dates where start date or end date is optional (e.g. [2020-12-01T08:00:00.000Z,2020-12-11T23:59:00.000Z], [2020-11-03T08:00:00.000Z,], [,2020-11-08T08:00:00.000Z]",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "deleted",
                        "in": "query",
                        "description": "Retrieves only soft-deleted deployments that have not yet been completely deleted.",
                        "required": false,
                        "type": "boolean",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "The expanded details of the requested comma separated objects. <br />'resources' option returns resources with summary properties.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "blueprint",
                                "catalog",
                                "lastRequest",
                                "project",
                                "resources"
                            ]
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false,
                        "enum": [
                            "blueprint",
                            "catalog",
                            "lastRequest",
                            "project",
                            "resources"
                        ]
                    },
                    {
                        "name": "expiresAt",
                        "in": "query",
                        "description": "Comma-separated start and end dates for the interval",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "lastRequestStatus",
                        "in": "query",
                        "description": "A comma-separated list of last request statuses. Allowed values are: ABORTED, APPROVAL_PENDING, APPROVAL_REJECTED, FAILED, INPROGRESS, PENDING and SUCCESSFUL. Results must be associated with one of these last request statuses.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "lastUpdatedAt",
                        "in": "query",
                        "description": "Comma-separated start and end dates where start date or end date is optional (e.g. [2020-12-01T08:00:00.000Z,2020-12-11T23:59:00.000Z], [2020-11-03T08:00:00.000Z,], [,2020-11-08T08:00:00.000Z]",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Results must have exactly this name.",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "ownedBy",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these owners",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "projects",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these project IDs.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "requestedBy",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these requesters",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "resourceTypes",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these resourceType Names.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Given string should either be part of a searchable field in a deployment or one of deployment's resources.",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these statuses.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these tags",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfDeployment"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/deployments/filters": {
            "get": {
                "tags": [
                    "Deployments"
                ],
                "summary": "Returns the Deployment filters in context of given user.",
                "operationId": "getDeploymentFiltersUsingGET_2",
                "parameters": [
                    {
                        "name": "ISO3Country",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ISO3Language",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "country",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "displayCountry",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "displayLanguage",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "displayName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "displayScript",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "displayVariant",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "script",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "unicodeLocaleAttributes",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "unicodeLocaleKeys",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "variant",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FilterSchema"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/deployments/filters/{filterId}": {
            "get": {
                "tags": [
                    "Deployments"
                ],
                "summary": "Returns the Deployment filter with the supplied ID.",
                "operationId": "getDeploymentFilterByIdUsingGET_2",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "filterId",
                        "in": "path",
                        "description": "Filter Id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search string for filters",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfFilterEntry"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/deployments/names": {
            "get": {
                "tags": [
                    "Deployments"
                ],
                "summary": "Check if a deployment exists.",
                "description": "Returns OK if a deployment with the supplied name exists.",
                "operationId": "checkDeploymentNameExistsUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Deployment name",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/deployments/names/{name}": {
            "get": {
                "tags": [
                    "Deployments"
                ],
                "summary": "Check if a deployment exists.",
                "description": "Returns OK if a deployment with the supplied name exists.",
                "operationId": "checkDeploymentNameUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Deployment name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": true
            }
        },
        "/deployment/api/deployments/{deploymentId}": {
            "get": {
                "tags": [
                    "Deployments"
                ],
                "summary": "Fetch a specific deployment.",
                "description": "Returns the deployment with the supplied ID.",
                "operationId": "getDeploymentByIdV3UsingGET",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deleted",
                        "in": "query",
                        "description": "Retrieves the deployment, includes soft-deleted deployments that have not yet been completely deleted.",
                        "required": false,
                        "type": "boolean",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "deploymentId",
                        "in": "path",
                        "description": "Deployment ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "The expanded details of the requested comma separated objects. <br /> 'resources' option returns resources with summary properties",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "blueprint",
                                "catalog",
                                "lastRequest",
                                "project",
                                "resources"
                            ]
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false,
                        "enum": [
                            "blueprint",
                            "catalog",
                            "lastRequest",
                            "project",
                            "resources"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Deployment"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Deployments"
                ],
                "summary": "Delete a deployment. Effectively triggers a Delete Day2 operation",
                "description": "Deletes the deployment with the supplied ID, cleans up the associated resources from the Cloud Provider.",
                "operationId": "deleteDeploymentUsingDELETE_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deploymentId",
                        "in": "path",
                        "description": "Deployment ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Request"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "Deployments"
                ],
                "summary": "Update deployment.",
                "description": "Updates the deployment with the supplied ID.",
                "operationId": "patchDeploymentUsingPATCH_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deploymentId",
                        "in": "path",
                        "description": "Deployment ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "name": "update",
                        "description": "A set of fields to overwrite the corresponding fields in the deployment",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DeploymentUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Deployment"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/deployments/{deploymentId}/actions": {
            "get": {
                "tags": [
                    "Deployment Actions"
                ],
                "summary": "Fetch deployment available actions.",
                "description": "Returns the complete list of available actions that can be performed on a given deployment.",
                "operationId": "getDeploymentActionsUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deploymentId",
                        "in": "path",
                        "description": "Deployment ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceAction"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/deployments/{deploymentId}/actions/{actionId}": {
            "get": {
                "tags": [
                    "Deployment Actions"
                ],
                "summary": "Fetch deployment action.",
                "description": "Returns an action for the deployment specified by its Deployment ID and Action ID.",
                "operationId": "getDeploymentActionUsingGET_2",
                "parameters": [
                    {
                        "name": "actionId",
                        "in": "path",
                        "description": "Action ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deploymentId",
                        "in": "path",
                        "description": "Deployment ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceAction"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/deployments/{deploymentId}/expense-history": {
            "get": {
                "tags": [
                    "Deployments"
                ],
                "summary": "Fetch a specific deployment's expense history.",
                "description": "Returns the deployment expense history with the supplied ID.",
                "operationId": "getDeploymentExpenseHistoryByIdUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deploymentId",
                        "in": "path",
                        "description": "Deployment ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "The timestamp from when history is requested. Should be of ISO_INSTANT format.",
                        "required": false,
                        "type": "string",
                        "format": "date-time",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "interval",
                        "in": "query",
                        "description": "The interval of the expense history. Should be one of daily, weekly or monthly.",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "The timestamp until when history is requested. Should be of ISO_INSTANT format.",
                        "required": false,
                        "type": "string",
                        "format": "date-time",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DeploymentExpenseHistory"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/deployments/{deploymentId}/requests": {
            "get": {
                "tags": [
                    "Requests"
                ],
                "summary": "Fetch deployment requests.",
                "description": "Returns the requests for the deployment.",
                "operationId": "getDeploymentRequestsUsingGET_2",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deleted",
                        "in": "query",
                        "description": "Retrieves the soft-deleted requests that have not yet been completely deleted.",
                        "required": false,
                        "type": "boolean",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "deploymentId",
                        "in": "path",
                        "description": "Deployment ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "inprogressRequests",
                        "in": "query",
                        "description": "Retrieves the requests that are currently in-progress for a deployment. Incase of a false value the param is ignored.",
                        "required": false,
                        "type": "boolean",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Deployment Actions"
                ],
                "summary": "Deployment action request.",
                "description": "Submit a deployment action request",
                "operationId": "submitDeploymentActionRequestUsingPOST_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "actionRequest",
                        "description": "actionRequest",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceActionRequest"
                        }
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deploymentId",
                        "in": "path",
                        "description": "Deployment ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Request"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/deployments/{deploymentId}/resources": {
            "get": {
                "tags": [
                    "Deployments"
                ],
                "summary": "Fetch resources associated with a deployment.",
                "description": "Returns a paginated list of resources corresponding to the deployment with the supplied ID.",
                "operationId": "getDeploymentResourcesUsingGET_2",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deploymentId",
                        "in": "path",
                        "description": "Deployment ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "The expanded details of the requested comma separated objects. Ex. currentRequest",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "currentRequest"
                            ]
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false,
                        "enum": [
                            "currentRequest"
                        ]
                    },
                    {
                        "name": "names",
                        "in": "query",
                        "description": "Results must have exactly these resource names.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "resourceTypes",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these resourceType Names.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these tags",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfDeploymentResource"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/deployments/{deploymentId}/resources/{resourceId}": {
            "get": {
                "tags": [
                    "Deployments"
                ],
                "summary": "Fetch resource associated with a deployment.",
                "description": "Returns the resource with the specified ID that is correlated with the supplied deployment.",
                "operationId": "getResourceByIdUsingGET_4",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deploymentId",
                        "in": "path",
                        "description": "Deployment ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "The expanded details of the requested comma separated objects. Ex. currentRequest",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "currentRequest"
                            ]
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false,
                        "enum": [
                            "currentRequest"
                        ]
                    },
                    {
                        "name": "resourceId",
                        "in": "path",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DeploymentResource"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Deployments"
                ],
                "summary": "Delete resource associated with a deployment. Effectively triggers a Delete Day2 operation.",
                "description": "Deletes the resource with the specified ID and attempts to delete resource from the Cloud Provider.",
                "operationId": "deleteResourceUsingDELETE_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deploymentId",
                        "in": "path",
                        "description": "Deployment ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "resourceId",
                        "in": "path",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Request"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/deployments/{deploymentId}/resources/{resourceId}/actions": {
            "get": {
                "tags": [
                    "Deployment Actions"
                ],
                "summary": "Fetch available resource actions.",
                "description": "Returns the complete list of available actions that can be performed on a given resource.",
                "operationId": "getResourceActionsUsingGET_4",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deploymentId",
                        "in": "path",
                        "description": "Deployment ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "resourceId",
                        "in": "path",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceAction"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/deployments/{deploymentId}/resources/{resourceId}/actions/{actionId}": {
            "get": {
                "tags": [
                    "Deployment Actions"
                ],
                "summary": "Fetch resource action.",
                "description": "Returns an action for the resource specified by its Resource ID and Action ID.",
                "operationId": "getResourceActionUsingGET_4",
                "parameters": [
                    {
                        "name": "actionId",
                        "in": "path",
                        "description": "Action ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deploymentId",
                        "in": "path",
                        "description": "Deployment ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "resourceId",
                        "in": "path",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceAction"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/deployments/{deploymentId}/resources/{resourceId}/requests": {
            "post": {
                "tags": [
                    "Deployment Actions"
                ],
                "summary": "Resource action request.",
                "description": "Submit a resource action request.",
                "operationId": "submitResourceActionRequestUsingPOST_4",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "actionRequest",
                        "description": "actionRequest",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceActionRequest"
                        }
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deploymentId",
                        "in": "path",
                        "description": "Deployment ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "resourceId",
                        "in": "path",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Request"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/projects/{projectId}/deployment-count": {
            "get": {
                "tags": [
                    "Deployments"
                ],
                "summary": "Returns a count of deployments using the project.",
                "operationId": "getDeploymentsForProjectUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "Project ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Page"
                        }
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/requests/{requestId}": {
            "get": {
                "tags": [
                    "Requests"
                ],
                "summary": "Get the Request.",
                "description": "Returns the request with the given ID.",
                "operationId": "getRequestUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "requestId",
                        "in": "path",
                        "description": "Request ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Request"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Requests"
                ],
                "summary": "Submit action on requests. Allowable values: cancel, dismiss. ",
                "description": "Cancel can be submitted on In-progress requests and Dismiss can be submitted on Failed requests.",
                "operationId": "actionDeploymentRequestUsingPOST_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "action",
                        "in": "query",
                        "description": "action",
                        "required": true,
                        "type": "string",
                        "allowEmptyValue": false,
                        "enum": [
                            "cancel",
                            "dismiss"
                        ]
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "requestId",
                        "in": "path",
                        "description": "requestId",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/requests/{requestId}/events": {
            "get": {
                "tags": [
                    "Requests"
                ],
                "summary": "Fetch Request events.",
                "description": "Returns all the events for a request.",
                "operationId": "getRequestEventsUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "requestId",
                        "in": "path",
                        "description": "Request ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/requests/{requestId}/events/{eventId}/logs": {
            "get": {
                "tags": [
                    "Requests"
                ],
                "summary": "Fetch Event logs.",
                "description": "Returns the logs for an event.",
                "operationId": "getEventLogsUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "eventId",
                        "in": "path",
                        "description": "Event ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "requestId",
                        "in": "path",
                        "description": "Request ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "sinceRow",
                        "in": "query",
                        "description": "A positive row number from which to show logs.",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SliceOfEventLog"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/requests/{requestId}/events/{eventId}/logs/download": {
            "get": {
                "tags": [
                    "Requests"
                ],
                "summary": "Fetch Event logs content as a file.",
                "description": "Returns the log file for an event.",
                "operationId": "getEventLogsContentUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "eventId",
                        "in": "path",
                        "description": "Event ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "requestId",
                        "in": "path",
                        "description": "Request ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/StreamingResponseBody"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/resource-types": {
            "get": {
                "tags": [
                    "Resource types"
                ],
                "summary": "Fetch all Resource Types.",
                "description": "Returns a paginated list of Resource Types.",
                "operationId": "listResourceTypesUsingGET_2",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "composableOnly",
                        "in": "query",
                        "description": "Include only composable resource types",
                        "required": false,
                        "type": "boolean",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "Filter by list of resource type ids",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "projectIds",
                        "in": "query",
                        "description": "Filter by list of project ids",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "providerId",
                        "in": "query",
                        "description": "Filter by provider ID",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search by name and description",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfResourceType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/resource-types/{resourceTypeId}": {
            "get": {
                "tags": [
                    "Resource types"
                ],
                "summary": "Fetch a specific Resource type.",
                "description": "Returns the Resource type with the supplied ID.",
                "operationId": "getResourceTypeUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resourceTypeId",
                        "in": "path",
                        "description": "resourceTypeId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/resources": {
            "get": {
                "tags": [
                    "Resources"
                ],
                "summary": "Fetch all resources.",
                "description": "Returns a paginated list of resources.",
                "operationId": "getResourcesUsingGET_2",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "cloudAccounts",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these cloud accounts.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "cloudTypes",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these cloud Types",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "The expanded details of the requested comma separated objects. Ex. project, deployment, currentRequest",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "project",
                                "deployment",
                                "currentRequest"
                            ]
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false,
                        "enum": [
                            "project",
                            "deployment",
                            "currentRequest"
                        ]
                    },
                    {
                        "name": "projects",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these project IDs.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "resourceTypes",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these resourceType Names.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Given string should be part of a searchable field in one of the resources.",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "A comma-separated list. Results must be associated with one of these tags",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfResource"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Resources"
                ],
                "summary": "Create a new resource.",
                "description": "Returns the resource request response.",
                "operationId": "createResourceUsingPOST_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "resource",
                        "description": "The resource spec to create a resource.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ResourceSpecification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/resources/filters": {
            "get": {
                "tags": [
                    "Resources"
                ],
                "summary": "Returns the Resource filters in context of given user.",
                "operationId": "getResourceFiltersUsingGET_2",
                "parameters": [
                    {
                        "name": "ISO3Country",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ISO3Language",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "country",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "displayCountry",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "displayLanguage",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "displayName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "displayScript",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "displayVariant",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resourceTypes",
                        "in": "query",
                        "description": "A comma-separated list. Only Resources with these types will be included in the results.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "script",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "unicodeLocaleAttributes",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "unicodeLocaleKeys",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "variant",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FilterSchema"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/resources/filters/{filterId}": {
            "get": {
                "tags": [
                    "Resources"
                ],
                "summary": "Returns the Resource filter with the supplied ID.",
                "operationId": "getResourceFilterByIdUsingGET_2",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "filterId",
                        "in": "path",
                        "description": "Filter Id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resourceTypes",
                        "in": "query",
                        "description": "A comma-separated list. Only Resources with these types will be included in the results.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search string for filters",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfFilterEntry"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/resources/{resourceId}": {
            "get": {
                "tags": [
                    "Resources"
                ],
                "summary": "Fetch a specific resource.",
                "description": "Returns the resource with the supplied ID.",
                "operationId": "getResourceByIdUsingGET_5",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "The expanded details of the requested comma separated objects. Ex. project, deployment, currentRequest",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "project",
                                "deployment",
                                "currentRequest"
                            ]
                        },
                        "collectionFormat": "multi",
                        "allowEmptyValue": false,
                        "enum": [
                            "project",
                            "deployment",
                            "currentRequest"
                        ]
                    },
                    {
                        "name": "resourceId",
                        "in": "path",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Resource"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/resources/{resourceId}/actions": {
            "get": {
                "tags": [
                    "Resource Actions"
                ],
                "summary": "Fetch available resource actions.",
                "description": "Returns the complete list of available actions that can be performed on a given resource.",
                "operationId": "getResourceActionsUsingGET_5",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resourceId",
                        "in": "path",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResourceAction"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/resources/{resourceId}/actions/{actionId}": {
            "get": {
                "tags": [
                    "Resource Actions"
                ],
                "summary": "Fetch resource action.",
                "description": "Returns an action for the resource specified by its Resource ID and Action ID.",
                "operationId": "getResourceActionUsingGET_5",
                "parameters": [
                    {
                        "name": "actionId",
                        "in": "path",
                        "description": "Action ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resourceId",
                        "in": "path",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResourceAction"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/deployment/api/resources/{resourceId}/requests": {
            "get": {
                "tags": [
                    "Requests"
                ],
                "summary": "Get all requests for a resource",
                "operationId": "listResourceRequestsUsingGET_2",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resourceId",
                        "in": "path",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Resource Actions"
                ],
                "summary": "Resource action request.",
                "description": "Submit a resource action request.",
                "operationId": "submitResourceActionRequestUsingPOST_5",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "actionRequest",
                        "description": "actionRequest",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceActionRequest"
                        }
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resourceId",
                        "in": "path",
                        "description": "Resource ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Request"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/icon/api/icons": {
            "post": {
                "tags": [
                    "Icons"
                ],
                "summary": "Upload an icon",
                "description": "Create an icon.",
                "operationId": "upload_2",
                "consumes": [
                    "multipart/form-data"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "Icon file",
                        "required": true,
                        "type": "file"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success - create an icon."
                    },
                    "400": {
                        "description": "Invalid request - bad data."
                    },
                    "403": {
                        "description": "Forbidden."
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/icon/api/icons/{id}": {
            "get": {
                "tags": [
                    "Icons"
                ],
                "summary": "Download an icon",
                "description": "Download an existing icon by its unique id.",
                "operationId": "download_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Icon id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success - return the catalog icon.",
                        "schema": {
                            "type": "string",
                            "format": "byte"
                        }
                    },
                    "400": {
                        "description": "Invalid request - bad data."
                    },
                    "404": {
                        "description": "Icon not found."
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Icons"
                ],
                "summary": "Delete an icon",
                "description": "Delete an existing icon by its unique id.",
                "operationId": "delete_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Icon id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success - delete the icon"
                    },
                    "403": {
                        "description": "Forbidden."
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/notification/api/scenario-configs": {
            "get": {
                "tags": [
                    "Notification Scenario Configuration"
                ],
                "summary": "Retrieves all notification scenario configurations of an organization",
                "operationId": "getAllScenarioConfigsUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfNotificationScenarioConfig"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Notification Scenario Configuration"
                ],
                "summary": "Creates or updates a notification scenario configuration of an organization",
                "operationId": "createOrUpdateUsingPOST_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "config",
                        "description": "The notification scenario configuration to be created or updated",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NotificationScenarioConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NotificationScenarioConfig"
                        }
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/notification/api/scenario-configs/{id}": {
            "delete": {
                "tags": [
                    "Notification Scenario Configuration"
                ],
                "summary": "Deletes a notification scenario configuration of an organization",
                "operationId": "deleteUsingDELETE_5",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Notification scenario Id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/notification/api/scenario-configs/{scenarioId}": {
            "get": {
                "tags": [
                    "Notification Scenario Configuration"
                ],
                "summary": "Retrieves a notification scenario configuration by scenario id of an organization",
                "operationId": "getScenarioConfigUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "scenarioId",
                        "in": "path",
                        "description": "Notification Scenario Id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NotificationScenarioConfig"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/policy/api/policies": {
            "get": {
                "tags": [
                    "Policies"
                ],
                "summary": "Returns a paginated list of policies.",
                "description": "Find all the policies associated with current org.",
                "operationId": "getPoliciesUsingGET_5",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "computeStats",
                        "in": "query",
                        "description": "computeStats",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "expandDefinition",
                        "in": "query",
                        "description": "Retrieves policy definition information for each returned policy.",
                        "required": false,
                        "type": "boolean",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Matches will start with this string in their name or have this string somewhere in their description.",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfPolicy"
                        }
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Policies"
                ],
                "summary": "Trigger a policy dry-run.",
                "description": "Dry-run an existing policy to rehearse actual policy effect on application.",
                "operationId": "dryRunPolicyUsingPOST_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "dryRun",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "policy",
                        "description": "The policy to be created",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Policy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/policy/api/policies/{id}": {
            "get": {
                "tags": [
                    "Policies"
                ],
                "summary": "Returns a specified policy.",
                "description": "Find a specific policy based on the input policy id.",
                "operationId": "getPolicyUsingGET_5",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "computeStats",
                        "in": "query",
                        "description": "computeStats",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Policy ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Policy"
                        }
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Policies"
                ],
                "summary": "Delete a policy",
                "description": "Delete a specified policy corresponding to its unique id.",
                "operationId": "deletePolicyUsingDELETE_5",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Policy ID",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/policy/api/policyDecisions": {
            "get": {
                "tags": [
                    "Policy Decisions"
                ],
                "summary": "Fetch a list of policy decisions.",
                "description": "Returns a paginated list of policy decisions. If a dryRunId is provided, the return value has a field indicating whether the dry run is complete.",
                "operationId": "getDecisionsUsingGET_2",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "dryRunId",
                        "in": "query",
                        "description": "dryRunId",
                        "required": false,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "name": "policyTypeId",
                        "in": "query",
                        "description": "Matches will only include policies of this type",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Matches will only include decisions with this project ID",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Matches will start with this string in their policy name or target name or have this string somewhere in their description.",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfPolicyDecisionOfObjectNode"
                        }
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/policy/api/policyDecisions/{id}": {
            "get": {
                "tags": [
                    "Policy Decisions"
                ],
                "summary": "Returns a policy decision by id.",
                "description": "Find a specific policy decision based on the input policy decision id.",
                "operationId": "getDecisionByIdUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Policy decision Id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PolicyDecisionOfObjectNode"
                        }
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/policy/api/policyTypes": {
            "get": {
                "tags": [
                    "Policy Types"
                ],
                "summary": "Returns a paginated list of policy types.",
                "description": "Find all the policy types available in the current org.",
                "operationId": "getTypesUsingGET_5",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "expandSchema",
                        "in": "query",
                        "description": "Retrieves the schema for this policy type",
                        "required": false,
                        "type": "boolean",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfPolicyType"
                        }
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/policy/api/policyTypes/{id}": {
            "get": {
                "tags": [
                    "Policy Types"
                ],
                "summary": "Returns the policy type with the specified ID.",
                "description": "Find a specific policy type based on the input policy type id.",
                "operationId": "getPolicyTypeByIdUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Policy type ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PolicyType"
                        }
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/policy/api/policyTypes/{id}/scopeSchema": {
            "get": {
                "tags": [
                    "Policy Types"
                ],
                "summary": "Returns the policy scope schema for the type with the specified ID.",
                "description": "Return the policy scope schema for the given policy type.",
                "operationId": "getPolicyTypeScopeSchemaUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Policy type ID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/price/api/cloudhealth/perspective-sync": {
            "post": {
                "tags": [
                    "Perspective Sync"
                ],
                "summary": "On demand Perspective Sync",
                "description": "To do on demand perspective sync for within the given org",
                "operationId": "syncPerspectiveGroupUsingPOST_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResponseEntity"
                        }
                    },
                    "202": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResponseEntity"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/price/api/private/pricing-card-assignments": {
            "get": {
                "tags": [
                    "Pricing Card Assignments"
                ],
                "summary": "Fetch all pricing card assignment for private cloud",
                "description": "Returns a paginated list of pricing card assignments",
                "operationId": "getAllMeteringPolicyAssignmentsUsingGET_2",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "refreshEntities",
                        "in": "query",
                        "description": "Search by name and description",
                        "required": false,
                        "type": "boolean",
                        "default": true,
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfMeteringPolicyAssignment"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Pricing Card Assignments"
                ],
                "summary": "Create a new pricing card assignment",
                "description": "Create a new pricing card policy assignment based on request body and validate its field according to business rules. Request body with ALL entityType will delete the older assignments for the given pricingCardId",
                "operationId": "createMeteringPolicyAssignmentUsingPOST_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "meteringPolicyAssignment",
                        "description": "The pricing card assignment to be created",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/MeteringPolicyAssignment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MeteringPolicyAssignment"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/MeteringPolicyAssignment"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/price/api/private/pricing-card-assignments/strategy": {
            "get": {
                "tags": [
                    "Pricing Card Assignments"
                ],
                "summary": "Fetch pricing card assignment strategy for the Org",
                "description": "Returns a pricing card assignment strategy for the Org",
                "operationId": "getMeteringAssignmentStrategyUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MeteringAssignmentStrategy"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Pricing Card Assignments"
                ],
                "summary": "Selecting the new pricing card assignment strategy,PROJECT or CLOUDZONE are possible values can be used while creating strategy. Also there can be only one strategy for a given org at a given point of time",
                "description": "Create a new pricing card assignment strategy based on request body and validate its field according to business rules.",
                "operationId": "createMeteringAssignmentStrategyUsingPOST_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "meteringAssignmentStrategy",
                        "description": "The pricing card assignment strategy to be created",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/MeteringAssignmentStrategy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MeteringAssignmentStrategy"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/MeteringAssignmentStrategy"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "Pricing Card Assignments"
                ],
                "summary": "Updates the pricing card assignment strategy for the Org.",
                "operationId": "changeMeteringAssignmentStrategyUsingPATCH_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "meteringAssignmentStrategy",
                        "description": "Pricing card assignment strategy with 'EntityType' to override the strategy for the org",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/MeteringAssignmentStrategy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MeteringAssignmentStrategy"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/price/api/private/pricing-card-assignments/{id}": {
            "get": {
                "tags": [
                    "Pricing Card Assignments"
                ],
                "summary": "Fetch pricing card assignment for private cloud by id",
                "description": "Returns a pricing card assignments by id",
                "operationId": "getMeteringPolicyAssignmentUsingGET_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pricing card assignment id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MeteringPolicyAssignment"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Pricing Card Assignments"
                ],
                "summary": "Delete the pricing card assignment with specified id",
                "description": "Deletes the pricing card assignment with the specified id",
                "operationId": "deleteMeteringPolicyAssignmentUsingDELETE_2",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pricing card Assignment Id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "patch": {
                "tags": [
                    "Pricing Card Assignments"
                ],
                "summary": "Updates the pricing card assignment id with the supplied id. Request body with ALL entityType will delete the older assignments for the given pricingCardId",
                "operationId": "patchMeteringPolicyAssignmentUsingPATCH_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pricing card Assignment Id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "name": "meteringPolicyAssignment",
                        "description": "A pricing card assignment with pricing card Id to override existing pricing card Id",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/MeteringPolicyAssignment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MeteringPolicyAssignment"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/price/api/private/pricing-cards": {
            "get": {
                "tags": [
                    "Pricing Cards"
                ],
                "summary": "Fetch all pricing cards for private-policy cloud",
                "description": "Returns a paginated list of pricing cards",
                "operationId": "getPoliciesUsingGET_4",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "Number of records you want to skip",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "Number of records you want",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "expandAssignmentInfo",
                        "in": "query",
                        "description": "Whether or not returns count of assignments.",
                        "required": false,
                        "type": "boolean",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "expandPricingCard",
                        "in": "query",
                        "description": "Whether or not returns detailed pricing card for each result.",
                        "required": false,
                        "type": "boolean",
                        "allowEmptyValue": false
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search by name and description",
                        "required": false,
                        "type": "string",
                        "allowEmptyValue": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PageOfMeteringPolicy"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Pricing Cards"
                ],
                "summary": "Create a new pricing card",
                "description": "Create a new pricing card based on request body and validate its field according to business rules.",
                "operationId": "createPolicyUsingPOST_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "meteringPolicy",
                        "description": "The pricing card to be created",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/MeteringPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MeteringPolicy"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/MeteringPolicy"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        },
        "/price/api/private/pricing-cards/{id}": {
            "get": {
                "tags": [
                    "Pricing Cards"
                ],
                "summary": "Find the pricing card with specified Id",
                "description": "Returns the pricing card with the specified id",
                "operationId": "getPolicyUsingGET_4",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pricing card Id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MeteringPolicy"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "put": {
                "tags": [
                    "Pricing Cards"
                ],
                "summary": "Update the pricing card",
                "description": "Updates the pricing card with the specified Id",
                "operationId": "updatePolicyUsingPUT_2",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pricing card Id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    {
                        "in": "body",
                        "name": "meteringPolicy",
                        "description": "A set of pricing card fields to be updated.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/MeteringPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MeteringPolicy"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Pricing Cards"
                ],
                "summary": "Delete the pricing card with specified Id",
                "description": "Deletes the pricing card with the specified id",
                "operationId": "deletePolicyUsingDELETE_4",
                "parameters": [
                    {
                        "name": "apiVersion",
                        "in": "query",
                        "description": "The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "pricing card Id",
                        "required": true,
                        "type": "string",
                        "format": "uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": [
                            "global"
                        ]
                    }
                ],
                "deprecated": false
            }
        }
    },
    "securityDefinitions": {
        "APIKeyHeader": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "definitions": {
        "AdminCatalogItemPatch": {
            "type": "object",
            "properties": {
                "bulkRequestLimit": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Max number of instances that can be requested at a time",
                    "minimum": -128,
                    "maximum": 127
                },
                "formId": {
                    "type": "string",
                    "description": "form id"
                },
                "iconId": {
                    "type": "string",
                    "description": "icon id"
                }
            },
            "title": "AdminCatalogItemPatch",
            "description": "A patch to update attributes for a catalog item"
        },
        "Application": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation time"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the application"
                },
                "id": {
                    "type": "string",
                    "description": "Id of the application"
                },
                "lastUpdatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update time"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the application"
                },
                "orgId": {
                    "type": "string"
                },
                "resources": {
                    "type": "array",
                    "description": "Resources of the application.",
                    "items": {
                        "$ref": "#/definitions/ApplicationResource"
                    }
                },
                "tiers": {
                    "type": "array",
                    "description": "Tiers of the application.",
                    "items": {
                        "$ref": "#/definitions/ApplicationTier"
                    }
                }
            },
            "title": "Application",
            "description": "A group of resources such as machines, network, software, etc... typically provisioned together to deliver a complete/workable application."
        },
        "ApplicationResource": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation time"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the resource"
                },
                "expense": {
                    "description": "Expense associated with the deployment.",
                    "readOnly": true,
                    "$ref": "#/definitions/Expense"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource"
                },
                "origin": {
                    "type": "string",
                    "description": "Origin of the resource",
                    "enum": [
                        "DISCOVERED",
                        "ONBOARDED",
                        "MIGRATED"
                    ]
                },
                "properties": {
                    "type": "object"
                },
                "syncStatus": {
                    "type": "string",
                    "description": "The current sync status",
                    "enum": [
                        "SUCCESS",
                        "MISSING",
                        "STALE"
                    ]
                },
                "tier": {
                    "$ref": "#/definitions/ApplicationTier"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the resource"
                }
            },
            "title": "ApplicationResource",
            "description": "A resource part of an application."
        },
        "ApplicationTier": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description of the tier"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the tier"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the tier"
                }
            },
            "title": "ApplicationTier",
            "description": "Application tier."
        },
        "CatalogItem": {
            "type": "object",
            "required": [
                "id",
                "name",
                "projectIds",
                "type"
            ],
            "properties": {
                "bulkRequestLimit": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Max number of instances that can be requested at a time",
                    "minimum": -128,
                    "maximum": 127
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation time"
                },
                "createdBy": {
                    "type": "string",
                    "description": "Created By"
                },
                "description": {
                    "type": "string",
                    "description": "CatalogItem description"
                },
                "formId": {
                    "type": "string",
                    "description": "Form ID"
                },
                "iconId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Icon ID"
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "CatalogItem id"
                },
                "lastUpdatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Update time"
                },
                "lastUpdatedBy": {
                    "type": "string",
                    "description": "Updated By"
                },
                "name": {
                    "type": "string",
                    "description": "CatalogItem name"
                },
                "projectIds": {
                    "type": "array",
                    "description": "Associated project IDs that can be used for requesting",
                    "items": {
                        "type": "string"
                    }
                },
                "projects": {
                    "type": "array",
                    "description": "Associated projects that can be used for requesting",
                    "items": {
                        "$ref": "#/definitions/ResourceReference"
                    }
                },
                "schema": {
                    "type": "object",
                    "description": "Json schema describing request parameters, a simplified version of http://json-schema.org/latest/json-schema-validation.html#rfc.section.5"
                },
                "sourceId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "LibraryItem source ID."
                },
                "sourceName": {
                    "type": "string",
                    "description": "LibraryItem source name."
                },
                "type": {
                    "description": "ResourceReference to type, e.g. blueprint, CFT... etc",
                    "$ref": "#/definitions/ResourceReference"
                }
            },
            "title": "CatalogItem",
            "description": "Represents a Catalog Item that can eventually be requested by a consumer."
        },
        "CatalogItemRequest": {
            "type": "object",
            "properties": {
                "bulkRequestCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Deployment request count; defaults to 1 if not specified.",
                    "minimum": -128,
                    "maximum": 127
                },
                "deploymentName": {
                    "type": "string",
                    "description": "Name of the requested deployment"
                },
                "inputs": {
                    "type": "object",
                    "description": "Input parameters for the request. These must be compliant with the schema of the corresponding catalog item"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project to be used for the request"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason for request"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the catalog item. e.g. v2.0"
                }
            },
            "title": "CatalogItemRequest",
            "description": "A request to create a deployment based on a catalog item"
        },
        "CatalogItemRequestResponse": {
            "type": "object",
            "properties": {
                "deploymentId": {
                    "type": "string",
                    "description": "The created deployment's ID"
                },
                "deploymentName": {
                    "type": "string",
                    "description": "The created deployment's name"
                }
            },
            "title": "CatalogItemRequestResponse",
            "description": "The blueprint service's response to a deployment request"
        },
        "CatalogItemResourceUpfrontPriceResponse": {
            "type": "object",
            "properties": {
                "dailyAdditionalPrice": {
                    "type": "number",
                    "description": "Additional Price incurred for the catalog.",
                    "readOnly": true
                },
                "dailyComputePrice": {
                    "type": "number",
                    "description": "Compute Price of the catalog resource.",
                    "readOnly": true
                },
                "dailyNetworkPrice": {
                    "type": "number",
                    "description": "Network Price of the catalog resource.",
                    "readOnly": true
                },
                "dailyStoragePrice": {
                    "type": "number",
                    "description": "Storage Price of the catalog resource.",
                    "readOnly": true
                },
                "dailyTotalPrice": {
                    "type": "number",
                    "description": "Total Price of the catalog resource.",
                    "readOnly": true
                },
                "resourceName": {
                    "type": "string"
                },
                "resourceType": {
                    "type": "string"
                },
                "resourceUpfrontPriceId": {
                    "type": "string",
                    "description": "Id",
                    "readOnly": true
                },
                "status": {
                    "type": "string",
                    "description": "Upfront price sync status",
                    "readOnly": true,
                    "enum": [
                        "SUCCESS",
                        "ERROR",
                        "DATA_NOT_AVAILABLE",
                        "CURRENCY_NOT_SET"
                    ]
                },
                "statusDetails": {
                    "type": "string",
                    "description": "Upfront price status detail.",
                    "readOnly": true
                },
                "unit": {
                    "type": "string",
                    "description": "Monetary unit.",
                    "readOnly": true
                }
            },
            "title": "CatalogItemResourceUpfrontPriceResponse",
            "description": "A response with upfront price for a resource in given catalog item"
        },
        "CatalogItemType": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "baseUri": {
                    "type": "string",
                    "description": "Base callback URI for import operations"
                },
                "configSchema": {
                    "type": "object",
                    "description": "Configuration schema for this type, requests to create a source of this type should have a compliant 'config' field"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation time"
                },
                "createdBy": {
                    "type": "string",
                    "description": "Service that created this type"
                },
                "iconId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Default Icon Id"
                },
                "id": {
                    "type": "string",
                    "description": "Human-readable unique ID containing only lowercase letters and periods, neither starting nor ending with a period, and never having two consecutive periods"
                },
                "name": {
                    "type": "string",
                    "description": "Unique Catalog Item Type name"
                }
            },
            "title": "CatalogItemType",
            "description": "Represents a type of Catalog Item."
        },
        "CatalogItemUpfrontPriceResponse": {
            "type": "object",
            "properties": {
                "dailyAdditionalPrice": {
                    "type": "number",
                    "description": "Additional Price incurred for the catalog.",
                    "readOnly": true
                },
                "dailyComputePrice": {
                    "type": "number",
                    "description": "Compute Price of the catalog.",
                    "readOnly": true
                },
                "dailyNetworkPrice": {
                    "type": "number",
                    "description": "Network Price of the catalog.",
                    "readOnly": true
                },
                "dailyStoragePrice": {
                    "type": "number",
                    "description": "Storage Price of the catalog.",
                    "readOnly": true
                },
                "dailyTotalPrice": {
                    "type": "number",
                    "description": "Total Price of the catalog.",
                    "readOnly": true
                },
                "resourcePriceDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CatalogItemResourceUpfrontPriceResponse"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Upfront price sync status",
                    "readOnly": true,
                    "enum": [
                        "STARTED",
                        "PREPARING_COST_ESTIMATION",
                        "IN_PROGRESS",
                        "SUCCESS",
                        "ERROR",
                        "DATA_NOT_AVAILABLE",
                        "CURRENCY_NOT_SET",
                        "PUBLIC_CLOUD_NOT_SUPPORTED"
                    ]
                },
                "statusDetails": {
                    "type": "string",
                    "description": "Upfront price status detail.",
                    "readOnly": true
                },
                "unit": {
                    "type": "string",
                    "description": "Monetary unit.",
                    "readOnly": true
                },
                "upfrontPriceId": {
                    "type": "string",
                    "description": "Id",
                    "readOnly": true
                }
            },
            "title": "CatalogItemUpfrontPriceResponse",
            "description": "The response to a catalog item upfront price request"
        },
        "CatalogItemVersion": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Created At"
                },
                "description": {
                    "type": "string",
                    "description": "Description"
                },
                "formId": {
                    "type": "string",
                    "description": "Form ID"
                },
                "id": {
                    "type": "string",
                    "description": "Version ID"
                },
                "schema": {
                    "type": "object",
                    "description": "Input Schema"
                }
            },
            "title": "CatalogItemVersion",
            "description": "Represents a version of a Catalog Item that can be requested by a consumer."
        },
        "CatalogSource": {
            "type": "object",
            "required": [
                "config",
                "id",
                "name",
                "typeId"
            ],
            "properties": {
                "config": {
                    "type": "object",
                    "description": "Source custom configuration"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation time"
                },
                "createdBy": {
                    "type": "string",
                    "description": "Created By"
                },
                "description": {
                    "type": "string",
                    "description": "Catalog Source description"
                },
                "global": {
                    "type": "boolean",
                    "description": "Global flag indicating that all the items can be requested across all projects."
                },
                "iconId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Default Icon Id"
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Catalog Source id"
                },
                "itemsFound": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of items found"
                },
                "itemsImported": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of items imported."
                },
                "lastImportCompletedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last import completion time"
                },
                "lastImportErrors": {
                    "type": "array",
                    "description": "Last import error(s)",
                    "items": {
                        "type": "string"
                    }
                },
                "lastImportStartedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last import start time"
                },
                "lastUpdatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Update time"
                },
                "lastUpdatedBy": {
                    "type": "string",
                    "description": "Updated By"
                },
                "name": {
                    "type": "string",
                    "description": "Catalog Source name"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project id where the source belongs"
                },
                "typeId": {
                    "type": "string",
                    "description": "Type of source, e.g. blueprint, CFT... etc"
                }
            },
            "title": "CatalogSource",
            "description": "Represents a source of templates from which Catalog Items can be created"
        },
        "Clause": {
            "type": "object",
            "title": "Clause"
        },
        "ContentDefinition": {
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of either the catalog item or the catalog source"
                },
                "iconId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Icon id of associated catalog item (if association is with catalog item)"
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Id of either the catalog source or catalog item."
                },
                "name": {
                    "type": "string",
                    "description": "Name of either the catalog item or the catalog source"
                },
                "numItems": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of items in the associated catalog source"
                },
                "sourceName": {
                    "type": "string",
                    "description": "Catalog source name"
                },
                "sourceType": {
                    "type": "string",
                    "description": "Catalog source type"
                },
                "type": {
                    "type": "string",
                    "description": "Content definition type"
                }
            },
            "title": "ContentDefinition",
            "description": "Represents a catalog item or content source that is linked to a project via an entitlement."
        },
        "Criteria": {
            "type": "object",
            "properties": {
                "matchExpression": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Clause"
                    }
                }
            },
            "title": "Criteria"
        },
        "DataElement": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "properties": {
                    "type": "object"
                }
            },
            "title": "DataElement"
        },
        "Deployment": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "blueprint": {
                    "description": "Expanded deployment blueprint",
                    "$ref": "#/definitions/ResourceReference"
                },
                "blueprintId": {
                    "type": "string",
                    "description": "Deployment blueprint id"
                },
                "blueprintVersion": {
                    "type": "string",
                    "description": "Deployment blueprint version"
                },
                "catalog": {
                    "description": "Expanded deployment catalog",
                    "$ref": "#/definitions/ResourceReference"
                },
                "catalogItemId": {
                    "type": "string",
                    "description": "Deployment catalog item id"
                },
                "catalogItemVersion": {
                    "type": "string",
                    "description": "Deployment catalog version"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation time"
                },
                "createdBy": {
                    "type": "string",
                    "description": "Created by"
                },
                "deleted": {
                    "type": "boolean",
                    "description": "Indicates whether the deployment is deleted or not."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the deployment"
                },
                "expense": {
                    "description": "Expense associated with the deployment.",
                    "$ref": "#/definitions/Expense"
                },
                "iconId": {
                    "type": "string",
                    "description": "Deployment icon id"
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Id of the deployment"
                },
                "inputs": {
                    "type": "object",
                    "description": "The inputs that were used to request this deployment"
                },
                "lastRequest": {
                    "description": "Last request",
                    "$ref": "#/definitions/Request"
                },
                "lastUpdatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Update time"
                },
                "lastUpdatedBy": {
                    "type": "string",
                    "description": "Updated by"
                },
                "leaseExpireAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Lease expiration time"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the deployment"
                },
                "orgId": {
                    "type": "string"
                },
                "ownedBy": {
                    "type": "string",
                    "description": "Owned by"
                },
                "project": {
                    "description": "Expanded deployment project",
                    "$ref": "#/definitions/ResourceReference"
                },
                "projectId": {
                    "type": "string",
                    "description": "Deployment project id"
                },
                "resources": {
                    "type": "array",
                    "description": "Expanded resources for the deployment. Content of this property will not be maintained backward compatible",
                    "items": {
                        "$ref": "#/definitions/DeploymentResource"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Represents the status of deployment with respect to its life cycle operations - create/update/delete.",
                    "enum": [
                        "CREATE_SUCCESSFUL",
                        "CREATE_INPROGRESS",
                        "CREATE_FAILED",
                        "UPDATE_SUCCESSFUL",
                        "UPDATE_INPROGRESS",
                        "UPDATE_FAILED",
                        "DELETE_SUCCESSFUL",
                        "DELETE_INPROGRESS",
                        "DELETE_FAILED"
                    ]
                }
            },
            "title": "Deployment",
            "description": "A group of resources such as machines, network, software, etc... typically provisioned together to deliver a complete/workable application."
        },
        "DeploymentExpenseHistory": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string",
                    "description": "The currency code of the expense history.",
                    "readOnly": true
                },
                "data": {
                    "type": "array",
                    "description": "The list of expense history metric.",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/TimeSeriesValue"
                    }
                },
                "interval": {
                    "type": "string",
                    "description": "The requested interval type.",
                    "readOnly": true,
                    "enum": [
                        "daily",
                        "weekly",
                        "monthly"
                    ]
                }
            },
            "title": "DeploymentExpenseHistory",
            "description": "Expense history of a deployment."
        },
        "DeploymentReference": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "iconId": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "leaseExpireAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "type": "string"
                },
                "ownedBy": {
                    "type": "string"
                }
            },
            "title": "DeploymentReference"
        },
        "DeploymentResource": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation time"
                },
                "currentRequest": {
                    "description": "Current request",
                    "$ref": "#/definitions/Request"
                },
                "dependsOn": {
                    "type": "array",
                    "description": "A list of other resources this resource depends on",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A description of the resource"
                },
                "expense": {
                    "description": "Expense associated with the deployment.",
                    "readOnly": true,
                    "$ref": "#/definitions/Expense"
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource"
                },
                "origin": {
                    "type": "string",
                    "description": "Origin of the resource",
                    "enum": [
                        "DISCOVERED",
                        "ONBOARDED",
                        "MIGRATED"
                    ]
                },
                "properties": {
                    "type": "object"
                },
                "state": {
                    "type": "string",
                    "description": "The current state of the resource",
                    "enum": [
                        "PARTIAL",
                        "TAINTED",
                        "OK"
                    ]
                },
                "syncStatus": {
                    "type": "string",
                    "description": "The current sync status",
                    "enum": [
                        "SUCCESS",
                        "MISSING",
                        "STALE"
                    ]
                },
                "type": {
                    "type": "string",
                    "description": "Type of the resource"
                }
            },
            "title": "DeploymentResource",
            "description": "A resource part of a deployment."
        },
        "DeploymentUpdate": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "New description of the deployment"
                },
                "iconId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "New iconid of the deployment"
                },
                "name": {
                    "type": "string",
                    "description": "New name of the deployment"
                }
            },
            "title": "DeploymentUpdate",
            "description": "A deployment update request"
        },
        "Entitlement": {
            "type": "object",
            "required": [
                "definition",
                "id",
                "projectId"
            ],
            "properties": {
                "definition": {
                    "description": "Entitlement definition that contains the Catalog Item or Catalog Source data.",
                    "$ref": "#/definitions/ContentDefinition"
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Entitlement id"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project id"
                }
            },
            "title": "Entitlement",
            "description": "Represents an entitlement that is configured by admins to enforce user access to catalog items, services, etc., within their own organizations. "
        },
        "Event": {
            "type": "object",
            "required": [
                "name",
                "timestamp"
            ],
            "properties": {
                "details": {
                    "type": "string",
                    "description": "Longer user-friendly details of the event."
                },
                "hasLogs": {
                    "type": "boolean",
                    "description": "Indicates whether the event has logs or not."
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Event identifier"
                },
                "name": {
                    "type": "string",
                    "description": "Short user-friendly label of the event (e.g. 'shutting down myVM')"
                },
                "resourceName": {
                    "type": "string",
                    "description": "Optional resource name to which the event applies to"
                },
                "resourceType": {
                    "type": "string",
                    "description": "Optional resource type to which the event applies to"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp of the Event (e.g. date format '2019-07-13T23:16:49.310Z')."
                }
            },
            "title": "Event",
            "description": "Represents request events."
        },
        "EventLog": {
            "type": "object",
            "required": [
                "message",
                "timestamp"
            ],
            "properties": {
                "eof": {
                    "type": "boolean",
                    "description": "Indicates whether this is the last log entry."
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Event Log identifier"
                },
                "message": {
                    "type": "string",
                    "description": "Message of the event log"
                },
                "rownum": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Row number of the Event Log."
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp of the Event log (e.g. date format '2019-07-13T23:16:49.310Z')."
                }
            },
            "title": "EventLog",
            "description": "Represents a event log."
        },
        "Expense": {
            "type": "object",
            "properties": {
                "additionalExpense": {
                    "type": "number",
                    "description": "Additional expense incurred for the resource.",
                    "readOnly": true
                },
                "code": {
                    "type": "string",
                    "description": "Expense sync message code if any.",
                    "readOnly": true
                },
                "computeExpense": {
                    "type": "number",
                    "description": "Compute expense of the resource.",
                    "readOnly": true
                },
                "lastUpdatedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last expense sync time.",
                    "readOnly": true
                },
                "message": {
                    "type": "string",
                    "description": "Expense sync message if any.",
                    "readOnly": true
                },
                "networkExpense": {
                    "type": "number",
                    "description": "Network expense of the resource.",
                    "readOnly": true
                },
                "storageExpense": {
                    "type": "number",
                    "description": "Storage expense of the resource.",
                    "readOnly": true
                },
                "totalExpense": {
                    "type": "number",
                    "description": "Total expense of the resource.",
                    "readOnly": true
                },
                "unit": {
                    "type": "string",
                    "description": "Monetary unit.",
                    "readOnly": true
                }
            },
            "title": "Expense"
        },
        "Filter": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterEntry"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "last": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "MULTISELECT",
                        "DATE_RANGE",
                        "BOOLEAN"
                    ]
                }
            },
            "title": "Filter"
        },
        "FilterEntry": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int64"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "title": "FilterEntry"
        },
        "FilterSchema": {
            "type": "object",
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Filter"
                    }
                }
            },
            "title": "FilterSchema"
        },
        "FixedPrice": {
            "type": "object",
            "properties": {
                "chargePeriod": {
                    "type": "string",
                    "enum": [
                        "HOURLY",
                        "DAILY",
                        "WEEKLY",
                        "MONTHLY"
                    ]
                },
                "rate": {
                    "type": "number",
                    "format": "double"
                }
            },
            "title": "FixedPrice"
        },
        "FormDefinition": {
            "type": "object",
            "properties": {
                "formURI": {
                    "type": "string"
                },
                "trackProgressInModal": {
                    "type": "boolean"
                }
            },
            "title": "FormDefinition"
        },
        "Metering": {
            "type": "object",
            "properties": {
                "baseRate": {
                    "type": "number",
                    "format": "double"
                },
                "chargeBasedOn": {
                    "type": "string",
                    "enum": [
                        "USAGE"
                    ]
                },
                "chargeOnPowerState": {
                    "type": "string",
                    "enum": [
                        "ALWAYS",
                        "ONLY_WHEN_POWERED_ON",
                        "POWERED_ON_AT_LEAST_ONCE"
                    ]
                },
                "chargePeriod": {
                    "type": "string",
                    "enum": [
                        "HOURLY",
                        "DAILY",
                        "WEEKLY",
                        "MONTHLY"
                    ]
                },
                "fixedPrice": {
                    "type": "number",
                    "format": "double"
                },
                "unit": {
                    "type": "string"
                }
            },
            "title": "Metering"
        },
        "MeteringAssignmentStrategy": {
            "type": "object",
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Metering Policy Assignment entityType(Strategy)",
                    "enum": [
                        "ALL",
                        "PROJECT",
                        "CLOUDZONE"
                    ]
                }
            },
            "title": "MeteringAssignmentStrategy",
            "description": "Metering Assignment Strategy"
        },
        "MeteringItem": {
            "type": "object",
            "properties": {
                "itemName": {
                    "type": "string"
                },
                "metering": {
                    "$ref": "#/definitions/Metering"
                }
            },
            "title": "MeteringItem"
        },
        "MeteringPolicy": {
            "type": "object",
            "properties": {
                "chargeModel": {
                    "type": "string",
                    "enum": [
                        "PAY_AS_YOU_GO"
                    ]
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "fixedPrice": {
                    "$ref": "#/definitions/FixedPrice"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "lastUpdatedAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "meteringItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MeteringItem"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namedMeteringItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NamedMeteringItem"
                    }
                },
                "oneTimeMeteringItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OneTimeMeteringItem"
                    }
                },
                "orgId": {
                    "type": "string"
                },
                "pricingCardAssignmentInfo": {
                    "description": "Assignment count, assignment entity type",
                    "$ref": "#/definitions/MeteringPolicyAssignmentInfo"
                },
                "tagBasedMeteringItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TagBasedMeteringItem"
                    }
                },
                "tagBasedOneTimeMeteringItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TagBasedOneTimeMeteringItem"
                    }
                },
                "tagBasedRateFactorItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TagBasedRateFactorItem"
                    }
                }
            },
            "title": "MeteringPolicy"
        },
        "MeteringPolicyAssignment": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation time"
                },
                "entityId": {
                    "type": "string",
                    "description": "Pricing card assigned entity id"
                },
                "entityName": {
                    "type": "string",
                    "description": "Pricing card assigned entity name"
                },
                "entityType": {
                    "type": "string",
                    "description": "Pricing card assigned entity type",
                    "enum": [
                        "ALL",
                        "PROJECT",
                        "CLOUDZONE"
                    ]
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Id of the pricingCardAssignment"
                },
                "lastUpdatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Updated time"
                },
                "orgId": {
                    "type": "string",
                    "description": "OrgId of the pricingCardAssignment"
                },
                "pricingCardId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Pricing card id"
                },
                "pricingCardName": {
                    "type": "string",
                    "description": "Pricing card name"
                }
            },
            "title": "MeteringPolicyAssignment",
            "description": "Pricing card assignment for project/cloud zone"
        },
        "MeteringPolicyAssignmentInfo": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32"
                },
                "entityType": {
                    "type": "string",
                    "enum": [
                        "ALL",
                        "PROJECT",
                        "CLOUDZONE"
                    ]
                }
            },
            "title": "MeteringPolicyAssignmentInfo"
        },
        "NamedMetering": {
            "type": "object",
            "properties": {
                "metering": {
                    "$ref": "#/definitions/Metering"
                },
                "name": {
                    "type": "string"
                }
            },
            "title": "NamedMetering"
        },
        "NamedMeteringItem": {
            "type": "object",
            "properties": {
                "itemName": {
                    "type": "string"
                },
                "namedMeterings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NamedMetering"
                    }
                }
            },
            "title": "NamedMeteringItem"
        },
        "NotificationScenarioConfig": {
            "type": "object",
            "required": [
                "enabled",
                "scenarioId"
            ],
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Notification scenario enabled"
                },
                "scenarioCategory": {
                    "type": "string",
                    "description": "Notification scenario category"
                },
                "scenarioDescription": {
                    "type": "string",
                    "description": "Notification scenario description"
                },
                "scenarioId": {
                    "type": "string",
                    "description": "Notification scenario id"
                },
                "scenarioName": {
                    "type": "string",
                    "description": "Notification scenario name"
                }
            },
            "title": "NotificationScenarioConfig",
            "description": "Represents a notification configuration."
        },
        "OneTimeMetering": {
            "type": "object",
            "properties": {
                "oneTimeFixedPrice": {
                    "type": "number",
                    "format": "double"
                }
            },
            "title": "OneTimeMetering"
        },
        "OneTimeMeteringItem": {
            "type": "object",
            "properties": {
                "itemName": {
                    "type": "string"
                },
                "oneTimeMetering": {
                    "$ref": "#/definitions/OneTimeMetering"
                }
            },
            "title": "OneTimeMeteringItem"
        },
        "Page": {
            "type": "object",
            "properties": {
                "totalElements": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Count of the deployments"
                }
            },
            "title": "Page",
            "description": "Project callback response containing count of deployments"
        },
        "PageOfApplication": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Application"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfApplication"
        },
        "PageOfCatalogItem": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CatalogItem"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfCatalogItem"
        },
        "PageOfCatalogItemType": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CatalogItemType"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfCatalogItemType"
        },
        "PageOfCatalogItemVersion": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CatalogItemVersion"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfCatalogItemVersion"
        },
        "PageOfCatalogSource": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CatalogSource"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfCatalogSource"
        },
        "PageOfDeployment": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Deployment"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfDeployment"
        },
        "PageOfDeploymentResource": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeploymentResource"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfDeploymentResource"
        },
        "PageOfEvent": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Event"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfEvent"
        },
        "PageOfFilterEntry": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterEntry"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfFilterEntry"
        },
        "PageOfMeteringPolicy": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MeteringPolicy"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfMeteringPolicy"
        },
        "PageOfMeteringPolicyAssignment": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MeteringPolicyAssignment"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfMeteringPolicyAssignment"
        },
        "PageOfNotificationScenarioConfig": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NotificationScenarioConfig"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfNotificationScenarioConfig"
        },
        "PageOfPolicy": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Policy"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfPolicy"
        },
        "PageOfPolicyDecisionOfObjectNode": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PolicyDecisionOfObjectNode"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfPolicyDecisionOfObjectNode"
        },
        "PageOfPolicyType": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PolicyType"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfPolicyType"
        },
        "PageOfRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Request"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfRequest"
        },
        "PageOfResource": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Resource"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfResource"
        },
        "PageOfResourceType": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceType"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                },
                "totalElements": {
                    "type": "integer",
                    "format": "int64"
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "PageOfResourceType"
        },
        "Policy": {
            "type": "object",
            "required": [
                "typeId"
            ],
            "properties": {
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Policy creation timestamp."
                },
                "createdBy": {
                    "type": "string",
                    "description": "Policy author."
                },
                "criteria": {
                    "description": "Policy-type-specific target object filter criteria applied during enforcement.",
                    "$ref": "#/definitions/Criteria"
                },
                "definition": {
                    "type": "object",
                    "description": "Policy-type-specific settings such as lease limits for lease policies."
                },
                "definitionLegend": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/DataElement"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The policy description."
                },
                "enforcementType": {
                    "type": "string",
                    "description": "Defines enforcement type for policy. Default enforcement type is HARD.",
                    "enum": [
                        "SOFT",
                        "HARD"
                    ]
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The policy ID."
                },
                "lastUpdatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Most recent policy update timestamp."
                },
                "lastUpdatedBy": {
                    "type": "string",
                    "description": "Most recent policy editor."
                },
                "name": {
                    "type": "string",
                    "description": "The policy name."
                },
                "orgId": {
                    "type": "string",
                    "description": "The ID of the organization to which the policy belongs."
                },
                "projectId": {
                    "type": "string",
                    "description": "For project-scoped policies, the ID of the project to which the policy belongs."
                },
                "scopeCriteria": {
                    "description": "Project-based scope criteria to apply policy to multiple projects in the organization. Not allowed for project-scoped policies.",
                    "$ref": "#/definitions/Criteria"
                },
                "statistics": {
                    "$ref": "#/definitions/PolicyStats"
                },
                "typeId": {
                    "type": "string",
                    "description": "The policy type ID."
                }
            },
            "title": "Policy",
            "description": "A policy such as lease policy that will be enforced."
        },
        "PolicyDecisionOfObjectNode": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "dryRunId": {
                    "type": "string",
                    "format": "uuid"
                },
                "dryRunSubTaskId": {
                    "type": "string",
                    "format": "uuid"
                },
                "effectivePolicyDefinition": {
                    "type": "object"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "orgId": {
                    "type": "string"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PolicyDecisionPolicy"
                    }
                },
                "projectId": {
                    "type": "string"
                },
                "targetId": {
                    "type": "string"
                },
                "targetName": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time"
                },
                "typeId": {
                    "type": "string"
                }
            },
            "title": "PolicyDecisionOfObjectNode",
            "description": "A decision made to enforce policies."
        },
        "PolicyDecisionPolicy": {
            "type": "object",
            "properties": {
                "enforcementType": {
                    "type": "string",
                    "enum": [
                        "SOFT",
                        "HARD"
                    ]
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "rank": {
                    "type": "integer",
                    "format": "int32"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "NOT_ENFORCED",
                        "ENFORCED",
                        "CONFLICT"
                    ]
                }
            },
            "title": "PolicyDecisionPolicy",
            "description": "Element of a decision."
        },
        "PolicyFeatureConfig": {
            "type": "object",
            "properties": {
                "enableDryRun": {
                    "type": "boolean"
                },
                "enableEnforcementType": {
                    "type": "boolean"
                },
                "enableUpdateNotification": {
                    "type": "boolean"
                }
            },
            "title": "PolicyFeatureConfig"
        },
        "PolicyStats": {
            "type": "object",
            "properties": {
                "conflictCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "enforcedCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "notEnforcedCount": {
                    "type": "integer",
                    "format": "int64"
                }
            },
            "title": "PolicyStats"
        },
        "PolicyType": {
            "type": "object",
            "required": [
                "definitionSchema",
                "displayName",
                "id",
                "name",
                "targetSchema"
            ],
            "properties": {
                "config": {
                    "description": "Defines configuration options for policy type",
                    "$ref": "#/definitions/PolicyFeatureConfig"
                },
                "definitionSchema": {
                    "type": "object",
                    "description": "Schema describing a policy object of this type"
                },
                "displayName": {
                    "type": "string",
                    "description": "Policy type display-name/label"
                },
                "id": {
                    "type": "string",
                    "description": "Policy type ID"
                },
                "name": {
                    "type": "string",
                    "description": "Policy type name"
                },
                "targetSchema": {
                    "type": "object",
                    "description": "Schema describing objects that can be affected by this policy"
                }
            },
            "title": "PolicyType",
            "description": "A type of policy that includes the schema of the policy itself and the schema of the objects affected by the policy"
        },
        "RateFactor": {
            "type": "object",
            "properties": {
                "contextMeteringItem": {
                    "type": "string"
                },
                "rateFactor": {
                    "type": "number",
                    "format": "double"
                }
            },
            "title": "RateFactor"
        },
        "RateFactorItem": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "rateFactor": {
                    "$ref": "#/definitions/RateFactor"
                },
                "value": {
                    "type": "string"
                }
            },
            "title": "RateFactorItem"
        },
        "Request": {
            "type": "object",
            "required": [
                "completedTasks",
                "createdAt",
                "name",
                "requestedBy",
                "totalTasks"
            ],
            "properties": {
                "actionId": {
                    "type": "string",
                    "description": "Identifier of the requested action"
                },
                "approvedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time at which the request was approved."
                },
                "blueprintId": {
                    "type": "string",
                    "description": "Identifier of the requested blueprint in the form 'UUID:version'"
                },
                "cancelable": {
                    "type": "boolean",
                    "description": "Indicates whether request can be canceled or not."
                },
                "catalogItemId": {
                    "type": "string",
                    "description": "Identifier of the requested catalog item in the form 'UUID:version'"
                },
                "completedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time at which the request completed."
                },
                "completedTasks": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of tasks completed while fulfilling this request."
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation time (e.g. date format '2019-07-13T23:16:49.310Z')."
                },
                "deploymentId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Identifier of the requested deployment id to which the request applies to"
                },
                "details": {
                    "type": "string",
                    "description": "Longer user-friendly details of the request."
                },
                "dismissed": {
                    "type": "boolean",
                    "description": "Indicates whether request is in dismissed state."
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Request identifier"
                },
                "initializedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time at which the request was initialized."
                },
                "inputs": {
                    "type": "object",
                    "description": "Request inputs"
                },
                "name": {
                    "type": "string",
                    "description": "Short user-friendly label of the request (e.g. 'shuting down myVM')"
                },
                "outputs": {
                    "type": "object",
                    "description": "Request outputs"
                },
                "requestedBy": {
                    "type": "string",
                    "description": "User that initiated the request"
                },
                "resourceIds": {
                    "type": "array",
                    "description": "Optional resource ids to which the request applies to",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Request overall execution status.",
                    "enum": [
                        "CREATED",
                        "PENDING",
                        "INITIALIZATION",
                        "CHECKING_APPROVAL",
                        "APPROVAL_PENDING",
                        "INPROGRESS",
                        "COMPLETION",
                        "APPROVAL_REJECTED",
                        "ABORTED",
                        "SUCCESSFUL",
                        "FAILED"
                    ]
                },
                "totalTasks": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of tasks need to be completed to fulfil this request."
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update time (e.g. date format '2019-07-13T23:16:49.310Z')."
                }
            },
            "title": "Request",
            "description": "Represents deployment requests."
        },
        "Resource": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation time"
                },
                "currentRequest": {
                    "description": "Current ongoing request on the resource",
                    "$ref": "#/definitions/Request"
                },
                "deployment": {
                    "description": "Deployment to which resource belongs",
                    "$ref": "#/definitions/DeploymentReference"
                },
                "deploymentId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Resource deployment id"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the resource"
                },
                "expense": {
                    "description": "Expense associated with the deployment.",
                    "readOnly": true,
                    "$ref": "#/definitions/Expense"
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier of the resource"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource"
                },
                "orgId": {
                    "type": "string",
                    "description": "Resource org id"
                },
                "origin": {
                    "type": "string",
                    "description": "Origin of the resource",
                    "enum": [
                        "DISCOVERED",
                        "ONBOARDED",
                        "MIGRATED"
                    ]
                },
                "project": {
                    "description": "Project to which resource's deployment belongs",
                    "$ref": "#/definitions/ResourceReference"
                },
                "projectId": {
                    "type": "string",
                    "description": "Resource project id"
                },
                "properties": {
                    "type": "object"
                },
                "syncStatus": {
                    "type": "string",
                    "description": "The current sync status",
                    "enum": [
                        "SUCCESS",
                        "MISSING",
                        "STALE"
                    ]
                },
                "type": {
                    "type": "string",
                    "description": "Type of the resource"
                }
            },
            "title": "Resource",
            "description": "A resource"
        },
        "ResourceAction": {
            "type": "object",
            "properties": {
                "actionType": {
                    "type": "string",
                    "description": "Resource action type",
                    "enum": [
                        "RESOURCE_ACTION",
                        "RESOURCE_EXTENSION"
                    ]
                },
                "dependents": {
                    "type": "array",
                    "description": "Dependent resources",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Resource action description"
                },
                "displayName": {
                    "type": "string",
                    "description": "Resource action display name"
                },
                "formDefinition": {
                    "description": "Resource action custom UI definition. Optional",
                    "$ref": "#/definitions/FormDefinition"
                },
                "id": {
                    "type": "string",
                    "description": "Resource action id"
                },
                "name": {
                    "type": "string",
                    "description": "Resource action name"
                },
                "orgId": {
                    "type": "string",
                    "description": "Resource action org ID"
                },
                "projectId": {
                    "type": "string",
                    "description": "Resource action project ID"
                },
                "schema": {
                    "type": "object",
                    "description": "Resource action input schema"
                },
                "valid": {
                    "type": "boolean",
                    "description": "Resource action is valid for current state"
                }
            },
            "title": "ResourceAction"
        },
        "ResourceActionRequest": {
            "type": "object",
            "properties": {
                "actionId": {
                    "type": "string",
                    "description": "The id of the action to perform."
                },
                "inputs": {
                    "type": "object",
                    "description": "Resource action request inputs"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason for requesting a day2 operation"
                }
            },
            "title": "ResourceActionRequest",
            "description": "Represents a resource day-two request"
        },
        "ResourceReference": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "title": "ResourceReference"
        },
        "ResourceRequestResponse": {
            "type": "object",
            "properties": {
                "deploymentId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Identifier of the requested deployment id to which the request applies to"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier"
                },
                "requestId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Request identifier"
                },
                "resourceId": {
                    "type": "string",
                    "description": "Resource ID"
                }
            },
            "title": "ResourceRequestResponse",
            "description": "Resource request response"
        },
        "ResourceSpecification": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "deploymentId": {
                    "type": "string",
                    "description": "Resource deployment id"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource"
                },
                "projectId": {
                    "type": "string",
                    "description": "Resource project id"
                },
                "properties": {
                    "type": "object",
                    "description": "Resource properties"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the resource"
                }
            },
            "title": "ResourceSpecification",
            "description": "Resource spec to create resource"
        },
        "ResourceType": {
            "type": "object",
            "properties": {
                "accountType": {
                    "type": "string",
                    "description": "Optional. Account type to which the resource type belongs to. Example: AWS, Azure etc",
                    "enum": [
                        "AWS",
                        "Azure",
                        "GCP",
                        "vSphere",
                        "vSphere-cloud",
                        "Azure-EA",
                        "NSX-V",
                        "NSX-T",
                        "NSX-P",
                        "NSX-P-cloud",
                        "vCloud Director",
                        "VMC",
                        "Puppet",
                        "Ansible"
                    ]
                },
                "composable": {
                    "type": "boolean",
                    "description": "Composable with other types or not"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time at which the resource type was created."
                },
                "createdBy": {
                    "type": "string",
                    "description": "Name of the user who created the resource type."
                },
                "description": {
                    "type": "string",
                    "description": "Resource type description"
                },
                "displayName": {
                    "type": "string",
                    "description": "Resource display name"
                },
                "id": {
                    "type": "string",
                    "description": "Resource type id"
                },
                "name": {
                    "type": "string",
                    "description": "Resource type name"
                },
                "orgId": {
                    "type": "string",
                    "description": "Org ID where resource type belongs"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID where resource type belongs"
                },
                "providerId": {
                    "type": "string",
                    "description": "Provider Id"
                },
                "schema": {
                    "type": "object",
                    "description": "Json schema that represents resource type, a simplified version of http://json-schema.org/latest/json-schema-validation.html#rfc.section.5"
                },
                "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time at which the resource type was updated."
                },
                "updatedBy": {
                    "type": "string",
                    "description": "Name of the user who updated the resource type."
                }
            },
            "title": "ResourceType"
        },
        "ResponseEntity": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "object"
                },
                "statusCode": {
                    "type": "string",
                    "enum": [
                        "100 CONTINUE",
                        "101 SWITCHING_PROTOCOLS",
                        "102 PROCESSING",
                        "103 CHECKPOINT",
                        "200 OK",
                        "201 CREATED",
                        "202 ACCEPTED",
                        "203 NON_AUTHORITATIVE_INFORMATION",
                        "204 NO_CONTENT",
                        "205 RESET_CONTENT",
                        "206 PARTIAL_CONTENT",
                        "207 MULTI_STATUS",
                        "208 ALREADY_REPORTED",
                        "226 IM_USED",
                        "300 MULTIPLE_CHOICES",
                        "301 MOVED_PERMANENTLY",
                        "302 FOUND",
                        "302 MOVED_TEMPORARILY",
                        "303 SEE_OTHER",
                        "304 NOT_MODIFIED",
                        "305 USE_PROXY",
                        "307 TEMPORARY_REDIRECT",
                        "308 PERMANENT_REDIRECT",
                        "400 BAD_REQUEST",
                        "401 UNAUTHORIZED",
                        "402 PAYMENT_REQUIRED",
                        "403 FORBIDDEN",
                        "404 NOT_FOUND",
                        "405 METHOD_NOT_ALLOWED",
                        "406 NOT_ACCEPTABLE",
                        "407 PROXY_AUTHENTICATION_REQUIRED",
                        "408 REQUEST_TIMEOUT",
                        "409 CONFLICT",
                        "410 GONE",
                        "411 LENGTH_REQUIRED",
                        "412 PRECONDITION_FAILED",
                        "413 PAYLOAD_TOO_LARGE",
                        "413 REQUEST_ENTITY_TOO_LARGE",
                        "414 URI_TOO_LONG",
                        "414 REQUEST_URI_TOO_LONG",
                        "415 UNSUPPORTED_MEDIA_TYPE",
                        "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                        "417 EXPECTATION_FAILED",
                        "418 I_AM_A_TEAPOT",
                        "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                        "420 METHOD_FAILURE",
                        "421 DESTINATION_LOCKED",
                        "422 UNPROCESSABLE_ENTITY",
                        "423 LOCKED",
                        "424 FAILED_DEPENDENCY",
                        "425 TOO_EARLY",
                        "426 UPGRADE_REQUIRED",
                        "428 PRECONDITION_REQUIRED",
                        "429 TOO_MANY_REQUESTS",
                        "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                        "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                        "500 INTERNAL_SERVER_ERROR",
                        "501 NOT_IMPLEMENTED",
                        "502 BAD_GATEWAY",
                        "503 SERVICE_UNAVAILABLE",
                        "504 GATEWAY_TIMEOUT",
                        "505 HTTP_VERSION_NOT_SUPPORTED",
                        "506 VARIANT_ALSO_NEGOTIATES",
                        "507 INSUFFICIENT_STORAGE",
                        "508 LOOP_DETECTED",
                        "509 BANDWIDTH_LIMIT_EXCEEDED",
                        "510 NOT_EXTENDED",
                        "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                },
                "statusCodeValue": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "ResponseEntity"
        },
        "SliceOfEventLog": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EventLog"
                    }
                },
                "empty": {
                    "type": "boolean"
                },
                "first": {
                    "type": "boolean"
                },
                "last": {
                    "type": "boolean"
                },
                "number": {
                    "type": "integer",
                    "format": "int32"
                },
                "numberOfElements": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int32"
                },
                "sort": {
                    "$ref": "#/definitions/Sort"
                }
            },
            "title": "SliceOfEventLog"
        },
        "Sort": {
            "type": "object",
            "properties": {
                "empty": {
                    "type": "boolean"
                },
                "sorted": {
                    "type": "boolean"
                },
                "unsorted": {
                    "type": "boolean"
                }
            },
            "title": "Sort"
        },
        "StreamingResponseBody": {
            "type": "object",
            "title": "StreamingResponseBody"
        },
        "TagBasedMetering": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "metering": {
                    "$ref": "#/definitions/Metering"
                },
                "value": {
                    "type": "string"
                }
            },
            "title": "TagBasedMetering"
        },
        "TagBasedMeteringItem": {
            "type": "object",
            "properties": {
                "itemName": {
                    "type": "string"
                },
                "tagBasedMeterings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TagBasedMetering"
                    }
                }
            },
            "title": "TagBasedMeteringItem"
        },
        "TagBasedOneTimeMetering": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "oneTimeMetering": {
                    "$ref": "#/definitions/OneTimeMetering"
                },
                "value": {
                    "type": "string"
                }
            },
            "title": "TagBasedOneTimeMetering"
        },
        "TagBasedOneTimeMeteringItem": {
            "type": "object",
            "properties": {
                "itemName": {
                    "type": "string"
                },
                "oneTimeMeterings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TagBasedOneTimeMetering"
                    }
                }
            },
            "title": "TagBasedOneTimeMeteringItem"
        },
        "TagBasedRateFactorItem": {
            "type": "object",
            "properties": {
                "itemName": {
                    "type": "string"
                },
                "rateFactors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RateFactorItem"
                    }
                }
            },
            "title": "TagBasedRateFactorItem"
        },
        "TimeSeriesValue": {
            "type": "object",
            "properties": {
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of the metric.",
                    "readOnly": true
                },
                "value": {
                    "type": "number",
                    "description": "The expense value at the timestamp.",
                    "readOnly": true
                }
            },
            "title": "TimeSeriesValue",
            "description": "A timeseries object containing timestamp and price value at the timestamp"
        }
    }
}
