// Code generated by go-swagger; DO NOT EDIT.

package custom_integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// RestoreByIDAndVersionUsingPOSTReader is a Reader for the RestoreByIDAndVersionUsingPOST structure.
type RestoreByIDAndVersionUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RestoreByIDAndVersionUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRestoreByIDAndVersionUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRestoreByIDAndVersionUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRestoreByIDAndVersionUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRestoreByIDAndVersionUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRestoreByIDAndVersionUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRestoreByIDAndVersionUsingPOSTOK creates a RestoreByIDAndVersionUsingPOSTOK with default headers values
func NewRestoreByIDAndVersionUsingPOSTOK() *RestoreByIDAndVersionUsingPOSTOK {
	return &RestoreByIDAndVersionUsingPOSTOK{}
}

/*
RestoreByIDAndVersionUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type RestoreByIDAndVersionUsingPOSTOK struct {
	Payload models.CustomIntegration
}

// IsSuccess returns true when this restore by Id and version using p o s t o k response has a 2xx status code
func (o *RestoreByIDAndVersionUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this restore by Id and version using p o s t o k response has a 3xx status code
func (o *RestoreByIDAndVersionUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore by Id and version using p o s t o k response has a 4xx status code
func (o *RestoreByIDAndVersionUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this restore by Id and version using p o s t o k response has a 5xx status code
func (o *RestoreByIDAndVersionUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this restore by Id and version using p o s t o k response a status code equal to that given
func (o *RestoreByIDAndVersionUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

func (o *RestoreByIDAndVersionUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /codestream/api/custom-integrations/{id}/versions/{version}/restore][%d] restoreByIdAndVersionUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *RestoreByIDAndVersionUsingPOSTOK) String() string {
	return fmt.Sprintf("[POST /codestream/api/custom-integrations/{id}/versions/{version}/restore][%d] restoreByIdAndVersionUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *RestoreByIDAndVersionUsingPOSTOK) GetPayload() models.CustomIntegration {
	return o.Payload
}

func (o *RestoreByIDAndVersionUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalCustomIntegration(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewRestoreByIDAndVersionUsingPOSTUnauthorized creates a RestoreByIDAndVersionUsingPOSTUnauthorized with default headers values
func NewRestoreByIDAndVersionUsingPOSTUnauthorized() *RestoreByIDAndVersionUsingPOSTUnauthorized {
	return &RestoreByIDAndVersionUsingPOSTUnauthorized{}
}

/*
RestoreByIDAndVersionUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type RestoreByIDAndVersionUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this restore by Id and version using p o s t unauthorized response has a 2xx status code
func (o *RestoreByIDAndVersionUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore by Id and version using p o s t unauthorized response has a 3xx status code
func (o *RestoreByIDAndVersionUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore by Id and version using p o s t unauthorized response has a 4xx status code
func (o *RestoreByIDAndVersionUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this restore by Id and version using p o s t unauthorized response has a 5xx status code
func (o *RestoreByIDAndVersionUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this restore by Id and version using p o s t unauthorized response a status code equal to that given
func (o *RestoreByIDAndVersionUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RestoreByIDAndVersionUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /codestream/api/custom-integrations/{id}/versions/{version}/restore][%d] restoreByIdAndVersionUsingPOSTUnauthorized ", 401)
}

func (o *RestoreByIDAndVersionUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /codestream/api/custom-integrations/{id}/versions/{version}/restore][%d] restoreByIdAndVersionUsingPOSTUnauthorized ", 401)
}

func (o *RestoreByIDAndVersionUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRestoreByIDAndVersionUsingPOSTForbidden creates a RestoreByIDAndVersionUsingPOSTForbidden with default headers values
func NewRestoreByIDAndVersionUsingPOSTForbidden() *RestoreByIDAndVersionUsingPOSTForbidden {
	return &RestoreByIDAndVersionUsingPOSTForbidden{}
}

/*
RestoreByIDAndVersionUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RestoreByIDAndVersionUsingPOSTForbidden struct {
}

// IsSuccess returns true when this restore by Id and version using p o s t forbidden response has a 2xx status code
func (o *RestoreByIDAndVersionUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore by Id and version using p o s t forbidden response has a 3xx status code
func (o *RestoreByIDAndVersionUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore by Id and version using p o s t forbidden response has a 4xx status code
func (o *RestoreByIDAndVersionUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this restore by Id and version using p o s t forbidden response has a 5xx status code
func (o *RestoreByIDAndVersionUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this restore by Id and version using p o s t forbidden response a status code equal to that given
func (o *RestoreByIDAndVersionUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RestoreByIDAndVersionUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /codestream/api/custom-integrations/{id}/versions/{version}/restore][%d] restoreByIdAndVersionUsingPOSTForbidden ", 403)
}

func (o *RestoreByIDAndVersionUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /codestream/api/custom-integrations/{id}/versions/{version}/restore][%d] restoreByIdAndVersionUsingPOSTForbidden ", 403)
}

func (o *RestoreByIDAndVersionUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRestoreByIDAndVersionUsingPOSTNotFound creates a RestoreByIDAndVersionUsingPOSTNotFound with default headers values
func NewRestoreByIDAndVersionUsingPOSTNotFound() *RestoreByIDAndVersionUsingPOSTNotFound {
	return &RestoreByIDAndVersionUsingPOSTNotFound{}
}

/*
RestoreByIDAndVersionUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RestoreByIDAndVersionUsingPOSTNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this restore by Id and version using p o s t not found response has a 2xx status code
func (o *RestoreByIDAndVersionUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore by Id and version using p o s t not found response has a 3xx status code
func (o *RestoreByIDAndVersionUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore by Id and version using p o s t not found response has a 4xx status code
func (o *RestoreByIDAndVersionUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this restore by Id and version using p o s t not found response has a 5xx status code
func (o *RestoreByIDAndVersionUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this restore by Id and version using p o s t not found response a status code equal to that given
func (o *RestoreByIDAndVersionUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RestoreByIDAndVersionUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /codestream/api/custom-integrations/{id}/versions/{version}/restore][%d] restoreByIdAndVersionUsingPOSTNotFound  %+v", 404, o.Payload)
}

func (o *RestoreByIDAndVersionUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /codestream/api/custom-integrations/{id}/versions/{version}/restore][%d] restoreByIdAndVersionUsingPOSTNotFound  %+v", 404, o.Payload)
}

func (o *RestoreByIDAndVersionUsingPOSTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RestoreByIDAndVersionUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestoreByIDAndVersionUsingPOSTInternalServerError creates a RestoreByIDAndVersionUsingPOSTInternalServerError with default headers values
func NewRestoreByIDAndVersionUsingPOSTInternalServerError() *RestoreByIDAndVersionUsingPOSTInternalServerError {
	return &RestoreByIDAndVersionUsingPOSTInternalServerError{}
}

/*
RestoreByIDAndVersionUsingPOSTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type RestoreByIDAndVersionUsingPOSTInternalServerError struct {
}

// IsSuccess returns true when this restore by Id and version using p o s t internal server error response has a 2xx status code
func (o *RestoreByIDAndVersionUsingPOSTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restore by Id and version using p o s t internal server error response has a 3xx status code
func (o *RestoreByIDAndVersionUsingPOSTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restore by Id and version using p o s t internal server error response has a 4xx status code
func (o *RestoreByIDAndVersionUsingPOSTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this restore by Id and version using p o s t internal server error response has a 5xx status code
func (o *RestoreByIDAndVersionUsingPOSTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this restore by Id and version using p o s t internal server error response a status code equal to that given
func (o *RestoreByIDAndVersionUsingPOSTInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RestoreByIDAndVersionUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /codestream/api/custom-integrations/{id}/versions/{version}/restore][%d] restoreByIdAndVersionUsingPOSTInternalServerError ", 500)
}

func (o *RestoreByIDAndVersionUsingPOSTInternalServerError) String() string {
	return fmt.Sprintf("[POST /codestream/api/custom-integrations/{id}/versions/{version}/restore][%d] restoreByIdAndVersionUsingPOSTInternalServerError ", 500)
}

func (o *RestoreByIDAndVersionUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
