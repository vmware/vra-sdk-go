// Code generated by go-swagger; DO NOT EDIT.

package icons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// DownloadReader is a Reader for the Download structure.
type DownloadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDownloadBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDownloadOK creates a DownloadOK with default headers values
func NewDownloadOK() *DownloadOK {
	return &DownloadOK{}
}

/*DownloadOK handles this case with default header values.

Success - return the catalog icon.
*/
type DownloadOK struct {
	Payload strfmt.Base64
}

func (o *DownloadOK) Error() string {
	return fmt.Sprintf("[GET /icon/api/icons/{id}][%d] downloadOK  %+v", 200, o.Payload)
}

func (o *DownloadOK) GetPayload() strfmt.Base64 {
	return o.Payload
}

func (o *DownloadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadBadRequest creates a DownloadBadRequest with default headers values
func NewDownloadBadRequest() *DownloadBadRequest {
	return &DownloadBadRequest{}
}

/*DownloadBadRequest handles this case with default header values.

Invalid request - bad data.
*/
type DownloadBadRequest struct {
	Payload *models.Error
}

func (o *DownloadBadRequest) Error() string {
	return fmt.Sprintf("[GET /icon/api/icons/{id}][%d] downloadBadRequest  %+v", 400, o.Payload)
}

func (o *DownloadBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DownloadBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadNotFound creates a DownloadNotFound with default headers values
func NewDownloadNotFound() *DownloadNotFound {
	return &DownloadNotFound{}
}

/*DownloadNotFound handles this case with default header values.

Icon not found.
*/
type DownloadNotFound struct {
	Payload *models.Error
}

func (o *DownloadNotFound) Error() string {
	return fmt.Sprintf("[GET /icon/api/icons/{id}][%d] downloadNotFound  %+v", 404, o.Payload)
}

func (o *DownloadNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DownloadNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
