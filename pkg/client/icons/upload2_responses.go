// Code generated by go-swagger; DO NOT EDIT.

package icons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// Upload2Reader is a Reader for the Upload2 structure.
type Upload2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *Upload2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpload2Created()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpload2BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpload2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpload2Created creates a Upload2Created with default headers values
func NewUpload2Created() *Upload2Created {
	return &Upload2Created{}
}

/* Upload2Created describes a response with status code 201, with default header values.

Success - create an icon.
*/
type Upload2Created struct {
}

func (o *Upload2Created) Error() string {
	return fmt.Sprintf("[POST /icon/api/icons][%d] upload2Created ", 201)
}

func (o *Upload2Created) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpload2BadRequest creates a Upload2BadRequest with default headers values
func NewUpload2BadRequest() *Upload2BadRequest {
	return &Upload2BadRequest{}
}

/* Upload2BadRequest describes a response with status code 400, with default header values.

Invalid request - bad data.
*/
type Upload2BadRequest struct {
	Payload *models.Error
}

func (o *Upload2BadRequest) Error() string {
	return fmt.Sprintf("[POST /icon/api/icons][%d] upload2BadRequest  %+v", 400, o.Payload)
}
func (o *Upload2BadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *Upload2BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpload2Forbidden creates a Upload2Forbidden with default headers values
func NewUpload2Forbidden() *Upload2Forbidden {
	return &Upload2Forbidden{}
}

/* Upload2Forbidden describes a response with status code 403, with default header values.

Forbidden.
*/
type Upload2Forbidden struct {
}

func (o *Upload2Forbidden) Error() string {
	return fmt.Sprintf("[POST /icon/api/icons][%d] upload2Forbidden ", 403)
}

func (o *Upload2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
