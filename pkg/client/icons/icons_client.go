// Code generated by go-swagger; DO NOT EDIT.

package icons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new icons API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for icons API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Delete2(params *Delete2Params, opts ...ClientOption) (*Delete2NoContent, error)

	Download2(params *Download2Params, opts ...ClientOption) (*Download2OK, error)

	Upload2(params *Upload2Params, opts ...ClientOption) (*Upload2Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Delete2 deletes an icon

  Delete an existing icon by its unique id.
*/
func (a *Client) Delete2(params *Delete2Params, opts ...ClientOption) (*Delete2NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelete2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_2",
		Method:             "DELETE",
		PathPattern:        "/icon/api/icons/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Delete2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Delete2NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Download2 downloads an icon

  Download an existing icon by its unique id.
*/
func (a *Client) Download2(params *Download2Params, opts ...ClientOption) (*Download2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownload2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "download_2",
		Method:             "GET",
		PathPattern:        "/icon/api/icons/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Download2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Download2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for download_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Upload2 uploads an icon

  Create an icon.
*/
func (a *Client) Upload2(params *Upload2Params, opts ...ClientOption) (*Upload2Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpload2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "upload_2",
		Method:             "POST",
		PathPattern:        "/icon/api/icons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Upload2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Upload2Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upload_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
