// Code generated by go-swagger; DO NOT EDIT.

package cluster_plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cluster plans API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cluster plans API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUsingPOSTMixin5(params *CreateUsingPOSTMixin5Params, opts ...ClientOption) (*CreateUsingPOSTMixin5OK, error)

	DeleteUsingDELETE(params *DeleteUsingDELETEParams, opts ...ClientOption) (*DeleteUsingDELETEOK, error)

	GetUsingGETMixin5(params *GetUsingGETMixin5Params, opts ...ClientOption) (*GetUsingGETMixin5OK, error)

	SearchClusterPlansUsingGET(params *SearchClusterPlansUsingGETParams, opts ...ClientOption) (*SearchClusterPlansUsingGETOK, error)

	UpdateUsingPUT(params *UpdateUsingPUTParams, opts ...ClientOption) (*UpdateUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateUsingPOSTMixin5 creates a cluster plan

  The body shall contain a cluster plan entity.
*/
func (a *Client) CreateUsingPOSTMixin5(params *CreateUsingPOSTMixin5Params, opts ...ClientOption) (*CreateUsingPOSTMixin5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOSTMixin5Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUsingPOSTMixin5",
		Method:             "POST",
		PathPattern:        "/cmx/api/resources/cluster-plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUsingPOSTMixin5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUsingPOSTMixin5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUsingPOSTMixin5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUsingDELETE deletes a cluster plan by Id

  Delete a Cluster Plan identified by id string
*/
func (a *Client) DeleteUsingDELETE(params *DeleteUsingDELETEParams, opts ...ClientOption) (*DeleteUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cmx/api/resources/cluster-plans/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsingGETMixin5 gets a cluster plan by Id

  Get a Cluster Plan by Id
*/
func (a *Client) GetUsingGETMixin5(params *GetUsingGETMixin5Params, opts ...ClientOption) (*GetUsingGETMixin5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGETMixin5Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUsingGETMixin5",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/cluster-plans/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsingGETMixin5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGETMixin5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsingGETMixin5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchClusterPlansUsingGET searches a cluster plan instance

  Search a cluster plan by name and cloud account document self link id.
*/
func (a *Client) SearchClusterPlansUsingGET(params *SearchClusterPlansUsingGETParams, opts ...ClientOption) (*SearchClusterPlansUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchClusterPlansUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchClusterPlansUsingGET",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/cluster-plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchClusterPlansUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchClusterPlansUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchClusterPlansUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUsingPUT updates a cluster plan

  The body shall contains the cluster plan mutation entity.
*/
func (a *Client) UpdateUsingPUT(params *UpdateUsingPUTParams, opts ...ClientOption) (*UpdateUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cmx/api/resources/cluster-plans/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
