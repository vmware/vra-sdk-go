// Code generated by go-swagger; DO NOT EDIT.

package about_the_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// AboutReader is a Reader for the About structure.
type AboutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AboutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAboutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAboutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAboutOK creates a AboutOK with default headers values
func NewAboutOK() *AboutOK {
	return &AboutOK{}
}

/*
AboutOK describes a response with status code 200, with default header values.

Success
*/
type AboutOK struct {
	Payload *models.AboutResponse
}

// IsSuccess returns true when this about o k response has a 2xx status code
func (o *AboutOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this about o k response has a 3xx status code
func (o *AboutOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this about o k response has a 4xx status code
func (o *AboutOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this about o k response has a 5xx status code
func (o *AboutOK) IsServerError() bool {
	return false
}

// IsCode returns true when this about o k response a status code equal to that given
func (o *AboutOK) IsCode(code int) bool {
	return code == 200
}

func (o *AboutOK) Error() string {
	return fmt.Sprintf("[GET /relocation/about][%d] aboutOK  %+v", 200, o.Payload)
}

func (o *AboutOK) String() string {
	return fmt.Sprintf("[GET /relocation/about][%d] aboutOK  %+v", 200, o.Payload)
}

func (o *AboutOK) GetPayload() *models.AboutResponse {
	return o.Payload
}

func (o *AboutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AboutResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAboutUnauthorized creates a AboutUnauthorized with default headers values
func NewAboutUnauthorized() *AboutUnauthorized {
	return &AboutUnauthorized{}
}

/*
AboutUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AboutUnauthorized struct {
}

// IsSuccess returns true when this about unauthorized response has a 2xx status code
func (o *AboutUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this about unauthorized response has a 3xx status code
func (o *AboutUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this about unauthorized response has a 4xx status code
func (o *AboutUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this about unauthorized response has a 5xx status code
func (o *AboutUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this about unauthorized response a status code equal to that given
func (o *AboutUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AboutUnauthorized) Error() string {
	return fmt.Sprintf("[GET /relocation/about][%d] aboutUnauthorized ", 401)
}

func (o *AboutUnauthorized) String() string {
	return fmt.Sprintf("[GET /relocation/about][%d] aboutUnauthorized ", 401)
}

func (o *AboutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
