// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new network API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetwork(params *CreateNetworkParams, opts ...ClientOption) (*CreateNetworkAccepted, error)

	DeleteNetwork(params *DeleteNetworkParams, opts ...ClientOption) (*DeleteNetworkAccepted, error)

	GetMachineNetworkInterface(params *GetMachineNetworkInterfaceParams, opts ...ClientOption) (*GetMachineNetworkInterfaceOK, error)

	GetNetwork(params *GetNetworkParams, opts ...ClientOption) (*GetNetworkOK, error)

	GetNetworkDomain(params *GetNetworkDomainParams, opts ...ClientOption) (*GetNetworkDomainOK, error)

	GetNetworkDomains(params *GetNetworkDomainsParams, opts ...ClientOption) (*GetNetworkDomainsOK, error)

	GetNetworks(params *GetNetworksParams, opts ...ClientOption) (*GetNetworksOK, error)

	PatchMachineNetworkInterface(params *PatchMachineNetworkInterfaceParams, opts ...ClientOption) (*PatchMachineNetworkInterfaceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetwork creates network

  Provision a new network based on the passed in constraints. The network should be destroyed after the machine is destroyed to free up resources.
*/
func (a *Client) CreateNetwork(params *CreateNetworkParams, opts ...ClientOption) (*CreateNetworkAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetwork",
		Method:             "POST",
		PathPattern:        "/iaas/api/networks",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetwork deletes a network

  Delete a network with a given id
*/
func (a *Client) DeleteNetwork(params *DeleteNetworkParams, opts ...ClientOption) (*DeleteNetworkAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetwork",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/networks/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMachineNetworkInterface gets machine network interface

  Get network interface with a given id for specific machine
*/
func (a *Client) GetMachineNetworkInterface(params *GetMachineNetworkInterfaceParams, opts ...ClientOption) (*GetMachineNetworkInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachineNetworkInterfaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMachineNetworkInterface",
		Method:             "GET",
		PathPattern:        "/iaas/api/machines/{id}/network-interfaces/{networkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMachineNetworkInterfaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMachineNetworkInterfaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMachineNetworkInterface: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetwork gets network

  Get network with a given id
*/
func (a *Client) GetNetwork(params *GetNetworkParams, opts ...ClientOption) (*GetNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetwork",
		Method:             "GET",
		PathPattern:        "/iaas/api/networks/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkDomain gets network domain

  Get network domain with a given id
*/
func (a *Client) GetNetworkDomain(params *GetNetworkDomainParams, opts ...ClientOption) (*GetNetworkDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkDomain",
		Method:             "GET",
		PathPattern:        "/iaas/api/network-domains/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkDomains gets network domains

  Get all network domains.
*/
func (a *Client) GetNetworkDomains(params *GetNetworkDomainsParams, opts ...ClientOption) (*GetNetworkDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkDomainsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkDomains",
		Method:             "GET",
		PathPattern:        "/iaas/api/network-domains",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkDomainsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkDomains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworks gets networks

  Get all networks
*/
func (a *Client) GetNetworks(params *GetNetworksParams, opts ...ClientOption) (*GetNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworks",
		Method:             "GET",
		PathPattern:        "/iaas/api/networks",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchMachineNetworkInterface patches machine network interface

  Patch network interface with a given id for specific machine. Only name, description, IPv4 address and custom property updates are supported. The change to name and IPv4 address will not propagate to cloud endpoint for provisioned machines.
*/
func (a *Client) PatchMachineNetworkInterface(params *PatchMachineNetworkInterfaceParams, opts ...ClientOption) (*PatchMachineNetworkInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchMachineNetworkInterfaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchMachineNetworkInterface",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/machines/{id}/network-interfaces/{networkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchMachineNetworkInterfaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchMachineNetworkInterfaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchMachineNetworkInterface: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
