// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// PatchMachineNetworkInterfaceReader is a Reader for the PatchMachineNetworkInterface structure.
type PatchMachineNetworkInterfaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchMachineNetworkInterfaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchMachineNetworkInterfaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchMachineNetworkInterfaceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchMachineNetworkInterfaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchMachineNetworkInterfaceOK creates a PatchMachineNetworkInterfaceOK with default headers values
func NewPatchMachineNetworkInterfaceOK() *PatchMachineNetworkInterfaceOK {
	return &PatchMachineNetworkInterfaceOK{}
}

/*
PatchMachineNetworkInterfaceOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchMachineNetworkInterfaceOK struct {
	Payload *models.NetworkInterface
}

// IsSuccess returns true when this patch machine network interface o k response has a 2xx status code
func (o *PatchMachineNetworkInterfaceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch machine network interface o k response has a 3xx status code
func (o *PatchMachineNetworkInterfaceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch machine network interface o k response has a 4xx status code
func (o *PatchMachineNetworkInterfaceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch machine network interface o k response has a 5xx status code
func (o *PatchMachineNetworkInterfaceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch machine network interface o k response a status code equal to that given
func (o *PatchMachineNetworkInterfaceOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchMachineNetworkInterfaceOK) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/machines/{id}/network-interfaces/{networkId}][%d] patchMachineNetworkInterfaceOK  %+v", 200, o.Payload)
}

func (o *PatchMachineNetworkInterfaceOK) String() string {
	return fmt.Sprintf("[PATCH /iaas/api/machines/{id}/network-interfaces/{networkId}][%d] patchMachineNetworkInterfaceOK  %+v", 200, o.Payload)
}

func (o *PatchMachineNetworkInterfaceOK) GetPayload() *models.NetworkInterface {
	return o.Payload
}

func (o *PatchMachineNetworkInterfaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkInterface)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchMachineNetworkInterfaceForbidden creates a PatchMachineNetworkInterfaceForbidden with default headers values
func NewPatchMachineNetworkInterfaceForbidden() *PatchMachineNetworkInterfaceForbidden {
	return &PatchMachineNetworkInterfaceForbidden{}
}

/*
PatchMachineNetworkInterfaceForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchMachineNetworkInterfaceForbidden struct {
	Payload *models.ServiceErrorResponse
}

// IsSuccess returns true when this patch machine network interface forbidden response has a 2xx status code
func (o *PatchMachineNetworkInterfaceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch machine network interface forbidden response has a 3xx status code
func (o *PatchMachineNetworkInterfaceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch machine network interface forbidden response has a 4xx status code
func (o *PatchMachineNetworkInterfaceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch machine network interface forbidden response has a 5xx status code
func (o *PatchMachineNetworkInterfaceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch machine network interface forbidden response a status code equal to that given
func (o *PatchMachineNetworkInterfaceForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchMachineNetworkInterfaceForbidden) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/machines/{id}/network-interfaces/{networkId}][%d] patchMachineNetworkInterfaceForbidden  %+v", 403, o.Payload)
}

func (o *PatchMachineNetworkInterfaceForbidden) String() string {
	return fmt.Sprintf("[PATCH /iaas/api/machines/{id}/network-interfaces/{networkId}][%d] patchMachineNetworkInterfaceForbidden  %+v", 403, o.Payload)
}

func (o *PatchMachineNetworkInterfaceForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *PatchMachineNetworkInterfaceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchMachineNetworkInterfaceNotFound creates a PatchMachineNetworkInterfaceNotFound with default headers values
func NewPatchMachineNetworkInterfaceNotFound() *PatchMachineNetworkInterfaceNotFound {
	return &PatchMachineNetworkInterfaceNotFound{}
}

/*
PatchMachineNetworkInterfaceNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchMachineNetworkInterfaceNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch machine network interface not found response has a 2xx status code
func (o *PatchMachineNetworkInterfaceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch machine network interface not found response has a 3xx status code
func (o *PatchMachineNetworkInterfaceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch machine network interface not found response has a 4xx status code
func (o *PatchMachineNetworkInterfaceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch machine network interface not found response has a 5xx status code
func (o *PatchMachineNetworkInterfaceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch machine network interface not found response a status code equal to that given
func (o *PatchMachineNetworkInterfaceNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchMachineNetworkInterfaceNotFound) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/machines/{id}/network-interfaces/{networkId}][%d] patchMachineNetworkInterfaceNotFound  %+v", 404, o.Payload)
}

func (o *PatchMachineNetworkInterfaceNotFound) String() string {
	return fmt.Sprintf("[PATCH /iaas/api/machines/{id}/network-interfaces/{networkId}][%d] patchMachineNetworkInterfaceNotFound  %+v", 404, o.Payload)
}

func (o *PatchMachineNetworkInterfaceNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchMachineNetworkInterfaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
