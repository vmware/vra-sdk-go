// Code generated by go-swagger; DO NOT EDIT.

package security_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new security group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for security group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ChangeSecurityGroups(params *ChangeSecurityGroupsParams, opts ...ClientOption) (*ChangeSecurityGroupsAccepted, error)

	CreateOnDemandSecurityGroup(params *CreateOnDemandSecurityGroupParams, opts ...ClientOption) (*CreateOnDemandSecurityGroupAccepted, error)

	DeleteSecurityGroup(params *DeleteSecurityGroupParams, opts ...ClientOption) (*DeleteSecurityGroupAccepted, *DeleteSecurityGroupNoContent, error)

	GetSecurityGroup(params *GetSecurityGroupParams, opts ...ClientOption) (*GetSecurityGroupOK, error)

	GetSecurityGroups(params *GetSecurityGroupsParams, opts ...ClientOption) (*GetSecurityGroupsOK, error)

	ReconfigureSecurityGroup(params *ReconfigureSecurityGroupParams, opts ...ClientOption) (*ReconfigureSecurityGroupAccepted, error)

	UpdateSecurityGroup(params *UpdateSecurityGroupParams, opts ...ClientOption) (*UpdateSecurityGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ChangeSecurityGroups changes security groups for a v sphere machine

	Change security groups for a vSphere machine network interfaces. Securing group that is part of the same deployment can be added or removed for a machine network interface.
*/
func (a *Client) ChangeSecurityGroups(params *ChangeSecurityGroupsParams, opts ...ClientOption) (*ChangeSecurityGroupsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeSecurityGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "changeSecurityGroups",
		Method:             "POST",
		PathPattern:        "/iaas/api/machines/{id}/operations/change-security-groups",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeSecurityGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeSecurityGroupsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeSecurityGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOnDemandSecurityGroup creates on demand security group

Provision a new on-demand security group
*/
func (a *Client) CreateOnDemandSecurityGroup(params *CreateOnDemandSecurityGroupParams, opts ...ClientOption) (*CreateOnDemandSecurityGroupAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOnDemandSecurityGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOnDemandSecurityGroup",
		Method:             "POST",
		PathPattern:        "/iaas/api/security-groups",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOnDemandSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOnDemandSecurityGroupAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOnDemandSecurityGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSecurityGroup deletes an on demand security group

Delete an on-demand security group with a given id
*/
func (a *Client) DeleteSecurityGroup(params *DeleteSecurityGroupParams, opts ...ClientOption) (*DeleteSecurityGroupAccepted, *DeleteSecurityGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecurityGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSecurityGroup",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/security-groups/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteSecurityGroupAccepted:
		return value, nil, nil
	case *DeleteSecurityGroupNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for security_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSecurityGroup gets security group

Get security group with a given id
*/
func (a *Client) GetSecurityGroup(params *GetSecurityGroupParams, opts ...ClientOption) (*GetSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSecurityGroup",
		Method:             "GET",
		PathPattern:        "/iaas/api/security-groups/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecurityGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSecurityGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSecurityGroups gets security groups

Get all security groups
*/
func (a *Client) GetSecurityGroups(params *GetSecurityGroupsParams, opts ...ClientOption) (*GetSecurityGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSecurityGroups",
		Method:             "GET",
		PathPattern:        "/iaas/api/security-groups",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSecurityGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecurityGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSecurityGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReconfigureSecurityGroup reconfigures operation for security group

Day-2 reconfigure operation for new security groups provisioned by vRA. This is not supported for 'existing' security groups
*/
func (a *Client) ReconfigureSecurityGroup(params *ReconfigureSecurityGroupParams, opts ...ClientOption) (*ReconfigureSecurityGroupAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReconfigureSecurityGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reconfigureSecurityGroup",
		Method:             "POST",
		PathPattern:        "/iaas/api/security-groups/{id}/operations/reconfigure",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReconfigureSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReconfigureSecurityGroupAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reconfigureSecurityGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSecurityGroup updates security group

Update security group. Only tag updates are supported.
*/
func (a *Client) UpdateSecurityGroup(params *UpdateSecurityGroupParams, opts ...ClientOption) (*UpdateSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSecurityGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSecurityGroup",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/security-groups/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSecurityGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSecurityGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
