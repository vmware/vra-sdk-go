// Code generated by go-swagger; DO NOT EDIT.

package fabric_vsphere_datastore

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateFabricVsphereDatastoreReader is a Reader for the UpdateFabricVsphereDatastore structure.
type UpdateFabricVsphereDatastoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateFabricVsphereDatastoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateFabricVsphereDatastoreOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateFabricVsphereDatastoreForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateFabricVsphereDatastoreNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateFabricVsphereDatastoreOK creates a UpdateFabricVsphereDatastoreOK with default headers values
func NewUpdateFabricVsphereDatastoreOK() *UpdateFabricVsphereDatastoreOK {
	return &UpdateFabricVsphereDatastoreOK{}
}

/* UpdateFabricVsphereDatastoreOK describes a response with status code 200, with default header values.

successful operation
*/
type UpdateFabricVsphereDatastoreOK struct {
	Payload *models.FabricVsphereDatastore
}

func (o *UpdateFabricVsphereDatastoreOK) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/fabric-vsphere-datastores/{id}][%d] updateFabricVsphereDatastoreOK  %+v", 200, o.Payload)
}
func (o *UpdateFabricVsphereDatastoreOK) GetPayload() *models.FabricVsphereDatastore {
	return o.Payload
}

func (o *UpdateFabricVsphereDatastoreOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FabricVsphereDatastore)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFabricVsphereDatastoreForbidden creates a UpdateFabricVsphereDatastoreForbidden with default headers values
func NewUpdateFabricVsphereDatastoreForbidden() *UpdateFabricVsphereDatastoreForbidden {
	return &UpdateFabricVsphereDatastoreForbidden{}
}

/* UpdateFabricVsphereDatastoreForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateFabricVsphereDatastoreForbidden struct {
	Payload *models.ServiceErrorResponse
}

func (o *UpdateFabricVsphereDatastoreForbidden) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/fabric-vsphere-datastores/{id}][%d] updateFabricVsphereDatastoreForbidden  %+v", 403, o.Payload)
}
func (o *UpdateFabricVsphereDatastoreForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *UpdateFabricVsphereDatastoreForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFabricVsphereDatastoreNotFound creates a UpdateFabricVsphereDatastoreNotFound with default headers values
func NewUpdateFabricVsphereDatastoreNotFound() *UpdateFabricVsphereDatastoreNotFound {
	return &UpdateFabricVsphereDatastoreNotFound{}
}

/* UpdateFabricVsphereDatastoreNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateFabricVsphereDatastoreNotFound struct {
	Payload *models.Error
}

func (o *UpdateFabricVsphereDatastoreNotFound) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/fabric-vsphere-datastores/{id}][%d] updateFabricVsphereDatastoreNotFound  %+v", 404, o.Payload)
}
func (o *UpdateFabricVsphereDatastoreNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateFabricVsphereDatastoreNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
