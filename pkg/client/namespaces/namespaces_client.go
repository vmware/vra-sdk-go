// Code generated by go-swagger; DO NOT EDIT.

package namespaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new namespaces API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for namespaces API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUsingPOST1(params *CreateUsingPOST1Params, opts ...ClientOption) (*CreateUsingPOST1OK, error)

	DeleteUsingDELETE1(params *DeleteUsingDELETE1Params, opts ...ClientOption) (*DeleteUsingDELETE1OK, error)

	GetKubeConfigUsingGET1(params *GetKubeConfigUsingGET1Params, opts ...ClientOption) (*GetKubeConfigUsingGET1OK, error)

	GetUsingGET2Mixin1(params *GetUsingGET2Mixin1Params, opts ...ClientOption) (*GetUsingGET2Mixin1OK, error)

	ListUsingGET2(params *ListUsingGET2Params, opts ...ClientOption) (*ListUsingGET2OK, error)

	RegisterUsingPUT(params *RegisterUsingPUTParams, opts ...ClientOption) (*RegisterUsingPUTOK, error)

	UpdateUsingPUT2(params *UpdateUsingPUT2Params, opts ...ClientOption) (*UpdateUsingPUT2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateUsingPOST1 creates a k8 s namespace

Create a K8S Namespace
*/
func (a *Client) CreateUsingPOST1(params *CreateUsingPOST1Params, opts ...ClientOption) (*CreateUsingPOST1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/cmx/api/resources/k8s/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUsingPOST1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsingDELETE1 deletes a k8 s namespace

Delete a K8S Namespace by id
*/
func (a *Client) DeleteUsingDELETE1(params *DeleteUsingDELETE1Params, opts ...ClientOption) (*DeleteUsingDELETE1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/cmx/api/resources/k8s/namespaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKubeConfigUsingGET1 gets kube config for a k8 s namespace

Get KubeConfig for a K8S Namespace by providing a K8S Namespace id
*/
func (a *Client) GetKubeConfigUsingGET1(params *GetKubeConfigUsingGET1Params, opts ...ClientOption) (*GetKubeConfigUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubeConfigUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKubeConfigUsingGET_1",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/k8s/namespaces/{id}/kube-config",
		ProducesMediaTypes: []string{"application/yaml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKubeConfigUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubeConfigUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKubeConfigUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsingGET2Mixin1 gets a k8 s namespace by id

Get a K8S Namespace by id
*/
func (a *Client) GetUsingGET2Mixin1(params *GetUsingGET2Mixin1Params, opts ...ClientOption) (*GetUsingGET2Mixin1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGET2Mixin1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUsingGET_2Mixin1",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/k8s/namespaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsingGET2Mixin1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGET2Mixin1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsingGET_2Mixin1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListUsingGET2 gets all k8 s namespaces

Get a list of all K8S Namespaces
*/
func (a *Client) ListUsingGET2(params *ListUsingGET2Params, opts ...ClientOption) (*ListUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "listUsingGET_2",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/k8s/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterUsingPUT onboards existing k8 s namespace

Onboard existing K8S Namespace by providing namespace id and entity
*/
func (a *Client) RegisterUsingPUT(params *RegisterUsingPUTParams, opts ...ClientOption) (*RegisterUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cmx/api/resources/k8s/namespaces/{id}/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registerUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUsingPUT2 updates a k8 s namespace description or project

Update a K8S Namespace description or project by providing namespace id and Namespace entity
*/
func (a *Client) UpdateUsingPUT2(params *UpdateUsingPUT2Params, opts ...ClientOption) (*UpdateUsingPUT2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUT2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUsingPUT_2",
		Method:             "PUT",
		PathPattern:        "/cmx/api/resources/k8s/namespaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUsingPUT2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPUT2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPUT_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
