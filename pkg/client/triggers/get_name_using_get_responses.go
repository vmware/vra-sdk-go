// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetNameUsingGETReader is a Reader for the GetNameUsingGET structure.
type GetNameUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNameUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNameUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetNameUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetNameUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNameUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNameUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNameUsingGETOK creates a GetNameUsingGETOK with default headers values
func NewGetNameUsingGETOK() *GetNameUsingGETOK {
	return &GetNameUsingGETOK{}
}

/* GetNameUsingGETOK describes a response with status code 200, with default header values.

'Success' with Docker Registry Webhook
*/
type GetNameUsingGETOK struct {
	Payload models.DockerRegistryWebHook
}

func (o *GetNameUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/registry-webhooks/{project}/{name}][%d] getNameUsingGETOK  %+v", 200, o.Payload)
}
func (o *GetNameUsingGETOK) GetPayload() models.DockerRegistryWebHook {
	return o.Payload
}

func (o *GetNameUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalDockerRegistryWebHook(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewGetNameUsingGETUnauthorized creates a GetNameUsingGETUnauthorized with default headers values
func NewGetNameUsingGETUnauthorized() *GetNameUsingGETUnauthorized {
	return &GetNameUsingGETUnauthorized{}
}

/* GetNameUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type GetNameUsingGETUnauthorized struct {
}

func (o *GetNameUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/registry-webhooks/{project}/{name}][%d] getNameUsingGETUnauthorized ", 401)
}

func (o *GetNameUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNameUsingGETForbidden creates a GetNameUsingGETForbidden with default headers values
func NewGetNameUsingGETForbidden() *GetNameUsingGETForbidden {
	return &GetNameUsingGETForbidden{}
}

/* GetNameUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetNameUsingGETForbidden struct {
}

func (o *GetNameUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/registry-webhooks/{project}/{name}][%d] getNameUsingGETForbidden ", 403)
}

func (o *GetNameUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNameUsingGETNotFound creates a GetNameUsingGETNotFound with default headers values
func NewGetNameUsingGETNotFound() *GetNameUsingGETNotFound {
	return &GetNameUsingGETNotFound{}
}

/* GetNameUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetNameUsingGETNotFound struct {
	Payload *models.Error
}

func (o *GetNameUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/registry-webhooks/{project}/{name}][%d] getNameUsingGETNotFound  %+v", 404, o.Payload)
}
func (o *GetNameUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNameUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNameUsingGETInternalServerError creates a GetNameUsingGETInternalServerError with default headers values
func NewGetNameUsingGETInternalServerError() *GetNameUsingGETInternalServerError {
	return &GetNameUsingGETInternalServerError{}
}

/* GetNameUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetNameUsingGETInternalServerError struct {
}

func (o *GetNameUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/registry-webhooks/{project}/{name}][%d] getNameUsingGETInternalServerError ", 500)
}

func (o *GetNameUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
