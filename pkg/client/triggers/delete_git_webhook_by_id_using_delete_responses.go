// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// DeleteGitWebhookByIDUsingDELETEReader is a Reader for the DeleteGitWebhookByIDUsingDELETE structure.
type DeleteGitWebhookByIDUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteGitWebhookByIDUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteGitWebhookByIDUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteGitWebhookByIDUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteGitWebhookByIDUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteGitWebhookByIDUsingDELETENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteGitWebhookByIDUsingDELETEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteGitWebhookByIDUsingDELETEOK creates a DeleteGitWebhookByIDUsingDELETEOK with default headers values
func NewDeleteGitWebhookByIDUsingDELETEOK() *DeleteGitWebhookByIDUsingDELETEOK {
	return &DeleteGitWebhookByIDUsingDELETEOK{}
}

/*
DeleteGitWebhookByIDUsingDELETEOK describes a response with status code 200, with default header values.

'Success' with Git Webhook Delete
*/
type DeleteGitWebhookByIDUsingDELETEOK struct {
	Payload models.GitWebhook
}

// IsSuccess returns true when this delete git webhook by Id using d e l e t e o k response has a 2xx status code
func (o *DeleteGitWebhookByIDUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete git webhook by Id using d e l e t e o k response has a 3xx status code
func (o *DeleteGitWebhookByIDUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete git webhook by Id using d e l e t e o k response has a 4xx status code
func (o *DeleteGitWebhookByIDUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete git webhook by Id using d e l e t e o k response has a 5xx status code
func (o *DeleteGitWebhookByIDUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete git webhook by Id using d e l e t e o k response a status code equal to that given
func (o *DeleteGitWebhookByIDUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeleteGitWebhookByIDUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{id}][%d] deleteGitWebhookByIdUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *DeleteGitWebhookByIDUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{id}][%d] deleteGitWebhookByIdUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *DeleteGitWebhookByIDUsingDELETEOK) GetPayload() models.GitWebhook {
	return o.Payload
}

func (o *DeleteGitWebhookByIDUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGitWebhook(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewDeleteGitWebhookByIDUsingDELETEUnauthorized creates a DeleteGitWebhookByIDUsingDELETEUnauthorized with default headers values
func NewDeleteGitWebhookByIDUsingDELETEUnauthorized() *DeleteGitWebhookByIDUsingDELETEUnauthorized {
	return &DeleteGitWebhookByIDUsingDELETEUnauthorized{}
}

/*
DeleteGitWebhookByIDUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type DeleteGitWebhookByIDUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete git webhook by Id using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteGitWebhookByIDUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete git webhook by Id using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteGitWebhookByIDUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete git webhook by Id using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteGitWebhookByIDUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete git webhook by Id using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteGitWebhookByIDUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete git webhook by Id using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteGitWebhookByIDUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteGitWebhookByIDUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{id}][%d] deleteGitWebhookByIdUsingDELETEUnauthorized ", 401)
}

func (o *DeleteGitWebhookByIDUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{id}][%d] deleteGitWebhookByIdUsingDELETEUnauthorized ", 401)
}

func (o *DeleteGitWebhookByIDUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteGitWebhookByIDUsingDELETEForbidden creates a DeleteGitWebhookByIDUsingDELETEForbidden with default headers values
func NewDeleteGitWebhookByIDUsingDELETEForbidden() *DeleteGitWebhookByIDUsingDELETEForbidden {
	return &DeleteGitWebhookByIDUsingDELETEForbidden{}
}

/*
DeleteGitWebhookByIDUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteGitWebhookByIDUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete git webhook by Id using d e l e t e forbidden response has a 2xx status code
func (o *DeleteGitWebhookByIDUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete git webhook by Id using d e l e t e forbidden response has a 3xx status code
func (o *DeleteGitWebhookByIDUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete git webhook by Id using d e l e t e forbidden response has a 4xx status code
func (o *DeleteGitWebhookByIDUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete git webhook by Id using d e l e t e forbidden response has a 5xx status code
func (o *DeleteGitWebhookByIDUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete git webhook by Id using d e l e t e forbidden response a status code equal to that given
func (o *DeleteGitWebhookByIDUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteGitWebhookByIDUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{id}][%d] deleteGitWebhookByIdUsingDELETEForbidden ", 403)
}

func (o *DeleteGitWebhookByIDUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{id}][%d] deleteGitWebhookByIdUsingDELETEForbidden ", 403)
}

func (o *DeleteGitWebhookByIDUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteGitWebhookByIDUsingDELETENotFound creates a DeleteGitWebhookByIDUsingDELETENotFound with default headers values
func NewDeleteGitWebhookByIDUsingDELETENotFound() *DeleteGitWebhookByIDUsingDELETENotFound {
	return &DeleteGitWebhookByIDUsingDELETENotFound{}
}

/*
DeleteGitWebhookByIDUsingDELETENotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteGitWebhookByIDUsingDELETENotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete git webhook by Id using d e l e t e not found response has a 2xx status code
func (o *DeleteGitWebhookByIDUsingDELETENotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete git webhook by Id using d e l e t e not found response has a 3xx status code
func (o *DeleteGitWebhookByIDUsingDELETENotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete git webhook by Id using d e l e t e not found response has a 4xx status code
func (o *DeleteGitWebhookByIDUsingDELETENotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete git webhook by Id using d e l e t e not found response has a 5xx status code
func (o *DeleteGitWebhookByIDUsingDELETENotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete git webhook by Id using d e l e t e not found response a status code equal to that given
func (o *DeleteGitWebhookByIDUsingDELETENotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteGitWebhookByIDUsingDELETENotFound) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{id}][%d] deleteGitWebhookByIdUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeleteGitWebhookByIDUsingDELETENotFound) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{id}][%d] deleteGitWebhookByIdUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeleteGitWebhookByIDUsingDELETENotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteGitWebhookByIDUsingDELETENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGitWebhookByIDUsingDELETEInternalServerError creates a DeleteGitWebhookByIDUsingDELETEInternalServerError with default headers values
func NewDeleteGitWebhookByIDUsingDELETEInternalServerError() *DeleteGitWebhookByIDUsingDELETEInternalServerError {
	return &DeleteGitWebhookByIDUsingDELETEInternalServerError{}
}

/*
DeleteGitWebhookByIDUsingDELETEInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type DeleteGitWebhookByIDUsingDELETEInternalServerError struct {
}

// IsSuccess returns true when this delete git webhook by Id using d e l e t e internal server error response has a 2xx status code
func (o *DeleteGitWebhookByIDUsingDELETEInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete git webhook by Id using d e l e t e internal server error response has a 3xx status code
func (o *DeleteGitWebhookByIDUsingDELETEInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete git webhook by Id using d e l e t e internal server error response has a 4xx status code
func (o *DeleteGitWebhookByIDUsingDELETEInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete git webhook by Id using d e l e t e internal server error response has a 5xx status code
func (o *DeleteGitWebhookByIDUsingDELETEInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete git webhook by Id using d e l e t e internal server error response a status code equal to that given
func (o *DeleteGitWebhookByIDUsingDELETEInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteGitWebhookByIDUsingDELETEInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{id}][%d] deleteGitWebhookByIdUsingDELETEInternalServerError ", 500)
}

func (o *DeleteGitWebhookByIDUsingDELETEInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{id}][%d] deleteGitWebhookByIdUsingDELETEInternalServerError ", 500)
}

func (o *DeleteGitWebhookByIDUsingDELETEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
