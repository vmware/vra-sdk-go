// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateGerritListenerByIDUsingPUTReader is a Reader for the UpdateGerritListenerByIDUsingPUT structure.
type UpdateGerritListenerByIDUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGerritListenerByIDUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGerritListenerByIDUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateGerritListenerByIDUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGerritListenerByIDUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGerritListenerByIDUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateGerritListenerByIDUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateGerritListenerByIDUsingPUTOK creates a UpdateGerritListenerByIDUsingPUTOK with default headers values
func NewUpdateGerritListenerByIDUsingPUTOK() *UpdateGerritListenerByIDUsingPUTOK {
	return &UpdateGerritListenerByIDUsingPUTOK{}
}

/* UpdateGerritListenerByIDUsingPUTOK describes a response with status code 200, with default header values.

'Success' with Gerrit Listener Update
*/
type UpdateGerritListenerByIDUsingPUTOK struct {
	Payload models.GerritListener
}

func (o *UpdateGerritListenerByIDUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-listeners/{id}][%d] updateGerritListenerByIdUsingPUTOK  %+v", 200, o.Payload)
}
func (o *UpdateGerritListenerByIDUsingPUTOK) GetPayload() models.GerritListener {
	return o.Payload
}

func (o *UpdateGerritListenerByIDUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritListener(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewUpdateGerritListenerByIDUsingPUTUnauthorized creates a UpdateGerritListenerByIDUsingPUTUnauthorized with default headers values
func NewUpdateGerritListenerByIDUsingPUTUnauthorized() *UpdateGerritListenerByIDUsingPUTUnauthorized {
	return &UpdateGerritListenerByIDUsingPUTUnauthorized{}
}

/* UpdateGerritListenerByIDUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type UpdateGerritListenerByIDUsingPUTUnauthorized struct {
}

func (o *UpdateGerritListenerByIDUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-listeners/{id}][%d] updateGerritListenerByIdUsingPUTUnauthorized ", 401)
}

func (o *UpdateGerritListenerByIDUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGerritListenerByIDUsingPUTForbidden creates a UpdateGerritListenerByIDUsingPUTForbidden with default headers values
func NewUpdateGerritListenerByIDUsingPUTForbidden() *UpdateGerritListenerByIDUsingPUTForbidden {
	return &UpdateGerritListenerByIDUsingPUTForbidden{}
}

/* UpdateGerritListenerByIDUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateGerritListenerByIDUsingPUTForbidden struct {
}

func (o *UpdateGerritListenerByIDUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-listeners/{id}][%d] updateGerritListenerByIdUsingPUTForbidden ", 403)
}

func (o *UpdateGerritListenerByIDUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGerritListenerByIDUsingPUTNotFound creates a UpdateGerritListenerByIDUsingPUTNotFound with default headers values
func NewUpdateGerritListenerByIDUsingPUTNotFound() *UpdateGerritListenerByIDUsingPUTNotFound {
	return &UpdateGerritListenerByIDUsingPUTNotFound{}
}

/* UpdateGerritListenerByIDUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateGerritListenerByIDUsingPUTNotFound struct {
	Payload *models.Error
}

func (o *UpdateGerritListenerByIDUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-listeners/{id}][%d] updateGerritListenerByIdUsingPUTNotFound  %+v", 404, o.Payload)
}
func (o *UpdateGerritListenerByIDUsingPUTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGerritListenerByIDUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGerritListenerByIDUsingPUTInternalServerError creates a UpdateGerritListenerByIDUsingPUTInternalServerError with default headers values
func NewUpdateGerritListenerByIDUsingPUTInternalServerError() *UpdateGerritListenerByIDUsingPUTInternalServerError {
	return &UpdateGerritListenerByIDUsingPUTInternalServerError{}
}

/* UpdateGerritListenerByIDUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateGerritListenerByIDUsingPUTInternalServerError struct {
}

func (o *UpdateGerritListenerByIDUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-listeners/{id}][%d] updateGerritListenerByIdUsingPUTInternalServerError ", 500)
}

func (o *UpdateGerritListenerByIDUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
