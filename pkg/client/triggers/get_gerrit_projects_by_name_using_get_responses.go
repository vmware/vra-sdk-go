// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetGerritProjectsByNameUsingGETReader is a Reader for the GetGerritProjectsByNameUsingGET structure.
type GetGerritProjectsByNameUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGerritProjectsByNameUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGerritProjectsByNameUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetGerritProjectsByNameUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGerritProjectsByNameUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGerritProjectsByNameUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGerritProjectsByNameUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGerritProjectsByNameUsingGETOK creates a GetGerritProjectsByNameUsingGETOK with default headers values
func NewGetGerritProjectsByNameUsingGETOK() *GetGerritProjectsByNameUsingGETOK {
	return &GetGerritProjectsByNameUsingGETOK{}
}

/*
GetGerritProjectsByNameUsingGETOK describes a response with status code 200, with default header values.

'Success' with gerrit projects
*/
type GetGerritProjectsByNameUsingGETOK struct {
	Payload string
}

// IsSuccess returns true when this get gerrit projects by name using g e t o k response has a 2xx status code
func (o *GetGerritProjectsByNameUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get gerrit projects by name using g e t o k response has a 3xx status code
func (o *GetGerritProjectsByNameUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gerrit projects by name using g e t o k response has a 4xx status code
func (o *GetGerritProjectsByNameUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gerrit projects by name using g e t o k response has a 5xx status code
func (o *GetGerritProjectsByNameUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get gerrit projects by name using g e t o k response a status code equal to that given
func (o *GetGerritProjectsByNameUsingGETOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetGerritProjectsByNameUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsByNameUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetGerritProjectsByNameUsingGETOK) String() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsByNameUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetGerritProjectsByNameUsingGETOK) GetPayload() string {
	return o.Payload
}

func (o *GetGerritProjectsByNameUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGerritProjectsByNameUsingGETUnauthorized creates a GetGerritProjectsByNameUsingGETUnauthorized with default headers values
func NewGetGerritProjectsByNameUsingGETUnauthorized() *GetGerritProjectsByNameUsingGETUnauthorized {
	return &GetGerritProjectsByNameUsingGETUnauthorized{}
}

/*
GetGerritProjectsByNameUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type GetGerritProjectsByNameUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get gerrit projects by name using g e t unauthorized response has a 2xx status code
func (o *GetGerritProjectsByNameUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gerrit projects by name using g e t unauthorized response has a 3xx status code
func (o *GetGerritProjectsByNameUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gerrit projects by name using g e t unauthorized response has a 4xx status code
func (o *GetGerritProjectsByNameUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gerrit projects by name using g e t unauthorized response has a 5xx status code
func (o *GetGerritProjectsByNameUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get gerrit projects by name using g e t unauthorized response a status code equal to that given
func (o *GetGerritProjectsByNameUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetGerritProjectsByNameUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsByNameUsingGETUnauthorized ", 401)
}

func (o *GetGerritProjectsByNameUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsByNameUsingGETUnauthorized ", 401)
}

func (o *GetGerritProjectsByNameUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGerritProjectsByNameUsingGETForbidden creates a GetGerritProjectsByNameUsingGETForbidden with default headers values
func NewGetGerritProjectsByNameUsingGETForbidden() *GetGerritProjectsByNameUsingGETForbidden {
	return &GetGerritProjectsByNameUsingGETForbidden{}
}

/*
GetGerritProjectsByNameUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetGerritProjectsByNameUsingGETForbidden struct {
}

// IsSuccess returns true when this get gerrit projects by name using g e t forbidden response has a 2xx status code
func (o *GetGerritProjectsByNameUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gerrit projects by name using g e t forbidden response has a 3xx status code
func (o *GetGerritProjectsByNameUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gerrit projects by name using g e t forbidden response has a 4xx status code
func (o *GetGerritProjectsByNameUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gerrit projects by name using g e t forbidden response has a 5xx status code
func (o *GetGerritProjectsByNameUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get gerrit projects by name using g e t forbidden response a status code equal to that given
func (o *GetGerritProjectsByNameUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetGerritProjectsByNameUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsByNameUsingGETForbidden ", 403)
}

func (o *GetGerritProjectsByNameUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsByNameUsingGETForbidden ", 403)
}

func (o *GetGerritProjectsByNameUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGerritProjectsByNameUsingGETNotFound creates a GetGerritProjectsByNameUsingGETNotFound with default headers values
func NewGetGerritProjectsByNameUsingGETNotFound() *GetGerritProjectsByNameUsingGETNotFound {
	return &GetGerritProjectsByNameUsingGETNotFound{}
}

/*
GetGerritProjectsByNameUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetGerritProjectsByNameUsingGETNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get gerrit projects by name using g e t not found response has a 2xx status code
func (o *GetGerritProjectsByNameUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gerrit projects by name using g e t not found response has a 3xx status code
func (o *GetGerritProjectsByNameUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gerrit projects by name using g e t not found response has a 4xx status code
func (o *GetGerritProjectsByNameUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gerrit projects by name using g e t not found response has a 5xx status code
func (o *GetGerritProjectsByNameUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get gerrit projects by name using g e t not found response a status code equal to that given
func (o *GetGerritProjectsByNameUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetGerritProjectsByNameUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsByNameUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetGerritProjectsByNameUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsByNameUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetGerritProjectsByNameUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGerritProjectsByNameUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGerritProjectsByNameUsingGETInternalServerError creates a GetGerritProjectsByNameUsingGETInternalServerError with default headers values
func NewGetGerritProjectsByNameUsingGETInternalServerError() *GetGerritProjectsByNameUsingGETInternalServerError {
	return &GetGerritProjectsByNameUsingGETInternalServerError{}
}

/*
GetGerritProjectsByNameUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetGerritProjectsByNameUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get gerrit projects by name using g e t internal server error response has a 2xx status code
func (o *GetGerritProjectsByNameUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gerrit projects by name using g e t internal server error response has a 3xx status code
func (o *GetGerritProjectsByNameUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gerrit projects by name using g e t internal server error response has a 4xx status code
func (o *GetGerritProjectsByNameUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gerrit projects by name using g e t internal server error response has a 5xx status code
func (o *GetGerritProjectsByNameUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get gerrit projects by name using g e t internal server error response a status code equal to that given
func (o *GetGerritProjectsByNameUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetGerritProjectsByNameUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsByNameUsingGETInternalServerError ", 500)
}

func (o *GetGerritProjectsByNameUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsByNameUsingGETInternalServerError ", 500)
}

func (o *GetGerritProjectsByNameUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
