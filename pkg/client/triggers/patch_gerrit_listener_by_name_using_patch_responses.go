// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// PatchGerritListenerByNameUsingPATCHReader is a Reader for the PatchGerritListenerByNameUsingPATCH structure.
type PatchGerritListenerByNameUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchGerritListenerByNameUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchGerritListenerByNameUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchGerritListenerByNameUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchGerritListenerByNameUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchGerritListenerByNameUsingPATCHNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchGerritListenerByNameUsingPATCHInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchGerritListenerByNameUsingPATCHOK creates a PatchGerritListenerByNameUsingPATCHOK with default headers values
func NewPatchGerritListenerByNameUsingPATCHOK() *PatchGerritListenerByNameUsingPATCHOK {
	return &PatchGerritListenerByNameUsingPATCHOK{}
}

/*
PatchGerritListenerByNameUsingPATCHOK describes a response with status code 200, with default header values.

'Success' with Gerrit Listener patch
*/
type PatchGerritListenerByNameUsingPATCHOK struct {
	Payload models.GerritListener
}

// IsSuccess returns true when this patch gerrit listener by name using p a t c h o k response has a 2xx status code
func (o *PatchGerritListenerByNameUsingPATCHOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch gerrit listener by name using p a t c h o k response has a 3xx status code
func (o *PatchGerritListenerByNameUsingPATCHOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch gerrit listener by name using p a t c h o k response has a 4xx status code
func (o *PatchGerritListenerByNameUsingPATCHOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch gerrit listener by name using p a t c h o k response has a 5xx status code
func (o *PatchGerritListenerByNameUsingPATCHOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch gerrit listener by name using p a t c h o k response a status code equal to that given
func (o *PatchGerritListenerByNameUsingPATCHOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchGerritListenerByNameUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchGerritListenerByNameUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *PatchGerritListenerByNameUsingPATCHOK) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchGerritListenerByNameUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *PatchGerritListenerByNameUsingPATCHOK) GetPayload() models.GerritListener {
	return o.Payload
}

func (o *PatchGerritListenerByNameUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritListener(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewPatchGerritListenerByNameUsingPATCHUnauthorized creates a PatchGerritListenerByNameUsingPATCHUnauthorized with default headers values
func NewPatchGerritListenerByNameUsingPATCHUnauthorized() *PatchGerritListenerByNameUsingPATCHUnauthorized {
	return &PatchGerritListenerByNameUsingPATCHUnauthorized{}
}

/*
PatchGerritListenerByNameUsingPATCHUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type PatchGerritListenerByNameUsingPATCHUnauthorized struct {
}

// IsSuccess returns true when this patch gerrit listener by name using p a t c h unauthorized response has a 2xx status code
func (o *PatchGerritListenerByNameUsingPATCHUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch gerrit listener by name using p a t c h unauthorized response has a 3xx status code
func (o *PatchGerritListenerByNameUsingPATCHUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch gerrit listener by name using p a t c h unauthorized response has a 4xx status code
func (o *PatchGerritListenerByNameUsingPATCHUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch gerrit listener by name using p a t c h unauthorized response has a 5xx status code
func (o *PatchGerritListenerByNameUsingPATCHUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch gerrit listener by name using p a t c h unauthorized response a status code equal to that given
func (o *PatchGerritListenerByNameUsingPATCHUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchGerritListenerByNameUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchGerritListenerByNameUsingPATCHUnauthorized ", 401)
}

func (o *PatchGerritListenerByNameUsingPATCHUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchGerritListenerByNameUsingPATCHUnauthorized ", 401)
}

func (o *PatchGerritListenerByNameUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchGerritListenerByNameUsingPATCHForbidden creates a PatchGerritListenerByNameUsingPATCHForbidden with default headers values
func NewPatchGerritListenerByNameUsingPATCHForbidden() *PatchGerritListenerByNameUsingPATCHForbidden {
	return &PatchGerritListenerByNameUsingPATCHForbidden{}
}

/*
PatchGerritListenerByNameUsingPATCHForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchGerritListenerByNameUsingPATCHForbidden struct {
}

// IsSuccess returns true when this patch gerrit listener by name using p a t c h forbidden response has a 2xx status code
func (o *PatchGerritListenerByNameUsingPATCHForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch gerrit listener by name using p a t c h forbidden response has a 3xx status code
func (o *PatchGerritListenerByNameUsingPATCHForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch gerrit listener by name using p a t c h forbidden response has a 4xx status code
func (o *PatchGerritListenerByNameUsingPATCHForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch gerrit listener by name using p a t c h forbidden response has a 5xx status code
func (o *PatchGerritListenerByNameUsingPATCHForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch gerrit listener by name using p a t c h forbidden response a status code equal to that given
func (o *PatchGerritListenerByNameUsingPATCHForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchGerritListenerByNameUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchGerritListenerByNameUsingPATCHForbidden ", 403)
}

func (o *PatchGerritListenerByNameUsingPATCHForbidden) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchGerritListenerByNameUsingPATCHForbidden ", 403)
}

func (o *PatchGerritListenerByNameUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchGerritListenerByNameUsingPATCHNotFound creates a PatchGerritListenerByNameUsingPATCHNotFound with default headers values
func NewPatchGerritListenerByNameUsingPATCHNotFound() *PatchGerritListenerByNameUsingPATCHNotFound {
	return &PatchGerritListenerByNameUsingPATCHNotFound{}
}

/*
PatchGerritListenerByNameUsingPATCHNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchGerritListenerByNameUsingPATCHNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch gerrit listener by name using p a t c h not found response has a 2xx status code
func (o *PatchGerritListenerByNameUsingPATCHNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch gerrit listener by name using p a t c h not found response has a 3xx status code
func (o *PatchGerritListenerByNameUsingPATCHNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch gerrit listener by name using p a t c h not found response has a 4xx status code
func (o *PatchGerritListenerByNameUsingPATCHNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch gerrit listener by name using p a t c h not found response has a 5xx status code
func (o *PatchGerritListenerByNameUsingPATCHNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch gerrit listener by name using p a t c h not found response a status code equal to that given
func (o *PatchGerritListenerByNameUsingPATCHNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchGerritListenerByNameUsingPATCHNotFound) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchGerritListenerByNameUsingPATCHNotFound  %+v", 404, o.Payload)
}

func (o *PatchGerritListenerByNameUsingPATCHNotFound) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchGerritListenerByNameUsingPATCHNotFound  %+v", 404, o.Payload)
}

func (o *PatchGerritListenerByNameUsingPATCHNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchGerritListenerByNameUsingPATCHNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchGerritListenerByNameUsingPATCHInternalServerError creates a PatchGerritListenerByNameUsingPATCHInternalServerError with default headers values
func NewPatchGerritListenerByNameUsingPATCHInternalServerError() *PatchGerritListenerByNameUsingPATCHInternalServerError {
	return &PatchGerritListenerByNameUsingPATCHInternalServerError{}
}

/*
PatchGerritListenerByNameUsingPATCHInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PatchGerritListenerByNameUsingPATCHInternalServerError struct {
}

// IsSuccess returns true when this patch gerrit listener by name using p a t c h internal server error response has a 2xx status code
func (o *PatchGerritListenerByNameUsingPATCHInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch gerrit listener by name using p a t c h internal server error response has a 3xx status code
func (o *PatchGerritListenerByNameUsingPATCHInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch gerrit listener by name using p a t c h internal server error response has a 4xx status code
func (o *PatchGerritListenerByNameUsingPATCHInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch gerrit listener by name using p a t c h internal server error response has a 5xx status code
func (o *PatchGerritListenerByNameUsingPATCHInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch gerrit listener by name using p a t c h internal server error response a status code equal to that given
func (o *PatchGerritListenerByNameUsingPATCHInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchGerritListenerByNameUsingPATCHInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchGerritListenerByNameUsingPATCHInternalServerError ", 500)
}

func (o *PatchGerritListenerByNameUsingPATCHInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchGerritListenerByNameUsingPATCHInternalServerError ", 500)
}

func (o *PatchGerritListenerByNameUsingPATCHInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
