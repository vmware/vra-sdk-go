// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetGitEventByIDUsingGETReader is a Reader for the GetGitEventByIDUsingGET structure.
type GetGitEventByIDUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGitEventByIDUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGitEventByIDUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetGitEventByIDUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGitEventByIDUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGitEventByIDUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGitEventByIDUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGitEventByIDUsingGETOK creates a GetGitEventByIDUsingGETOK with default headers values
func NewGetGitEventByIDUsingGETOK() *GetGitEventByIDUsingGETOK {
	return &GetGitEventByIDUsingGETOK{}
}

/*
GetGitEventByIDUsingGETOK describes a response with status code 200, with default header values.

'Success' with Git Event
*/
type GetGitEventByIDUsingGETOK struct {
	Payload models.GitEvent
}

// IsSuccess returns true when this get git event by Id using g e t o k response has a 2xx status code
func (o *GetGitEventByIDUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get git event by Id using g e t o k response has a 3xx status code
func (o *GetGitEventByIDUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git event by Id using g e t o k response has a 4xx status code
func (o *GetGitEventByIDUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get git event by Id using g e t o k response has a 5xx status code
func (o *GetGitEventByIDUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get git event by Id using g e t o k response a status code equal to that given
func (o *GetGitEventByIDUsingGETOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetGitEventByIDUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-events/{id}][%d] getGitEventByIdUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetGitEventByIDUsingGETOK) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-events/{id}][%d] getGitEventByIdUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetGitEventByIDUsingGETOK) GetPayload() models.GitEvent {
	return o.Payload
}

func (o *GetGitEventByIDUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGitEvent(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewGetGitEventByIDUsingGETUnauthorized creates a GetGitEventByIDUsingGETUnauthorized with default headers values
func NewGetGitEventByIDUsingGETUnauthorized() *GetGitEventByIDUsingGETUnauthorized {
	return &GetGitEventByIDUsingGETUnauthorized{}
}

/*
GetGitEventByIDUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type GetGitEventByIDUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get git event by Id using g e t unauthorized response has a 2xx status code
func (o *GetGitEventByIDUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git event by Id using g e t unauthorized response has a 3xx status code
func (o *GetGitEventByIDUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git event by Id using g e t unauthorized response has a 4xx status code
func (o *GetGitEventByIDUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get git event by Id using g e t unauthorized response has a 5xx status code
func (o *GetGitEventByIDUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get git event by Id using g e t unauthorized response a status code equal to that given
func (o *GetGitEventByIDUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetGitEventByIDUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-events/{id}][%d] getGitEventByIdUsingGETUnauthorized ", 401)
}

func (o *GetGitEventByIDUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-events/{id}][%d] getGitEventByIdUsingGETUnauthorized ", 401)
}

func (o *GetGitEventByIDUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGitEventByIDUsingGETForbidden creates a GetGitEventByIDUsingGETForbidden with default headers values
func NewGetGitEventByIDUsingGETForbidden() *GetGitEventByIDUsingGETForbidden {
	return &GetGitEventByIDUsingGETForbidden{}
}

/*
GetGitEventByIDUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetGitEventByIDUsingGETForbidden struct {
}

// IsSuccess returns true when this get git event by Id using g e t forbidden response has a 2xx status code
func (o *GetGitEventByIDUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git event by Id using g e t forbidden response has a 3xx status code
func (o *GetGitEventByIDUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git event by Id using g e t forbidden response has a 4xx status code
func (o *GetGitEventByIDUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get git event by Id using g e t forbidden response has a 5xx status code
func (o *GetGitEventByIDUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get git event by Id using g e t forbidden response a status code equal to that given
func (o *GetGitEventByIDUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetGitEventByIDUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-events/{id}][%d] getGitEventByIdUsingGETForbidden ", 403)
}

func (o *GetGitEventByIDUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-events/{id}][%d] getGitEventByIdUsingGETForbidden ", 403)
}

func (o *GetGitEventByIDUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGitEventByIDUsingGETNotFound creates a GetGitEventByIDUsingGETNotFound with default headers values
func NewGetGitEventByIDUsingGETNotFound() *GetGitEventByIDUsingGETNotFound {
	return &GetGitEventByIDUsingGETNotFound{}
}

/*
GetGitEventByIDUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetGitEventByIDUsingGETNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get git event by Id using g e t not found response has a 2xx status code
func (o *GetGitEventByIDUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git event by Id using g e t not found response has a 3xx status code
func (o *GetGitEventByIDUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git event by Id using g e t not found response has a 4xx status code
func (o *GetGitEventByIDUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get git event by Id using g e t not found response has a 5xx status code
func (o *GetGitEventByIDUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get git event by Id using g e t not found response a status code equal to that given
func (o *GetGitEventByIDUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetGitEventByIDUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-events/{id}][%d] getGitEventByIdUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetGitEventByIDUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-events/{id}][%d] getGitEventByIdUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetGitEventByIDUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGitEventByIDUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGitEventByIDUsingGETInternalServerError creates a GetGitEventByIDUsingGETInternalServerError with default headers values
func NewGetGitEventByIDUsingGETInternalServerError() *GetGitEventByIDUsingGETInternalServerError {
	return &GetGitEventByIDUsingGETInternalServerError{}
}

/*
GetGitEventByIDUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetGitEventByIDUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get git event by Id using g e t internal server error response has a 2xx status code
func (o *GetGitEventByIDUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git event by Id using g e t internal server error response has a 3xx status code
func (o *GetGitEventByIDUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git event by Id using g e t internal server error response has a 4xx status code
func (o *GetGitEventByIDUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get git event by Id using g e t internal server error response has a 5xx status code
func (o *GetGitEventByIDUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get git event by Id using g e t internal server error response a status code equal to that given
func (o *GetGitEventByIDUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetGitEventByIDUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-events/{id}][%d] getGitEventByIdUsingGETInternalServerError ", 500)
}

func (o *GetGitEventByIDUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-events/{id}][%d] getGitEventByIdUsingGETInternalServerError ", 500)
}

func (o *GetGitEventByIDUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
