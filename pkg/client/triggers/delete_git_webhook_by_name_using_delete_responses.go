// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// DeleteGitWebhookByNameUsingDELETEReader is a Reader for the DeleteGitWebhookByNameUsingDELETE structure.
type DeleteGitWebhookByNameUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteGitWebhookByNameUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteGitWebhookByNameUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteGitWebhookByNameUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteGitWebhookByNameUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteGitWebhookByNameUsingDELETENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteGitWebhookByNameUsingDELETEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteGitWebhookByNameUsingDELETEOK creates a DeleteGitWebhookByNameUsingDELETEOK with default headers values
func NewDeleteGitWebhookByNameUsingDELETEOK() *DeleteGitWebhookByNameUsingDELETEOK {
	return &DeleteGitWebhookByNameUsingDELETEOK{}
}

/* DeleteGitWebhookByNameUsingDELETEOK describes a response with status code 200, with default header values.

'Success' with Git Webhook Delete
*/
type DeleteGitWebhookByNameUsingDELETEOK struct {
	Payload models.GitWebhook
}

func (o *DeleteGitWebhookByNameUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{project}/{name}][%d] deleteGitWebhookByNameUsingDELETEOK  %+v", 200, o.Payload)
}
func (o *DeleteGitWebhookByNameUsingDELETEOK) GetPayload() models.GitWebhook {
	return o.Payload
}

func (o *DeleteGitWebhookByNameUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGitWebhook(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewDeleteGitWebhookByNameUsingDELETEUnauthorized creates a DeleteGitWebhookByNameUsingDELETEUnauthorized with default headers values
func NewDeleteGitWebhookByNameUsingDELETEUnauthorized() *DeleteGitWebhookByNameUsingDELETEUnauthorized {
	return &DeleteGitWebhookByNameUsingDELETEUnauthorized{}
}

/* DeleteGitWebhookByNameUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type DeleteGitWebhookByNameUsingDELETEUnauthorized struct {
}

func (o *DeleteGitWebhookByNameUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{project}/{name}][%d] deleteGitWebhookByNameUsingDELETEUnauthorized ", 401)
}

func (o *DeleteGitWebhookByNameUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteGitWebhookByNameUsingDELETEForbidden creates a DeleteGitWebhookByNameUsingDELETEForbidden with default headers values
func NewDeleteGitWebhookByNameUsingDELETEForbidden() *DeleteGitWebhookByNameUsingDELETEForbidden {
	return &DeleteGitWebhookByNameUsingDELETEForbidden{}
}

/* DeleteGitWebhookByNameUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteGitWebhookByNameUsingDELETEForbidden struct {
}

func (o *DeleteGitWebhookByNameUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{project}/{name}][%d] deleteGitWebhookByNameUsingDELETEForbidden ", 403)
}

func (o *DeleteGitWebhookByNameUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteGitWebhookByNameUsingDELETENotFound creates a DeleteGitWebhookByNameUsingDELETENotFound with default headers values
func NewDeleteGitWebhookByNameUsingDELETENotFound() *DeleteGitWebhookByNameUsingDELETENotFound {
	return &DeleteGitWebhookByNameUsingDELETENotFound{}
}

/* DeleteGitWebhookByNameUsingDELETENotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteGitWebhookByNameUsingDELETENotFound struct {
	Payload *models.Error
}

func (o *DeleteGitWebhookByNameUsingDELETENotFound) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{project}/{name}][%d] deleteGitWebhookByNameUsingDELETENotFound  %+v", 404, o.Payload)
}
func (o *DeleteGitWebhookByNameUsingDELETENotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteGitWebhookByNameUsingDELETENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGitWebhookByNameUsingDELETEInternalServerError creates a DeleteGitWebhookByNameUsingDELETEInternalServerError with default headers values
func NewDeleteGitWebhookByNameUsingDELETEInternalServerError() *DeleteGitWebhookByNameUsingDELETEInternalServerError {
	return &DeleteGitWebhookByNameUsingDELETEInternalServerError{}
}

/* DeleteGitWebhookByNameUsingDELETEInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type DeleteGitWebhookByNameUsingDELETEInternalServerError struct {
}

func (o *DeleteGitWebhookByNameUsingDELETEInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-webhooks/{project}/{name}][%d] deleteGitWebhookByNameUsingDELETEInternalServerError ", 500)
}

func (o *DeleteGitWebhookByNameUsingDELETEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
