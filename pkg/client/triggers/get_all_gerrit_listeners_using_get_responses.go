// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetAllGerritListenersUsingGETReader is a Reader for the GetAllGerritListenersUsingGET structure.
type GetAllGerritListenersUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllGerritListenersUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllGerritListenersUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllGerritListenersUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllGerritListenersUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllGerritListenersUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllGerritListenersUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAllGerritListenersUsingGETOK creates a GetAllGerritListenersUsingGETOK with default headers values
func NewGetAllGerritListenersUsingGETOK() *GetAllGerritListenersUsingGETOK {
	return &GetAllGerritListenersUsingGETOK{}
}

/*
GetAllGerritListenersUsingGETOK describes a response with status code 200, with default header values.

'Success' with get of gerrit listeners
*/
type GetAllGerritListenersUsingGETOK struct {
	Payload models.GerritListeners
}

// IsSuccess returns true when this get all gerrit listeners using g e t o k response has a 2xx status code
func (o *GetAllGerritListenersUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all gerrit listeners using g e t o k response has a 3xx status code
func (o *GetAllGerritListenersUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all gerrit listeners using g e t o k response has a 4xx status code
func (o *GetAllGerritListenersUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all gerrit listeners using g e t o k response has a 5xx status code
func (o *GetAllGerritListenersUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all gerrit listeners using g e t o k response a status code equal to that given
func (o *GetAllGerritListenersUsingGETOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAllGerritListenersUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners][%d] getAllGerritListenersUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetAllGerritListenersUsingGETOK) String() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners][%d] getAllGerritListenersUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetAllGerritListenersUsingGETOK) GetPayload() models.GerritListeners {
	return o.Payload
}

func (o *GetAllGerritListenersUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritListeners(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewGetAllGerritListenersUsingGETUnauthorized creates a GetAllGerritListenersUsingGETUnauthorized with default headers values
func NewGetAllGerritListenersUsingGETUnauthorized() *GetAllGerritListenersUsingGETUnauthorized {
	return &GetAllGerritListenersUsingGETUnauthorized{}
}

/*
GetAllGerritListenersUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type GetAllGerritListenersUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all gerrit listeners using g e t unauthorized response has a 2xx status code
func (o *GetAllGerritListenersUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all gerrit listeners using g e t unauthorized response has a 3xx status code
func (o *GetAllGerritListenersUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all gerrit listeners using g e t unauthorized response has a 4xx status code
func (o *GetAllGerritListenersUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all gerrit listeners using g e t unauthorized response has a 5xx status code
func (o *GetAllGerritListenersUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all gerrit listeners using g e t unauthorized response a status code equal to that given
func (o *GetAllGerritListenersUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAllGerritListenersUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners][%d] getAllGerritListenersUsingGETUnauthorized ", 401)
}

func (o *GetAllGerritListenersUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners][%d] getAllGerritListenersUsingGETUnauthorized ", 401)
}

func (o *GetAllGerritListenersUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllGerritListenersUsingGETForbidden creates a GetAllGerritListenersUsingGETForbidden with default headers values
func NewGetAllGerritListenersUsingGETForbidden() *GetAllGerritListenersUsingGETForbidden {
	return &GetAllGerritListenersUsingGETForbidden{}
}

/*
GetAllGerritListenersUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllGerritListenersUsingGETForbidden struct {
}

// IsSuccess returns true when this get all gerrit listeners using g e t forbidden response has a 2xx status code
func (o *GetAllGerritListenersUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all gerrit listeners using g e t forbidden response has a 3xx status code
func (o *GetAllGerritListenersUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all gerrit listeners using g e t forbidden response has a 4xx status code
func (o *GetAllGerritListenersUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all gerrit listeners using g e t forbidden response has a 5xx status code
func (o *GetAllGerritListenersUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all gerrit listeners using g e t forbidden response a status code equal to that given
func (o *GetAllGerritListenersUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAllGerritListenersUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners][%d] getAllGerritListenersUsingGETForbidden ", 403)
}

func (o *GetAllGerritListenersUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners][%d] getAllGerritListenersUsingGETForbidden ", 403)
}

func (o *GetAllGerritListenersUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllGerritListenersUsingGETNotFound creates a GetAllGerritListenersUsingGETNotFound with default headers values
func NewGetAllGerritListenersUsingGETNotFound() *GetAllGerritListenersUsingGETNotFound {
	return &GetAllGerritListenersUsingGETNotFound{}
}

/*
GetAllGerritListenersUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllGerritListenersUsingGETNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get all gerrit listeners using g e t not found response has a 2xx status code
func (o *GetAllGerritListenersUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all gerrit listeners using g e t not found response has a 3xx status code
func (o *GetAllGerritListenersUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all gerrit listeners using g e t not found response has a 4xx status code
func (o *GetAllGerritListenersUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all gerrit listeners using g e t not found response has a 5xx status code
func (o *GetAllGerritListenersUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all gerrit listeners using g e t not found response a status code equal to that given
func (o *GetAllGerritListenersUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAllGerritListenersUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners][%d] getAllGerritListenersUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetAllGerritListenersUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners][%d] getAllGerritListenersUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetAllGerritListenersUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllGerritListenersUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllGerritListenersUsingGETInternalServerError creates a GetAllGerritListenersUsingGETInternalServerError with default headers values
func NewGetAllGerritListenersUsingGETInternalServerError() *GetAllGerritListenersUsingGETInternalServerError {
	return &GetAllGerritListenersUsingGETInternalServerError{}
}

/*
GetAllGerritListenersUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetAllGerritListenersUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get all gerrit listeners using g e t internal server error response has a 2xx status code
func (o *GetAllGerritListenersUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all gerrit listeners using g e t internal server error response has a 3xx status code
func (o *GetAllGerritListenersUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all gerrit listeners using g e t internal server error response has a 4xx status code
func (o *GetAllGerritListenersUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all gerrit listeners using g e t internal server error response has a 5xx status code
func (o *GetAllGerritListenersUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all gerrit listeners using g e t internal server error response a status code equal to that given
func (o *GetAllGerritListenersUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAllGerritListenersUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners][%d] getAllGerritListenersUsingGETInternalServerError ", 500)
}

func (o *GetAllGerritListenersUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners][%d] getAllGerritListenersUsingGETInternalServerError ", 500)
}

func (o *GetAllGerritListenersUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
