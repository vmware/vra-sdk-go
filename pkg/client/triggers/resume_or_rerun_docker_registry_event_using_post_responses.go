// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// ResumeOrRerunDockerRegistryEventUsingPOSTReader is a Reader for the ResumeOrRerunDockerRegistryEventUsingPOST structure.
type ResumeOrRerunDockerRegistryEventUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewResumeOrRerunDockerRegistryEventUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewResumeOrRerunDockerRegistryEventUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewResumeOrRerunDockerRegistryEventUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewResumeOrRerunDockerRegistryEventUsingPOSTOK creates a ResumeOrRerunDockerRegistryEventUsingPOSTOK with default headers values
func NewResumeOrRerunDockerRegistryEventUsingPOSTOK() *ResumeOrRerunDockerRegistryEventUsingPOSTOK {
	return &ResumeOrRerunDockerRegistryEventUsingPOSTOK{}
}

/*
ResumeOrRerunDockerRegistryEventUsingPOSTOK describes a response with status code 200, with default header values.

'Success' with Re-run/Resume Docker Registry Event
*/
type ResumeOrRerunDockerRegistryEventUsingPOSTOK struct {
	Payload models.DockerRegistryEvent
}

// IsSuccess returns true when this resume or rerun docker registry event using p o s t o k response has a 2xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this resume or rerun docker registry event using p o s t o k response has a 3xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resume or rerun docker registry event using p o s t o k response has a 4xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this resume or rerun docker registry event using p o s t o k response has a 5xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this resume or rerun docker registry event using p o s t o k response a status code equal to that given
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /codestream/api/registry-events/{id}][%d] resumeOrRerunDockerRegistryEventUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTOK) String() string {
	return fmt.Sprintf("[POST /codestream/api/registry-events/{id}][%d] resumeOrRerunDockerRegistryEventUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTOK) GetPayload() models.DockerRegistryEvent {
	return o.Payload
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalDockerRegistryEvent(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized creates a ResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized with default headers values
func NewResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized() *ResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized {
	return &ResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized{}
}

/*
ResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type ResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this resume or rerun docker registry event using p o s t unauthorized response has a 2xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resume or rerun docker registry event using p o s t unauthorized response has a 3xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resume or rerun docker registry event using p o s t unauthorized response has a 4xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this resume or rerun docker registry event using p o s t unauthorized response has a 5xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this resume or rerun docker registry event using p o s t unauthorized response a status code equal to that given
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /codestream/api/registry-events/{id}][%d] resumeOrRerunDockerRegistryEventUsingPOSTUnauthorized ", 401)
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /codestream/api/registry-events/{id}][%d] resumeOrRerunDockerRegistryEventUsingPOSTUnauthorized ", 401)
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewResumeOrRerunDockerRegistryEventUsingPOSTForbidden creates a ResumeOrRerunDockerRegistryEventUsingPOSTForbidden with default headers values
func NewResumeOrRerunDockerRegistryEventUsingPOSTForbidden() *ResumeOrRerunDockerRegistryEventUsingPOSTForbidden {
	return &ResumeOrRerunDockerRegistryEventUsingPOSTForbidden{}
}

/*
ResumeOrRerunDockerRegistryEventUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ResumeOrRerunDockerRegistryEventUsingPOSTForbidden struct {
}

// IsSuccess returns true when this resume or rerun docker registry event using p o s t forbidden response has a 2xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resume or rerun docker registry event using p o s t forbidden response has a 3xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resume or rerun docker registry event using p o s t forbidden response has a 4xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this resume or rerun docker registry event using p o s t forbidden response has a 5xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this resume or rerun docker registry event using p o s t forbidden response a status code equal to that given
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /codestream/api/registry-events/{id}][%d] resumeOrRerunDockerRegistryEventUsingPOSTForbidden ", 403)
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /codestream/api/registry-events/{id}][%d] resumeOrRerunDockerRegistryEventUsingPOSTForbidden ", 403)
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewResumeOrRerunDockerRegistryEventUsingPOSTNotFound creates a ResumeOrRerunDockerRegistryEventUsingPOSTNotFound with default headers values
func NewResumeOrRerunDockerRegistryEventUsingPOSTNotFound() *ResumeOrRerunDockerRegistryEventUsingPOSTNotFound {
	return &ResumeOrRerunDockerRegistryEventUsingPOSTNotFound{}
}

/*
ResumeOrRerunDockerRegistryEventUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ResumeOrRerunDockerRegistryEventUsingPOSTNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this resume or rerun docker registry event using p o s t not found response has a 2xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resume or rerun docker registry event using p o s t not found response has a 3xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resume or rerun docker registry event using p o s t not found response has a 4xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this resume or rerun docker registry event using p o s t not found response has a 5xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this resume or rerun docker registry event using p o s t not found response a status code equal to that given
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /codestream/api/registry-events/{id}][%d] resumeOrRerunDockerRegistryEventUsingPOSTNotFound  %+v", 404, o.Payload)
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /codestream/api/registry-events/{id}][%d] resumeOrRerunDockerRegistryEventUsingPOSTNotFound  %+v", 404, o.Payload)
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError creates a ResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError with default headers values
func NewResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError() *ResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError {
	return &ResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError{}
}

/*
ResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError struct {
}

// IsSuccess returns true when this resume or rerun docker registry event using p o s t internal server error response has a 2xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resume or rerun docker registry event using p o s t internal server error response has a 3xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resume or rerun docker registry event using p o s t internal server error response has a 4xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this resume or rerun docker registry event using p o s t internal server error response has a 5xx status code
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this resume or rerun docker registry event using p o s t internal server error response a status code equal to that given
func (o *ResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /codestream/api/registry-events/{id}][%d] resumeOrRerunDockerRegistryEventUsingPOSTInternalServerError ", 500)
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError) String() string {
	return fmt.Sprintf("[POST /codestream/api/registry-events/{id}][%d] resumeOrRerunDockerRegistryEventUsingPOSTInternalServerError ", 500)
}

func (o *ResumeOrRerunDockerRegistryEventUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
