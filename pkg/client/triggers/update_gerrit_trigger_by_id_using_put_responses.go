// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateGerritTriggerByIDUsingPUTReader is a Reader for the UpdateGerritTriggerByIDUsingPUT structure.
type UpdateGerritTriggerByIDUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGerritTriggerByIDUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGerritTriggerByIDUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateGerritTriggerByIDUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGerritTriggerByIDUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGerritTriggerByIDUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateGerritTriggerByIDUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateGerritTriggerByIDUsingPUTOK creates a UpdateGerritTriggerByIDUsingPUTOK with default headers values
func NewUpdateGerritTriggerByIDUsingPUTOK() *UpdateGerritTriggerByIDUsingPUTOK {
	return &UpdateGerritTriggerByIDUsingPUTOK{}
}

/*
UpdateGerritTriggerByIDUsingPUTOK describes a response with status code 200, with default header values.

'Success' with Gerrit Trigger Update
*/
type UpdateGerritTriggerByIDUsingPUTOK struct {
	Payload models.GerritTrigger
}

// IsSuccess returns true when this update gerrit trigger by Id using p u t o k response has a 2xx status code
func (o *UpdateGerritTriggerByIDUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update gerrit trigger by Id using p u t o k response has a 3xx status code
func (o *UpdateGerritTriggerByIDUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gerrit trigger by Id using p u t o k response has a 4xx status code
func (o *UpdateGerritTriggerByIDUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update gerrit trigger by Id using p u t o k response has a 5xx status code
func (o *UpdateGerritTriggerByIDUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update gerrit trigger by Id using p u t o k response a status code equal to that given
func (o *UpdateGerritTriggerByIDUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateGerritTriggerByIDUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{id}][%d] updateGerritTriggerByIdUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateGerritTriggerByIDUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{id}][%d] updateGerritTriggerByIdUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateGerritTriggerByIDUsingPUTOK) GetPayload() models.GerritTrigger {
	return o.Payload
}

func (o *UpdateGerritTriggerByIDUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritTrigger(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewUpdateGerritTriggerByIDUsingPUTUnauthorized creates a UpdateGerritTriggerByIDUsingPUTUnauthorized with default headers values
func NewUpdateGerritTriggerByIDUsingPUTUnauthorized() *UpdateGerritTriggerByIDUsingPUTUnauthorized {
	return &UpdateGerritTriggerByIDUsingPUTUnauthorized{}
}

/*
UpdateGerritTriggerByIDUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type UpdateGerritTriggerByIDUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update gerrit trigger by Id using p u t unauthorized response has a 2xx status code
func (o *UpdateGerritTriggerByIDUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gerrit trigger by Id using p u t unauthorized response has a 3xx status code
func (o *UpdateGerritTriggerByIDUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gerrit trigger by Id using p u t unauthorized response has a 4xx status code
func (o *UpdateGerritTriggerByIDUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gerrit trigger by Id using p u t unauthorized response has a 5xx status code
func (o *UpdateGerritTriggerByIDUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update gerrit trigger by Id using p u t unauthorized response a status code equal to that given
func (o *UpdateGerritTriggerByIDUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateGerritTriggerByIDUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{id}][%d] updateGerritTriggerByIdUsingPUTUnauthorized ", 401)
}

func (o *UpdateGerritTriggerByIDUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{id}][%d] updateGerritTriggerByIdUsingPUTUnauthorized ", 401)
}

func (o *UpdateGerritTriggerByIDUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGerritTriggerByIDUsingPUTForbidden creates a UpdateGerritTriggerByIDUsingPUTForbidden with default headers values
func NewUpdateGerritTriggerByIDUsingPUTForbidden() *UpdateGerritTriggerByIDUsingPUTForbidden {
	return &UpdateGerritTriggerByIDUsingPUTForbidden{}
}

/*
UpdateGerritTriggerByIDUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateGerritTriggerByIDUsingPUTForbidden struct {
}

// IsSuccess returns true when this update gerrit trigger by Id using p u t forbidden response has a 2xx status code
func (o *UpdateGerritTriggerByIDUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gerrit trigger by Id using p u t forbidden response has a 3xx status code
func (o *UpdateGerritTriggerByIDUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gerrit trigger by Id using p u t forbidden response has a 4xx status code
func (o *UpdateGerritTriggerByIDUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gerrit trigger by Id using p u t forbidden response has a 5xx status code
func (o *UpdateGerritTriggerByIDUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update gerrit trigger by Id using p u t forbidden response a status code equal to that given
func (o *UpdateGerritTriggerByIDUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateGerritTriggerByIDUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{id}][%d] updateGerritTriggerByIdUsingPUTForbidden ", 403)
}

func (o *UpdateGerritTriggerByIDUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{id}][%d] updateGerritTriggerByIdUsingPUTForbidden ", 403)
}

func (o *UpdateGerritTriggerByIDUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGerritTriggerByIDUsingPUTNotFound creates a UpdateGerritTriggerByIDUsingPUTNotFound with default headers values
func NewUpdateGerritTriggerByIDUsingPUTNotFound() *UpdateGerritTriggerByIDUsingPUTNotFound {
	return &UpdateGerritTriggerByIDUsingPUTNotFound{}
}

/*
UpdateGerritTriggerByIDUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateGerritTriggerByIDUsingPUTNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update gerrit trigger by Id using p u t not found response has a 2xx status code
func (o *UpdateGerritTriggerByIDUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gerrit trigger by Id using p u t not found response has a 3xx status code
func (o *UpdateGerritTriggerByIDUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gerrit trigger by Id using p u t not found response has a 4xx status code
func (o *UpdateGerritTriggerByIDUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gerrit trigger by Id using p u t not found response has a 5xx status code
func (o *UpdateGerritTriggerByIDUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update gerrit trigger by Id using p u t not found response a status code equal to that given
func (o *UpdateGerritTriggerByIDUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateGerritTriggerByIDUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{id}][%d] updateGerritTriggerByIdUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateGerritTriggerByIDUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{id}][%d] updateGerritTriggerByIdUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateGerritTriggerByIDUsingPUTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGerritTriggerByIDUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGerritTriggerByIDUsingPUTInternalServerError creates a UpdateGerritTriggerByIDUsingPUTInternalServerError with default headers values
func NewUpdateGerritTriggerByIDUsingPUTInternalServerError() *UpdateGerritTriggerByIDUsingPUTInternalServerError {
	return &UpdateGerritTriggerByIDUsingPUTInternalServerError{}
}

/*
UpdateGerritTriggerByIDUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateGerritTriggerByIDUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update gerrit trigger by Id using p u t internal server error response has a 2xx status code
func (o *UpdateGerritTriggerByIDUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gerrit trigger by Id using p u t internal server error response has a 3xx status code
func (o *UpdateGerritTriggerByIDUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gerrit trigger by Id using p u t internal server error response has a 4xx status code
func (o *UpdateGerritTriggerByIDUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update gerrit trigger by Id using p u t internal server error response has a 5xx status code
func (o *UpdateGerritTriggerByIDUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update gerrit trigger by Id using p u t internal server error response a status code equal to that given
func (o *UpdateGerritTriggerByIDUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateGerritTriggerByIDUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{id}][%d] updateGerritTriggerByIdUsingPUTInternalServerError ", 500)
}

func (o *UpdateGerritTriggerByIDUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{id}][%d] updateGerritTriggerByIdUsingPUTInternalServerError ", 500)
}

func (o *UpdateGerritTriggerByIDUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
