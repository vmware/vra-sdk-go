// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// CloneListenerUsingPOSTReader is a Reader for the CloneListenerUsingPOST structure.
type CloneListenerUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CloneListenerUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCloneListenerUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCloneListenerUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCloneListenerUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCloneListenerUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCloneListenerUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCloneListenerUsingPOSTOK creates a CloneListenerUsingPOSTOK with default headers values
func NewCloneListenerUsingPOSTOK() *CloneListenerUsingPOSTOK {
	return &CloneListenerUsingPOSTOK{}
}

/* CloneListenerUsingPOSTOK describes a response with status code 200, with default header values.

'Success' with Gerrit Listener Clone
*/
type CloneListenerUsingPOSTOK struct {
	Payload models.GerritListener
}

func (o *CloneListenerUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-listeners/{id}][%d] cloneListenerUsingPOSTOK  %+v", 200, o.Payload)
}
func (o *CloneListenerUsingPOSTOK) GetPayload() models.GerritListener {
	return o.Payload
}

func (o *CloneListenerUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritListener(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewCloneListenerUsingPOSTUnauthorized creates a CloneListenerUsingPOSTUnauthorized with default headers values
func NewCloneListenerUsingPOSTUnauthorized() *CloneListenerUsingPOSTUnauthorized {
	return &CloneListenerUsingPOSTUnauthorized{}
}

/* CloneListenerUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type CloneListenerUsingPOSTUnauthorized struct {
}

func (o *CloneListenerUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-listeners/{id}][%d] cloneListenerUsingPOSTUnauthorized ", 401)
}

func (o *CloneListenerUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCloneListenerUsingPOSTForbidden creates a CloneListenerUsingPOSTForbidden with default headers values
func NewCloneListenerUsingPOSTForbidden() *CloneListenerUsingPOSTForbidden {
	return &CloneListenerUsingPOSTForbidden{}
}

/* CloneListenerUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CloneListenerUsingPOSTForbidden struct {
}

func (o *CloneListenerUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-listeners/{id}][%d] cloneListenerUsingPOSTForbidden ", 403)
}

func (o *CloneListenerUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCloneListenerUsingPOSTNotFound creates a CloneListenerUsingPOSTNotFound with default headers values
func NewCloneListenerUsingPOSTNotFound() *CloneListenerUsingPOSTNotFound {
	return &CloneListenerUsingPOSTNotFound{}
}

/* CloneListenerUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CloneListenerUsingPOSTNotFound struct {
	Payload *models.Error
}

func (o *CloneListenerUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-listeners/{id}][%d] cloneListenerUsingPOSTNotFound  %+v", 404, o.Payload)
}
func (o *CloneListenerUsingPOSTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CloneListenerUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloneListenerUsingPOSTInternalServerError creates a CloneListenerUsingPOSTInternalServerError with default headers values
func NewCloneListenerUsingPOSTInternalServerError() *CloneListenerUsingPOSTInternalServerError {
	return &CloneListenerUsingPOSTInternalServerError{}
}

/* CloneListenerUsingPOSTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CloneListenerUsingPOSTInternalServerError struct {
}

func (o *CloneListenerUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-listeners/{id}][%d] cloneListenerUsingPOSTInternalServerError ", 500)
}

func (o *CloneListenerUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
