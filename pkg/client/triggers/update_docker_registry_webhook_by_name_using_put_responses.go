// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateDockerRegistryWebhookByNameUsingPUTReader is a Reader for the UpdateDockerRegistryWebhookByNameUsingPUT structure.
type UpdateDockerRegistryWebhookByNameUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDockerRegistryWebhookByNameUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDockerRegistryWebhookByNameUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateDockerRegistryWebhookByNameUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateDockerRegistryWebhookByNameUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDockerRegistryWebhookByNameUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDockerRegistryWebhookByNameUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDockerRegistryWebhookByNameUsingPUTOK creates a UpdateDockerRegistryWebhookByNameUsingPUTOK with default headers values
func NewUpdateDockerRegistryWebhookByNameUsingPUTOK() *UpdateDockerRegistryWebhookByNameUsingPUTOK {
	return &UpdateDockerRegistryWebhookByNameUsingPUTOK{}
}

/*
UpdateDockerRegistryWebhookByNameUsingPUTOK describes a response with status code 200, with default header values.

'Success' with Docker Registry Webhook Update
*/
type UpdateDockerRegistryWebhookByNameUsingPUTOK struct {
	Payload models.DockerRegistryWebHook
}

// IsSuccess returns true when this update docker registry webhook by name using p u t o k response has a 2xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update docker registry webhook by name using p u t o k response has a 3xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update docker registry webhook by name using p u t o k response has a 4xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update docker registry webhook by name using p u t o k response has a 5xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update docker registry webhook by name using p u t o k response a status code equal to that given
func (o *UpdateDockerRegistryWebhookByNameUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/registry-webhooks/{project}/{name}][%d] updateDockerRegistryWebhookByNameUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /codestream/api/registry-webhooks/{project}/{name}][%d] updateDockerRegistryWebhookByNameUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTOK) GetPayload() models.DockerRegistryWebHook {
	return o.Payload
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalDockerRegistryWebHook(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewUpdateDockerRegistryWebhookByNameUsingPUTUnauthorized creates a UpdateDockerRegistryWebhookByNameUsingPUTUnauthorized with default headers values
func NewUpdateDockerRegistryWebhookByNameUsingPUTUnauthorized() *UpdateDockerRegistryWebhookByNameUsingPUTUnauthorized {
	return &UpdateDockerRegistryWebhookByNameUsingPUTUnauthorized{}
}

/*
UpdateDockerRegistryWebhookByNameUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type UpdateDockerRegistryWebhookByNameUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update docker registry webhook by name using p u t unauthorized response has a 2xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update docker registry webhook by name using p u t unauthorized response has a 3xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update docker registry webhook by name using p u t unauthorized response has a 4xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update docker registry webhook by name using p u t unauthorized response has a 5xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update docker registry webhook by name using p u t unauthorized response a status code equal to that given
func (o *UpdateDockerRegistryWebhookByNameUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/registry-webhooks/{project}/{name}][%d] updateDockerRegistryWebhookByNameUsingPUTUnauthorized ", 401)
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /codestream/api/registry-webhooks/{project}/{name}][%d] updateDockerRegistryWebhookByNameUsingPUTUnauthorized ", 401)
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDockerRegistryWebhookByNameUsingPUTForbidden creates a UpdateDockerRegistryWebhookByNameUsingPUTForbidden with default headers values
func NewUpdateDockerRegistryWebhookByNameUsingPUTForbidden() *UpdateDockerRegistryWebhookByNameUsingPUTForbidden {
	return &UpdateDockerRegistryWebhookByNameUsingPUTForbidden{}
}

/*
UpdateDockerRegistryWebhookByNameUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateDockerRegistryWebhookByNameUsingPUTForbidden struct {
}

// IsSuccess returns true when this update docker registry webhook by name using p u t forbidden response has a 2xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update docker registry webhook by name using p u t forbidden response has a 3xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update docker registry webhook by name using p u t forbidden response has a 4xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update docker registry webhook by name using p u t forbidden response has a 5xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update docker registry webhook by name using p u t forbidden response a status code equal to that given
func (o *UpdateDockerRegistryWebhookByNameUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/registry-webhooks/{project}/{name}][%d] updateDockerRegistryWebhookByNameUsingPUTForbidden ", 403)
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /codestream/api/registry-webhooks/{project}/{name}][%d] updateDockerRegistryWebhookByNameUsingPUTForbidden ", 403)
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDockerRegistryWebhookByNameUsingPUTNotFound creates a UpdateDockerRegistryWebhookByNameUsingPUTNotFound with default headers values
func NewUpdateDockerRegistryWebhookByNameUsingPUTNotFound() *UpdateDockerRegistryWebhookByNameUsingPUTNotFound {
	return &UpdateDockerRegistryWebhookByNameUsingPUTNotFound{}
}

/*
UpdateDockerRegistryWebhookByNameUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateDockerRegistryWebhookByNameUsingPUTNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update docker registry webhook by name using p u t not found response has a 2xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update docker registry webhook by name using p u t not found response has a 3xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update docker registry webhook by name using p u t not found response has a 4xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update docker registry webhook by name using p u t not found response has a 5xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update docker registry webhook by name using p u t not found response a status code equal to that given
func (o *UpdateDockerRegistryWebhookByNameUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/registry-webhooks/{project}/{name}][%d] updateDockerRegistryWebhookByNameUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /codestream/api/registry-webhooks/{project}/{name}][%d] updateDockerRegistryWebhookByNameUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDockerRegistryWebhookByNameUsingPUTInternalServerError creates a UpdateDockerRegistryWebhookByNameUsingPUTInternalServerError with default headers values
func NewUpdateDockerRegistryWebhookByNameUsingPUTInternalServerError() *UpdateDockerRegistryWebhookByNameUsingPUTInternalServerError {
	return &UpdateDockerRegistryWebhookByNameUsingPUTInternalServerError{}
}

/*
UpdateDockerRegistryWebhookByNameUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateDockerRegistryWebhookByNameUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update docker registry webhook by name using p u t internal server error response has a 2xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update docker registry webhook by name using p u t internal server error response has a 3xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update docker registry webhook by name using p u t internal server error response has a 4xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update docker registry webhook by name using p u t internal server error response has a 5xx status code
func (o *UpdateDockerRegistryWebhookByNameUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update docker registry webhook by name using p u t internal server error response a status code equal to that given
func (o *UpdateDockerRegistryWebhookByNameUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/registry-webhooks/{project}/{name}][%d] updateDockerRegistryWebhookByNameUsingPUTInternalServerError ", 500)
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /codestream/api/registry-webhooks/{project}/{name}][%d] updateDockerRegistryWebhookByNameUsingPUTInternalServerError ", 500)
}

func (o *UpdateDockerRegistryWebhookByNameUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
