// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateGitWebhookByIDUsingPUTReader is a Reader for the UpdateGitWebhookByIDUsingPUT structure.
type UpdateGitWebhookByIDUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGitWebhookByIDUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGitWebhookByIDUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateGitWebhookByIDUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGitWebhookByIDUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGitWebhookByIDUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateGitWebhookByIDUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateGitWebhookByIDUsingPUTOK creates a UpdateGitWebhookByIDUsingPUTOK with default headers values
func NewUpdateGitWebhookByIDUsingPUTOK() *UpdateGitWebhookByIDUsingPUTOK {
	return &UpdateGitWebhookByIDUsingPUTOK{}
}

/*
UpdateGitWebhookByIDUsingPUTOK describes a response with status code 200, with default header values.

'Success' with Git Webhook Update
*/
type UpdateGitWebhookByIDUsingPUTOK struct {
	Payload models.GitWebhook
}

// IsSuccess returns true when this update git webhook by Id using p u t o k response has a 2xx status code
func (o *UpdateGitWebhookByIDUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update git webhook by Id using p u t o k response has a 3xx status code
func (o *UpdateGitWebhookByIDUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git webhook by Id using p u t o k response has a 4xx status code
func (o *UpdateGitWebhookByIDUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update git webhook by Id using p u t o k response has a 5xx status code
func (o *UpdateGitWebhookByIDUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update git webhook by Id using p u t o k response a status code equal to that given
func (o *UpdateGitWebhookByIDUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateGitWebhookByIDUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{id}][%d] updateGitWebhookByIdUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateGitWebhookByIDUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{id}][%d] updateGitWebhookByIdUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateGitWebhookByIDUsingPUTOK) GetPayload() models.GitWebhook {
	return o.Payload
}

func (o *UpdateGitWebhookByIDUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGitWebhook(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewUpdateGitWebhookByIDUsingPUTUnauthorized creates a UpdateGitWebhookByIDUsingPUTUnauthorized with default headers values
func NewUpdateGitWebhookByIDUsingPUTUnauthorized() *UpdateGitWebhookByIDUsingPUTUnauthorized {
	return &UpdateGitWebhookByIDUsingPUTUnauthorized{}
}

/*
UpdateGitWebhookByIDUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type UpdateGitWebhookByIDUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update git webhook by Id using p u t unauthorized response has a 2xx status code
func (o *UpdateGitWebhookByIDUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git webhook by Id using p u t unauthorized response has a 3xx status code
func (o *UpdateGitWebhookByIDUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git webhook by Id using p u t unauthorized response has a 4xx status code
func (o *UpdateGitWebhookByIDUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git webhook by Id using p u t unauthorized response has a 5xx status code
func (o *UpdateGitWebhookByIDUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update git webhook by Id using p u t unauthorized response a status code equal to that given
func (o *UpdateGitWebhookByIDUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateGitWebhookByIDUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{id}][%d] updateGitWebhookByIdUsingPUTUnauthorized ", 401)
}

func (o *UpdateGitWebhookByIDUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{id}][%d] updateGitWebhookByIdUsingPUTUnauthorized ", 401)
}

func (o *UpdateGitWebhookByIDUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGitWebhookByIDUsingPUTForbidden creates a UpdateGitWebhookByIDUsingPUTForbidden with default headers values
func NewUpdateGitWebhookByIDUsingPUTForbidden() *UpdateGitWebhookByIDUsingPUTForbidden {
	return &UpdateGitWebhookByIDUsingPUTForbidden{}
}

/*
UpdateGitWebhookByIDUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateGitWebhookByIDUsingPUTForbidden struct {
}

// IsSuccess returns true when this update git webhook by Id using p u t forbidden response has a 2xx status code
func (o *UpdateGitWebhookByIDUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git webhook by Id using p u t forbidden response has a 3xx status code
func (o *UpdateGitWebhookByIDUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git webhook by Id using p u t forbidden response has a 4xx status code
func (o *UpdateGitWebhookByIDUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git webhook by Id using p u t forbidden response has a 5xx status code
func (o *UpdateGitWebhookByIDUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update git webhook by Id using p u t forbidden response a status code equal to that given
func (o *UpdateGitWebhookByIDUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateGitWebhookByIDUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{id}][%d] updateGitWebhookByIdUsingPUTForbidden ", 403)
}

func (o *UpdateGitWebhookByIDUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{id}][%d] updateGitWebhookByIdUsingPUTForbidden ", 403)
}

func (o *UpdateGitWebhookByIDUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGitWebhookByIDUsingPUTNotFound creates a UpdateGitWebhookByIDUsingPUTNotFound with default headers values
func NewUpdateGitWebhookByIDUsingPUTNotFound() *UpdateGitWebhookByIDUsingPUTNotFound {
	return &UpdateGitWebhookByIDUsingPUTNotFound{}
}

/*
UpdateGitWebhookByIDUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateGitWebhookByIDUsingPUTNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update git webhook by Id using p u t not found response has a 2xx status code
func (o *UpdateGitWebhookByIDUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git webhook by Id using p u t not found response has a 3xx status code
func (o *UpdateGitWebhookByIDUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git webhook by Id using p u t not found response has a 4xx status code
func (o *UpdateGitWebhookByIDUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git webhook by Id using p u t not found response has a 5xx status code
func (o *UpdateGitWebhookByIDUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update git webhook by Id using p u t not found response a status code equal to that given
func (o *UpdateGitWebhookByIDUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateGitWebhookByIDUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{id}][%d] updateGitWebhookByIdUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateGitWebhookByIDUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{id}][%d] updateGitWebhookByIdUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateGitWebhookByIDUsingPUTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGitWebhookByIDUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitWebhookByIDUsingPUTInternalServerError creates a UpdateGitWebhookByIDUsingPUTInternalServerError with default headers values
func NewUpdateGitWebhookByIDUsingPUTInternalServerError() *UpdateGitWebhookByIDUsingPUTInternalServerError {
	return &UpdateGitWebhookByIDUsingPUTInternalServerError{}
}

/*
UpdateGitWebhookByIDUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateGitWebhookByIDUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update git webhook by Id using p u t internal server error response has a 2xx status code
func (o *UpdateGitWebhookByIDUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git webhook by Id using p u t internal server error response has a 3xx status code
func (o *UpdateGitWebhookByIDUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git webhook by Id using p u t internal server error response has a 4xx status code
func (o *UpdateGitWebhookByIDUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update git webhook by Id using p u t internal server error response has a 5xx status code
func (o *UpdateGitWebhookByIDUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update git webhook by Id using p u t internal server error response a status code equal to that given
func (o *UpdateGitWebhookByIDUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateGitWebhookByIDUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{id}][%d] updateGitWebhookByIdUsingPUTInternalServerError ", 500)
}

func (o *UpdateGitWebhookByIDUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{id}][%d] updateGitWebhookByIdUsingPUTInternalServerError ", 500)
}

func (o *UpdateGitWebhookByIDUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
