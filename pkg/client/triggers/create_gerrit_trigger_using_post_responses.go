// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// CreateGerritTriggerUsingPOSTReader is a Reader for the CreateGerritTriggerUsingPOST structure.
type CreateGerritTriggerUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateGerritTriggerUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateGerritTriggerUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateGerritTriggerUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateGerritTriggerUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateGerritTriggerUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateGerritTriggerUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateGerritTriggerUsingPOSTOK creates a CreateGerritTriggerUsingPOSTOK with default headers values
func NewCreateGerritTriggerUsingPOSTOK() *CreateGerritTriggerUsingPOSTOK {
	return &CreateGerritTriggerUsingPOSTOK{}
}

/* CreateGerritTriggerUsingPOSTOK describes a response with status code 200, with default header values.

'Success' with Gerrit Trigger Creation
*/
type CreateGerritTriggerUsingPOSTOK struct {
	Payload models.GerritTrigger
}

func (o *CreateGerritTriggerUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers][%d] createGerritTriggerUsingPOSTOK  %+v", 200, o.Payload)
}
func (o *CreateGerritTriggerUsingPOSTOK) GetPayload() models.GerritTrigger {
	return o.Payload
}

func (o *CreateGerritTriggerUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritTrigger(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewCreateGerritTriggerUsingPOSTUnauthorized creates a CreateGerritTriggerUsingPOSTUnauthorized with default headers values
func NewCreateGerritTriggerUsingPOSTUnauthorized() *CreateGerritTriggerUsingPOSTUnauthorized {
	return &CreateGerritTriggerUsingPOSTUnauthorized{}
}

/* CreateGerritTriggerUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type CreateGerritTriggerUsingPOSTUnauthorized struct {
}

func (o *CreateGerritTriggerUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers][%d] createGerritTriggerUsingPOSTUnauthorized ", 401)
}

func (o *CreateGerritTriggerUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateGerritTriggerUsingPOSTForbidden creates a CreateGerritTriggerUsingPOSTForbidden with default headers values
func NewCreateGerritTriggerUsingPOSTForbidden() *CreateGerritTriggerUsingPOSTForbidden {
	return &CreateGerritTriggerUsingPOSTForbidden{}
}

/* CreateGerritTriggerUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateGerritTriggerUsingPOSTForbidden struct {
}

func (o *CreateGerritTriggerUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers][%d] createGerritTriggerUsingPOSTForbidden ", 403)
}

func (o *CreateGerritTriggerUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateGerritTriggerUsingPOSTNotFound creates a CreateGerritTriggerUsingPOSTNotFound with default headers values
func NewCreateGerritTriggerUsingPOSTNotFound() *CreateGerritTriggerUsingPOSTNotFound {
	return &CreateGerritTriggerUsingPOSTNotFound{}
}

/* CreateGerritTriggerUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateGerritTriggerUsingPOSTNotFound struct {
	Payload *models.Error
}

func (o *CreateGerritTriggerUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers][%d] createGerritTriggerUsingPOSTNotFound  %+v", 404, o.Payload)
}
func (o *CreateGerritTriggerUsingPOSTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGerritTriggerUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGerritTriggerUsingPOSTInternalServerError creates a CreateGerritTriggerUsingPOSTInternalServerError with default headers values
func NewCreateGerritTriggerUsingPOSTInternalServerError() *CreateGerritTriggerUsingPOSTInternalServerError {
	return &CreateGerritTriggerUsingPOSTInternalServerError{}
}

/* CreateGerritTriggerUsingPOSTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CreateGerritTriggerUsingPOSTInternalServerError struct {
}

func (o *CreateGerritTriggerUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers][%d] createGerritTriggerUsingPOSTInternalServerError ", 500)
}

func (o *CreateGerritTriggerUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
