// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetAllGerritEventsUsingGETReader is a Reader for the GetAllGerritEventsUsingGET structure.
type GetAllGerritEventsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllGerritEventsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllGerritEventsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllGerritEventsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllGerritEventsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllGerritEventsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllGerritEventsUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAllGerritEventsUsingGETOK creates a GetAllGerritEventsUsingGETOK with default headers values
func NewGetAllGerritEventsUsingGETOK() *GetAllGerritEventsUsingGETOK {
	return &GetAllGerritEventsUsingGETOK{}
}

/* GetAllGerritEventsUsingGETOK describes a response with status code 200, with default header values.

'Success' with get of gerrit events
*/
type GetAllGerritEventsUsingGETOK struct {
	Payload models.GerritEvents
}

func (o *GetAllGerritEventsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-events][%d] getAllGerritEventsUsingGETOK  %+v", 200, o.Payload)
}
func (o *GetAllGerritEventsUsingGETOK) GetPayload() models.GerritEvents {
	return o.Payload
}

func (o *GetAllGerritEventsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritEvents(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewGetAllGerritEventsUsingGETUnauthorized creates a GetAllGerritEventsUsingGETUnauthorized with default headers values
func NewGetAllGerritEventsUsingGETUnauthorized() *GetAllGerritEventsUsingGETUnauthorized {
	return &GetAllGerritEventsUsingGETUnauthorized{}
}

/* GetAllGerritEventsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type GetAllGerritEventsUsingGETUnauthorized struct {
}

func (o *GetAllGerritEventsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-events][%d] getAllGerritEventsUsingGETUnauthorized ", 401)
}

func (o *GetAllGerritEventsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllGerritEventsUsingGETForbidden creates a GetAllGerritEventsUsingGETForbidden with default headers values
func NewGetAllGerritEventsUsingGETForbidden() *GetAllGerritEventsUsingGETForbidden {
	return &GetAllGerritEventsUsingGETForbidden{}
}

/* GetAllGerritEventsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllGerritEventsUsingGETForbidden struct {
}

func (o *GetAllGerritEventsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-events][%d] getAllGerritEventsUsingGETForbidden ", 403)
}

func (o *GetAllGerritEventsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllGerritEventsUsingGETNotFound creates a GetAllGerritEventsUsingGETNotFound with default headers values
func NewGetAllGerritEventsUsingGETNotFound() *GetAllGerritEventsUsingGETNotFound {
	return &GetAllGerritEventsUsingGETNotFound{}
}

/* GetAllGerritEventsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllGerritEventsUsingGETNotFound struct {
	Payload *models.Error
}

func (o *GetAllGerritEventsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-events][%d] getAllGerritEventsUsingGETNotFound  %+v", 404, o.Payload)
}
func (o *GetAllGerritEventsUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllGerritEventsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllGerritEventsUsingGETInternalServerError creates a GetAllGerritEventsUsingGETInternalServerError with default headers values
func NewGetAllGerritEventsUsingGETInternalServerError() *GetAllGerritEventsUsingGETInternalServerError {
	return &GetAllGerritEventsUsingGETInternalServerError{}
}

/* GetAllGerritEventsUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetAllGerritEventsUsingGETInternalServerError struct {
}

func (o *GetAllGerritEventsUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-events][%d] getAllGerritEventsUsingGETInternalServerError ", 500)
}

func (o *GetAllGerritEventsUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
