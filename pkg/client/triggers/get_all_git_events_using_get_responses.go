// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetAllGitEventsUsingGETReader is a Reader for the GetAllGitEventsUsingGET structure.
type GetAllGitEventsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllGitEventsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllGitEventsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllGitEventsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllGitEventsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllGitEventsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllGitEventsUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAllGitEventsUsingGETOK creates a GetAllGitEventsUsingGETOK with default headers values
func NewGetAllGitEventsUsingGETOK() *GetAllGitEventsUsingGETOK {
	return &GetAllGitEventsUsingGETOK{}
}

/*
GetAllGitEventsUsingGETOK describes a response with status code 200, with default header values.

'Success' with get of Git Events
*/
type GetAllGitEventsUsingGETOK struct {
	Payload models.GitEvents
}

// IsSuccess returns true when this get all git events using g e t o k response has a 2xx status code
func (o *GetAllGitEventsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all git events using g e t o k response has a 3xx status code
func (o *GetAllGitEventsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all git events using g e t o k response has a 4xx status code
func (o *GetAllGitEventsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all git events using g e t o k response has a 5xx status code
func (o *GetAllGitEventsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all git events using g e t o k response a status code equal to that given
func (o *GetAllGitEventsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAllGitEventsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-events][%d] getAllGitEventsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetAllGitEventsUsingGETOK) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-events][%d] getAllGitEventsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetAllGitEventsUsingGETOK) GetPayload() models.GitEvents {
	return o.Payload
}

func (o *GetAllGitEventsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGitEvents(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewGetAllGitEventsUsingGETUnauthorized creates a GetAllGitEventsUsingGETUnauthorized with default headers values
func NewGetAllGitEventsUsingGETUnauthorized() *GetAllGitEventsUsingGETUnauthorized {
	return &GetAllGitEventsUsingGETUnauthorized{}
}

/*
GetAllGitEventsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type GetAllGitEventsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all git events using g e t unauthorized response has a 2xx status code
func (o *GetAllGitEventsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all git events using g e t unauthorized response has a 3xx status code
func (o *GetAllGitEventsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all git events using g e t unauthorized response has a 4xx status code
func (o *GetAllGitEventsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all git events using g e t unauthorized response has a 5xx status code
func (o *GetAllGitEventsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all git events using g e t unauthorized response a status code equal to that given
func (o *GetAllGitEventsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAllGitEventsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-events][%d] getAllGitEventsUsingGETUnauthorized ", 401)
}

func (o *GetAllGitEventsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-events][%d] getAllGitEventsUsingGETUnauthorized ", 401)
}

func (o *GetAllGitEventsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllGitEventsUsingGETForbidden creates a GetAllGitEventsUsingGETForbidden with default headers values
func NewGetAllGitEventsUsingGETForbidden() *GetAllGitEventsUsingGETForbidden {
	return &GetAllGitEventsUsingGETForbidden{}
}

/*
GetAllGitEventsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllGitEventsUsingGETForbidden struct {
}

// IsSuccess returns true when this get all git events using g e t forbidden response has a 2xx status code
func (o *GetAllGitEventsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all git events using g e t forbidden response has a 3xx status code
func (o *GetAllGitEventsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all git events using g e t forbidden response has a 4xx status code
func (o *GetAllGitEventsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all git events using g e t forbidden response has a 5xx status code
func (o *GetAllGitEventsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all git events using g e t forbidden response a status code equal to that given
func (o *GetAllGitEventsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAllGitEventsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-events][%d] getAllGitEventsUsingGETForbidden ", 403)
}

func (o *GetAllGitEventsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-events][%d] getAllGitEventsUsingGETForbidden ", 403)
}

func (o *GetAllGitEventsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllGitEventsUsingGETNotFound creates a GetAllGitEventsUsingGETNotFound with default headers values
func NewGetAllGitEventsUsingGETNotFound() *GetAllGitEventsUsingGETNotFound {
	return &GetAllGitEventsUsingGETNotFound{}
}

/*
GetAllGitEventsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllGitEventsUsingGETNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get all git events using g e t not found response has a 2xx status code
func (o *GetAllGitEventsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all git events using g e t not found response has a 3xx status code
func (o *GetAllGitEventsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all git events using g e t not found response has a 4xx status code
func (o *GetAllGitEventsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all git events using g e t not found response has a 5xx status code
func (o *GetAllGitEventsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all git events using g e t not found response a status code equal to that given
func (o *GetAllGitEventsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAllGitEventsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-events][%d] getAllGitEventsUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetAllGitEventsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-events][%d] getAllGitEventsUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetAllGitEventsUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllGitEventsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllGitEventsUsingGETInternalServerError creates a GetAllGitEventsUsingGETInternalServerError with default headers values
func NewGetAllGitEventsUsingGETInternalServerError() *GetAllGitEventsUsingGETInternalServerError {
	return &GetAllGitEventsUsingGETInternalServerError{}
}

/*
GetAllGitEventsUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetAllGitEventsUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get all git events using g e t internal server error response has a 2xx status code
func (o *GetAllGitEventsUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all git events using g e t internal server error response has a 3xx status code
func (o *GetAllGitEventsUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all git events using g e t internal server error response has a 4xx status code
func (o *GetAllGitEventsUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all git events using g e t internal server error response has a 5xx status code
func (o *GetAllGitEventsUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all git events using g e t internal server error response a status code equal to that given
func (o *GetAllGitEventsUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAllGitEventsUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-events][%d] getAllGitEventsUsingGETInternalServerError ", 500)
}

func (o *GetAllGitEventsUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-events][%d] getAllGitEventsUsingGETInternalServerError ", 500)
}

func (o *GetAllGitEventsUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
