// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetGerritProjectsUsingGET1Reader is a Reader for the GetGerritProjectsUsingGET1 structure.
type GetGerritProjectsUsingGET1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGerritProjectsUsingGET1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGerritProjectsUsingGET1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetGerritProjectsUsingGET1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGerritProjectsUsingGET1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGerritProjectsUsingGET1NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGerritProjectsUsingGET1InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGerritProjectsUsingGET1OK creates a GetGerritProjectsUsingGET1OK with default headers values
func NewGetGerritProjectsUsingGET1OK() *GetGerritProjectsUsingGET1OK {
	return &GetGerritProjectsUsingGET1OK{}
}

/* GetGerritProjectsUsingGET1OK describes a response with status code 200, with default header values.

'Success' with gerrit projects
*/
type GetGerritProjectsUsingGET1OK struct {
	Payload string
}

func (o *GetGerritProjectsUsingGET1OK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsUsingGET1OK  %+v", 200, o.Payload)
}
func (o *GetGerritProjectsUsingGET1OK) GetPayload() string {
	return o.Payload
}

func (o *GetGerritProjectsUsingGET1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGerritProjectsUsingGET1Unauthorized creates a GetGerritProjectsUsingGET1Unauthorized with default headers values
func NewGetGerritProjectsUsingGET1Unauthorized() *GetGerritProjectsUsingGET1Unauthorized {
	return &GetGerritProjectsUsingGET1Unauthorized{}
}

/* GetGerritProjectsUsingGET1Unauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type GetGerritProjectsUsingGET1Unauthorized struct {
}

func (o *GetGerritProjectsUsingGET1Unauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsUsingGET1Unauthorized ", 401)
}

func (o *GetGerritProjectsUsingGET1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGerritProjectsUsingGET1Forbidden creates a GetGerritProjectsUsingGET1Forbidden with default headers values
func NewGetGerritProjectsUsingGET1Forbidden() *GetGerritProjectsUsingGET1Forbidden {
	return &GetGerritProjectsUsingGET1Forbidden{}
}

/* GetGerritProjectsUsingGET1Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetGerritProjectsUsingGET1Forbidden struct {
}

func (o *GetGerritProjectsUsingGET1Forbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsUsingGET1Forbidden ", 403)
}

func (o *GetGerritProjectsUsingGET1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGerritProjectsUsingGET1NotFound creates a GetGerritProjectsUsingGET1NotFound with default headers values
func NewGetGerritProjectsUsingGET1NotFound() *GetGerritProjectsUsingGET1NotFound {
	return &GetGerritProjectsUsingGET1NotFound{}
}

/* GetGerritProjectsUsingGET1NotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetGerritProjectsUsingGET1NotFound struct {
	Payload *models.Error
}

func (o *GetGerritProjectsUsingGET1NotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsUsingGET1NotFound  %+v", 404, o.Payload)
}
func (o *GetGerritProjectsUsingGET1NotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGerritProjectsUsingGET1NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGerritProjectsUsingGET1InternalServerError creates a GetGerritProjectsUsingGET1InternalServerError with default headers values
func NewGetGerritProjectsUsingGET1InternalServerError() *GetGerritProjectsUsingGET1InternalServerError {
	return &GetGerritProjectsUsingGET1InternalServerError{}
}

/* GetGerritProjectsUsingGET1InternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetGerritProjectsUsingGET1InternalServerError struct {
}

func (o *GetGerritProjectsUsingGET1InternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{project}/{name}/projects][%d] getGerritProjectsUsingGET1InternalServerError ", 500)
}

func (o *GetGerritProjectsUsingGET1InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
