// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// CloneGerritTriggerUsingPOSTReader is a Reader for the CloneGerritTriggerUsingPOST structure.
type CloneGerritTriggerUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CloneGerritTriggerUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCloneGerritTriggerUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCloneGerritTriggerUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCloneGerritTriggerUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCloneGerritTriggerUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCloneGerritTriggerUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCloneGerritTriggerUsingPOSTOK creates a CloneGerritTriggerUsingPOSTOK with default headers values
func NewCloneGerritTriggerUsingPOSTOK() *CloneGerritTriggerUsingPOSTOK {
	return &CloneGerritTriggerUsingPOSTOK{}
}

/*
CloneGerritTriggerUsingPOSTOK describes a response with status code 200, with default header values.

'Success' with Gerrit Trigger Clone
*/
type CloneGerritTriggerUsingPOSTOK struct {
	Payload models.GerritTrigger
}

// IsSuccess returns true when this clone gerrit trigger using p o s t o k response has a 2xx status code
func (o *CloneGerritTriggerUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this clone gerrit trigger using p o s t o k response has a 3xx status code
func (o *CloneGerritTriggerUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clone gerrit trigger using p o s t o k response has a 4xx status code
func (o *CloneGerritTriggerUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this clone gerrit trigger using p o s t o k response has a 5xx status code
func (o *CloneGerritTriggerUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this clone gerrit trigger using p o s t o k response a status code equal to that given
func (o *CloneGerritTriggerUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

func (o *CloneGerritTriggerUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers/{id}][%d] cloneGerritTriggerUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *CloneGerritTriggerUsingPOSTOK) String() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers/{id}][%d] cloneGerritTriggerUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *CloneGerritTriggerUsingPOSTOK) GetPayload() models.GerritTrigger {
	return o.Payload
}

func (o *CloneGerritTriggerUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritTrigger(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewCloneGerritTriggerUsingPOSTUnauthorized creates a CloneGerritTriggerUsingPOSTUnauthorized with default headers values
func NewCloneGerritTriggerUsingPOSTUnauthorized() *CloneGerritTriggerUsingPOSTUnauthorized {
	return &CloneGerritTriggerUsingPOSTUnauthorized{}
}

/*
CloneGerritTriggerUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type CloneGerritTriggerUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this clone gerrit trigger using p o s t unauthorized response has a 2xx status code
func (o *CloneGerritTriggerUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clone gerrit trigger using p o s t unauthorized response has a 3xx status code
func (o *CloneGerritTriggerUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clone gerrit trigger using p o s t unauthorized response has a 4xx status code
func (o *CloneGerritTriggerUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this clone gerrit trigger using p o s t unauthorized response has a 5xx status code
func (o *CloneGerritTriggerUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this clone gerrit trigger using p o s t unauthorized response a status code equal to that given
func (o *CloneGerritTriggerUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CloneGerritTriggerUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers/{id}][%d] cloneGerritTriggerUsingPOSTUnauthorized ", 401)
}

func (o *CloneGerritTriggerUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers/{id}][%d] cloneGerritTriggerUsingPOSTUnauthorized ", 401)
}

func (o *CloneGerritTriggerUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCloneGerritTriggerUsingPOSTForbidden creates a CloneGerritTriggerUsingPOSTForbidden with default headers values
func NewCloneGerritTriggerUsingPOSTForbidden() *CloneGerritTriggerUsingPOSTForbidden {
	return &CloneGerritTriggerUsingPOSTForbidden{}
}

/*
CloneGerritTriggerUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CloneGerritTriggerUsingPOSTForbidden struct {
}

// IsSuccess returns true when this clone gerrit trigger using p o s t forbidden response has a 2xx status code
func (o *CloneGerritTriggerUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clone gerrit trigger using p o s t forbidden response has a 3xx status code
func (o *CloneGerritTriggerUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clone gerrit trigger using p o s t forbidden response has a 4xx status code
func (o *CloneGerritTriggerUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this clone gerrit trigger using p o s t forbidden response has a 5xx status code
func (o *CloneGerritTriggerUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this clone gerrit trigger using p o s t forbidden response a status code equal to that given
func (o *CloneGerritTriggerUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CloneGerritTriggerUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers/{id}][%d] cloneGerritTriggerUsingPOSTForbidden ", 403)
}

func (o *CloneGerritTriggerUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers/{id}][%d] cloneGerritTriggerUsingPOSTForbidden ", 403)
}

func (o *CloneGerritTriggerUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCloneGerritTriggerUsingPOSTNotFound creates a CloneGerritTriggerUsingPOSTNotFound with default headers values
func NewCloneGerritTriggerUsingPOSTNotFound() *CloneGerritTriggerUsingPOSTNotFound {
	return &CloneGerritTriggerUsingPOSTNotFound{}
}

/*
CloneGerritTriggerUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CloneGerritTriggerUsingPOSTNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this clone gerrit trigger using p o s t not found response has a 2xx status code
func (o *CloneGerritTriggerUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clone gerrit trigger using p o s t not found response has a 3xx status code
func (o *CloneGerritTriggerUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clone gerrit trigger using p o s t not found response has a 4xx status code
func (o *CloneGerritTriggerUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this clone gerrit trigger using p o s t not found response has a 5xx status code
func (o *CloneGerritTriggerUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this clone gerrit trigger using p o s t not found response a status code equal to that given
func (o *CloneGerritTriggerUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CloneGerritTriggerUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers/{id}][%d] cloneGerritTriggerUsingPOSTNotFound  %+v", 404, o.Payload)
}

func (o *CloneGerritTriggerUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers/{id}][%d] cloneGerritTriggerUsingPOSTNotFound  %+v", 404, o.Payload)
}

func (o *CloneGerritTriggerUsingPOSTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CloneGerritTriggerUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloneGerritTriggerUsingPOSTInternalServerError creates a CloneGerritTriggerUsingPOSTInternalServerError with default headers values
func NewCloneGerritTriggerUsingPOSTInternalServerError() *CloneGerritTriggerUsingPOSTInternalServerError {
	return &CloneGerritTriggerUsingPOSTInternalServerError{}
}

/*
CloneGerritTriggerUsingPOSTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CloneGerritTriggerUsingPOSTInternalServerError struct {
}

// IsSuccess returns true when this clone gerrit trigger using p o s t internal server error response has a 2xx status code
func (o *CloneGerritTriggerUsingPOSTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clone gerrit trigger using p o s t internal server error response has a 3xx status code
func (o *CloneGerritTriggerUsingPOSTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clone gerrit trigger using p o s t internal server error response has a 4xx status code
func (o *CloneGerritTriggerUsingPOSTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this clone gerrit trigger using p o s t internal server error response has a 5xx status code
func (o *CloneGerritTriggerUsingPOSTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this clone gerrit trigger using p o s t internal server error response a status code equal to that given
func (o *CloneGerritTriggerUsingPOSTInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CloneGerritTriggerUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers/{id}][%d] cloneGerritTriggerUsingPOSTInternalServerError ", 500)
}

func (o *CloneGerritTriggerUsingPOSTInternalServerError) String() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-triggers/{id}][%d] cloneGerritTriggerUsingPOSTInternalServerError ", 500)
}

func (o *CloneGerritTriggerUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
