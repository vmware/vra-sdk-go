// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetGitWebhookByNameUsingGETReader is a Reader for the GetGitWebhookByNameUsingGET structure.
type GetGitWebhookByNameUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGitWebhookByNameUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGitWebhookByNameUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetGitWebhookByNameUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGitWebhookByNameUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGitWebhookByNameUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGitWebhookByNameUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGitWebhookByNameUsingGETOK creates a GetGitWebhookByNameUsingGETOK with default headers values
func NewGetGitWebhookByNameUsingGETOK() *GetGitWebhookByNameUsingGETOK {
	return &GetGitWebhookByNameUsingGETOK{}
}

/*
GetGitWebhookByNameUsingGETOK describes a response with status code 200, with default header values.

'Success' with Git Webhook
*/
type GetGitWebhookByNameUsingGETOK struct {
	Payload models.GitWebhook
}

// IsSuccess returns true when this get git webhook by name using g e t o k response has a 2xx status code
func (o *GetGitWebhookByNameUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get git webhook by name using g e t o k response has a 3xx status code
func (o *GetGitWebhookByNameUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git webhook by name using g e t o k response has a 4xx status code
func (o *GetGitWebhookByNameUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get git webhook by name using g e t o k response has a 5xx status code
func (o *GetGitWebhookByNameUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get git webhook by name using g e t o k response a status code equal to that given
func (o *GetGitWebhookByNameUsingGETOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetGitWebhookByNameUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{project}/{name}][%d] getGitWebhookByNameUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetGitWebhookByNameUsingGETOK) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{project}/{name}][%d] getGitWebhookByNameUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetGitWebhookByNameUsingGETOK) GetPayload() models.GitWebhook {
	return o.Payload
}

func (o *GetGitWebhookByNameUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGitWebhook(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewGetGitWebhookByNameUsingGETUnauthorized creates a GetGitWebhookByNameUsingGETUnauthorized with default headers values
func NewGetGitWebhookByNameUsingGETUnauthorized() *GetGitWebhookByNameUsingGETUnauthorized {
	return &GetGitWebhookByNameUsingGETUnauthorized{}
}

/*
GetGitWebhookByNameUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type GetGitWebhookByNameUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get git webhook by name using g e t unauthorized response has a 2xx status code
func (o *GetGitWebhookByNameUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git webhook by name using g e t unauthorized response has a 3xx status code
func (o *GetGitWebhookByNameUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git webhook by name using g e t unauthorized response has a 4xx status code
func (o *GetGitWebhookByNameUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get git webhook by name using g e t unauthorized response has a 5xx status code
func (o *GetGitWebhookByNameUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get git webhook by name using g e t unauthorized response a status code equal to that given
func (o *GetGitWebhookByNameUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetGitWebhookByNameUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{project}/{name}][%d] getGitWebhookByNameUsingGETUnauthorized ", 401)
}

func (o *GetGitWebhookByNameUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{project}/{name}][%d] getGitWebhookByNameUsingGETUnauthorized ", 401)
}

func (o *GetGitWebhookByNameUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGitWebhookByNameUsingGETForbidden creates a GetGitWebhookByNameUsingGETForbidden with default headers values
func NewGetGitWebhookByNameUsingGETForbidden() *GetGitWebhookByNameUsingGETForbidden {
	return &GetGitWebhookByNameUsingGETForbidden{}
}

/*
GetGitWebhookByNameUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetGitWebhookByNameUsingGETForbidden struct {
}

// IsSuccess returns true when this get git webhook by name using g e t forbidden response has a 2xx status code
func (o *GetGitWebhookByNameUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git webhook by name using g e t forbidden response has a 3xx status code
func (o *GetGitWebhookByNameUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git webhook by name using g e t forbidden response has a 4xx status code
func (o *GetGitWebhookByNameUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get git webhook by name using g e t forbidden response has a 5xx status code
func (o *GetGitWebhookByNameUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get git webhook by name using g e t forbidden response a status code equal to that given
func (o *GetGitWebhookByNameUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetGitWebhookByNameUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{project}/{name}][%d] getGitWebhookByNameUsingGETForbidden ", 403)
}

func (o *GetGitWebhookByNameUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{project}/{name}][%d] getGitWebhookByNameUsingGETForbidden ", 403)
}

func (o *GetGitWebhookByNameUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGitWebhookByNameUsingGETNotFound creates a GetGitWebhookByNameUsingGETNotFound with default headers values
func NewGetGitWebhookByNameUsingGETNotFound() *GetGitWebhookByNameUsingGETNotFound {
	return &GetGitWebhookByNameUsingGETNotFound{}
}

/*
GetGitWebhookByNameUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetGitWebhookByNameUsingGETNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get git webhook by name using g e t not found response has a 2xx status code
func (o *GetGitWebhookByNameUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git webhook by name using g e t not found response has a 3xx status code
func (o *GetGitWebhookByNameUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git webhook by name using g e t not found response has a 4xx status code
func (o *GetGitWebhookByNameUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get git webhook by name using g e t not found response has a 5xx status code
func (o *GetGitWebhookByNameUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get git webhook by name using g e t not found response a status code equal to that given
func (o *GetGitWebhookByNameUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetGitWebhookByNameUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{project}/{name}][%d] getGitWebhookByNameUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetGitWebhookByNameUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{project}/{name}][%d] getGitWebhookByNameUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetGitWebhookByNameUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGitWebhookByNameUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGitWebhookByNameUsingGETInternalServerError creates a GetGitWebhookByNameUsingGETInternalServerError with default headers values
func NewGetGitWebhookByNameUsingGETInternalServerError() *GetGitWebhookByNameUsingGETInternalServerError {
	return &GetGitWebhookByNameUsingGETInternalServerError{}
}

/*
GetGitWebhookByNameUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetGitWebhookByNameUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get git webhook by name using g e t internal server error response has a 2xx status code
func (o *GetGitWebhookByNameUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get git webhook by name using g e t internal server error response has a 3xx status code
func (o *GetGitWebhookByNameUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get git webhook by name using g e t internal server error response has a 4xx status code
func (o *GetGitWebhookByNameUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get git webhook by name using g e t internal server error response has a 5xx status code
func (o *GetGitWebhookByNameUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get git webhook by name using g e t internal server error response a status code equal to that given
func (o *GetGitWebhookByNameUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetGitWebhookByNameUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{project}/{name}][%d] getGitWebhookByNameUsingGETInternalServerError ", 500)
}

func (o *GetGitWebhookByNameUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{project}/{name}][%d] getGitWebhookByNameUsingGETInternalServerError ", 500)
}

func (o *GetGitWebhookByNameUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
