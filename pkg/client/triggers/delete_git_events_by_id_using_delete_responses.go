// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// DeleteGitEventsByIDUsingDELETEReader is a Reader for the DeleteGitEventsByIDUsingDELETE structure.
type DeleteGitEventsByIDUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteGitEventsByIDUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteGitEventsByIDUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteGitEventsByIDUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteGitEventsByIDUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteGitEventsByIDUsingDELETENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteGitEventsByIDUsingDELETEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteGitEventsByIDUsingDELETEOK creates a DeleteGitEventsByIDUsingDELETEOK with default headers values
func NewDeleteGitEventsByIDUsingDELETEOK() *DeleteGitEventsByIDUsingDELETEOK {
	return &DeleteGitEventsByIDUsingDELETEOK{}
}

/* DeleteGitEventsByIDUsingDELETEOK describes a response with status code 200, with default header values.

'Success' with Delete a Git Event
*/
type DeleteGitEventsByIDUsingDELETEOK struct {
	Payload models.GitEvent
}

func (o *DeleteGitEventsByIDUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-events/{id}][%d] deleteGitEventsByIdUsingDELETEOK  %+v", 200, o.Payload)
}
func (o *DeleteGitEventsByIDUsingDELETEOK) GetPayload() models.GitEvent {
	return o.Payload
}

func (o *DeleteGitEventsByIDUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGitEvent(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewDeleteGitEventsByIDUsingDELETEUnauthorized creates a DeleteGitEventsByIDUsingDELETEUnauthorized with default headers values
func NewDeleteGitEventsByIDUsingDELETEUnauthorized() *DeleteGitEventsByIDUsingDELETEUnauthorized {
	return &DeleteGitEventsByIDUsingDELETEUnauthorized{}
}

/* DeleteGitEventsByIDUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type DeleteGitEventsByIDUsingDELETEUnauthorized struct {
}

func (o *DeleteGitEventsByIDUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-events/{id}][%d] deleteGitEventsByIdUsingDELETEUnauthorized ", 401)
}

func (o *DeleteGitEventsByIDUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteGitEventsByIDUsingDELETEForbidden creates a DeleteGitEventsByIDUsingDELETEForbidden with default headers values
func NewDeleteGitEventsByIDUsingDELETEForbidden() *DeleteGitEventsByIDUsingDELETEForbidden {
	return &DeleteGitEventsByIDUsingDELETEForbidden{}
}

/* DeleteGitEventsByIDUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteGitEventsByIDUsingDELETEForbidden struct {
}

func (o *DeleteGitEventsByIDUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-events/{id}][%d] deleteGitEventsByIdUsingDELETEForbidden ", 403)
}

func (o *DeleteGitEventsByIDUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteGitEventsByIDUsingDELETENotFound creates a DeleteGitEventsByIDUsingDELETENotFound with default headers values
func NewDeleteGitEventsByIDUsingDELETENotFound() *DeleteGitEventsByIDUsingDELETENotFound {
	return &DeleteGitEventsByIDUsingDELETENotFound{}
}

/* DeleteGitEventsByIDUsingDELETENotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteGitEventsByIDUsingDELETENotFound struct {
	Payload *models.Error
}

func (o *DeleteGitEventsByIDUsingDELETENotFound) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-events/{id}][%d] deleteGitEventsByIdUsingDELETENotFound  %+v", 404, o.Payload)
}
func (o *DeleteGitEventsByIDUsingDELETENotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteGitEventsByIDUsingDELETENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGitEventsByIDUsingDELETEInternalServerError creates a DeleteGitEventsByIDUsingDELETEInternalServerError with default headers values
func NewDeleteGitEventsByIDUsingDELETEInternalServerError() *DeleteGitEventsByIDUsingDELETEInternalServerError {
	return &DeleteGitEventsByIDUsingDELETEInternalServerError{}
}

/* DeleteGitEventsByIDUsingDELETEInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type DeleteGitEventsByIDUsingDELETEInternalServerError struct {
}

func (o *DeleteGitEventsByIDUsingDELETEInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/git-events/{id}][%d] deleteGitEventsByIdUsingDELETEInternalServerError ", 500)
}

func (o *DeleteGitEventsByIDUsingDELETEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
