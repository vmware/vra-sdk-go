// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// CreateGerritListenerUsingPOSTReader is a Reader for the CreateGerritListenerUsingPOST structure.
type CreateGerritListenerUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateGerritListenerUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateGerritListenerUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateGerritListenerUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateGerritListenerUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateGerritListenerUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateGerritListenerUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateGerritListenerUsingPOSTOK creates a CreateGerritListenerUsingPOSTOK with default headers values
func NewCreateGerritListenerUsingPOSTOK() *CreateGerritListenerUsingPOSTOK {
	return &CreateGerritListenerUsingPOSTOK{}
}

/* CreateGerritListenerUsingPOSTOK describes a response with status code 200, with default header values.

'Success' with Gerrit Listener Creation
*/
type CreateGerritListenerUsingPOSTOK struct {
	Payload models.GerritListener
}

func (o *CreateGerritListenerUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-listeners][%d] createGerritListenerUsingPOSTOK  %+v", 200, o.Payload)
}
func (o *CreateGerritListenerUsingPOSTOK) GetPayload() models.GerritListener {
	return o.Payload
}

func (o *CreateGerritListenerUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritListener(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewCreateGerritListenerUsingPOSTUnauthorized creates a CreateGerritListenerUsingPOSTUnauthorized with default headers values
func NewCreateGerritListenerUsingPOSTUnauthorized() *CreateGerritListenerUsingPOSTUnauthorized {
	return &CreateGerritListenerUsingPOSTUnauthorized{}
}

/* CreateGerritListenerUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type CreateGerritListenerUsingPOSTUnauthorized struct {
}

func (o *CreateGerritListenerUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-listeners][%d] createGerritListenerUsingPOSTUnauthorized ", 401)
}

func (o *CreateGerritListenerUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateGerritListenerUsingPOSTForbidden creates a CreateGerritListenerUsingPOSTForbidden with default headers values
func NewCreateGerritListenerUsingPOSTForbidden() *CreateGerritListenerUsingPOSTForbidden {
	return &CreateGerritListenerUsingPOSTForbidden{}
}

/* CreateGerritListenerUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateGerritListenerUsingPOSTForbidden struct {
}

func (o *CreateGerritListenerUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-listeners][%d] createGerritListenerUsingPOSTForbidden ", 403)
}

func (o *CreateGerritListenerUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateGerritListenerUsingPOSTNotFound creates a CreateGerritListenerUsingPOSTNotFound with default headers values
func NewCreateGerritListenerUsingPOSTNotFound() *CreateGerritListenerUsingPOSTNotFound {
	return &CreateGerritListenerUsingPOSTNotFound{}
}

/* CreateGerritListenerUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateGerritListenerUsingPOSTNotFound struct {
	Payload *models.Error
}

func (o *CreateGerritListenerUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-listeners][%d] createGerritListenerUsingPOSTNotFound  %+v", 404, o.Payload)
}
func (o *CreateGerritListenerUsingPOSTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGerritListenerUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGerritListenerUsingPOSTInternalServerError creates a CreateGerritListenerUsingPOSTInternalServerError with default headers values
func NewCreateGerritListenerUsingPOSTInternalServerError() *CreateGerritListenerUsingPOSTInternalServerError {
	return &CreateGerritListenerUsingPOSTInternalServerError{}
}

/* CreateGerritListenerUsingPOSTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CreateGerritListenerUsingPOSTInternalServerError struct {
}

func (o *CreateGerritListenerUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-listeners][%d] createGerritListenerUsingPOSTInternalServerError ", 500)
}

func (o *CreateGerritListenerUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
