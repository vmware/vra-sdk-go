// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateGerritTriggerByNameUsingPUTReader is a Reader for the UpdateGerritTriggerByNameUsingPUT structure.
type UpdateGerritTriggerByNameUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGerritTriggerByNameUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGerritTriggerByNameUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateGerritTriggerByNameUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGerritTriggerByNameUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGerritTriggerByNameUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateGerritTriggerByNameUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateGerritTriggerByNameUsingPUTOK creates a UpdateGerritTriggerByNameUsingPUTOK with default headers values
func NewUpdateGerritTriggerByNameUsingPUTOK() *UpdateGerritTriggerByNameUsingPUTOK {
	return &UpdateGerritTriggerByNameUsingPUTOK{}
}

/*
UpdateGerritTriggerByNameUsingPUTOK describes a response with status code 200, with default header values.

'Success' with Gerrit Trigger Update
*/
type UpdateGerritTriggerByNameUsingPUTOK struct {
	Payload models.GerritTrigger
}

// IsSuccess returns true when this update gerrit trigger by name using p u t o k response has a 2xx status code
func (o *UpdateGerritTriggerByNameUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update gerrit trigger by name using p u t o k response has a 3xx status code
func (o *UpdateGerritTriggerByNameUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gerrit trigger by name using p u t o k response has a 4xx status code
func (o *UpdateGerritTriggerByNameUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update gerrit trigger by name using p u t o k response has a 5xx status code
func (o *UpdateGerritTriggerByNameUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update gerrit trigger by name using p u t o k response a status code equal to that given
func (o *UpdateGerritTriggerByNameUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateGerritTriggerByNameUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateGerritTriggerByNameUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateGerritTriggerByNameUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateGerritTriggerByNameUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateGerritTriggerByNameUsingPUTOK) GetPayload() models.GerritTrigger {
	return o.Payload
}

func (o *UpdateGerritTriggerByNameUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritTrigger(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewUpdateGerritTriggerByNameUsingPUTUnauthorized creates a UpdateGerritTriggerByNameUsingPUTUnauthorized with default headers values
func NewUpdateGerritTriggerByNameUsingPUTUnauthorized() *UpdateGerritTriggerByNameUsingPUTUnauthorized {
	return &UpdateGerritTriggerByNameUsingPUTUnauthorized{}
}

/*
UpdateGerritTriggerByNameUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type UpdateGerritTriggerByNameUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update gerrit trigger by name using p u t unauthorized response has a 2xx status code
func (o *UpdateGerritTriggerByNameUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gerrit trigger by name using p u t unauthorized response has a 3xx status code
func (o *UpdateGerritTriggerByNameUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gerrit trigger by name using p u t unauthorized response has a 4xx status code
func (o *UpdateGerritTriggerByNameUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gerrit trigger by name using p u t unauthorized response has a 5xx status code
func (o *UpdateGerritTriggerByNameUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update gerrit trigger by name using p u t unauthorized response a status code equal to that given
func (o *UpdateGerritTriggerByNameUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateGerritTriggerByNameUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateGerritTriggerByNameUsingPUTUnauthorized ", 401)
}

func (o *UpdateGerritTriggerByNameUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateGerritTriggerByNameUsingPUTUnauthorized ", 401)
}

func (o *UpdateGerritTriggerByNameUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGerritTriggerByNameUsingPUTForbidden creates a UpdateGerritTriggerByNameUsingPUTForbidden with default headers values
func NewUpdateGerritTriggerByNameUsingPUTForbidden() *UpdateGerritTriggerByNameUsingPUTForbidden {
	return &UpdateGerritTriggerByNameUsingPUTForbidden{}
}

/*
UpdateGerritTriggerByNameUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateGerritTriggerByNameUsingPUTForbidden struct {
}

// IsSuccess returns true when this update gerrit trigger by name using p u t forbidden response has a 2xx status code
func (o *UpdateGerritTriggerByNameUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gerrit trigger by name using p u t forbidden response has a 3xx status code
func (o *UpdateGerritTriggerByNameUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gerrit trigger by name using p u t forbidden response has a 4xx status code
func (o *UpdateGerritTriggerByNameUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gerrit trigger by name using p u t forbidden response has a 5xx status code
func (o *UpdateGerritTriggerByNameUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update gerrit trigger by name using p u t forbidden response a status code equal to that given
func (o *UpdateGerritTriggerByNameUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateGerritTriggerByNameUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateGerritTriggerByNameUsingPUTForbidden ", 403)
}

func (o *UpdateGerritTriggerByNameUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateGerritTriggerByNameUsingPUTForbidden ", 403)
}

func (o *UpdateGerritTriggerByNameUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGerritTriggerByNameUsingPUTNotFound creates a UpdateGerritTriggerByNameUsingPUTNotFound with default headers values
func NewUpdateGerritTriggerByNameUsingPUTNotFound() *UpdateGerritTriggerByNameUsingPUTNotFound {
	return &UpdateGerritTriggerByNameUsingPUTNotFound{}
}

/*
UpdateGerritTriggerByNameUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateGerritTriggerByNameUsingPUTNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update gerrit trigger by name using p u t not found response has a 2xx status code
func (o *UpdateGerritTriggerByNameUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gerrit trigger by name using p u t not found response has a 3xx status code
func (o *UpdateGerritTriggerByNameUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gerrit trigger by name using p u t not found response has a 4xx status code
func (o *UpdateGerritTriggerByNameUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gerrit trigger by name using p u t not found response has a 5xx status code
func (o *UpdateGerritTriggerByNameUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update gerrit trigger by name using p u t not found response a status code equal to that given
func (o *UpdateGerritTriggerByNameUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateGerritTriggerByNameUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateGerritTriggerByNameUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateGerritTriggerByNameUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateGerritTriggerByNameUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateGerritTriggerByNameUsingPUTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGerritTriggerByNameUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGerritTriggerByNameUsingPUTInternalServerError creates a UpdateGerritTriggerByNameUsingPUTInternalServerError with default headers values
func NewUpdateGerritTriggerByNameUsingPUTInternalServerError() *UpdateGerritTriggerByNameUsingPUTInternalServerError {
	return &UpdateGerritTriggerByNameUsingPUTInternalServerError{}
}

/*
UpdateGerritTriggerByNameUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateGerritTriggerByNameUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update gerrit trigger by name using p u t internal server error response has a 2xx status code
func (o *UpdateGerritTriggerByNameUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gerrit trigger by name using p u t internal server error response has a 3xx status code
func (o *UpdateGerritTriggerByNameUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gerrit trigger by name using p u t internal server error response has a 4xx status code
func (o *UpdateGerritTriggerByNameUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update gerrit trigger by name using p u t internal server error response has a 5xx status code
func (o *UpdateGerritTriggerByNameUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update gerrit trigger by name using p u t internal server error response a status code equal to that given
func (o *UpdateGerritTriggerByNameUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateGerritTriggerByNameUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateGerritTriggerByNameUsingPUTInternalServerError ", 500)
}

func (o *UpdateGerritTriggerByNameUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateGerritTriggerByNameUsingPUTInternalServerError ", 500)
}

func (o *UpdateGerritTriggerByNameUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
