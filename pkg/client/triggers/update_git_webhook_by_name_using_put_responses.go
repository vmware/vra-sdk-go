// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateGitWebhookByNameUsingPUTReader is a Reader for the UpdateGitWebhookByNameUsingPUT structure.
type UpdateGitWebhookByNameUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGitWebhookByNameUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGitWebhookByNameUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateGitWebhookByNameUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGitWebhookByNameUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGitWebhookByNameUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateGitWebhookByNameUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateGitWebhookByNameUsingPUTOK creates a UpdateGitWebhookByNameUsingPUTOK with default headers values
func NewUpdateGitWebhookByNameUsingPUTOK() *UpdateGitWebhookByNameUsingPUTOK {
	return &UpdateGitWebhookByNameUsingPUTOK{}
}

/*
UpdateGitWebhookByNameUsingPUTOK describes a response with status code 200, with default header values.

'Success' with Git Webhook Update
*/
type UpdateGitWebhookByNameUsingPUTOK struct {
	Payload models.GitWebhook
}

// IsSuccess returns true when this update git webhook by name using p u t o k response has a 2xx status code
func (o *UpdateGitWebhookByNameUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update git webhook by name using p u t o k response has a 3xx status code
func (o *UpdateGitWebhookByNameUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git webhook by name using p u t o k response has a 4xx status code
func (o *UpdateGitWebhookByNameUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update git webhook by name using p u t o k response has a 5xx status code
func (o *UpdateGitWebhookByNameUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update git webhook by name using p u t o k response a status code equal to that given
func (o *UpdateGitWebhookByNameUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateGitWebhookByNameUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{project}/{name}][%d] updateGitWebhookByNameUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateGitWebhookByNameUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{project}/{name}][%d] updateGitWebhookByNameUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateGitWebhookByNameUsingPUTOK) GetPayload() models.GitWebhook {
	return o.Payload
}

func (o *UpdateGitWebhookByNameUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGitWebhook(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewUpdateGitWebhookByNameUsingPUTUnauthorized creates a UpdateGitWebhookByNameUsingPUTUnauthorized with default headers values
func NewUpdateGitWebhookByNameUsingPUTUnauthorized() *UpdateGitWebhookByNameUsingPUTUnauthorized {
	return &UpdateGitWebhookByNameUsingPUTUnauthorized{}
}

/*
UpdateGitWebhookByNameUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type UpdateGitWebhookByNameUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update git webhook by name using p u t unauthorized response has a 2xx status code
func (o *UpdateGitWebhookByNameUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git webhook by name using p u t unauthorized response has a 3xx status code
func (o *UpdateGitWebhookByNameUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git webhook by name using p u t unauthorized response has a 4xx status code
func (o *UpdateGitWebhookByNameUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git webhook by name using p u t unauthorized response has a 5xx status code
func (o *UpdateGitWebhookByNameUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update git webhook by name using p u t unauthorized response a status code equal to that given
func (o *UpdateGitWebhookByNameUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateGitWebhookByNameUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{project}/{name}][%d] updateGitWebhookByNameUsingPUTUnauthorized ", 401)
}

func (o *UpdateGitWebhookByNameUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{project}/{name}][%d] updateGitWebhookByNameUsingPUTUnauthorized ", 401)
}

func (o *UpdateGitWebhookByNameUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGitWebhookByNameUsingPUTForbidden creates a UpdateGitWebhookByNameUsingPUTForbidden with default headers values
func NewUpdateGitWebhookByNameUsingPUTForbidden() *UpdateGitWebhookByNameUsingPUTForbidden {
	return &UpdateGitWebhookByNameUsingPUTForbidden{}
}

/*
UpdateGitWebhookByNameUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateGitWebhookByNameUsingPUTForbidden struct {
}

// IsSuccess returns true when this update git webhook by name using p u t forbidden response has a 2xx status code
func (o *UpdateGitWebhookByNameUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git webhook by name using p u t forbidden response has a 3xx status code
func (o *UpdateGitWebhookByNameUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git webhook by name using p u t forbidden response has a 4xx status code
func (o *UpdateGitWebhookByNameUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git webhook by name using p u t forbidden response has a 5xx status code
func (o *UpdateGitWebhookByNameUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update git webhook by name using p u t forbidden response a status code equal to that given
func (o *UpdateGitWebhookByNameUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateGitWebhookByNameUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{project}/{name}][%d] updateGitWebhookByNameUsingPUTForbidden ", 403)
}

func (o *UpdateGitWebhookByNameUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{project}/{name}][%d] updateGitWebhookByNameUsingPUTForbidden ", 403)
}

func (o *UpdateGitWebhookByNameUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGitWebhookByNameUsingPUTNotFound creates a UpdateGitWebhookByNameUsingPUTNotFound with default headers values
func NewUpdateGitWebhookByNameUsingPUTNotFound() *UpdateGitWebhookByNameUsingPUTNotFound {
	return &UpdateGitWebhookByNameUsingPUTNotFound{}
}

/*
UpdateGitWebhookByNameUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateGitWebhookByNameUsingPUTNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update git webhook by name using p u t not found response has a 2xx status code
func (o *UpdateGitWebhookByNameUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git webhook by name using p u t not found response has a 3xx status code
func (o *UpdateGitWebhookByNameUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git webhook by name using p u t not found response has a 4xx status code
func (o *UpdateGitWebhookByNameUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update git webhook by name using p u t not found response has a 5xx status code
func (o *UpdateGitWebhookByNameUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update git webhook by name using p u t not found response a status code equal to that given
func (o *UpdateGitWebhookByNameUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateGitWebhookByNameUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{project}/{name}][%d] updateGitWebhookByNameUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateGitWebhookByNameUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{project}/{name}][%d] updateGitWebhookByNameUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateGitWebhookByNameUsingPUTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGitWebhookByNameUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGitWebhookByNameUsingPUTInternalServerError creates a UpdateGitWebhookByNameUsingPUTInternalServerError with default headers values
func NewUpdateGitWebhookByNameUsingPUTInternalServerError() *UpdateGitWebhookByNameUsingPUTInternalServerError {
	return &UpdateGitWebhookByNameUsingPUTInternalServerError{}
}

/*
UpdateGitWebhookByNameUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateGitWebhookByNameUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update git webhook by name using p u t internal server error response has a 2xx status code
func (o *UpdateGitWebhookByNameUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update git webhook by name using p u t internal server error response has a 3xx status code
func (o *UpdateGitWebhookByNameUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update git webhook by name using p u t internal server error response has a 4xx status code
func (o *UpdateGitWebhookByNameUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update git webhook by name using p u t internal server error response has a 5xx status code
func (o *UpdateGitWebhookByNameUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update git webhook by name using p u t internal server error response a status code equal to that given
func (o *UpdateGitWebhookByNameUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateGitWebhookByNameUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{project}/{name}][%d] updateGitWebhookByNameUsingPUTInternalServerError ", 500)
}

func (o *UpdateGitWebhookByNameUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /codestream/api/git-webhooks/{project}/{name}][%d] updateGitWebhookByNameUsingPUTInternalServerError ", 500)
}

func (o *UpdateGitWebhookByNameUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
