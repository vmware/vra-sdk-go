// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new triggers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for triggers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CloneByNameUsingPOST(params *CloneByNameUsingPOSTParams, opts ...ClientOption) (*CloneByNameUsingPOSTOK, error)

	CloneByNameUsingPOST1(params *CloneByNameUsingPOST1Params, opts ...ClientOption) (*CloneByNameUsingPOST1OK, error)

	CloneListenerUsingPOST(params *CloneListenerUsingPOSTParams, opts ...ClientOption) (*CloneListenerUsingPOSTOK, error)

	CloneTriggerUsingPOST(params *CloneTriggerUsingPOSTParams, opts ...ClientOption) (*CloneTriggerUsingPOSTOK, error)

	CreateUsingPOST1(params *CreateUsingPOST1Params, opts ...ClientOption) (*CreateUsingPOST1OK, error)

	CreateUsingPOST3(params *CreateUsingPOST3Params, opts ...ClientOption) (*CreateUsingPOST3OK, error)

	CreateUsingPOST4(params *CreateUsingPOST4Params, opts ...ClientOption) (*CreateUsingPOST4OK, error)

	CreateUsingPOST5(params *CreateUsingPOST5Params, opts ...ClientOption) (*CreateUsingPOST5OK, error)

	DeleteByIDUsingDELETE(params *DeleteByIDUsingDELETEParams, opts ...ClientOption) (*DeleteByIDUsingDELETEOK, error)

	DeleteByIDUsingDELETE1(params *DeleteByIDUsingDELETE1Params, opts ...ClientOption) (*DeleteByIDUsingDELETE1OK, error)

	DeleteByNameUsingDELETE(params *DeleteByNameUsingDELETEParams, opts ...ClientOption) (*DeleteByNameUsingDELETEOK, error)

	DeleteByNameUsingDELETE1(params *DeleteByNameUsingDELETE1Params, opts ...ClientOption) (*DeleteByNameUsingDELETE1OK, error)

	DeleteByNameUsingDELETE2(params *DeleteByNameUsingDELETE2Params, opts ...ClientOption) (*DeleteByNameUsingDELETE2OK, error)

	DeleteByNameUsingDELETE3(params *DeleteByNameUsingDELETE3Params, opts ...ClientOption) (*DeleteByNameUsingDELETE3OK, error)

	DeleteUsingDELETEMixin3(params *DeleteUsingDELETEMixin3Params, opts ...ClientOption) (*DeleteUsingDELETEMixin3OK, error)

	DeleteUsingDELETE4(params *DeleteUsingDELETE4Params, opts ...ClientOption) (*DeleteUsingDELETE4OK, error)

	DeleteUsingDELETE5(params *DeleteUsingDELETE5Params, opts ...ClientOption) (*DeleteUsingDELETE5OK, error)

	DeleteUsingDELETE6(params *DeleteUsingDELETE6Params, opts ...ClientOption) (*DeleteUsingDELETE6OK, error)

	DeleteUsingDELETE7(params *DeleteUsingDELETE7Params, opts ...ClientOption) (*DeleteUsingDELETE7OK, error)

	GetAllUsingGET(params *GetAllUsingGETParams, opts ...ClientOption) (*GetAllUsingGETOK, error)

	GetAllUsingGET1(params *GetAllUsingGET1Params, opts ...ClientOption) (*GetAllUsingGET1OK, error)

	GetAllUsingGET4(params *GetAllUsingGET4Params, opts ...ClientOption) (*GetAllUsingGET4OK, error)

	GetAllUsingGET5(params *GetAllUsingGET5Params, opts ...ClientOption) (*GetAllUsingGET5OK, error)

	GetAllUsingGET6(params *GetAllUsingGET6Params, opts ...ClientOption) (*GetAllUsingGET6OK, error)

	GetAllUsingGET7(params *GetAllUsingGET7Params, opts ...ClientOption) (*GetAllUsingGET7OK, error)

	GetAllUsingGET8(params *GetAllUsingGET8Params, opts ...ClientOption) (*GetAllUsingGET8OK, error)

	GetByIDUsingGET2(params *GetByIDUsingGET2Params, opts ...ClientOption) (*GetByIDUsingGET2OK, error)

	GetByIDUsingGET3(params *GetByIDUsingGET3Params, opts ...ClientOption) (*GetByIDUsingGET3OK, error)

	GetByIDUsingGET4(params *GetByIDUsingGET4Params, opts ...ClientOption) (*GetByIDUsingGET4OK, error)

	GetByIDUsingGET5(params *GetByIDUsingGET5Params, opts ...ClientOption) (*GetByIDUsingGET5OK, error)

	GetByIDUsingGET1(params *GetByIDUsingGET1Params, opts ...ClientOption) (*GetByIDUsingGET1OK, error)

	GetByNameUsingGET1(params *GetByNameUsingGET1Params, opts ...ClientOption) (*GetByNameUsingGET1OK, error)

	GetByNameUsingGET2(params *GetByNameUsingGET2Params, opts ...ClientOption) (*GetByNameUsingGET2OK, error)

	GetByNameUsingGET3(params *GetByNameUsingGET3Params, opts ...ClientOption) (*GetByNameUsingGET3OK, error)

	GetGerritProjectsUsingGET(params *GetGerritProjectsUsingGETParams, opts ...ClientOption) (*GetGerritProjectsUsingGETOK, error)

	GetGerritProjectsUsingGET1(params *GetGerritProjectsUsingGET1Params, opts ...ClientOption) (*GetGerritProjectsUsingGET1OK, error)

	GetNameUsingGET(params *GetNameUsingGETParams, opts ...ClientOption) (*GetNameUsingGETOK, error)

	GetRegistryEventByID(params *GetRegistryEventByIDParams, opts ...ClientOption) (*GetRegistryEventByIDOK, error)

	GetRegistryWebhookByID(params *GetRegistryWebhookByIDParams, opts ...ClientOption) (*GetRegistryWebhookByIDOK, error)

	ManualTriggerUsingPOST(params *ManualTriggerUsingPOSTParams, opts ...ClientOption) (*ManualTriggerUsingPOSTOK, error)

	PatchByIDUsingPATCH(params *PatchByIDUsingPATCHParams, opts ...ClientOption) (*PatchByIDUsingPATCHOK, error)

	PatchByIDUsingPATCH1(params *PatchByIDUsingPATCH1Params, opts ...ClientOption) (*PatchByIDUsingPATCH1OK, error)

	PatchByIDUsingPATCH2(params *PatchByIDUsingPATCH2Params, opts ...ClientOption) (*PatchByIDUsingPATCH2OK, error)

	PatchByNameUsingPATCH(params *PatchByNameUsingPATCHParams, opts ...ClientOption) (*PatchByNameUsingPATCHOK, error)

	PatchByNameUsingPATCH1(params *PatchByNameUsingPATCH1Params, opts ...ClientOption) (*PatchByNameUsingPATCH1OK, error)

	PatchByNameUsingPATCH2(params *PatchByNameUsingPATCH2Params, opts ...ClientOption) (*PatchByNameUsingPATCH2OK, error)

	ResumeOrRerunEventUsingPOST(params *ResumeOrRerunEventUsingPOSTParams, opts ...ClientOption) (*ResumeOrRerunEventUsingPOSTOK, error)

	ResumeOrRerunEventUsingPOST1(params *ResumeOrRerunEventUsingPOST1Params, opts ...ClientOption) (*ResumeOrRerunEventUsingPOST1OK, error)

	ResumeOrRerunEventUsingPOST2(params *ResumeOrRerunEventUsingPOST2Params, opts ...ClientOption) (*ResumeOrRerunEventUsingPOST2OK, error)

	UpdateByIDUsingPUT2(params *UpdateByIDUsingPUT2Params, opts ...ClientOption) (*UpdateByIDUsingPUT2OK, error)

	UpdateByIDUsingPUT3(params *UpdateByIDUsingPUT3Params, opts ...ClientOption) (*UpdateByIDUsingPUT3OK, error)

	UpdateByNameUsingPUT(params *UpdateByNameUsingPUTParams, opts ...ClientOption) (*UpdateByNameUsingPUTOK, error)

	UpdateByNameUsingPUT2(params *UpdateByNameUsingPUT2Params, opts ...ClientOption) (*UpdateByNameUsingPUT2OK, error)

	UpdateByNameUsingPUT3(params *UpdateByNameUsingPUT3Params, opts ...ClientOption) (*UpdateByNameUsingPUT3OK, error)

	UpdateByNameUsingPUT4(params *UpdateByNameUsingPUT4Params, opts ...ClientOption) (*UpdateByNameUsingPUT4OK, error)

	UpdateUsingPUT(params *UpdateUsingPUTParams, opts ...ClientOption) (*UpdateUsingPUTOK, error)

	UpdateUsingPUT1(params *UpdateUsingPUT1Params, opts ...ClientOption) (*UpdateUsingPUT1OK, error)

	ValidateUsingPOST(params *ValidateUsingPOSTParams, opts ...ClientOption) (*ValidateUsingPOSTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CloneByNameUsingPOST clones a gerrit listener by project and name

  Clone a Gerrit Listener with the given project and name
*/
func (a *Client) CloneByNameUsingPOST(params *CloneByNameUsingPOSTParams, opts ...ClientOption) (*CloneByNameUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneByNameUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloneByNameUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-listeners/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloneByNameUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneByNameUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloneByNameUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CloneByNameUsingPOST1 clones a gerrit trigger by project and name

  Clone a Gerrit Trigger with the given project and name
*/
func (a *Client) CloneByNameUsingPOST1(params *CloneByNameUsingPOST1Params, opts ...ClientOption) (*CloneByNameUsingPOST1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneByNameUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloneByNameUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-triggers/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloneByNameUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneByNameUsingPOST1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloneByNameUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CloneListenerUsingPOST clones a gerrit listener

  Clone a Gerrit Listener
*/
func (a *Client) CloneListenerUsingPOST(params *CloneListenerUsingPOSTParams, opts ...ClientOption) (*CloneListenerUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneListenerUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloneListenerUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-listeners/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloneListenerUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneListenerUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloneListenerUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CloneTriggerUsingPOST clones a gerrit trigger

  Clone a Gerrit Trigger
*/
func (a *Client) CloneTriggerUsingPOST(params *CloneTriggerUsingPOSTParams, opts ...ClientOption) (*CloneTriggerUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneTriggerUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloneTriggerUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-triggers/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloneTriggerUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneTriggerUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloneTriggerUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUsingPOST1 creates a docker registry webhook

  Create a Docker Registry Webhook
*/
func (a *Client) CreateUsingPOST1(params *CreateUsingPOST1Params, opts ...ClientOption) (*CreateUsingPOST1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/codestream/api/registry-webhooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUsingPOST1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUsingPOST3 creates a gerrit listener

  Create a Gerrit Listener
*/
func (a *Client) CreateUsingPOST3(params *CreateUsingPOST3Params, opts ...ClientOption) (*CreateUsingPOST3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOST3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUsingPOST_3",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-listeners",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUsingPOST3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUsingPOST3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUsingPOST_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUsingPOST4 creates a gerrit trigger

  Create a Gerrit Trigger
*/
func (a *Client) CreateUsingPOST4(params *CreateUsingPOST4Params, opts ...ClientOption) (*CreateUsingPOST4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOST4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUsingPOST_4",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-triggers",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUsingPOST4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUsingPOST4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUsingPOST_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUsingPOST5 creates a git webhook

  Create a Git Webhook
*/
func (a *Client) CreateUsingPOST5(params *CreateUsingPOST5Params, opts ...ClientOption) (*CreateUsingPOST5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOST5Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUsingPOST_5",
		Method:             "POST",
		PathPattern:        "/codestream/api/git-webhooks",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUsingPOST5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUsingPOST5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUsingPOST_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteByIDUsingDELETE deletes a docker registry webhook

  Delete a Docker Registry Webhook
*/
func (a *Client) DeleteByIDUsingDELETE(params *DeleteByIDUsingDELETEParams, opts ...ClientOption) (*DeleteByIDUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByIDUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteByIdUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/registry-webhooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteByIDUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteByIDUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteByIdUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteByIDUsingDELETE1 deletes a gerrit listener with id

  Delete a Gerrit Listener with id
*/
func (a *Client) DeleteByIDUsingDELETE1(params *DeleteByIDUsingDELETE1Params, opts ...ClientOption) (*DeleteByIDUsingDELETE1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByIDUsingDELETE1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteByIdUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/gerrit-listeners/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteByIDUsingDELETE1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteByIDUsingDELETE1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteByIdUsingDELETE_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteByNameUsingDELETE deletes a docker registry webhook using name

  Delete a Docker Registry Webhook using name
*/
func (a *Client) DeleteByNameUsingDELETE(params *DeleteByNameUsingDELETEParams, opts ...ClientOption) (*DeleteByNameUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByNameUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteByNameUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/registry-webhooks/{project}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteByNameUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteByNameUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteByNameUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteByNameUsingDELETE1 deletes a gerrit listener with project and name

  Delete a Gerrit Listener with project and name
*/
func (a *Client) DeleteByNameUsingDELETE1(params *DeleteByNameUsingDELETE1Params, opts ...ClientOption) (*DeleteByNameUsingDELETE1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByNameUsingDELETE1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteByNameUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/gerrit-listeners/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteByNameUsingDELETE1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteByNameUsingDELETE1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteByNameUsingDELETE_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteByNameUsingDELETE2 deletes a gerrit trigger with project and name

  Delete a Gerrit Trigger with project and name
*/
func (a *Client) DeleteByNameUsingDELETE2(params *DeleteByNameUsingDELETE2Params, opts ...ClientOption) (*DeleteByNameUsingDELETE2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByNameUsingDELETE2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteByNameUsingDELETE_2",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/gerrit-triggers/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteByNameUsingDELETE2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteByNameUsingDELETE2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteByNameUsingDELETE_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteByNameUsingDELETE3 deletes a git webhook by name

  Delete a Git Webhook by name
*/
func (a *Client) DeleteByNameUsingDELETE3(params *DeleteByNameUsingDELETE3Params, opts ...ClientOption) (*DeleteByNameUsingDELETE3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByNameUsingDELETE3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteByNameUsingDELETE_3",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/git-webhooks/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteByNameUsingDELETE3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteByNameUsingDELETE3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteByNameUsingDELETE_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUsingDELETEMixin3 deletes a docker registry event

  Delete a Docker Registry Event
*/
func (a *Client) DeleteUsingDELETEMixin3(params *DeleteUsingDELETEMixin3Params, opts ...ClientOption) (*DeleteUsingDELETEMixin3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETEMixin3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUsingDELETEMixin3",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/registry-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsingDELETEMixin3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETEMixin3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETEMixin3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUsingDELETE4 deletes a gerrit event

  Delete a Gerrit Event
*/
func (a *Client) DeleteUsingDELETE4(params *DeleteUsingDELETE4Params, opts ...ClientOption) (*DeleteUsingDELETE4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_4",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/gerrit-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUsingDELETE5 deletes a gerrit trigger with id

  Delete a Gerrit Trigger with id
*/
func (a *Client) DeleteUsingDELETE5(params *DeleteUsingDELETE5Params, opts ...ClientOption) (*DeleteUsingDELETE5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE5Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_5",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/gerrit-triggers/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUsingDELETE6 deletes a git event

  Delete a Git Event
*/
func (a *Client) DeleteUsingDELETE6(params *DeleteUsingDELETE6Params, opts ...ClientOption) (*DeleteUsingDELETE6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE6Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_6",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/git-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE6Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUsingDELETE7 deletes a git webhook

  Delete a Git Webhook
*/
func (a *Client) DeleteUsingDELETE7(params *DeleteUsingDELETE7Params, opts ...ClientOption) (*DeleteUsingDELETE7OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE7Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_7",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/git-webhooks/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE7Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE7OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_7: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUsingGET gets all docker registry events

  Get all Docker Registry Events
*/
func (a *Client) GetAllUsingGET(params *GetAllUsingGETParams, opts ...ClientOption) (*GetAllUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/registry-events",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUsingGET1 gets all docker registry webhooks

  Get all Docker Registry Webhooks
*/
func (a *Client) GetAllUsingGET1(params *GetAllUsingGET1Params, opts ...ClientOption) (*GetAllUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsingGET_1",
		Method:             "GET",
		PathPattern:        "/codestream/api/registry-webhooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUsingGET4 gets all gerrit events

  Get all Gerrit Events
*/
func (a *Client) GetAllUsingGET4(params *GetAllUsingGET4Params, opts ...ClientOption) (*GetAllUsingGET4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsingGET_4",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-events",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllUsingGET4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUsingGET5 gets all gerrit listeners

  Get all gerrit listeners
*/
func (a *Client) GetAllUsingGET5(params *GetAllUsingGET5Params, opts ...ClientOption) (*GetAllUsingGET5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET5Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsingGET_5",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-listeners",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllUsingGET5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUsingGET6 gets all gerrit triggers

  Get all gerrit triggers
*/
func (a *Client) GetAllUsingGET6(params *GetAllUsingGET6Params, opts ...ClientOption) (*GetAllUsingGET6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET6Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsingGET_6",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-triggers",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllUsingGET6Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUsingGET7 gets all git events

  Get all Git Events
*/
func (a *Client) GetAllUsingGET7(params *GetAllUsingGET7Params, opts ...ClientOption) (*GetAllUsingGET7OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET7Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsingGET_7",
		Method:             "GET",
		PathPattern:        "/codestream/api/git-events",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllUsingGET7Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET7OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_7: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUsingGET8 gets all git webhooks

  Get all Git Webhooks
*/
func (a *Client) GetAllUsingGET8(params *GetAllUsingGET8Params, opts ...ClientOption) (*GetAllUsingGET8OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET8Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsingGET_8",
		Method:             "GET",
		PathPattern:        "/codestream/api/git-webhooks",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllUsingGET8Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET8OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_8: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetByIDUsingGET2 gets a gerrit event

  Get a gerrit Event based on id
*/
func (a *Client) GetByIDUsingGET2(params *GetByIDUsingGET2Params, opts ...ClientOption) (*GetByIDUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByIDUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getByIDUsingGET_2",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetByIDUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetByIDUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getByIDUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetByIDUsingGET3 gets a gerrit listener

  Get a gerrit listeners based on id
*/
func (a *Client) GetByIDUsingGET3(params *GetByIDUsingGET3Params, opts ...ClientOption) (*GetByIDUsingGET3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByIDUsingGET3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getByIDUsingGET_3",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-listeners/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetByIDUsingGET3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetByIDUsingGET3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getByIDUsingGET_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetByIDUsingGET4 gets a git event

  Get a Git Event based on id
*/
func (a *Client) GetByIDUsingGET4(params *GetByIDUsingGET4Params, opts ...ClientOption) (*GetByIDUsingGET4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByIDUsingGET4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getByIDUsingGET_4",
		Method:             "GET",
		PathPattern:        "/codestream/api/git-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetByIDUsingGET4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetByIDUsingGET4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getByIDUsingGET_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetByIDUsingGET5 gets a git webhook

  Get a Git Webhook based on id
*/
func (a *Client) GetByIDUsingGET5(params *GetByIDUsingGET5Params, opts ...ClientOption) (*GetByIDUsingGET5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByIDUsingGET5Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getByIDUsingGET_5",
		Method:             "GET",
		PathPattern:        "/codestream/api/git-webhooks/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetByIDUsingGET5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetByIDUsingGET5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getByIDUsingGET_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetByIDUsingGET1 gets a gerrit trigger

  Get a gerrit trigger based on id
*/
func (a *Client) GetByIDUsingGET1(params *GetByIDUsingGET1Params, opts ...ClientOption) (*GetByIDUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByIDUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getByIdUsingGET_1",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-triggers/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetByIDUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetByIDUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getByIdUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetByNameUsingGET1 gets a gerrit listener by project and name

  Get a gerrit listener based on project and name
*/
func (a *Client) GetByNameUsingGET1(params *GetByNameUsingGET1Params, opts ...ClientOption) (*GetByNameUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByNameUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getByNameUsingGET_1",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-listeners/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetByNameUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetByNameUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getByNameUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetByNameUsingGET2 gets a gerrit trigger by project and name

  Get a gerrit trigger based on project and name
*/
func (a *Client) GetByNameUsingGET2(params *GetByNameUsingGET2Params, opts ...ClientOption) (*GetByNameUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByNameUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getByNameUsingGET_2",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-triggers/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetByNameUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetByNameUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getByNameUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetByNameUsingGET3 gets a git webhook by name

  Get a Git Webhook by Name
*/
func (a *Client) GetByNameUsingGET3(params *GetByNameUsingGET3Params, opts ...ClientOption) (*GetByNameUsingGET3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByNameUsingGET3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getByNameUsingGET_3",
		Method:             "GET",
		PathPattern:        "/codestream/api/git-webhooks/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetByNameUsingGET3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetByNameUsingGET3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getByNameUsingGET_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGerritProjectsUsingGET gets gerrit projects from the gerrit listener using id

  Get Gerrit Projects from the Gerrit Listener using id
*/
func (a *Client) GetGerritProjectsUsingGET(params *GetGerritProjectsUsingGETParams, opts ...ClientOption) (*GetGerritProjectsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGerritProjectsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGerritProjectsUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-listeners/{id}/projects",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGerritProjectsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGerritProjectsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGerritProjectsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGerritProjectsUsingGET1 gets gerrit projects from the gerrit listener using project and name

  Get Gerrit Projects from the Gerrit Listener using project and name
*/
func (a *Client) GetGerritProjectsUsingGET1(params *GetGerritProjectsUsingGET1Params, opts ...ClientOption) (*GetGerritProjectsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGerritProjectsUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGerritProjectsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-listeners/{project}/{name}/projects",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGerritProjectsUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGerritProjectsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGerritProjectsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNameUsingGET gets a docker registry webhook by name

  Get a Docker Registry Webhook by Name
*/
func (a *Client) GetNameUsingGET(params *GetNameUsingGETParams, opts ...ClientOption) (*GetNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNameUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNameUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/registry-webhooks/{project}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNameUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRegistryEventByID gets a docker registry event

  Get a Docker Registry Event based on id
*/
func (a *Client) GetRegistryEventByID(params *GetRegistryEventByIDParams, opts ...ClientOption) (*GetRegistryEventByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistryEventByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRegistryEventByID",
		Method:             "GET",
		PathPattern:        "/codestream/api/registry-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRegistryEventByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRegistryEventByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRegistryEventByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRegistryWebhookByID gets a docker registry webhook

  Get a Docker Registry Webhook based on id
*/
func (a *Client) GetRegistryWebhookByID(params *GetRegistryWebhookByIDParams, opts ...ClientOption) (*GetRegistryWebhookByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistryWebhookByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRegistryWebhookByID",
		Method:             "GET",
		PathPattern:        "/codestream/api/registry-webhooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRegistryWebhookByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRegistryWebhookByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRegistryWebhookByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ManualTriggerUsingPOST manuals trigger gerrit event

  Manual trigger Gerrit event
*/
func (a *Client) ManualTriggerUsingPOST(params *ManualTriggerUsingPOSTParams, opts ...ClientOption) (*ManualTriggerUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManualTriggerUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "manualTriggerUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-events",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManualTriggerUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManualTriggerUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for manualTriggerUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchByIDUsingPATCH patches a docker registry webhook with id

  Patch a Docker Registry Webhook with id
*/
func (a *Client) PatchByIDUsingPATCH(params *PatchByIDUsingPATCHParams, opts ...ClientOption) (*PatchByIDUsingPATCHOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchByIDUsingPATCHParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchByIdUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/registry-webhooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchByIDUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchByIDUsingPATCHOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchByIdUsingPATCH: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchByIDUsingPATCH1 patches a gerrit listener with id

  Patch a Gerrit Listener with id
*/
func (a *Client) PatchByIDUsingPATCH1(params *PatchByIDUsingPATCH1Params, opts ...ClientOption) (*PatchByIDUsingPATCH1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchByIDUsingPATCH1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchByIdUsingPATCH_1",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/gerrit-listeners/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchByIDUsingPATCH1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchByIDUsingPATCH1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchByIdUsingPATCH_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchByIDUsingPATCH2 patches a gerrit trigger with id

  Patch a Gerrit Trigger with id
*/
func (a *Client) PatchByIDUsingPATCH2(params *PatchByIDUsingPATCH2Params, opts ...ClientOption) (*PatchByIDUsingPATCH2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchByIDUsingPATCH2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchByIdUsingPATCH_2",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/gerrit-triggers/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchByIDUsingPATCH2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchByIDUsingPATCH2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchByIdUsingPATCH_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchByNameUsingPATCH patches a docker registry webhook with project and name

  Patch a Docker Registry Webhook with project and name
*/
func (a *Client) PatchByNameUsingPATCH(params *PatchByNameUsingPATCHParams, opts ...ClientOption) (*PatchByNameUsingPATCHOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchByNameUsingPATCHParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchByNameUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/registry-webhooks/{project}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchByNameUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchByNameUsingPATCHOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchByNameUsingPATCH: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchByNameUsingPATCH1 patches a gerrit listener with project and name

  Patch a Gerrit Listener with project and name
*/
func (a *Client) PatchByNameUsingPATCH1(params *PatchByNameUsingPATCH1Params, opts ...ClientOption) (*PatchByNameUsingPATCH1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchByNameUsingPATCH1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchByNameUsingPATCH_1",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/gerrit-listeners/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchByNameUsingPATCH1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchByNameUsingPATCH1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchByNameUsingPATCH_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchByNameUsingPATCH2 patches a gerrit trigger with project and name

  Patch a Gerrit Trigger with project and name
*/
func (a *Client) PatchByNameUsingPATCH2(params *PatchByNameUsingPATCH2Params, opts ...ClientOption) (*PatchByNameUsingPATCH2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchByNameUsingPATCH2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchByNameUsingPATCH_2",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/gerrit-triggers/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchByNameUsingPATCH2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchByNameUsingPATCH2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchByNameUsingPATCH_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResumeOrRerunEventUsingPOST res run resume docker registry event

  Re-run/Resume Docker Registry Event
*/
func (a *Client) ResumeOrRerunEventUsingPOST(params *ResumeOrRerunEventUsingPOSTParams, opts ...ClientOption) (*ResumeOrRerunEventUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeOrRerunEventUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resumeOrRerunEventUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/registry-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResumeOrRerunEventUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeOrRerunEventUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resumeOrRerunEventUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResumeOrRerunEventUsingPOST1 res run resume gerrit event

  Re-run/Resume Gerrit event
*/
func (a *Client) ResumeOrRerunEventUsingPOST1(params *ResumeOrRerunEventUsingPOST1Params, opts ...ClientOption) (*ResumeOrRerunEventUsingPOST1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeOrRerunEventUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "resumeOrRerunEventUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResumeOrRerunEventUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeOrRerunEventUsingPOST1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resumeOrRerunEventUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResumeOrRerunEventUsingPOST2 res run resume git event

  Re-run/Resume Git Event
*/
func (a *Client) ResumeOrRerunEventUsingPOST2(params *ResumeOrRerunEventUsingPOST2Params, opts ...ClientOption) (*ResumeOrRerunEventUsingPOST2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeOrRerunEventUsingPOST2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "resumeOrRerunEventUsingPOST_2",
		Method:             "POST",
		PathPattern:        "/codestream/api/git-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResumeOrRerunEventUsingPOST2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeOrRerunEventUsingPOST2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resumeOrRerunEventUsingPOST_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateByIDUsingPUT2 updates a gerrit listener with id

  Update a Gerrit Listener with id
*/
func (a *Client) UpdateByIDUsingPUT2(params *UpdateByIDUsingPUT2Params, opts ...ClientOption) (*UpdateByIDUsingPUT2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateByIDUsingPUT2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateByIdUsingPUT_2",
		Method:             "PUT",
		PathPattern:        "/codestream/api/gerrit-listeners/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateByIDUsingPUT2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateByIDUsingPUT2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateByIdUsingPUT_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateByIDUsingPUT3 updates a gerrit trigger with id

  Update a Gerrit Trigger with id
*/
func (a *Client) UpdateByIDUsingPUT3(params *UpdateByIDUsingPUT3Params, opts ...ClientOption) (*UpdateByIDUsingPUT3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateByIDUsingPUT3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateByIdUsingPUT_3",
		Method:             "PUT",
		PathPattern:        "/codestream/api/gerrit-triggers/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateByIDUsingPUT3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateByIDUsingPUT3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateByIdUsingPUT_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateByNameUsingPUT updates a docker registry webhook using name

  Update a Docker Registry Webhook using name
*/
func (a *Client) UpdateByNameUsingPUT(params *UpdateByNameUsingPUTParams, opts ...ClientOption) (*UpdateByNameUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateByNameUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateByNameUsingPUT",
		Method:             "PUT",
		PathPattern:        "/codestream/api/registry-webhooks/{project}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateByNameUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateByNameUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateByNameUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateByNameUsingPUT2 updates a gerrit listener with project and name

  Update a Gerrit Listener with project and name
*/
func (a *Client) UpdateByNameUsingPUT2(params *UpdateByNameUsingPUT2Params, opts ...ClientOption) (*UpdateByNameUsingPUT2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateByNameUsingPUT2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateByNameUsingPUT_2",
		Method:             "PUT",
		PathPattern:        "/codestream/api/gerrit-listeners/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateByNameUsingPUT2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateByNameUsingPUT2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateByNameUsingPUT_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateByNameUsingPUT3 updates a gerrit trigger with project and name

  Update a Gerrit Trigger with project and name
*/
func (a *Client) UpdateByNameUsingPUT3(params *UpdateByNameUsingPUT3Params, opts ...ClientOption) (*UpdateByNameUsingPUT3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateByNameUsingPUT3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateByNameUsingPUT_3",
		Method:             "PUT",
		PathPattern:        "/codestream/api/gerrit-triggers/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateByNameUsingPUT3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateByNameUsingPUT3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateByNameUsingPUT_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateByNameUsingPUT4 updates a git webhook using name

  Update a Git Webhook using name
*/
func (a *Client) UpdateByNameUsingPUT4(params *UpdateByNameUsingPUT4Params, opts ...ClientOption) (*UpdateByNameUsingPUT4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateByNameUsingPUT4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateByNameUsingPUT_4",
		Method:             "PUT",
		PathPattern:        "/codestream/api/git-webhooks/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateByNameUsingPUT4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateByNameUsingPUT4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateByNameUsingPUT_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUsingPUT updates a docker registry webhook

  Update a Docker Registry Webhook
*/
func (a *Client) UpdateUsingPUT(params *UpdateUsingPUTParams, opts ...ClientOption) (*UpdateUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/codestream/api/registry-webhooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUsingPUT1 updates a git webhook

  Update a Git Webhook
*/
func (a *Client) UpdateUsingPUT1(params *UpdateUsingPUT1Params, opts ...ClientOption) (*UpdateUsingPUT1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/codestream/api/git-webhooks/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUsingPUT1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPUT1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPUT_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateUsingPOST validates a gerrit listener

  Validate a Gerrit Listener
*/
func (a *Client) ValidateUsingPOST(params *ValidateUsingPOSTParams, opts ...ClientOption) (*ValidateUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-listeners/validate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
