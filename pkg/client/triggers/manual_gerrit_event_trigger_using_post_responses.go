// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// ManualGerritEventTriggerUsingPOSTReader is a Reader for the ManualGerritEventTriggerUsingPOST structure.
type ManualGerritEventTriggerUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ManualGerritEventTriggerUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewManualGerritEventTriggerUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewManualGerritEventTriggerUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewManualGerritEventTriggerUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewManualGerritEventTriggerUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewManualGerritEventTriggerUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewManualGerritEventTriggerUsingPOSTOK creates a ManualGerritEventTriggerUsingPOSTOK with default headers values
func NewManualGerritEventTriggerUsingPOSTOK() *ManualGerritEventTriggerUsingPOSTOK {
	return &ManualGerritEventTriggerUsingPOSTOK{}
}

/* ManualGerritEventTriggerUsingPOSTOK describes a response with status code 200, with default header values.

'Success' with Manual trigger Gerrit event
*/
type ManualGerritEventTriggerUsingPOSTOK struct {
	Payload models.ManualTriggerResponse
}

func (o *ManualGerritEventTriggerUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events][%d] manualGerritEventTriggerUsingPOSTOK  %+v", 200, o.Payload)
}
func (o *ManualGerritEventTriggerUsingPOSTOK) GetPayload() models.ManualTriggerResponse {
	return o.Payload
}

func (o *ManualGerritEventTriggerUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalManualTriggerResponse(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewManualGerritEventTriggerUsingPOSTUnauthorized creates a ManualGerritEventTriggerUsingPOSTUnauthorized with default headers values
func NewManualGerritEventTriggerUsingPOSTUnauthorized() *ManualGerritEventTriggerUsingPOSTUnauthorized {
	return &ManualGerritEventTriggerUsingPOSTUnauthorized{}
}

/* ManualGerritEventTriggerUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type ManualGerritEventTriggerUsingPOSTUnauthorized struct {
}

func (o *ManualGerritEventTriggerUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events][%d] manualGerritEventTriggerUsingPOSTUnauthorized ", 401)
}

func (o *ManualGerritEventTriggerUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewManualGerritEventTriggerUsingPOSTForbidden creates a ManualGerritEventTriggerUsingPOSTForbidden with default headers values
func NewManualGerritEventTriggerUsingPOSTForbidden() *ManualGerritEventTriggerUsingPOSTForbidden {
	return &ManualGerritEventTriggerUsingPOSTForbidden{}
}

/* ManualGerritEventTriggerUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ManualGerritEventTriggerUsingPOSTForbidden struct {
}

func (o *ManualGerritEventTriggerUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events][%d] manualGerritEventTriggerUsingPOSTForbidden ", 403)
}

func (o *ManualGerritEventTriggerUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewManualGerritEventTriggerUsingPOSTNotFound creates a ManualGerritEventTriggerUsingPOSTNotFound with default headers values
func NewManualGerritEventTriggerUsingPOSTNotFound() *ManualGerritEventTriggerUsingPOSTNotFound {
	return &ManualGerritEventTriggerUsingPOSTNotFound{}
}

/* ManualGerritEventTriggerUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ManualGerritEventTriggerUsingPOSTNotFound struct {
	Payload *models.Error
}

func (o *ManualGerritEventTriggerUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events][%d] manualGerritEventTriggerUsingPOSTNotFound  %+v", 404, o.Payload)
}
func (o *ManualGerritEventTriggerUsingPOSTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ManualGerritEventTriggerUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewManualGerritEventTriggerUsingPOSTInternalServerError creates a ManualGerritEventTriggerUsingPOSTInternalServerError with default headers values
func NewManualGerritEventTriggerUsingPOSTInternalServerError() *ManualGerritEventTriggerUsingPOSTInternalServerError {
	return &ManualGerritEventTriggerUsingPOSTInternalServerError{}
}

/* ManualGerritEventTriggerUsingPOSTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ManualGerritEventTriggerUsingPOSTInternalServerError struct {
}

func (o *ManualGerritEventTriggerUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events][%d] manualGerritEventTriggerUsingPOSTInternalServerError ", 500)
}

func (o *ManualGerritEventTriggerUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
