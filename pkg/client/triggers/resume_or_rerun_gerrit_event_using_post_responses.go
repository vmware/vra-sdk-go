// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// ResumeOrRerunGerritEventUsingPOSTReader is a Reader for the ResumeOrRerunGerritEventUsingPOST structure.
type ResumeOrRerunGerritEventUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResumeOrRerunGerritEventUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewResumeOrRerunGerritEventUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewResumeOrRerunGerritEventUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewResumeOrRerunGerritEventUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewResumeOrRerunGerritEventUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewResumeOrRerunGerritEventUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewResumeOrRerunGerritEventUsingPOSTOK creates a ResumeOrRerunGerritEventUsingPOSTOK with default headers values
func NewResumeOrRerunGerritEventUsingPOSTOK() *ResumeOrRerunGerritEventUsingPOSTOK {
	return &ResumeOrRerunGerritEventUsingPOSTOK{}
}

/* ResumeOrRerunGerritEventUsingPOSTOK describes a response with status code 200, with default header values.

'Success' with Re-run/Resume Gerrit event
*/
type ResumeOrRerunGerritEventUsingPOSTOK struct {
	Payload models.GerritEvent
}

func (o *ResumeOrRerunGerritEventUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events/{id}][%d] resumeOrRerunGerritEventUsingPOSTOK  %+v", 200, o.Payload)
}
func (o *ResumeOrRerunGerritEventUsingPOSTOK) GetPayload() models.GerritEvent {
	return o.Payload
}

func (o *ResumeOrRerunGerritEventUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritEvent(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewResumeOrRerunGerritEventUsingPOSTUnauthorized creates a ResumeOrRerunGerritEventUsingPOSTUnauthorized with default headers values
func NewResumeOrRerunGerritEventUsingPOSTUnauthorized() *ResumeOrRerunGerritEventUsingPOSTUnauthorized {
	return &ResumeOrRerunGerritEventUsingPOSTUnauthorized{}
}

/* ResumeOrRerunGerritEventUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type ResumeOrRerunGerritEventUsingPOSTUnauthorized struct {
}

func (o *ResumeOrRerunGerritEventUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events/{id}][%d] resumeOrRerunGerritEventUsingPOSTUnauthorized ", 401)
}

func (o *ResumeOrRerunGerritEventUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewResumeOrRerunGerritEventUsingPOSTForbidden creates a ResumeOrRerunGerritEventUsingPOSTForbidden with default headers values
func NewResumeOrRerunGerritEventUsingPOSTForbidden() *ResumeOrRerunGerritEventUsingPOSTForbidden {
	return &ResumeOrRerunGerritEventUsingPOSTForbidden{}
}

/* ResumeOrRerunGerritEventUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ResumeOrRerunGerritEventUsingPOSTForbidden struct {
}

func (o *ResumeOrRerunGerritEventUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events/{id}][%d] resumeOrRerunGerritEventUsingPOSTForbidden ", 403)
}

func (o *ResumeOrRerunGerritEventUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewResumeOrRerunGerritEventUsingPOSTNotFound creates a ResumeOrRerunGerritEventUsingPOSTNotFound with default headers values
func NewResumeOrRerunGerritEventUsingPOSTNotFound() *ResumeOrRerunGerritEventUsingPOSTNotFound {
	return &ResumeOrRerunGerritEventUsingPOSTNotFound{}
}

/* ResumeOrRerunGerritEventUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ResumeOrRerunGerritEventUsingPOSTNotFound struct {
	Payload *models.Error
}

func (o *ResumeOrRerunGerritEventUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events/{id}][%d] resumeOrRerunGerritEventUsingPOSTNotFound  %+v", 404, o.Payload)
}
func (o *ResumeOrRerunGerritEventUsingPOSTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ResumeOrRerunGerritEventUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResumeOrRerunGerritEventUsingPOSTInternalServerError creates a ResumeOrRerunGerritEventUsingPOSTInternalServerError with default headers values
func NewResumeOrRerunGerritEventUsingPOSTInternalServerError() *ResumeOrRerunGerritEventUsingPOSTInternalServerError {
	return &ResumeOrRerunGerritEventUsingPOSTInternalServerError{}
}

/* ResumeOrRerunGerritEventUsingPOSTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ResumeOrRerunGerritEventUsingPOSTInternalServerError struct {
}

func (o *ResumeOrRerunGerritEventUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events/{id}][%d] resumeOrRerunGerritEventUsingPOSTInternalServerError ", 500)
}

func (o *ResumeOrRerunGerritEventUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
