// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// DeleteGerritEventByIDUsingDELETEReader is a Reader for the DeleteGerritEventByIDUsingDELETE structure.
type DeleteGerritEventByIDUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteGerritEventByIDUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteGerritEventByIDUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteGerritEventByIDUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteGerritEventByIDUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteGerritEventByIDUsingDELETENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteGerritEventByIDUsingDELETEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteGerritEventByIDUsingDELETEOK creates a DeleteGerritEventByIDUsingDELETEOK with default headers values
func NewDeleteGerritEventByIDUsingDELETEOK() *DeleteGerritEventByIDUsingDELETEOK {
	return &DeleteGerritEventByIDUsingDELETEOK{}
}

/*
DeleteGerritEventByIDUsingDELETEOK describes a response with status code 200, with default header values.

'Success' with Delete a Gerrit Event
*/
type DeleteGerritEventByIDUsingDELETEOK struct {
	Payload models.GerritEvent
}

// IsSuccess returns true when this delete gerrit event by Id using d e l e t e o k response has a 2xx status code
func (o *DeleteGerritEventByIDUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete gerrit event by Id using d e l e t e o k response has a 3xx status code
func (o *DeleteGerritEventByIDUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete gerrit event by Id using d e l e t e o k response has a 4xx status code
func (o *DeleteGerritEventByIDUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete gerrit event by Id using d e l e t e o k response has a 5xx status code
func (o *DeleteGerritEventByIDUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete gerrit event by Id using d e l e t e o k response a status code equal to that given
func (o *DeleteGerritEventByIDUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeleteGerritEventByIDUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/gerrit-events/{id}][%d] deleteGerritEventByIdUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *DeleteGerritEventByIDUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/gerrit-events/{id}][%d] deleteGerritEventByIdUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *DeleteGerritEventByIDUsingDELETEOK) GetPayload() models.GerritEvent {
	return o.Payload
}

func (o *DeleteGerritEventByIDUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritEvent(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewDeleteGerritEventByIDUsingDELETEUnauthorized creates a DeleteGerritEventByIDUsingDELETEUnauthorized with default headers values
func NewDeleteGerritEventByIDUsingDELETEUnauthorized() *DeleteGerritEventByIDUsingDELETEUnauthorized {
	return &DeleteGerritEventByIDUsingDELETEUnauthorized{}
}

/*
DeleteGerritEventByIDUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type DeleteGerritEventByIDUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete gerrit event by Id using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteGerritEventByIDUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete gerrit event by Id using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteGerritEventByIDUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete gerrit event by Id using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteGerritEventByIDUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete gerrit event by Id using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteGerritEventByIDUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete gerrit event by Id using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteGerritEventByIDUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteGerritEventByIDUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/gerrit-events/{id}][%d] deleteGerritEventByIdUsingDELETEUnauthorized ", 401)
}

func (o *DeleteGerritEventByIDUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/gerrit-events/{id}][%d] deleteGerritEventByIdUsingDELETEUnauthorized ", 401)
}

func (o *DeleteGerritEventByIDUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteGerritEventByIDUsingDELETEForbidden creates a DeleteGerritEventByIDUsingDELETEForbidden with default headers values
func NewDeleteGerritEventByIDUsingDELETEForbidden() *DeleteGerritEventByIDUsingDELETEForbidden {
	return &DeleteGerritEventByIDUsingDELETEForbidden{}
}

/*
DeleteGerritEventByIDUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteGerritEventByIDUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete gerrit event by Id using d e l e t e forbidden response has a 2xx status code
func (o *DeleteGerritEventByIDUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete gerrit event by Id using d e l e t e forbidden response has a 3xx status code
func (o *DeleteGerritEventByIDUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete gerrit event by Id using d e l e t e forbidden response has a 4xx status code
func (o *DeleteGerritEventByIDUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete gerrit event by Id using d e l e t e forbidden response has a 5xx status code
func (o *DeleteGerritEventByIDUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete gerrit event by Id using d e l e t e forbidden response a status code equal to that given
func (o *DeleteGerritEventByIDUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteGerritEventByIDUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/gerrit-events/{id}][%d] deleteGerritEventByIdUsingDELETEForbidden ", 403)
}

func (o *DeleteGerritEventByIDUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/gerrit-events/{id}][%d] deleteGerritEventByIdUsingDELETEForbidden ", 403)
}

func (o *DeleteGerritEventByIDUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteGerritEventByIDUsingDELETENotFound creates a DeleteGerritEventByIDUsingDELETENotFound with default headers values
func NewDeleteGerritEventByIDUsingDELETENotFound() *DeleteGerritEventByIDUsingDELETENotFound {
	return &DeleteGerritEventByIDUsingDELETENotFound{}
}

/*
DeleteGerritEventByIDUsingDELETENotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteGerritEventByIDUsingDELETENotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete gerrit event by Id using d e l e t e not found response has a 2xx status code
func (o *DeleteGerritEventByIDUsingDELETENotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete gerrit event by Id using d e l e t e not found response has a 3xx status code
func (o *DeleteGerritEventByIDUsingDELETENotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete gerrit event by Id using d e l e t e not found response has a 4xx status code
func (o *DeleteGerritEventByIDUsingDELETENotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete gerrit event by Id using d e l e t e not found response has a 5xx status code
func (o *DeleteGerritEventByIDUsingDELETENotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete gerrit event by Id using d e l e t e not found response a status code equal to that given
func (o *DeleteGerritEventByIDUsingDELETENotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteGerritEventByIDUsingDELETENotFound) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/gerrit-events/{id}][%d] deleteGerritEventByIdUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeleteGerritEventByIDUsingDELETENotFound) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/gerrit-events/{id}][%d] deleteGerritEventByIdUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeleteGerritEventByIDUsingDELETENotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteGerritEventByIDUsingDELETENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGerritEventByIDUsingDELETEInternalServerError creates a DeleteGerritEventByIDUsingDELETEInternalServerError with default headers values
func NewDeleteGerritEventByIDUsingDELETEInternalServerError() *DeleteGerritEventByIDUsingDELETEInternalServerError {
	return &DeleteGerritEventByIDUsingDELETEInternalServerError{}
}

/*
DeleteGerritEventByIDUsingDELETEInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type DeleteGerritEventByIDUsingDELETEInternalServerError struct {
}

// IsSuccess returns true when this delete gerrit event by Id using d e l e t e internal server error response has a 2xx status code
func (o *DeleteGerritEventByIDUsingDELETEInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete gerrit event by Id using d e l e t e internal server error response has a 3xx status code
func (o *DeleteGerritEventByIDUsingDELETEInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete gerrit event by Id using d e l e t e internal server error response has a 4xx status code
func (o *DeleteGerritEventByIDUsingDELETEInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete gerrit event by Id using d e l e t e internal server error response has a 5xx status code
func (o *DeleteGerritEventByIDUsingDELETEInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete gerrit event by Id using d e l e t e internal server error response a status code equal to that given
func (o *DeleteGerritEventByIDUsingDELETEInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteGerritEventByIDUsingDELETEInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/gerrit-events/{id}][%d] deleteGerritEventByIdUsingDELETEInternalServerError ", 500)
}

func (o *DeleteGerritEventByIDUsingDELETEInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/gerrit-events/{id}][%d] deleteGerritEventByIdUsingDELETEInternalServerError ", 500)
}

func (o *DeleteGerritEventByIDUsingDELETEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
