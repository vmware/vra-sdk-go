// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// PatchGerritTriggerByNameUsingPATCHReader is a Reader for the PatchGerritTriggerByNameUsingPATCH structure.
type PatchGerritTriggerByNameUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchGerritTriggerByNameUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchGerritTriggerByNameUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchGerritTriggerByNameUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchGerritTriggerByNameUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchGerritTriggerByNameUsingPATCHNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchGerritTriggerByNameUsingPATCHInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchGerritTriggerByNameUsingPATCHOK creates a PatchGerritTriggerByNameUsingPATCHOK with default headers values
func NewPatchGerritTriggerByNameUsingPATCHOK() *PatchGerritTriggerByNameUsingPATCHOK {
	return &PatchGerritTriggerByNameUsingPATCHOK{}
}

/* PatchGerritTriggerByNameUsingPATCHOK describes a response with status code 200, with default header values.

'Success' with Gerrit Trigger patch
*/
type PatchGerritTriggerByNameUsingPATCHOK struct {
	Payload models.GerritTrigger
}

func (o *PatchGerritTriggerByNameUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-triggers/{project}/{name}][%d] patchGerritTriggerByNameUsingPATCHOK  %+v", 200, o.Payload)
}
func (o *PatchGerritTriggerByNameUsingPATCHOK) GetPayload() models.GerritTrigger {
	return o.Payload
}

func (o *PatchGerritTriggerByNameUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritTrigger(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewPatchGerritTriggerByNameUsingPATCHUnauthorized creates a PatchGerritTriggerByNameUsingPATCHUnauthorized with default headers values
func NewPatchGerritTriggerByNameUsingPATCHUnauthorized() *PatchGerritTriggerByNameUsingPATCHUnauthorized {
	return &PatchGerritTriggerByNameUsingPATCHUnauthorized{}
}

/* PatchGerritTriggerByNameUsingPATCHUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type PatchGerritTriggerByNameUsingPATCHUnauthorized struct {
}

func (o *PatchGerritTriggerByNameUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-triggers/{project}/{name}][%d] patchGerritTriggerByNameUsingPATCHUnauthorized ", 401)
}

func (o *PatchGerritTriggerByNameUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchGerritTriggerByNameUsingPATCHForbidden creates a PatchGerritTriggerByNameUsingPATCHForbidden with default headers values
func NewPatchGerritTriggerByNameUsingPATCHForbidden() *PatchGerritTriggerByNameUsingPATCHForbidden {
	return &PatchGerritTriggerByNameUsingPATCHForbidden{}
}

/* PatchGerritTriggerByNameUsingPATCHForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchGerritTriggerByNameUsingPATCHForbidden struct {
}

func (o *PatchGerritTriggerByNameUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-triggers/{project}/{name}][%d] patchGerritTriggerByNameUsingPATCHForbidden ", 403)
}

func (o *PatchGerritTriggerByNameUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchGerritTriggerByNameUsingPATCHNotFound creates a PatchGerritTriggerByNameUsingPATCHNotFound with default headers values
func NewPatchGerritTriggerByNameUsingPATCHNotFound() *PatchGerritTriggerByNameUsingPATCHNotFound {
	return &PatchGerritTriggerByNameUsingPATCHNotFound{}
}

/* PatchGerritTriggerByNameUsingPATCHNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchGerritTriggerByNameUsingPATCHNotFound struct {
	Payload *models.Error
}

func (o *PatchGerritTriggerByNameUsingPATCHNotFound) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-triggers/{project}/{name}][%d] patchGerritTriggerByNameUsingPATCHNotFound  %+v", 404, o.Payload)
}
func (o *PatchGerritTriggerByNameUsingPATCHNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchGerritTriggerByNameUsingPATCHNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchGerritTriggerByNameUsingPATCHInternalServerError creates a PatchGerritTriggerByNameUsingPATCHInternalServerError with default headers values
func NewPatchGerritTriggerByNameUsingPATCHInternalServerError() *PatchGerritTriggerByNameUsingPATCHInternalServerError {
	return &PatchGerritTriggerByNameUsingPATCHInternalServerError{}
}

/* PatchGerritTriggerByNameUsingPATCHInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PatchGerritTriggerByNameUsingPATCHInternalServerError struct {
}

func (o *PatchGerritTriggerByNameUsingPATCHInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-triggers/{project}/{name}][%d] patchGerritTriggerByNameUsingPATCHInternalServerError ", 500)
}

func (o *PatchGerritTriggerByNameUsingPATCHInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
