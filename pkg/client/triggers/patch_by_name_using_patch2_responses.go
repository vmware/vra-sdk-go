// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// PatchByNameUsingPATCH2Reader is a Reader for the PatchByNameUsingPATCH2 structure.
type PatchByNameUsingPATCH2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchByNameUsingPATCH2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchByNameUsingPATCH2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchByNameUsingPATCH2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchByNameUsingPATCH2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchByNameUsingPATCH2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchByNameUsingPATCH2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchByNameUsingPATCH2OK creates a PatchByNameUsingPATCH2OK with default headers values
func NewPatchByNameUsingPATCH2OK() *PatchByNameUsingPATCH2OK {
	return &PatchByNameUsingPATCH2OK{}
}

/* PatchByNameUsingPATCH2OK describes a response with status code 200, with default header values.

'Success' with Gerrit Trigger patch
*/
type PatchByNameUsingPATCH2OK struct {
	Payload models.GerritTrigger
}

func (o *PatchByNameUsingPATCH2OK) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-triggers/{project}/{name}][%d] patchByNameUsingPATCH2OK  %+v", 200, o.Payload)
}
func (o *PatchByNameUsingPATCH2OK) GetPayload() models.GerritTrigger {
	return o.Payload
}

func (o *PatchByNameUsingPATCH2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritTrigger(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewPatchByNameUsingPATCH2Unauthorized creates a PatchByNameUsingPATCH2Unauthorized with default headers values
func NewPatchByNameUsingPATCH2Unauthorized() *PatchByNameUsingPATCH2Unauthorized {
	return &PatchByNameUsingPATCH2Unauthorized{}
}

/* PatchByNameUsingPATCH2Unauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type PatchByNameUsingPATCH2Unauthorized struct {
}

func (o *PatchByNameUsingPATCH2Unauthorized) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-triggers/{project}/{name}][%d] patchByNameUsingPATCH2Unauthorized ", 401)
}

func (o *PatchByNameUsingPATCH2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchByNameUsingPATCH2Forbidden creates a PatchByNameUsingPATCH2Forbidden with default headers values
func NewPatchByNameUsingPATCH2Forbidden() *PatchByNameUsingPATCH2Forbidden {
	return &PatchByNameUsingPATCH2Forbidden{}
}

/* PatchByNameUsingPATCH2Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchByNameUsingPATCH2Forbidden struct {
}

func (o *PatchByNameUsingPATCH2Forbidden) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-triggers/{project}/{name}][%d] patchByNameUsingPATCH2Forbidden ", 403)
}

func (o *PatchByNameUsingPATCH2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchByNameUsingPATCH2NotFound creates a PatchByNameUsingPATCH2NotFound with default headers values
func NewPatchByNameUsingPATCH2NotFound() *PatchByNameUsingPATCH2NotFound {
	return &PatchByNameUsingPATCH2NotFound{}
}

/* PatchByNameUsingPATCH2NotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchByNameUsingPATCH2NotFound struct {
	Payload *models.Error
}

func (o *PatchByNameUsingPATCH2NotFound) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-triggers/{project}/{name}][%d] patchByNameUsingPATCH2NotFound  %+v", 404, o.Payload)
}
func (o *PatchByNameUsingPATCH2NotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchByNameUsingPATCH2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchByNameUsingPATCH2InternalServerError creates a PatchByNameUsingPATCH2InternalServerError with default headers values
func NewPatchByNameUsingPATCH2InternalServerError() *PatchByNameUsingPATCH2InternalServerError {
	return &PatchByNameUsingPATCH2InternalServerError{}
}

/* PatchByNameUsingPATCH2InternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PatchByNameUsingPATCH2InternalServerError struct {
}

func (o *PatchByNameUsingPATCH2InternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-triggers/{project}/{name}][%d] patchByNameUsingPATCH2InternalServerError ", 500)
}

func (o *PatchByNameUsingPATCH2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
