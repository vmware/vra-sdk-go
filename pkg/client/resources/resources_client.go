// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new resources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateResourceUsingPOST2(params *CreateResourceUsingPOST2Params, opts ...ClientOption) (*CreateResourceUsingPOST2OK, error)

	GetResourceByIDUsingGET5(params *GetResourceByIDUsingGET5Params, opts ...ClientOption) (*GetResourceByIDUsingGET5OK, error)

	GetResourceFilterByIDUsingGET2(params *GetResourceFilterByIDUsingGET2Params, opts ...ClientOption) (*GetResourceFilterByIDUsingGET2OK, error)

	GetResourceFiltersUsingGET2(params *GetResourceFiltersUsingGET2Params, opts ...ClientOption) (*GetResourceFiltersUsingGET2OK, error)

	GetResourcesUsingGET2(params *GetResourcesUsingGET2Params, opts ...ClientOption) (*GetResourcesUsingGET2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateResourceUsingPOST2 creates a new resource

  Returns the resource request response.
*/
func (a *Client) CreateResourceUsingPOST2(params *CreateResourceUsingPOST2Params, opts ...ClientOption) (*CreateResourceUsingPOST2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResourceUsingPOST2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createResourceUsingPOST_2",
		Method:             "POST",
		PathPattern:        "/deployment/api/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateResourceUsingPOST2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateResourceUsingPOST2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createResourceUsingPOST_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourceByIDUsingGET5 fetches a specific resource

  Returns the resource with the supplied ID.
*/
func (a *Client) GetResourceByIDUsingGET5(params *GetResourceByIDUsingGET5Params, opts ...ClientOption) (*GetResourceByIDUsingGET5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceByIDUsingGET5Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceByIdUsingGET_5",
		Method:             "GET",
		PathPattern:        "/deployment/api/resources/{resourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceByIDUsingGET5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceByIDUsingGET5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceByIdUsingGET_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourceFilterByIDUsingGET2 returns the resource filter with the supplied ID
*/
func (a *Client) GetResourceFilterByIDUsingGET2(params *GetResourceFilterByIDUsingGET2Params, opts ...ClientOption) (*GetResourceFilterByIDUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceFilterByIDUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceFilterByIdUsingGET_2",
		Method:             "GET",
		PathPattern:        "/deployment/api/resources/filters/{filterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceFilterByIDUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceFilterByIDUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceFilterByIdUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourceFiltersUsingGET2 returns the resource filters in context of given user
*/
func (a *Client) GetResourceFiltersUsingGET2(params *GetResourceFiltersUsingGET2Params, opts ...ClientOption) (*GetResourceFiltersUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceFiltersUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceFiltersUsingGET_2",
		Method:             "GET",
		PathPattern:        "/deployment/api/resources/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceFiltersUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceFiltersUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceFiltersUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourcesUsingGET2 fetches all resources

  Returns a paginated list of resources.
*/
func (a *Client) GetResourcesUsingGET2(params *GetResourcesUsingGET2Params, opts ...ClientOption) (*GetResourcesUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourcesUsingGET_2",
		Method:             "GET",
		PathPattern:        "/deployment/api/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourcesUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourcesUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourcesUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
