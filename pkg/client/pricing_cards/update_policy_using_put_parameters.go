// Code generated by go-swagger; DO NOT EDIT.

package pricing_cards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// NewUpdatePolicyUsingPUTParams creates a new UpdatePolicyUsingPUTParams object
// with the default values initialized.
func NewUpdatePolicyUsingPUTParams() *UpdatePolicyUsingPUTParams {
	var ()
	return &UpdatePolicyUsingPUTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdatePolicyUsingPUTParamsWithTimeout creates a new UpdatePolicyUsingPUTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdatePolicyUsingPUTParamsWithTimeout(timeout time.Duration) *UpdatePolicyUsingPUTParams {
	var ()
	return &UpdatePolicyUsingPUTParams{

		timeout: timeout,
	}
}

// NewUpdatePolicyUsingPUTParamsWithContext creates a new UpdatePolicyUsingPUTParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdatePolicyUsingPUTParamsWithContext(ctx context.Context) *UpdatePolicyUsingPUTParams {
	var ()
	return &UpdatePolicyUsingPUTParams{

		Context: ctx,
	}
}

// NewUpdatePolicyUsingPUTParamsWithHTTPClient creates a new UpdatePolicyUsingPUTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdatePolicyUsingPUTParamsWithHTTPClient(client *http.Client) *UpdatePolicyUsingPUTParams {
	var ()
	return &UpdatePolicyUsingPUTParams{
		HTTPClient: client,
	}
}

/*UpdatePolicyUsingPUTParams contains all the parameters to send to the API endpoint
for the update policy using p u t operation typically these are written to a http.Request
*/
type UpdatePolicyUsingPUTParams struct {

	/*ID
	  pricing card Id

	*/
	ID strfmt.UUID
	/*MeteringPolicy
	  A set of pricing card fields to be updated.

	*/
	MeteringPolicy *models.MeteringPolicy

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update policy using p u t params
func (o *UpdatePolicyUsingPUTParams) WithTimeout(timeout time.Duration) *UpdatePolicyUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update policy using p u t params
func (o *UpdatePolicyUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update policy using p u t params
func (o *UpdatePolicyUsingPUTParams) WithContext(ctx context.Context) *UpdatePolicyUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update policy using p u t params
func (o *UpdatePolicyUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update policy using p u t params
func (o *UpdatePolicyUsingPUTParams) WithHTTPClient(client *http.Client) *UpdatePolicyUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update policy using p u t params
func (o *UpdatePolicyUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the update policy using p u t params
func (o *UpdatePolicyUsingPUTParams) WithID(id strfmt.UUID) *UpdatePolicyUsingPUTParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update policy using p u t params
func (o *UpdatePolicyUsingPUTParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WithMeteringPolicy adds the meteringPolicy to the update policy using p u t params
func (o *UpdatePolicyUsingPUTParams) WithMeteringPolicy(meteringPolicy *models.MeteringPolicy) *UpdatePolicyUsingPUTParams {
	o.SetMeteringPolicy(meteringPolicy)
	return o
}

// SetMeteringPolicy adds the meteringPolicy to the update policy using p u t params
func (o *UpdatePolicyUsingPUTParams) SetMeteringPolicy(meteringPolicy *models.MeteringPolicy) {
	o.MeteringPolicy = meteringPolicy
}

// WriteToRequest writes these params to a swagger request
func (o *UpdatePolicyUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if o.MeteringPolicy != nil {
		if err := r.SetBodyParam(o.MeteringPolicy); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
