// Code generated by go-swagger; DO NOT EDIT.

package blueprint_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new blueprint requests API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for blueprint requests API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CancelBlueprintRequestUsingPOST cancels request
*/
func (a *Client) CancelBlueprintRequestUsingPOST(params *CancelBlueprintRequestUsingPOSTParams) (*CancelBlueprintRequestUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelBlueprintRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelBlueprintRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/blueprint/api/blueprint-requests/{requestId}/actions/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelBlueprintRequestUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelBlueprintRequestUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelBlueprintRequestUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBlueprintRequestUsingPOST1 creates a blueprint request
*/
func (a *Client) CreateBlueprintRequestUsingPOST1(params *CreateBlueprintRequestUsingPOST1Params) (*CreateBlueprintRequestUsingPOST1Created, *CreateBlueprintRequestUsingPOST1Accepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlueprintRequestUsingPOST1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBlueprintRequestUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/blueprint/api/blueprint-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBlueprintRequestUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateBlueprintRequestUsingPOST1Created:
		return value, nil, nil
	case *CreateBlueprintRequestUsingPOST1Accepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for blueprint_requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteBlueprintRequestUsingDELETE1 deletes request
*/
func (a *Client) DeleteBlueprintRequestUsingDELETE1(params *DeleteBlueprintRequestUsingDELETE1Params) (*DeleteBlueprintRequestUsingDELETE1NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBlueprintRequestUsingDELETE1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBlueprintRequestUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/blueprint/api/blueprint-requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBlueprintRequestUsingDELETE1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBlueprintRequestUsingDELETE1NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBlueprintRequestUsingDELETE_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBlueprintPlanUsingGET1 returns request plan
*/
func (a *Client) GetBlueprintPlanUsingGET1(params *GetBlueprintPlanUsingGET1Params) (*GetBlueprintPlanUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprintPlanUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlueprintPlanUsingGET_1",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprint-requests/{requestId}/plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlueprintPlanUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlueprintPlanUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBlueprintPlanUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBlueprintRequestUsingGET1 returns blueprint request details
*/
func (a *Client) GetBlueprintRequestUsingGET1(params *GetBlueprintRequestUsingGET1Params) (*GetBlueprintRequestUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprintRequestUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlueprintRequestUsingGET_1",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprint-requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlueprintRequestUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlueprintRequestUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBlueprintRequestUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBlueprintResourcesPlanUsingGET1 returns request resources plan
*/
func (a *Client) GetBlueprintResourcesPlanUsingGET1(params *GetBlueprintResourcesPlanUsingGET1Params) (*GetBlueprintResourcesPlanUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprintResourcesPlanUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlueprintResourcesPlanUsingGET_1",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprint-requests/{requestId}/resources-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlueprintResourcesPlanUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlueprintResourcesPlanUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBlueprintResourcesPlanUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBlueprintRequestsUsingGET1 lists blueprint requests
*/
func (a *Client) ListBlueprintRequestsUsingGET1(params *ListBlueprintRequestsUsingGET1Params) (*ListBlueprintRequestsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBlueprintRequestsUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listBlueprintRequestsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/blueprint/api/blueprint-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBlueprintRequestsUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBlueprintRequestsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listBlueprintRequestsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
