// Code generated by go-swagger; DO NOT EDIT.

package blueprint_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// CancelBlueprintRequestUsingPOSTReader is a Reader for the CancelBlueprintRequestUsingPOST structure.
type CancelBlueprintRequestUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelBlueprintRequestUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelBlueprintRequestUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCancelBlueprintRequestUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelBlueprintRequestUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelBlueprintRequestUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelBlueprintRequestUsingPOSTOK creates a CancelBlueprintRequestUsingPOSTOK with default headers values
func NewCancelBlueprintRequestUsingPOSTOK() *CancelBlueprintRequestUsingPOSTOK {
	return &CancelBlueprintRequestUsingPOSTOK{}
}

/*
CancelBlueprintRequestUsingPOSTOK describes a response with status code 200, with default header values.

OK
*/
type CancelBlueprintRequestUsingPOSTOK struct {
}

// IsSuccess returns true when this cancel blueprint request using p o s t o k response has a 2xx status code
func (o *CancelBlueprintRequestUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cancel blueprint request using p o s t o k response has a 3xx status code
func (o *CancelBlueprintRequestUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel blueprint request using p o s t o k response has a 4xx status code
func (o *CancelBlueprintRequestUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel blueprint request using p o s t o k response has a 5xx status code
func (o *CancelBlueprintRequestUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel blueprint request using p o s t o k response a status code equal to that given
func (o *CancelBlueprintRequestUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

func (o *CancelBlueprintRequestUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /blueprint/api/blueprint-requests/{requestId}/actions/cancel][%d] cancelBlueprintRequestUsingPOSTOK ", 200)
}

func (o *CancelBlueprintRequestUsingPOSTOK) String() string {
	return fmt.Sprintf("[POST /blueprint/api/blueprint-requests/{requestId}/actions/cancel][%d] cancelBlueprintRequestUsingPOSTOK ", 200)
}

func (o *CancelBlueprintRequestUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelBlueprintRequestUsingPOSTUnauthorized creates a CancelBlueprintRequestUsingPOSTUnauthorized with default headers values
func NewCancelBlueprintRequestUsingPOSTUnauthorized() *CancelBlueprintRequestUsingPOSTUnauthorized {
	return &CancelBlueprintRequestUsingPOSTUnauthorized{}
}

/*
CancelBlueprintRequestUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CancelBlueprintRequestUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this cancel blueprint request using p o s t unauthorized response has a 2xx status code
func (o *CancelBlueprintRequestUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel blueprint request using p o s t unauthorized response has a 3xx status code
func (o *CancelBlueprintRequestUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel blueprint request using p o s t unauthorized response has a 4xx status code
func (o *CancelBlueprintRequestUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel blueprint request using p o s t unauthorized response has a 5xx status code
func (o *CancelBlueprintRequestUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel blueprint request using p o s t unauthorized response a status code equal to that given
func (o *CancelBlueprintRequestUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CancelBlueprintRequestUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /blueprint/api/blueprint-requests/{requestId}/actions/cancel][%d] cancelBlueprintRequestUsingPOSTUnauthorized ", 401)
}

func (o *CancelBlueprintRequestUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /blueprint/api/blueprint-requests/{requestId}/actions/cancel][%d] cancelBlueprintRequestUsingPOSTUnauthorized ", 401)
}

func (o *CancelBlueprintRequestUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelBlueprintRequestUsingPOSTForbidden creates a CancelBlueprintRequestUsingPOSTForbidden with default headers values
func NewCancelBlueprintRequestUsingPOSTForbidden() *CancelBlueprintRequestUsingPOSTForbidden {
	return &CancelBlueprintRequestUsingPOSTForbidden{}
}

/*
CancelBlueprintRequestUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CancelBlueprintRequestUsingPOSTForbidden struct {
}

// IsSuccess returns true when this cancel blueprint request using p o s t forbidden response has a 2xx status code
func (o *CancelBlueprintRequestUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel blueprint request using p o s t forbidden response has a 3xx status code
func (o *CancelBlueprintRequestUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel blueprint request using p o s t forbidden response has a 4xx status code
func (o *CancelBlueprintRequestUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel blueprint request using p o s t forbidden response has a 5xx status code
func (o *CancelBlueprintRequestUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel blueprint request using p o s t forbidden response a status code equal to that given
func (o *CancelBlueprintRequestUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CancelBlueprintRequestUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /blueprint/api/blueprint-requests/{requestId}/actions/cancel][%d] cancelBlueprintRequestUsingPOSTForbidden ", 403)
}

func (o *CancelBlueprintRequestUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /blueprint/api/blueprint-requests/{requestId}/actions/cancel][%d] cancelBlueprintRequestUsingPOSTForbidden ", 403)
}

func (o *CancelBlueprintRequestUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelBlueprintRequestUsingPOSTNotFound creates a CancelBlueprintRequestUsingPOSTNotFound with default headers values
func NewCancelBlueprintRequestUsingPOSTNotFound() *CancelBlueprintRequestUsingPOSTNotFound {
	return &CancelBlueprintRequestUsingPOSTNotFound{}
}

/*
CancelBlueprintRequestUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CancelBlueprintRequestUsingPOSTNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this cancel blueprint request using p o s t not found response has a 2xx status code
func (o *CancelBlueprintRequestUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel blueprint request using p o s t not found response has a 3xx status code
func (o *CancelBlueprintRequestUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel blueprint request using p o s t not found response has a 4xx status code
func (o *CancelBlueprintRequestUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel blueprint request using p o s t not found response has a 5xx status code
func (o *CancelBlueprintRequestUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel blueprint request using p o s t not found response a status code equal to that given
func (o *CancelBlueprintRequestUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CancelBlueprintRequestUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /blueprint/api/blueprint-requests/{requestId}/actions/cancel][%d] cancelBlueprintRequestUsingPOSTNotFound  %+v", 404, o.Payload)
}

func (o *CancelBlueprintRequestUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /blueprint/api/blueprint-requests/{requestId}/actions/cancel][%d] cancelBlueprintRequestUsingPOSTNotFound  %+v", 404, o.Payload)
}

func (o *CancelBlueprintRequestUsingPOSTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelBlueprintRequestUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
