// Code generated by go-swagger; DO NOT EDIT.

package load_balancer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetLoadBalancerNetworkInterfaceReader is a Reader for the GetLoadBalancerNetworkInterface structure.
type GetLoadBalancerNetworkInterfaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLoadBalancerNetworkInterfaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLoadBalancerNetworkInterfaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetLoadBalancerNetworkInterfaceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLoadBalancerNetworkInterfaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetLoadBalancerNetworkInterfaceOK creates a GetLoadBalancerNetworkInterfaceOK with default headers values
func NewGetLoadBalancerNetworkInterfaceOK() *GetLoadBalancerNetworkInterfaceOK {
	return &GetLoadBalancerNetworkInterfaceOK{}
}

/*GetLoadBalancerNetworkInterfaceOK handles this case with default header values.

successful operation
*/
type GetLoadBalancerNetworkInterfaceOK struct {
	Payload *models.NetworkInterface
}

func (o *GetLoadBalancerNetworkInterfaceOK) Error() string {
	return fmt.Sprintf("[GET /iaas/api/load-balancers/{id}/network-interfaces/{id1}][%d] getLoadBalancerNetworkInterfaceOK  %+v", 200, o.Payload)
}

func (o *GetLoadBalancerNetworkInterfaceOK) GetPayload() *models.NetworkInterface {
	return o.Payload
}

func (o *GetLoadBalancerNetworkInterfaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkInterface)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLoadBalancerNetworkInterfaceForbidden creates a GetLoadBalancerNetworkInterfaceForbidden with default headers values
func NewGetLoadBalancerNetworkInterfaceForbidden() *GetLoadBalancerNetworkInterfaceForbidden {
	return &GetLoadBalancerNetworkInterfaceForbidden{}
}

/*GetLoadBalancerNetworkInterfaceForbidden handles this case with default header values.

Forbidden
*/
type GetLoadBalancerNetworkInterfaceForbidden struct {
}

func (o *GetLoadBalancerNetworkInterfaceForbidden) Error() string {
	return fmt.Sprintf("[GET /iaas/api/load-balancers/{id}/network-interfaces/{id1}][%d] getLoadBalancerNetworkInterfaceForbidden ", 403)
}

func (o *GetLoadBalancerNetworkInterfaceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLoadBalancerNetworkInterfaceNotFound creates a GetLoadBalancerNetworkInterfaceNotFound with default headers values
func NewGetLoadBalancerNetworkInterfaceNotFound() *GetLoadBalancerNetworkInterfaceNotFound {
	return &GetLoadBalancerNetworkInterfaceNotFound{}
}

/*GetLoadBalancerNetworkInterfaceNotFound handles this case with default header values.

Not Found
*/
type GetLoadBalancerNetworkInterfaceNotFound struct {
	Payload *models.Error
}

func (o *GetLoadBalancerNetworkInterfaceNotFound) Error() string {
	return fmt.Sprintf("[GET /iaas/api/load-balancers/{id}/network-interfaces/{id1}][%d] getLoadBalancerNetworkInterfaceNotFound  %+v", 404, o.Payload)
}

func (o *GetLoadBalancerNetworkInterfaceNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetLoadBalancerNetworkInterfaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
