// Code generated by go-swagger; DO NOT EDIT.

package load_balancer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new load balancer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for load balancer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateLoadBalancer(params *CreateLoadBalancerParams, opts ...ClientOption) (*CreateLoadBalancerAccepted, error)

	DeleteLoadBalancer(params *DeleteLoadBalancerParams, opts ...ClientOption) (*DeleteLoadBalancerAccepted, error)

	DeleteLoadBalancerOperation(params *DeleteLoadBalancerOperationParams, opts ...ClientOption) (*DeleteLoadBalancerOperationAccepted, error)

	GetLoadBalancer(params *GetLoadBalancerParams, opts ...ClientOption) (*GetLoadBalancerOK, error)

	GetLoadBalancerNetworkInterface(params *GetLoadBalancerNetworkInterfaceParams, opts ...ClientOption) (*GetLoadBalancerNetworkInterfaceOK, error)

	GetLoadBalancers(params *GetLoadBalancersParams, opts ...ClientOption) (*GetLoadBalancersOK, error)

	ScaleLoadBalancer(params *ScaleLoadBalancerParams, opts ...ClientOption) (*ScaleLoadBalancerAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateLoadBalancer creates load balancer

Create load balancer
*/
func (a *Client) CreateLoadBalancer(params *CreateLoadBalancerParams, opts ...ClientOption) (*CreateLoadBalancerAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLoadBalancerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createLoadBalancer",
		Method:             "POST",
		PathPattern:        "/iaas/api/load-balancers",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLoadBalancerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLoadBalancerAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createLoadBalancer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLoadBalancer deletes load balancer

Delete load balancer with a given id
*/
func (a *Client) DeleteLoadBalancer(params *DeleteLoadBalancerParams, opts ...ClientOption) (*DeleteLoadBalancerAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLoadBalancerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteLoadBalancer",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/load-balancers/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLoadBalancerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLoadBalancerAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteLoadBalancer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLoadBalancerOperation deletes operation for load balancer

Second day delete operation for load balancer
*/
func (a *Client) DeleteLoadBalancerOperation(params *DeleteLoadBalancerOperationParams, opts ...ClientOption) (*DeleteLoadBalancerOperationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLoadBalancerOperationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteLoadBalancerOperation",
		Method:             "POST",
		PathPattern:        "/iaas/api/load-balancers/{id}/operations/delete",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLoadBalancerOperationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLoadBalancerOperationAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteLoadBalancerOperation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLoadBalancer gets load balancer

Get load balancer with a given id
*/
func (a *Client) GetLoadBalancer(params *GetLoadBalancerParams, opts ...ClientOption) (*GetLoadBalancerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoadBalancerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLoadBalancer",
		Method:             "GET",
		PathPattern:        "/iaas/api/load-balancers/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLoadBalancerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLoadBalancerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLoadBalancer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLoadBalancerNetworkInterface gets load balancer network interface

Get network interface with a given id for specific load balancer
*/
func (a *Client) GetLoadBalancerNetworkInterface(params *GetLoadBalancerNetworkInterfaceParams, opts ...ClientOption) (*GetLoadBalancerNetworkInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoadBalancerNetworkInterfaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLoadBalancerNetworkInterface",
		Method:             "GET",
		PathPattern:        "/iaas/api/load-balancers/{id}/network-interfaces/{id1}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLoadBalancerNetworkInterfaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLoadBalancerNetworkInterfaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLoadBalancerNetworkInterface: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLoadBalancers gets load balancers

Get all load balancers
*/
func (a *Client) GetLoadBalancers(params *GetLoadBalancersParams, opts ...ClientOption) (*GetLoadBalancersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoadBalancersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLoadBalancers",
		Method:             "GET",
		PathPattern:        "/iaas/api/load-balancers",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLoadBalancersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLoadBalancersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLoadBalancers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ScaleLoadBalancer scales operation for load balancer

Second day scale operation for load balancer
*/
func (a *Client) ScaleLoadBalancer(params *ScaleLoadBalancerParams, opts ...ClientOption) (*ScaleLoadBalancerAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScaleLoadBalancerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "scaleLoadBalancer",
		Method:             "POST",
		PathPattern:        "/iaas/api/load-balancers/{id}/operations/scale",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScaleLoadBalancerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScaleLoadBalancerAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for scaleLoadBalancer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
