// Code generated by go-swagger; DO NOT EDIT.

package network_ip_range

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetExternalIPBlockReader is a Reader for the GetExternalIPBlock structure.
type GetExternalIPBlockReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExternalIPBlockReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExternalIPBlockOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetExternalIPBlockForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetExternalIPBlockNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetExternalIPBlockOK creates a GetExternalIPBlockOK with default headers values
func NewGetExternalIPBlockOK() *GetExternalIPBlockOK {
	return &GetExternalIPBlockOK{}
}

/*
GetExternalIPBlockOK describes a response with status code 200, with default header values.

successful operation
*/
type GetExternalIPBlockOK struct {
	Payload *models.FabricNetwork
}

// IsSuccess returns true when this get external Ip block o k response has a 2xx status code
func (o *GetExternalIPBlockOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get external Ip block o k response has a 3xx status code
func (o *GetExternalIPBlockOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get external Ip block o k response has a 4xx status code
func (o *GetExternalIPBlockOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get external Ip block o k response has a 5xx status code
func (o *GetExternalIPBlockOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get external Ip block o k response a status code equal to that given
func (o *GetExternalIPBlockOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetExternalIPBlockOK) Error() string {
	return fmt.Sprintf("[GET /iaas/api/external-ip-blocks/{id}][%d] getExternalIpBlockOK  %+v", 200, o.Payload)
}

func (o *GetExternalIPBlockOK) String() string {
	return fmt.Sprintf("[GET /iaas/api/external-ip-blocks/{id}][%d] getExternalIpBlockOK  %+v", 200, o.Payload)
}

func (o *GetExternalIPBlockOK) GetPayload() *models.FabricNetwork {
	return o.Payload
}

func (o *GetExternalIPBlockOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FabricNetwork)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExternalIPBlockForbidden creates a GetExternalIPBlockForbidden with default headers values
func NewGetExternalIPBlockForbidden() *GetExternalIPBlockForbidden {
	return &GetExternalIPBlockForbidden{}
}

/*
GetExternalIPBlockForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetExternalIPBlockForbidden struct {
	Payload *models.ServiceErrorResponse
}

// IsSuccess returns true when this get external Ip block forbidden response has a 2xx status code
func (o *GetExternalIPBlockForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get external Ip block forbidden response has a 3xx status code
func (o *GetExternalIPBlockForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get external Ip block forbidden response has a 4xx status code
func (o *GetExternalIPBlockForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get external Ip block forbidden response has a 5xx status code
func (o *GetExternalIPBlockForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get external Ip block forbidden response a status code equal to that given
func (o *GetExternalIPBlockForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetExternalIPBlockForbidden) Error() string {
	return fmt.Sprintf("[GET /iaas/api/external-ip-blocks/{id}][%d] getExternalIpBlockForbidden  %+v", 403, o.Payload)
}

func (o *GetExternalIPBlockForbidden) String() string {
	return fmt.Sprintf("[GET /iaas/api/external-ip-blocks/{id}][%d] getExternalIpBlockForbidden  %+v", 403, o.Payload)
}

func (o *GetExternalIPBlockForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *GetExternalIPBlockForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExternalIPBlockNotFound creates a GetExternalIPBlockNotFound with default headers values
func NewGetExternalIPBlockNotFound() *GetExternalIPBlockNotFound {
	return &GetExternalIPBlockNotFound{}
}

/*
GetExternalIPBlockNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetExternalIPBlockNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get external Ip block not found response has a 2xx status code
func (o *GetExternalIPBlockNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get external Ip block not found response has a 3xx status code
func (o *GetExternalIPBlockNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get external Ip block not found response has a 4xx status code
func (o *GetExternalIPBlockNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get external Ip block not found response has a 5xx status code
func (o *GetExternalIPBlockNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get external Ip block not found response a status code equal to that given
func (o *GetExternalIPBlockNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetExternalIPBlockNotFound) Error() string {
	return fmt.Sprintf("[GET /iaas/api/external-ip-blocks/{id}][%d] getExternalIpBlockNotFound  %+v", 404, o.Payload)
}

func (o *GetExternalIPBlockNotFound) String() string {
	return fmt.Sprintf("[GET /iaas/api/external-ip-blocks/{id}][%d] getExternalIpBlockNotFound  %+v", 404, o.Payload)
}

func (o *GetExternalIPBlockNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetExternalIPBlockNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
