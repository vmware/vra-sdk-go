// Code generated by go-swagger; DO NOT EDIT.

package network_ip_range

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateExternalNetworkIPRangeReader is a Reader for the UpdateExternalNetworkIPRange structure.
type UpdateExternalNetworkIPRangeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateExternalNetworkIPRangeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateExternalNetworkIPRangeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateExternalNetworkIPRangeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateExternalNetworkIPRangeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateExternalNetworkIPRangeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateExternalNetworkIPRangeOK creates a UpdateExternalNetworkIPRangeOK with default headers values
func NewUpdateExternalNetworkIPRangeOK() *UpdateExternalNetworkIPRangeOK {
	return &UpdateExternalNetworkIPRangeOK{}
}

/*
UpdateExternalNetworkIPRangeOK describes a response with status code 200, with default header values.

successful operation
*/
type UpdateExternalNetworkIPRangeOK struct {
	Payload *models.ExternalNetworkIPRange
}

// IsSuccess returns true when this update external network Ip range o k response has a 2xx status code
func (o *UpdateExternalNetworkIPRangeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update external network Ip range o k response has a 3xx status code
func (o *UpdateExternalNetworkIPRangeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update external network Ip range o k response has a 4xx status code
func (o *UpdateExternalNetworkIPRangeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update external network Ip range o k response has a 5xx status code
func (o *UpdateExternalNetworkIPRangeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update external network Ip range o k response a status code equal to that given
func (o *UpdateExternalNetworkIPRangeOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateExternalNetworkIPRangeOK) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/external-network-ip-ranges/{id}][%d] updateExternalNetworkIpRangeOK  %+v", 200, o.Payload)
}

func (o *UpdateExternalNetworkIPRangeOK) String() string {
	return fmt.Sprintf("[PATCH /iaas/api/external-network-ip-ranges/{id}][%d] updateExternalNetworkIpRangeOK  %+v", 200, o.Payload)
}

func (o *UpdateExternalNetworkIPRangeOK) GetPayload() *models.ExternalNetworkIPRange {
	return o.Payload
}

func (o *UpdateExternalNetworkIPRangeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExternalNetworkIPRange)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExternalNetworkIPRangeBadRequest creates a UpdateExternalNetworkIPRangeBadRequest with default headers values
func NewUpdateExternalNetworkIPRangeBadRequest() *UpdateExternalNetworkIPRangeBadRequest {
	return &UpdateExternalNetworkIPRangeBadRequest{}
}

/*
UpdateExternalNetworkIPRangeBadRequest describes a response with status code 400, with default header values.

Invalid Request - bad data
*/
type UpdateExternalNetworkIPRangeBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update external network Ip range bad request response has a 2xx status code
func (o *UpdateExternalNetworkIPRangeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update external network Ip range bad request response has a 3xx status code
func (o *UpdateExternalNetworkIPRangeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update external network Ip range bad request response has a 4xx status code
func (o *UpdateExternalNetworkIPRangeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update external network Ip range bad request response has a 5xx status code
func (o *UpdateExternalNetworkIPRangeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update external network Ip range bad request response a status code equal to that given
func (o *UpdateExternalNetworkIPRangeBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateExternalNetworkIPRangeBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/external-network-ip-ranges/{id}][%d] updateExternalNetworkIpRangeBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateExternalNetworkIPRangeBadRequest) String() string {
	return fmt.Sprintf("[PATCH /iaas/api/external-network-ip-ranges/{id}][%d] updateExternalNetworkIpRangeBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateExternalNetworkIPRangeBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateExternalNetworkIPRangeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExternalNetworkIPRangeForbidden creates a UpdateExternalNetworkIPRangeForbidden with default headers values
func NewUpdateExternalNetworkIPRangeForbidden() *UpdateExternalNetworkIPRangeForbidden {
	return &UpdateExternalNetworkIPRangeForbidden{}
}

/*
UpdateExternalNetworkIPRangeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateExternalNetworkIPRangeForbidden struct {
	Payload *models.ServiceErrorResponse
}

// IsSuccess returns true when this update external network Ip range forbidden response has a 2xx status code
func (o *UpdateExternalNetworkIPRangeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update external network Ip range forbidden response has a 3xx status code
func (o *UpdateExternalNetworkIPRangeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update external network Ip range forbidden response has a 4xx status code
func (o *UpdateExternalNetworkIPRangeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update external network Ip range forbidden response has a 5xx status code
func (o *UpdateExternalNetworkIPRangeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update external network Ip range forbidden response a status code equal to that given
func (o *UpdateExternalNetworkIPRangeForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateExternalNetworkIPRangeForbidden) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/external-network-ip-ranges/{id}][%d] updateExternalNetworkIpRangeForbidden  %+v", 403, o.Payload)
}

func (o *UpdateExternalNetworkIPRangeForbidden) String() string {
	return fmt.Sprintf("[PATCH /iaas/api/external-network-ip-ranges/{id}][%d] updateExternalNetworkIpRangeForbidden  %+v", 403, o.Payload)
}

func (o *UpdateExternalNetworkIPRangeForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *UpdateExternalNetworkIPRangeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExternalNetworkIPRangeNotFound creates a UpdateExternalNetworkIPRangeNotFound with default headers values
func NewUpdateExternalNetworkIPRangeNotFound() *UpdateExternalNetworkIPRangeNotFound {
	return &UpdateExternalNetworkIPRangeNotFound{}
}

/*
UpdateExternalNetworkIPRangeNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateExternalNetworkIPRangeNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update external network Ip range not found response has a 2xx status code
func (o *UpdateExternalNetworkIPRangeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update external network Ip range not found response has a 3xx status code
func (o *UpdateExternalNetworkIPRangeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update external network Ip range not found response has a 4xx status code
func (o *UpdateExternalNetworkIPRangeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update external network Ip range not found response has a 5xx status code
func (o *UpdateExternalNetworkIPRangeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update external network Ip range not found response a status code equal to that given
func (o *UpdateExternalNetworkIPRangeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateExternalNetworkIPRangeNotFound) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/external-network-ip-ranges/{id}][%d] updateExternalNetworkIpRangeNotFound  %+v", 404, o.Payload)
}

func (o *UpdateExternalNetworkIPRangeNotFound) String() string {
	return fmt.Sprintf("[PATCH /iaas/api/external-network-ip-ranges/{id}][%d] updateExternalNetworkIpRangeNotFound  %+v", 404, o.Payload)
}

func (o *UpdateExternalNetworkIPRangeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateExternalNetworkIPRangeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
