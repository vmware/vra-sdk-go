// Code generated by go-swagger; DO NOT EDIT.

package network_ip_range

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetExternalNetworkIPRangesReader is a Reader for the GetExternalNetworkIPRanges structure.
type GetExternalNetworkIPRangesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExternalNetworkIPRangesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExternalNetworkIPRangesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetExternalNetworkIPRangesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetExternalNetworkIPRangesOK creates a GetExternalNetworkIPRangesOK with default headers values
func NewGetExternalNetworkIPRangesOK() *GetExternalNetworkIPRangesOK {
	return &GetExternalNetworkIPRangesOK{}
}

/*
GetExternalNetworkIPRangesOK describes a response with status code 200, with default header values.

successful operation
*/
type GetExternalNetworkIPRangesOK struct {
	Payload *models.ExternalNetworkIPRangeResult
}

// IsSuccess returns true when this get external network Ip ranges o k response has a 2xx status code
func (o *GetExternalNetworkIPRangesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get external network Ip ranges o k response has a 3xx status code
func (o *GetExternalNetworkIPRangesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get external network Ip ranges o k response has a 4xx status code
func (o *GetExternalNetworkIPRangesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get external network Ip ranges o k response has a 5xx status code
func (o *GetExternalNetworkIPRangesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get external network Ip ranges o k response a status code equal to that given
func (o *GetExternalNetworkIPRangesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetExternalNetworkIPRangesOK) Error() string {
	return fmt.Sprintf("[GET /iaas/api/external-network-ip-ranges][%d] getExternalNetworkIpRangesOK  %+v", 200, o.Payload)
}

func (o *GetExternalNetworkIPRangesOK) String() string {
	return fmt.Sprintf("[GET /iaas/api/external-network-ip-ranges][%d] getExternalNetworkIpRangesOK  %+v", 200, o.Payload)
}

func (o *GetExternalNetworkIPRangesOK) GetPayload() *models.ExternalNetworkIPRangeResult {
	return o.Payload
}

func (o *GetExternalNetworkIPRangesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExternalNetworkIPRangeResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExternalNetworkIPRangesForbidden creates a GetExternalNetworkIPRangesForbidden with default headers values
func NewGetExternalNetworkIPRangesForbidden() *GetExternalNetworkIPRangesForbidden {
	return &GetExternalNetworkIPRangesForbidden{}
}

/*
GetExternalNetworkIPRangesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetExternalNetworkIPRangesForbidden struct {
	Payload *models.ServiceErrorResponse
}

// IsSuccess returns true when this get external network Ip ranges forbidden response has a 2xx status code
func (o *GetExternalNetworkIPRangesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get external network Ip ranges forbidden response has a 3xx status code
func (o *GetExternalNetworkIPRangesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get external network Ip ranges forbidden response has a 4xx status code
func (o *GetExternalNetworkIPRangesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get external network Ip ranges forbidden response has a 5xx status code
func (o *GetExternalNetworkIPRangesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get external network Ip ranges forbidden response a status code equal to that given
func (o *GetExternalNetworkIPRangesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetExternalNetworkIPRangesForbidden) Error() string {
	return fmt.Sprintf("[GET /iaas/api/external-network-ip-ranges][%d] getExternalNetworkIpRangesForbidden  %+v", 403, o.Payload)
}

func (o *GetExternalNetworkIPRangesForbidden) String() string {
	return fmt.Sprintf("[GET /iaas/api/external-network-ip-ranges][%d] getExternalNetworkIpRangesForbidden  %+v", 403, o.Payload)
}

func (o *GetExternalNetworkIPRangesForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *GetExternalNetworkIPRangesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
