// Code generated by go-swagger; DO NOT EDIT.

package network_ip_range

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetExternalNetworkIPRangeReader is a Reader for the GetExternalNetworkIPRange structure.
type GetExternalNetworkIPRangeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExternalNetworkIPRangeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExternalNetworkIPRangeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetExternalNetworkIPRangeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetExternalNetworkIPRangeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetExternalNetworkIPRangeOK creates a GetExternalNetworkIPRangeOK with default headers values
func NewGetExternalNetworkIPRangeOK() *GetExternalNetworkIPRangeOK {
	return &GetExternalNetworkIPRangeOK{}
}

/*GetExternalNetworkIPRangeOK handles this case with default header values.

successful operation
*/
type GetExternalNetworkIPRangeOK struct {
	Payload *models.ExternalNetworkIPRange
}

func (o *GetExternalNetworkIPRangeOK) Error() string {
	return fmt.Sprintf("[GET /iaas/api/external-network-ip-ranges/{id}][%d] getExternalNetworkIpRangeOK  %+v", 200, o.Payload)
}

func (o *GetExternalNetworkIPRangeOK) GetPayload() *models.ExternalNetworkIPRange {
	return o.Payload
}

func (o *GetExternalNetworkIPRangeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExternalNetworkIPRange)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExternalNetworkIPRangeForbidden creates a GetExternalNetworkIPRangeForbidden with default headers values
func NewGetExternalNetworkIPRangeForbidden() *GetExternalNetworkIPRangeForbidden {
	return &GetExternalNetworkIPRangeForbidden{}
}

/*GetExternalNetworkIPRangeForbidden handles this case with default header values.

Forbidden
*/
type GetExternalNetworkIPRangeForbidden struct {
}

func (o *GetExternalNetworkIPRangeForbidden) Error() string {
	return fmt.Sprintf("[GET /iaas/api/external-network-ip-ranges/{id}][%d] getExternalNetworkIpRangeForbidden ", 403)
}

func (o *GetExternalNetworkIPRangeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExternalNetworkIPRangeNotFound creates a GetExternalNetworkIPRangeNotFound with default headers values
func NewGetExternalNetworkIPRangeNotFound() *GetExternalNetworkIPRangeNotFound {
	return &GetExternalNetworkIPRangeNotFound{}
}

/*GetExternalNetworkIPRangeNotFound handles this case with default header values.

Not Found
*/
type GetExternalNetworkIPRangeNotFound struct {
	Payload *models.Error
}

func (o *GetExternalNetworkIPRangeNotFound) Error() string {
	return fmt.Sprintf("[GET /iaas/api/external-network-ip-ranges/{id}][%d] getExternalNetworkIpRangeNotFound  %+v", 404, o.Payload)
}

func (o *GetExternalNetworkIPRangeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetExternalNetworkIPRangeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
