// Code generated by go-swagger; DO NOT EDIT.

package network_ip_range

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetInternalNetworkIPRangesReader is a Reader for the GetInternalNetworkIPRanges structure.
type GetInternalNetworkIPRangesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInternalNetworkIPRangesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInternalNetworkIPRangesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetInternalNetworkIPRangesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInternalNetworkIPRangesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetInternalNetworkIPRangesOK creates a GetInternalNetworkIPRangesOK with default headers values
func NewGetInternalNetworkIPRangesOK() *GetInternalNetworkIPRangesOK {
	return &GetInternalNetworkIPRangesOK{}
}

/*GetInternalNetworkIPRangesOK handles this case with default header values.

successful operation
*/
type GetInternalNetworkIPRangesOK struct {
	Payload *models.NetworkIPRangeResult
}

func (o *GetInternalNetworkIPRangesOK) Error() string {
	return fmt.Sprintf("[GET /iaas/api/network-ip-ranges][%d] getInternalNetworkIpRangesOK  %+v", 200, o.Payload)
}

func (o *GetInternalNetworkIPRangesOK) GetPayload() *models.NetworkIPRangeResult {
	return o.Payload
}

func (o *GetInternalNetworkIPRangesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkIPRangeResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternalNetworkIPRangesForbidden creates a GetInternalNetworkIPRangesForbidden with default headers values
func NewGetInternalNetworkIPRangesForbidden() *GetInternalNetworkIPRangesForbidden {
	return &GetInternalNetworkIPRangesForbidden{}
}

/*GetInternalNetworkIPRangesForbidden handles this case with default header values.

Forbidden
*/
type GetInternalNetworkIPRangesForbidden struct {
}

func (o *GetInternalNetworkIPRangesForbidden) Error() string {
	return fmt.Sprintf("[GET /iaas/api/network-ip-ranges][%d] getInternalNetworkIpRangesForbidden ", 403)
}

func (o *GetInternalNetworkIPRangesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInternalNetworkIPRangesNotFound creates a GetInternalNetworkIPRangesNotFound with default headers values
func NewGetInternalNetworkIPRangesNotFound() *GetInternalNetworkIPRangesNotFound {
	return &GetInternalNetworkIPRangesNotFound{}
}

/*GetInternalNetworkIPRangesNotFound handles this case with default header values.

Not Found
*/
type GetInternalNetworkIPRangesNotFound struct {
	Payload *models.Error
}

func (o *GetInternalNetworkIPRangesNotFound) Error() string {
	return fmt.Sprintf("[GET /iaas/api/network-ip-ranges][%d] getInternalNetworkIpRangesNotFound  %+v", 404, o.Payload)
}

func (o *GetInternalNetworkIPRangesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetInternalNetworkIPRangesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
