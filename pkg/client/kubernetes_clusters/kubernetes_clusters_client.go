// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new kubernetes clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for kubernetes clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AssignStatusUsingGET(params *AssignStatusUsingGETParams, opts ...ClientOption) (*AssignStatusUsingGETOK, error)

	AssignUsingPOST(params *AssignUsingPOSTParams, opts ...ClientOption) (*AssignUsingPOSTOK, error)

	DeleteClusterUsingDELETE(params *DeleteClusterUsingDELETEParams, opts ...ClientOption) (*DeleteClusterUsingDELETEOK, error)

	DestroyClusterUsingDELETE(params *DestroyClusterUsingDELETEParams, opts ...ClientOption) (*DestroyClusterUsingDELETEOK, error)

	GetClusterUsingGET(params *GetClusterUsingGETParams, opts ...ClientOption) (*GetClusterUsingGETOK, error)

	GetKubeConfigUsingGET(params *GetKubeConfigUsingGETParams, opts ...ClientOption) (*GetKubeConfigUsingGETOK, error)

	GetNodesUsingGET(params *GetNodesUsingGETParams, opts ...ClientOption) (*GetNodesUsingGETOK, error)

	ListUsingGET(params *ListUsingGETParams, opts ...ClientOption) (*ListUsingGETOK, error)

	OnboardUsingPOST(params *OnboardUsingPOSTParams, opts ...ClientOption) (*OnboardUsingPOSTOK, error)

	UpdateUsingPUT1(params *UpdateUsingPUT1Params, opts ...ClientOption) (*UpdateUsingPUT1OK, error)

	ValidateUsingPUT(params *ValidateUsingPUTParams, opts ...ClientOption) (*ValidateUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AssignStatusUsingGET retrieves assign status

Retrieve assign status.
*/
func (a *Client) AssignStatusUsingGET(params *AssignStatusUsingGETParams, opts ...ClientOption) (*AssignStatusUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignStatusUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignStatusUsingGET",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/k8s/clusters/assign/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignStatusUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignStatusUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignStatusUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssignUsingPOST assigns k8s cluster to cluster cluster group

Assign K8s cluster to cluster cluster group.
*/
func (a *Client) AssignUsingPOST(params *AssignUsingPOSTParams, opts ...ClientOption) (*AssignUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignUsingPOST",
		Method:             "POST",
		PathPattern:        "/cmx/api/resources/k8s/clusters/assign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteClusterUsingDELETE deletes a k8 s cluster

Delete a K8S Cluster by provided id
*/
func (a *Client) DeleteClusterUsingDELETE(params *DeleteClusterUsingDELETEParams, opts ...ClientOption) (*DeleteClusterUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClusterUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cmx/api/resources/k8s/clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClusterUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DestroyClusterUsingDELETE destroys a k8 s cluster

Destroy a K8S Cluster by provided id
*/
func (a *Client) DestroyClusterUsingDELETE(params *DestroyClusterUsingDELETEParams, opts ...ClientOption) (*DestroyClusterUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestroyClusterUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "destroyClusterUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/cmx/api/resources/k8s/clusters/{id}/destroy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DestroyClusterUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DestroyClusterUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for destroyClusterUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterUsingGET finds a k8 s cluster by id

Retrieve a K8S by id
*/
func (a *Client) GetClusterUsingGET(params *GetClusterUsingGETParams, opts ...ClientOption) (*GetClusterUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterUsingGET",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/k8s/clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKubeConfigUsingGET gets a kube config for a k8 s cluster

Get a KubeConfig for a K8S Cluster by provided id
*/
func (a *Client) GetKubeConfigUsingGET(params *GetKubeConfigUsingGETParams, opts ...ClientOption) (*GetKubeConfigUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubeConfigUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKubeConfigUsingGET",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/k8s/clusters/{id}/kube-config",
		ProducesMediaTypes: []string{"application/yaml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKubeConfigUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubeConfigUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKubeConfigUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNodesUsingGET gets nodes of k8 s clusters

Get nodes of K8S Clusters by provided id
*/
func (a *Client) GetNodesUsingGET(params *GetNodesUsingGETParams, opts ...ClientOption) (*GetNodesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNodesUsingGET",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/k8s/clusters/{id}/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNodesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNodesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListUsingGET gets all registered k8 s clusters

Retrieve the managed K8S Clusters
*/
func (a *Client) ListUsingGET(params *ListUsingGETParams, opts ...ClientOption) (*ListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listUsingGET",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/k8s/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OnboardUsingPOST onboards a k8 s cluster

Onboard a K8S Cluster entity
*/
func (a *Client) OnboardUsingPOST(params *OnboardUsingPOSTParams, opts ...ClientOption) (*OnboardUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOnboardUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "onboardUsingPOST",
		Method:             "POST",
		PathPattern:        "/cmx/api/resources/k8s/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OnboardUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OnboardUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for onboardUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUsingPUT1 updates a k8 s cluster

Update K8S Cluster by id
*/
func (a *Client) UpdateUsingPUT1(params *UpdateUsingPUT1Params, opts ...ClientOption) (*UpdateUsingPUT1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/cmx/api/resources/k8s/clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUsingPUT1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPUT1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPUT_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateUsingPUT validates provided k8 s cluster entity

Validate provided K8S Cluster entity
*/
func (a *Client) ValidateUsingPUT(params *ValidateUsingPUTParams, opts ...ClientOption) (*ValidateUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/cmx/api/resources/k8s/clusters/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
