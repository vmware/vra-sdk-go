// Code generated by go-swagger; DO NOT EDIT.

package data_collector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new data collector API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for data collector API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDataCollector(params *CreateDataCollectorParams, opts ...ClientOption) (*CreateDataCollectorCreated, error)

	DeleteDataCollector(params *DeleteDataCollectorParams, opts ...ClientOption) (*DeleteDataCollectorNoContent, error)

	GetDataCollector(params *GetDataCollectorParams, opts ...ClientOption) (*GetDataCollectorOK, error)

	GetDataCollectors(params *GetDataCollectorsParams, opts ...ClientOption) (*GetDataCollectorsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateDataCollector creates data collector

	Create a new Data Collector.

Note: Data collector endpoints are not available in vRA on-prem release.
*/
func (a *Client) CreateDataCollector(params *CreateDataCollectorParams, opts ...ClientOption) (*CreateDataCollectorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDataCollectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDataCollector",
		Method:             "POST",
		PathPattern:        "/iaas/api/data-collectors",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDataCollectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDataCollectorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDataCollector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteDataCollector deletes data collector

	Delete Data Collector with a given id.

Note: Data collector endpoints are not available in vRA on-prem release.
*/
func (a *Client) DeleteDataCollector(params *DeleteDataCollectorParams, opts ...ClientOption) (*DeleteDataCollectorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDataCollectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDataCollector",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/data-collectors/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDataCollectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDataCollectorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDataCollector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDataCollector gets data collector

	Get Data Collector with a given id.

Note: Data collector endpoints are not available in vRA on-prem release.
*/
func (a *Client) GetDataCollector(params *GetDataCollectorParams, opts ...ClientOption) (*GetDataCollectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataCollectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDataCollector",
		Method:             "GET",
		PathPattern:        "/iaas/api/data-collectors/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataCollectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataCollectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDataCollector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDataCollectors gets data collectors

	Get all Data Collectors.

Note: Data collector endpoints are not available in vRA on-prem release.
*/
func (a *Client) GetDataCollectors(params *GetDataCollectorsParams, opts ...ClientOption) (*GetDataCollectorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataCollectorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDataCollectors",
		Method:             "GET",
		PathPattern:        "/iaas/api/data-collectors",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataCollectorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataCollectorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDataCollectors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
