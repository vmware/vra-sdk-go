// Code generated by go-swagger; DO NOT EDIT.

package disk

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// AttachMachineDiskReader is a Reader for the AttachMachineDisk structure.
type AttachMachineDiskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AttachMachineDiskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAttachMachineDiskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAttachMachineDiskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAttachMachineDiskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAttachMachineDiskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAttachMachineDiskOK creates a AttachMachineDiskOK with default headers values
func NewAttachMachineDiskOK() *AttachMachineDiskOK {
	return &AttachMachineDiskOK{}
}

/*AttachMachineDiskOK handles this case with default header values.

successful operation
*/
type AttachMachineDiskOK struct {
	Payload *models.RequestTracker
}

func (o *AttachMachineDiskOK) Error() string {
	return fmt.Sprintf("[POST /iaas/api/machines/{id}/disks][%d] attachMachineDiskOK  %+v", 200, o.Payload)
}

func (o *AttachMachineDiskOK) GetPayload() *models.RequestTracker {
	return o.Payload
}

func (o *AttachMachineDiskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestTracker)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachMachineDiskBadRequest creates a AttachMachineDiskBadRequest with default headers values
func NewAttachMachineDiskBadRequest() *AttachMachineDiskBadRequest {
	return &AttachMachineDiskBadRequest{}
}

/*AttachMachineDiskBadRequest handles this case with default header values.

Invalid Request - bad data
*/
type AttachMachineDiskBadRequest struct {
}

func (o *AttachMachineDiskBadRequest) Error() string {
	return fmt.Sprintf("[POST /iaas/api/machines/{id}/disks][%d] attachMachineDiskBadRequest ", 400)
}

func (o *AttachMachineDiskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachMachineDiskForbidden creates a AttachMachineDiskForbidden with default headers values
func NewAttachMachineDiskForbidden() *AttachMachineDiskForbidden {
	return &AttachMachineDiskForbidden{}
}

/*AttachMachineDiskForbidden handles this case with default header values.

Forbidden
*/
type AttachMachineDiskForbidden struct {
}

func (o *AttachMachineDiskForbidden) Error() string {
	return fmt.Sprintf("[POST /iaas/api/machines/{id}/disks][%d] attachMachineDiskForbidden ", 403)
}

func (o *AttachMachineDiskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachMachineDiskNotFound creates a AttachMachineDiskNotFound with default headers values
func NewAttachMachineDiskNotFound() *AttachMachineDiskNotFound {
	return &AttachMachineDiskNotFound{}
}

/*AttachMachineDiskNotFound handles this case with default header values.

Not Found
*/
type AttachMachineDiskNotFound struct {
}

func (o *AttachMachineDiskNotFound) Error() string {
	return fmt.Sprintf("[POST /iaas/api/machines/{id}/disks][%d] attachMachineDiskNotFound ", 404)
}

func (o *AttachMachineDiskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
