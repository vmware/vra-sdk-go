// Code generated by go-swagger; DO NOT EDIT.

package disk

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new disk API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for disk API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PromoteDisk(params *PromoteDiskParams, opts ...ClientOption) (*PromoteDiskAccepted, error)

	AttachMachineDisk(params *AttachMachineDiskParams, opts ...ClientOption) (*AttachMachineDiskOK, error)

	CreateBlockDevice(params *CreateBlockDeviceParams, opts ...ClientOption) (*CreateBlockDeviceAccepted, error)

	CreateBlockDeviceSnapshot(params *CreateBlockDeviceSnapshotParams, opts ...ClientOption) (*CreateBlockDeviceSnapshotAccepted, *CreateBlockDeviceSnapshotNoContent, error)

	DeleteBlockDevice(params *DeleteBlockDeviceParams, opts ...ClientOption) (*DeleteBlockDeviceAccepted, *DeleteBlockDeviceNoContent, error)

	DeleteBlockDeviceSnapshot(params *DeleteBlockDeviceSnapshotParams, opts ...ClientOption) (*DeleteBlockDeviceSnapshotAccepted, *DeleteBlockDeviceSnapshotNoContent, error)

	DeleteMachineDisk(params *DeleteMachineDiskParams, opts ...ClientOption) (*DeleteMachineDiskAccepted, *DeleteMachineDiskNoContent, error)

	GetBlockDevice(params *GetBlockDeviceParams, opts ...ClientOption) (*GetBlockDeviceOK, error)

	GetBlockDevices(params *GetBlockDevicesParams, opts ...ClientOption) (*GetBlockDevicesOK, error)

	GetDiskSnapshot(params *GetDiskSnapshotParams, opts ...ClientOption) (*GetDiskSnapshotOK, error)

	GetDiskSnapshots(params *GetDiskSnapshotsParams, opts ...ClientOption) (*GetDiskSnapshotsOK, error)

	GetMachineDisk(params *GetMachineDiskParams, opts ...ClientOption) (*GetMachineDiskOK, error)

	GetMachineDisks(params *GetMachineDisksParams, opts ...ClientOption) (*GetMachineDisksOK, error)

	ResizeBlockDevice(params *ResizeBlockDeviceParams, opts ...ClientOption) (*ResizeBlockDeviceAccepted, *ResizeBlockDeviceNoContent, error)

	RevertDiskSnapshot(params *RevertDiskSnapshotParams, opts ...ClientOption) (*RevertDiskSnapshotAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PromoteDisk promotes operation on disk

  Second day promote operation on disk. Applicable for vSphere Block Devices only
*/
func (a *Client) PromoteDisk(params *PromoteDiskParams, opts ...ClientOption) (*PromoteDiskAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPromoteDiskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PromoteDisk",
		Method:             "POST",
		PathPattern:        "/iaas/api/block-devices/{id}/operations/promote",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PromoteDiskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PromoteDiskAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PromoteDisk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AttachMachineDisk attaches machine disk

  Attach a disk to a machine.
*/
func (a *Client) AttachMachineDisk(params *AttachMachineDiskParams, opts ...ClientOption) (*AttachMachineDiskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachMachineDiskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "attachMachineDisk",
		Method:             "POST",
		PathPattern:        "/iaas/api/machines/{id}/disks",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AttachMachineDiskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttachMachineDiskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for attachMachineDisk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateBlockDevice creates block device

  Following disk custom properties can be passed while creating a block device:

    1. dataStore: Defines name of the datastore in which the disk has to be provisioned.
    2. storagePolicy: Defines name of the storage policy in which the disk has to be provisioned. If name of the datastore is specified in the custom properties then, datastore takes precedence.
    3. provisioningType: Defines the type of provisioning. For eg. thick/thin.
    4. resourceGroupName: Defines the Azure resource group name where the disk needs to be provisioned.
*/
func (a *Client) CreateBlockDevice(params *CreateBlockDeviceParams, opts ...ClientOption) (*CreateBlockDeviceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlockDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBlockDevice",
		Method:             "POST",
		PathPattern:        "/iaas/api/block-devices",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBlockDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBlockDeviceAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBlockDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateBlockDeviceSnapshot creates snapshot operation for block device

  Second day create snapshot operation for Block device
*/
func (a *Client) CreateBlockDeviceSnapshot(params *CreateBlockDeviceSnapshotParams, opts ...ClientOption) (*CreateBlockDeviceSnapshotAccepted, *CreateBlockDeviceSnapshotNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlockDeviceSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBlockDeviceSnapshot",
		Method:             "POST",
		PathPattern:        "/iaas/api/block-devices/{id}/operations/snapshots",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBlockDeviceSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateBlockDeviceSnapshotAccepted:
		return value, nil, nil
	case *CreateBlockDeviceSnapshotNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for disk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBlockDevice deletes a block device

  Delete a BlockDevice
1. A block device cannot be deleted when attached to a machine.
2. A block device with persistent property set to 'false' is deleted.
3. A block device with persistent property set to 'true' needs an additional parameter 'purge' to be set to true, for deletion.
*/
func (a *Client) DeleteBlockDevice(params *DeleteBlockDeviceParams, opts ...ClientOption) (*DeleteBlockDeviceAccepted, *DeleteBlockDeviceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBlockDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBlockDevice",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/block-devices/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBlockDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteBlockDeviceAccepted:
		return value, nil, nil
	case *DeleteBlockDeviceNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for disk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBlockDeviceSnapshot deletes snapshot operation for block device

  Second day delete snapshot operation for Block device
*/
func (a *Client) DeleteBlockDeviceSnapshot(params *DeleteBlockDeviceSnapshotParams, opts ...ClientOption) (*DeleteBlockDeviceSnapshotAccepted, *DeleteBlockDeviceSnapshotNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBlockDeviceSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBlockDeviceSnapshot",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/block-devices/{id}/snapshots/{id1}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBlockDeviceSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteBlockDeviceSnapshotAccepted:
		return value, nil, nil
	case *DeleteBlockDeviceSnapshotNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for disk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMachineDisk deletes machine disk

  Remove a disk from a given machine.
*/
func (a *Client) DeleteMachineDisk(params *DeleteMachineDiskParams, opts ...ClientOption) (*DeleteMachineDiskAccepted, *DeleteMachineDiskNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMachineDiskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMachineDisk",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/machines/{id}/disks/{diskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMachineDiskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteMachineDiskAccepted:
		return value, nil, nil
	case *DeleteMachineDiskNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for disk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBlockDevice gets block device

  Get a single BlockDevice
*/
func (a *Client) GetBlockDevice(params *GetBlockDeviceParams, opts ...ClientOption) (*GetBlockDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBlockDevice",
		Method:             "GET",
		PathPattern:        "/iaas/api/block-devices/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlockDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlockDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBlockDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBlockDevices gets block devices

  Get all BlockDevices
*/
func (a *Client) GetBlockDevices(params *GetBlockDevicesParams, opts ...ClientOption) (*GetBlockDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBlockDevices",
		Method:             "GET",
		PathPattern:        "/iaas/api/block-devices",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlockDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlockDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBlockDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDiskSnapshot gets disk snapshot

  Get snapshot with a given id for specific disk
*/
func (a *Client) GetDiskSnapshot(params *GetDiskSnapshotParams, opts ...ClientOption) (*GetDiskSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiskSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDiskSnapshot",
		Method:             "GET",
		PathPattern:        "/iaas/api/block-devices/{id}/snapshots/{id1}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDiskSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiskSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDiskSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDiskSnapshots gets disk snapshots information

  Get disk snapshots information
*/
func (a *Client) GetDiskSnapshots(params *GetDiskSnapshotsParams, opts ...ClientOption) (*GetDiskSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiskSnapshotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDiskSnapshots",
		Method:             "GET",
		PathPattern:        "/iaas/api/block-devices/{id}/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDiskSnapshotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiskSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDiskSnapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMachineDisk gets machine disk

  Get disk with a given id for specific machine
*/
func (a *Client) GetMachineDisk(params *GetMachineDiskParams, opts ...ClientOption) (*GetMachineDiskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachineDiskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMachineDisk",
		Method:             "GET",
		PathPattern:        "/iaas/api/machines/{id}/disks/{diskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMachineDiskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMachineDiskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMachineDisk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMachineDisks gets machine disks

  Get all machine disks
*/
func (a *Client) GetMachineDisks(params *GetMachineDisksParams, opts ...ClientOption) (*GetMachineDisksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMachineDisksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMachineDisks",
		Method:             "GET",
		PathPattern:        "/iaas/api/machines/{id}/disks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMachineDisksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMachineDisksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMachineDisks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResizeBlockDevice resizes block device

  Resize operation on block device.
*/
func (a *Client) ResizeBlockDevice(params *ResizeBlockDeviceParams, opts ...ClientOption) (*ResizeBlockDeviceAccepted, *ResizeBlockDeviceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResizeBlockDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resizeBlockDevice",
		Method:             "POST",
		PathPattern:        "/iaas/api/block-devices/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResizeBlockDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ResizeBlockDeviceAccepted:
		return value, nil, nil
	case *ResizeBlockDeviceNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for disk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevertDiskSnapshot reverts snapshot operation for block device

  Second day revert snapshot operation for Block device
*/
func (a *Client) RevertDiskSnapshot(params *RevertDiskSnapshotParams, opts ...ClientOption) (*RevertDiskSnapshotAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevertDiskSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revertDiskSnapshot",
		Method:             "POST",
		PathPattern:        "/iaas/api/block-devices/{id}/operations/revert",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevertDiskSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevertDiskSnapshotAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revertDiskSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
