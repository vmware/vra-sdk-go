// Code generated by go-swagger; DO NOT EDIT.

package disk

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// RevertDiskSnapshotReader is a Reader for the RevertDiskSnapshot structure.
type RevertDiskSnapshotReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RevertDiskSnapshotReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRevertDiskSnapshotOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRevertDiskSnapshotForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRevertDiskSnapshotNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRevertDiskSnapshotOK creates a RevertDiskSnapshotOK with default headers values
func NewRevertDiskSnapshotOK() *RevertDiskSnapshotOK {
	return &RevertDiskSnapshotOK{}
}

/*RevertDiskSnapshotOK handles this case with default header values.

successful operation
*/
type RevertDiskSnapshotOK struct {
	Payload *models.RequestTracker
}

func (o *RevertDiskSnapshotOK) Error() string {
	return fmt.Sprintf("[POST /iaas/api/block-devices/{id}/operations/revert][%d] revertDiskSnapshotOK  %+v", 200, o.Payload)
}

func (o *RevertDiskSnapshotOK) GetPayload() *models.RequestTracker {
	return o.Payload
}

func (o *RevertDiskSnapshotOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestTracker)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevertDiskSnapshotForbidden creates a RevertDiskSnapshotForbidden with default headers values
func NewRevertDiskSnapshotForbidden() *RevertDiskSnapshotForbidden {
	return &RevertDiskSnapshotForbidden{}
}

/*RevertDiskSnapshotForbidden handles this case with default header values.

Forbidden
*/
type RevertDiskSnapshotForbidden struct {
}

func (o *RevertDiskSnapshotForbidden) Error() string {
	return fmt.Sprintf("[POST /iaas/api/block-devices/{id}/operations/revert][%d] revertDiskSnapshotForbidden ", 403)
}

func (o *RevertDiskSnapshotForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRevertDiskSnapshotNotFound creates a RevertDiskSnapshotNotFound with default headers values
func NewRevertDiskSnapshotNotFound() *RevertDiskSnapshotNotFound {
	return &RevertDiskSnapshotNotFound{}
}

/*RevertDiskSnapshotNotFound handles this case with default header values.

Not Found
*/
type RevertDiskSnapshotNotFound struct {
	Payload *models.Error
}

func (o *RevertDiskSnapshotNotFound) Error() string {
	return fmt.Sprintf("[POST /iaas/api/block-devices/{id}/operations/revert][%d] revertDiskSnapshotNotFound  %+v", 404, o.Payload)
}

func (o *RevertDiskSnapshotNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevertDiskSnapshotNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
