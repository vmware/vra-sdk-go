// Code generated by go-swagger; DO NOT EDIT.

package pricing_card_assignments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetMeteringPolicyAssignmentUsingGET2Reader is a Reader for the GetMeteringPolicyAssignmentUsingGET2 structure.
type GetMeteringPolicyAssignmentUsingGET2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMeteringPolicyAssignmentUsingGET2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMeteringPolicyAssignmentUsingGET2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetMeteringPolicyAssignmentUsingGET2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMeteringPolicyAssignmentUsingGET2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetMeteringPolicyAssignmentUsingGET2OK creates a GetMeteringPolicyAssignmentUsingGET2OK with default headers values
func NewGetMeteringPolicyAssignmentUsingGET2OK() *GetMeteringPolicyAssignmentUsingGET2OK {
	return &GetMeteringPolicyAssignmentUsingGET2OK{}
}

/*
GetMeteringPolicyAssignmentUsingGET2OK describes a response with status code 200, with default header values.

OK
*/
type GetMeteringPolicyAssignmentUsingGET2OK struct {
	Payload *models.MeteringPolicyAssignment
}

// IsSuccess returns true when this get metering policy assignment using g e t2 o k response has a 2xx status code
func (o *GetMeteringPolicyAssignmentUsingGET2OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get metering policy assignment using g e t2 o k response has a 3xx status code
func (o *GetMeteringPolicyAssignmentUsingGET2OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get metering policy assignment using g e t2 o k response has a 4xx status code
func (o *GetMeteringPolicyAssignmentUsingGET2OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get metering policy assignment using g e t2 o k response has a 5xx status code
func (o *GetMeteringPolicyAssignmentUsingGET2OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get metering policy assignment using g e t2 o k response a status code equal to that given
func (o *GetMeteringPolicyAssignmentUsingGET2OK) IsCode(code int) bool {
	return code == 200
}

func (o *GetMeteringPolicyAssignmentUsingGET2OK) Error() string {
	return fmt.Sprintf("[GET /price/api/private/pricing-card-assignments/{id}][%d] getMeteringPolicyAssignmentUsingGET2OK  %+v", 200, o.Payload)
}

func (o *GetMeteringPolicyAssignmentUsingGET2OK) String() string {
	return fmt.Sprintf("[GET /price/api/private/pricing-card-assignments/{id}][%d] getMeteringPolicyAssignmentUsingGET2OK  %+v", 200, o.Payload)
}

func (o *GetMeteringPolicyAssignmentUsingGET2OK) GetPayload() *models.MeteringPolicyAssignment {
	return o.Payload
}

func (o *GetMeteringPolicyAssignmentUsingGET2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MeteringPolicyAssignment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMeteringPolicyAssignmentUsingGET2Unauthorized creates a GetMeteringPolicyAssignmentUsingGET2Unauthorized with default headers values
func NewGetMeteringPolicyAssignmentUsingGET2Unauthorized() *GetMeteringPolicyAssignmentUsingGET2Unauthorized {
	return &GetMeteringPolicyAssignmentUsingGET2Unauthorized{}
}

/*
GetMeteringPolicyAssignmentUsingGET2Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetMeteringPolicyAssignmentUsingGET2Unauthorized struct {
}

// IsSuccess returns true when this get metering policy assignment using g e t2 unauthorized response has a 2xx status code
func (o *GetMeteringPolicyAssignmentUsingGET2Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get metering policy assignment using g e t2 unauthorized response has a 3xx status code
func (o *GetMeteringPolicyAssignmentUsingGET2Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get metering policy assignment using g e t2 unauthorized response has a 4xx status code
func (o *GetMeteringPolicyAssignmentUsingGET2Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get metering policy assignment using g e t2 unauthorized response has a 5xx status code
func (o *GetMeteringPolicyAssignmentUsingGET2Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get metering policy assignment using g e t2 unauthorized response a status code equal to that given
func (o *GetMeteringPolicyAssignmentUsingGET2Unauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetMeteringPolicyAssignmentUsingGET2Unauthorized) Error() string {
	return fmt.Sprintf("[GET /price/api/private/pricing-card-assignments/{id}][%d] getMeteringPolicyAssignmentUsingGET2Unauthorized ", 401)
}

func (o *GetMeteringPolicyAssignmentUsingGET2Unauthorized) String() string {
	return fmt.Sprintf("[GET /price/api/private/pricing-card-assignments/{id}][%d] getMeteringPolicyAssignmentUsingGET2Unauthorized ", 401)
}

func (o *GetMeteringPolicyAssignmentUsingGET2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetMeteringPolicyAssignmentUsingGET2NotFound creates a GetMeteringPolicyAssignmentUsingGET2NotFound with default headers values
func NewGetMeteringPolicyAssignmentUsingGET2NotFound() *GetMeteringPolicyAssignmentUsingGET2NotFound {
	return &GetMeteringPolicyAssignmentUsingGET2NotFound{}
}

/*
GetMeteringPolicyAssignmentUsingGET2NotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetMeteringPolicyAssignmentUsingGET2NotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get metering policy assignment using g e t2 not found response has a 2xx status code
func (o *GetMeteringPolicyAssignmentUsingGET2NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get metering policy assignment using g e t2 not found response has a 3xx status code
func (o *GetMeteringPolicyAssignmentUsingGET2NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get metering policy assignment using g e t2 not found response has a 4xx status code
func (o *GetMeteringPolicyAssignmentUsingGET2NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get metering policy assignment using g e t2 not found response has a 5xx status code
func (o *GetMeteringPolicyAssignmentUsingGET2NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get metering policy assignment using g e t2 not found response a status code equal to that given
func (o *GetMeteringPolicyAssignmentUsingGET2NotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetMeteringPolicyAssignmentUsingGET2NotFound) Error() string {
	return fmt.Sprintf("[GET /price/api/private/pricing-card-assignments/{id}][%d] getMeteringPolicyAssignmentUsingGET2NotFound  %+v", 404, o.Payload)
}

func (o *GetMeteringPolicyAssignmentUsingGET2NotFound) String() string {
	return fmt.Sprintf("[GET /price/api/private/pricing-card-assignments/{id}][%d] getMeteringPolicyAssignmentUsingGET2NotFound  %+v", 404, o.Payload)
}

func (o *GetMeteringPolicyAssignmentUsingGET2NotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetMeteringPolicyAssignmentUsingGET2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
