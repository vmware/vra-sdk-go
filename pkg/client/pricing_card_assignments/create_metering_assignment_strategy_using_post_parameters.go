// Code generated by go-swagger; DO NOT EDIT.

package pricing_card_assignments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// NewCreateMeteringAssignmentStrategyUsingPOSTParams creates a new CreateMeteringAssignmentStrategyUsingPOSTParams object
// with the default values initialized.
func NewCreateMeteringAssignmentStrategyUsingPOSTParams() *CreateMeteringAssignmentStrategyUsingPOSTParams {
	var ()
	return &CreateMeteringAssignmentStrategyUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateMeteringAssignmentStrategyUsingPOSTParamsWithTimeout creates a new CreateMeteringAssignmentStrategyUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateMeteringAssignmentStrategyUsingPOSTParamsWithTimeout(timeout time.Duration) *CreateMeteringAssignmentStrategyUsingPOSTParams {
	var ()
	return &CreateMeteringAssignmentStrategyUsingPOSTParams{

		timeout: timeout,
	}
}

// NewCreateMeteringAssignmentStrategyUsingPOSTParamsWithContext creates a new CreateMeteringAssignmentStrategyUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateMeteringAssignmentStrategyUsingPOSTParamsWithContext(ctx context.Context) *CreateMeteringAssignmentStrategyUsingPOSTParams {
	var ()
	return &CreateMeteringAssignmentStrategyUsingPOSTParams{

		Context: ctx,
	}
}

// NewCreateMeteringAssignmentStrategyUsingPOSTParamsWithHTTPClient creates a new CreateMeteringAssignmentStrategyUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateMeteringAssignmentStrategyUsingPOSTParamsWithHTTPClient(client *http.Client) *CreateMeteringAssignmentStrategyUsingPOSTParams {
	var ()
	return &CreateMeteringAssignmentStrategyUsingPOSTParams{
		HTTPClient: client,
	}
}

/*CreateMeteringAssignmentStrategyUsingPOSTParams contains all the parameters to send to the API endpoint
for the create metering assignment strategy using p o s t operation typically these are written to a http.Request
*/
type CreateMeteringAssignmentStrategyUsingPOSTParams struct {

	/*MeteringAssignmentStrategy
	  The pricing card assignment strategy to be created

	*/
	MeteringAssignmentStrategy *models.MeteringAssignmentStrategy

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create metering assignment strategy using p o s t params
func (o *CreateMeteringAssignmentStrategyUsingPOSTParams) WithTimeout(timeout time.Duration) *CreateMeteringAssignmentStrategyUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create metering assignment strategy using p o s t params
func (o *CreateMeteringAssignmentStrategyUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create metering assignment strategy using p o s t params
func (o *CreateMeteringAssignmentStrategyUsingPOSTParams) WithContext(ctx context.Context) *CreateMeteringAssignmentStrategyUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create metering assignment strategy using p o s t params
func (o *CreateMeteringAssignmentStrategyUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create metering assignment strategy using p o s t params
func (o *CreateMeteringAssignmentStrategyUsingPOSTParams) WithHTTPClient(client *http.Client) *CreateMeteringAssignmentStrategyUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create metering assignment strategy using p o s t params
func (o *CreateMeteringAssignmentStrategyUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMeteringAssignmentStrategy adds the meteringAssignmentStrategy to the create metering assignment strategy using p o s t params
func (o *CreateMeteringAssignmentStrategyUsingPOSTParams) WithMeteringAssignmentStrategy(meteringAssignmentStrategy *models.MeteringAssignmentStrategy) *CreateMeteringAssignmentStrategyUsingPOSTParams {
	o.SetMeteringAssignmentStrategy(meteringAssignmentStrategy)
	return o
}

// SetMeteringAssignmentStrategy adds the meteringAssignmentStrategy to the create metering assignment strategy using p o s t params
func (o *CreateMeteringAssignmentStrategyUsingPOSTParams) SetMeteringAssignmentStrategy(meteringAssignmentStrategy *models.MeteringAssignmentStrategy) {
	o.MeteringAssignmentStrategy = meteringAssignmentStrategy
}

// WriteToRequest writes these params to a swagger request
func (o *CreateMeteringAssignmentStrategyUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MeteringAssignmentStrategy != nil {
		if err := r.SetBodyParam(o.MeteringAssignmentStrategy); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
