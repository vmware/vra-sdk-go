// Code generated by go-swagger; DO NOT EDIT.

package pricing_card_assignments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pricing card assignments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pricing card assignments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ChangeMeteringAssignmentStrategyUsingPATCH2(params *ChangeMeteringAssignmentStrategyUsingPATCH2Params, opts ...ClientOption) (*ChangeMeteringAssignmentStrategyUsingPATCH2OK, error)

	CreateMeteringAssignmentStrategyUsingPOST2(params *CreateMeteringAssignmentStrategyUsingPOST2Params, opts ...ClientOption) (*CreateMeteringAssignmentStrategyUsingPOST2OK, *CreateMeteringAssignmentStrategyUsingPOST2Created, error)

	CreateMeteringPolicyAssignmentUsingPOST2(params *CreateMeteringPolicyAssignmentUsingPOST2Params, opts ...ClientOption) (*CreateMeteringPolicyAssignmentUsingPOST2OK, *CreateMeteringPolicyAssignmentUsingPOST2Created, error)

	DeleteMeteringPolicyAssignmentUsingDELETE2(params *DeleteMeteringPolicyAssignmentUsingDELETE2Params, opts ...ClientOption) (*DeleteMeteringPolicyAssignmentUsingDELETE2OK, error)

	GetAllMeteringPolicyAssignmentsUsingGET2(params *GetAllMeteringPolicyAssignmentsUsingGET2Params, opts ...ClientOption) (*GetAllMeteringPolicyAssignmentsUsingGET2OK, error)

	GetMeteringAssignmentStrategyUsingGET2(params *GetMeteringAssignmentStrategyUsingGET2Params, opts ...ClientOption) (*GetMeteringAssignmentStrategyUsingGET2OK, error)

	GetMeteringPolicyAssignmentUsingGET2(params *GetMeteringPolicyAssignmentUsingGET2Params, opts ...ClientOption) (*GetMeteringPolicyAssignmentUsingGET2OK, error)

	PatchMeteringPolicyAssignmentUsingPATCH2(params *PatchMeteringPolicyAssignmentUsingPATCH2Params, opts ...ClientOption) (*PatchMeteringPolicyAssignmentUsingPATCH2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ChangeMeteringAssignmentStrategyUsingPATCH2 updates the pricing card assignment strategy for the org
*/
func (a *Client) ChangeMeteringAssignmentStrategyUsingPATCH2(params *ChangeMeteringAssignmentStrategyUsingPATCH2Params, opts ...ClientOption) (*ChangeMeteringAssignmentStrategyUsingPATCH2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeMeteringAssignmentStrategyUsingPATCH2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "changeMeteringAssignmentStrategyUsingPATCH_2",
		Method:             "PATCH",
		PathPattern:        "/price/api/private/pricing-card-assignments/strategy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeMeteringAssignmentStrategyUsingPATCH2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeMeteringAssignmentStrategyUsingPATCH2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeMeteringAssignmentStrategyUsingPATCH_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateMeteringAssignmentStrategyUsingPOST2 selectings the new pricing card assignment strategy p r o j e c t or c l o u d z o n e are possible values can be used while creating strategy also there can be only one strategy for a given org at a given point of time

Create a new pricing card assignment strategy based on request body and validate its field according to business rules.
*/
func (a *Client) CreateMeteringAssignmentStrategyUsingPOST2(params *CreateMeteringAssignmentStrategyUsingPOST2Params, opts ...ClientOption) (*CreateMeteringAssignmentStrategyUsingPOST2OK, *CreateMeteringAssignmentStrategyUsingPOST2Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMeteringAssignmentStrategyUsingPOST2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMeteringAssignmentStrategyUsingPOST_2",
		Method:             "POST",
		PathPattern:        "/price/api/private/pricing-card-assignments/strategy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMeteringAssignmentStrategyUsingPOST2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateMeteringAssignmentStrategyUsingPOST2OK:
		return value, nil, nil
	case *CreateMeteringAssignmentStrategyUsingPOST2Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pricing_card_assignments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateMeteringPolicyAssignmentUsingPOST2 creates a new pricing card assignment

Create a new pricing card policy assignment based on request body and validate its field according to business rules. Request body with ALL entityType will delete the older assignments for the given pricingCardId
*/
func (a *Client) CreateMeteringPolicyAssignmentUsingPOST2(params *CreateMeteringPolicyAssignmentUsingPOST2Params, opts ...ClientOption) (*CreateMeteringPolicyAssignmentUsingPOST2OK, *CreateMeteringPolicyAssignmentUsingPOST2Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMeteringPolicyAssignmentUsingPOST2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMeteringPolicyAssignmentUsingPOST_2",
		Method:             "POST",
		PathPattern:        "/price/api/private/pricing-card-assignments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMeteringPolicyAssignmentUsingPOST2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateMeteringPolicyAssignmentUsingPOST2OK:
		return value, nil, nil
	case *CreateMeteringPolicyAssignmentUsingPOST2Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pricing_card_assignments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMeteringPolicyAssignmentUsingDELETE2 deletes the pricing card assignment with specified id

Deletes the pricing card assignment with the specified id
*/
func (a *Client) DeleteMeteringPolicyAssignmentUsingDELETE2(params *DeleteMeteringPolicyAssignmentUsingDELETE2Params, opts ...ClientOption) (*DeleteMeteringPolicyAssignmentUsingDELETE2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeteringPolicyAssignmentUsingDELETE2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMeteringPolicyAssignmentUsingDELETE_2",
		Method:             "DELETE",
		PathPattern:        "/price/api/private/pricing-card-assignments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeteringPolicyAssignmentUsingDELETE2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMeteringPolicyAssignmentUsingDELETE2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMeteringPolicyAssignmentUsingDELETE_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllMeteringPolicyAssignmentsUsingGET2 fetches all pricing card assignment for private cloud

Returns a paginated list of pricing card assignments
*/
func (a *Client) GetAllMeteringPolicyAssignmentsUsingGET2(params *GetAllMeteringPolicyAssignmentsUsingGET2Params, opts ...ClientOption) (*GetAllMeteringPolicyAssignmentsUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllMeteringPolicyAssignmentsUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllMeteringPolicyAssignmentsUsingGET_2",
		Method:             "GET",
		PathPattern:        "/price/api/private/pricing-card-assignments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllMeteringPolicyAssignmentsUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllMeteringPolicyAssignmentsUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllMeteringPolicyAssignmentsUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMeteringAssignmentStrategyUsingGET2 fetches pricing card assignment strategy for the org

Returns a pricing card assignment strategy for the Org
*/
func (a *Client) GetMeteringAssignmentStrategyUsingGET2(params *GetMeteringAssignmentStrategyUsingGET2Params, opts ...ClientOption) (*GetMeteringAssignmentStrategyUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeteringAssignmentStrategyUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMeteringAssignmentStrategyUsingGET_2",
		Method:             "GET",
		PathPattern:        "/price/api/private/pricing-card-assignments/strategy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeteringAssignmentStrategyUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMeteringAssignmentStrategyUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMeteringAssignmentStrategyUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMeteringPolicyAssignmentUsingGET2 fetches pricing card assignment for private cloud by id

Returns a pricing card assignments by id
*/
func (a *Client) GetMeteringPolicyAssignmentUsingGET2(params *GetMeteringPolicyAssignmentUsingGET2Params, opts ...ClientOption) (*GetMeteringPolicyAssignmentUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeteringPolicyAssignmentUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMeteringPolicyAssignmentUsingGET_2",
		Method:             "GET",
		PathPattern:        "/price/api/private/pricing-card-assignments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeteringPolicyAssignmentUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMeteringPolicyAssignmentUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMeteringPolicyAssignmentUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchMeteringPolicyAssignmentUsingPATCH2 updates the pricing card assignment id with the supplied id request body with a l l entity type will delete the older assignments for the given pricing card Id
*/
func (a *Client) PatchMeteringPolicyAssignmentUsingPATCH2(params *PatchMeteringPolicyAssignmentUsingPATCH2Params, opts ...ClientOption) (*PatchMeteringPolicyAssignmentUsingPATCH2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchMeteringPolicyAssignmentUsingPATCH2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchMeteringPolicyAssignmentUsingPATCH_2",
		Method:             "PATCH",
		PathPattern:        "/price/api/private/pricing-card-assignments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchMeteringPolicyAssignmentUsingPATCH2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchMeteringPolicyAssignmentUsingPATCH2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchMeteringPolicyAssignmentUsingPATCH_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
