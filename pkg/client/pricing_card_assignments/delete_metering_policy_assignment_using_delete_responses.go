// Code generated by go-swagger; DO NOT EDIT.

package pricing_card_assignments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// DeleteMeteringPolicyAssignmentUsingDELETEReader is a Reader for the DeleteMeteringPolicyAssignmentUsingDELETE structure.
type DeleteMeteringPolicyAssignmentUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteMeteringPolicyAssignmentUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteMeteringPolicyAssignmentUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteMeteringPolicyAssignmentUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteMeteringPolicyAssignmentUsingDELETENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteMeteringPolicyAssignmentUsingDELETEOK creates a DeleteMeteringPolicyAssignmentUsingDELETEOK with default headers values
func NewDeleteMeteringPolicyAssignmentUsingDELETEOK() *DeleteMeteringPolicyAssignmentUsingDELETEOK {
	return &DeleteMeteringPolicyAssignmentUsingDELETEOK{}
}

/*DeleteMeteringPolicyAssignmentUsingDELETEOK handles this case with default header values.

No Content
*/
type DeleteMeteringPolicyAssignmentUsingDELETEOK struct {
}

func (o *DeleteMeteringPolicyAssignmentUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /price/api/private/pricing-card-assignments/{id}][%d] deleteMeteringPolicyAssignmentUsingDELETEOK ", 200)
}

func (o *DeleteMeteringPolicyAssignmentUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteMeteringPolicyAssignmentUsingDELETEUnauthorized creates a DeleteMeteringPolicyAssignmentUsingDELETEUnauthorized with default headers values
func NewDeleteMeteringPolicyAssignmentUsingDELETEUnauthorized() *DeleteMeteringPolicyAssignmentUsingDELETEUnauthorized {
	return &DeleteMeteringPolicyAssignmentUsingDELETEUnauthorized{}
}

/*DeleteMeteringPolicyAssignmentUsingDELETEUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteMeteringPolicyAssignmentUsingDELETEUnauthorized struct {
}

func (o *DeleteMeteringPolicyAssignmentUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /price/api/private/pricing-card-assignments/{id}][%d] deleteMeteringPolicyAssignmentUsingDELETEUnauthorized ", 401)
}

func (o *DeleteMeteringPolicyAssignmentUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteMeteringPolicyAssignmentUsingDELETENotFound creates a DeleteMeteringPolicyAssignmentUsingDELETENotFound with default headers values
func NewDeleteMeteringPolicyAssignmentUsingDELETENotFound() *DeleteMeteringPolicyAssignmentUsingDELETENotFound {
	return &DeleteMeteringPolicyAssignmentUsingDELETENotFound{}
}

/*DeleteMeteringPolicyAssignmentUsingDELETENotFound handles this case with default header values.

Not Found
*/
type DeleteMeteringPolicyAssignmentUsingDELETENotFound struct {
	Payload *models.Error
}

func (o *DeleteMeteringPolicyAssignmentUsingDELETENotFound) Error() string {
	return fmt.Sprintf("[DELETE /price/api/private/pricing-card-assignments/{id}][%d] deleteMeteringPolicyAssignmentUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeleteMeteringPolicyAssignmentUsingDELETENotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteMeteringPolicyAssignmentUsingDELETENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
