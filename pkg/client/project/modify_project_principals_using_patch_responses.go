// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// ModifyProjectPrincipalsUsingPATCHReader is a Reader for the ModifyProjectPrincipalsUsingPATCH structure.
type ModifyProjectPrincipalsUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ModifyProjectPrincipalsUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewModifyProjectPrincipalsUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewModifyProjectPrincipalsUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewModifyProjectPrincipalsUsingPATCHNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewModifyProjectPrincipalsUsingPATCHOK creates a ModifyProjectPrincipalsUsingPATCHOK with default headers values
func NewModifyProjectPrincipalsUsingPATCHOK() *ModifyProjectPrincipalsUsingPATCHOK {
	return &ModifyProjectPrincipalsUsingPATCHOK{}
}

/* ModifyProjectPrincipalsUsingPATCHOK describes a response with status code 200, with default header values.

'Success' with the Project
*/
type ModifyProjectPrincipalsUsingPATCHOK struct {
	Payload *models.Project
}

func (o *ModifyProjectPrincipalsUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/principals][%d] modifyProjectPrincipalsUsingPATCHOK  %+v", 200, o.Payload)
}
func (o *ModifyProjectPrincipalsUsingPATCHOK) GetPayload() *models.Project {
	return o.Payload
}

func (o *ModifyProjectPrincipalsUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Project)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewModifyProjectPrincipalsUsingPATCHForbidden creates a ModifyProjectPrincipalsUsingPATCHForbidden with default headers values
func NewModifyProjectPrincipalsUsingPATCHForbidden() *ModifyProjectPrincipalsUsingPATCHForbidden {
	return &ModifyProjectPrincipalsUsingPATCHForbidden{}
}

/* ModifyProjectPrincipalsUsingPATCHForbidden describes a response with status code 403, with default header values.

Forbidden, the user lacks permissions
*/
type ModifyProjectPrincipalsUsingPATCHForbidden struct {
}

func (o *ModifyProjectPrincipalsUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/principals][%d] modifyProjectPrincipalsUsingPATCHForbidden ", 403)
}

func (o *ModifyProjectPrincipalsUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewModifyProjectPrincipalsUsingPATCHNotFound creates a ModifyProjectPrincipalsUsingPATCHNotFound with default headers values
func NewModifyProjectPrincipalsUsingPATCHNotFound() *ModifyProjectPrincipalsUsingPATCHNotFound {
	return &ModifyProjectPrincipalsUsingPATCHNotFound{}
}

/* ModifyProjectPrincipalsUsingPATCHNotFound describes a response with status code 404, with default header values.

'Not found' if no project with the provided id
*/
type ModifyProjectPrincipalsUsingPATCHNotFound struct {
	Payload *models.Error
}

func (o *ModifyProjectPrincipalsUsingPATCHNotFound) Error() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/principals][%d] modifyProjectPrincipalsUsingPATCHNotFound  %+v", 404, o.Payload)
}
func (o *ModifyProjectPrincipalsUsingPATCHNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ModifyProjectPrincipalsUsingPATCHNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
