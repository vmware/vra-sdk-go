// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// ModifyProjectCostsUsingPATCHReader is a Reader for the ModifyProjectCostsUsingPATCH structure.
type ModifyProjectCostsUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ModifyProjectCostsUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewModifyProjectCostsUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewModifyProjectCostsUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewModifyProjectCostsUsingPATCHNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewModifyProjectCostsUsingPATCHOK creates a ModifyProjectCostsUsingPATCHOK with default headers values
func NewModifyProjectCostsUsingPATCHOK() *ModifyProjectCostsUsingPATCHOK {
	return &ModifyProjectCostsUsingPATCHOK{}
}

/*
ModifyProjectCostsUsingPATCHOK describes a response with status code 200, with default header values.

'Success' with the Project
*/
type ModifyProjectCostsUsingPATCHOK struct {
	Payload models.Project
}

// IsSuccess returns true when this modify project costs using p a t c h o k response has a 2xx status code
func (o *ModifyProjectCostsUsingPATCHOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this modify project costs using p a t c h o k response has a 3xx status code
func (o *ModifyProjectCostsUsingPATCHOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this modify project costs using p a t c h o k response has a 4xx status code
func (o *ModifyProjectCostsUsingPATCHOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this modify project costs using p a t c h o k response has a 5xx status code
func (o *ModifyProjectCostsUsingPATCHOK) IsServerError() bool {
	return false
}

// IsCode returns true when this modify project costs using p a t c h o k response a status code equal to that given
func (o *ModifyProjectCostsUsingPATCHOK) IsCode(code int) bool {
	return code == 200
}

func (o *ModifyProjectCostsUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/cost][%d] modifyProjectCostsUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *ModifyProjectCostsUsingPATCHOK) String() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/cost][%d] modifyProjectCostsUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *ModifyProjectCostsUsingPATCHOK) GetPayload() models.Project {
	return o.Payload
}

func (o *ModifyProjectCostsUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalProject(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewModifyProjectCostsUsingPATCHForbidden creates a ModifyProjectCostsUsingPATCHForbidden with default headers values
func NewModifyProjectCostsUsingPATCHForbidden() *ModifyProjectCostsUsingPATCHForbidden {
	return &ModifyProjectCostsUsingPATCHForbidden{}
}

/*
ModifyProjectCostsUsingPATCHForbidden describes a response with status code 403, with default header values.

Forbidden, the user lacks permissions
*/
type ModifyProjectCostsUsingPATCHForbidden struct {
}

// IsSuccess returns true when this modify project costs using p a t c h forbidden response has a 2xx status code
func (o *ModifyProjectCostsUsingPATCHForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this modify project costs using p a t c h forbidden response has a 3xx status code
func (o *ModifyProjectCostsUsingPATCHForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this modify project costs using p a t c h forbidden response has a 4xx status code
func (o *ModifyProjectCostsUsingPATCHForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this modify project costs using p a t c h forbidden response has a 5xx status code
func (o *ModifyProjectCostsUsingPATCHForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this modify project costs using p a t c h forbidden response a status code equal to that given
func (o *ModifyProjectCostsUsingPATCHForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ModifyProjectCostsUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/cost][%d] modifyProjectCostsUsingPATCHForbidden ", 403)
}

func (o *ModifyProjectCostsUsingPATCHForbidden) String() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/cost][%d] modifyProjectCostsUsingPATCHForbidden ", 403)
}

func (o *ModifyProjectCostsUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewModifyProjectCostsUsingPATCHNotFound creates a ModifyProjectCostsUsingPATCHNotFound with default headers values
func NewModifyProjectCostsUsingPATCHNotFound() *ModifyProjectCostsUsingPATCHNotFound {
	return &ModifyProjectCostsUsingPATCHNotFound{}
}

/*
ModifyProjectCostsUsingPATCHNotFound describes a response with status code 404, with default header values.

'Not found' if no project with the provided id
*/
type ModifyProjectCostsUsingPATCHNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this modify project costs using p a t c h not found response has a 2xx status code
func (o *ModifyProjectCostsUsingPATCHNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this modify project costs using p a t c h not found response has a 3xx status code
func (o *ModifyProjectCostsUsingPATCHNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this modify project costs using p a t c h not found response has a 4xx status code
func (o *ModifyProjectCostsUsingPATCHNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this modify project costs using p a t c h not found response has a 5xx status code
func (o *ModifyProjectCostsUsingPATCHNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this modify project costs using p a t c h not found response a status code equal to that given
func (o *ModifyProjectCostsUsingPATCHNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ModifyProjectCostsUsingPATCHNotFound) Error() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/cost][%d] modifyProjectCostsUsingPATCHNotFound  %+v", 404, o.Payload)
}

func (o *ModifyProjectCostsUsingPATCHNotFound) String() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/cost][%d] modifyProjectCostsUsingPATCHNotFound  %+v", 404, o.Payload)
}

func (o *ModifyProjectCostsUsingPATCHNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ModifyProjectCostsUsingPATCHNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
