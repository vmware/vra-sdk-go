// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateUsingPATCHMixin5Reader is a Reader for the UpdateUsingPATCHMixin5 structure.
type UpdateUsingPATCHMixin5Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUsingPATCHMixin5Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUsingPATCHMixin5OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUsingPATCHMixin5BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUsingPATCHMixin5NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateUsingPATCHMixin5OK creates a UpdateUsingPATCHMixin5OK with default headers values
func NewUpdateUsingPATCHMixin5OK() *UpdateUsingPATCHMixin5OK {
	return &UpdateUsingPATCHMixin5OK{}
}

/*
UpdateUsingPATCHMixin5OK describes a response with status code 200, with default header values.

'OK' with the newly updated project resource metadata
*/
type UpdateUsingPATCHMixin5OK struct {
	Payload models.ProjectResourceMetadata
}

// IsSuccess returns true when this update using p a t c h mixin5 o k response has a 2xx status code
func (o *UpdateUsingPATCHMixin5OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update using p a t c h mixin5 o k response has a 3xx status code
func (o *UpdateUsingPATCHMixin5OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update using p a t c h mixin5 o k response has a 4xx status code
func (o *UpdateUsingPATCHMixin5OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update using p a t c h mixin5 o k response has a 5xx status code
func (o *UpdateUsingPATCHMixin5OK) IsServerError() bool {
	return false
}

// IsCode returns true when this update using p a t c h mixin5 o k response a status code equal to that given
func (o *UpdateUsingPATCHMixin5OK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateUsingPATCHMixin5OK) Error() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/resource-metadata][%d] updateUsingPATCHMixin5OK  %+v", 200, o.Payload)
}

func (o *UpdateUsingPATCHMixin5OK) String() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/resource-metadata][%d] updateUsingPATCHMixin5OK  %+v", 200, o.Payload)
}

func (o *UpdateUsingPATCHMixin5OK) GetPayload() models.ProjectResourceMetadata {
	return o.Payload
}

func (o *UpdateUsingPATCHMixin5OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalProjectResourceMetadata(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewUpdateUsingPATCHMixin5BadRequest creates a UpdateUsingPATCHMixin5BadRequest with default headers values
func NewUpdateUsingPATCHMixin5BadRequest() *UpdateUsingPATCHMixin5BadRequest {
	return &UpdateUsingPATCHMixin5BadRequest{}
}

/*
UpdateUsingPATCHMixin5BadRequest describes a response with status code 400, with default header values.

'Bad request' on validation failure
*/
type UpdateUsingPATCHMixin5BadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update using p a t c h mixin5 bad request response has a 2xx status code
func (o *UpdateUsingPATCHMixin5BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update using p a t c h mixin5 bad request response has a 3xx status code
func (o *UpdateUsingPATCHMixin5BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update using p a t c h mixin5 bad request response has a 4xx status code
func (o *UpdateUsingPATCHMixin5BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update using p a t c h mixin5 bad request response has a 5xx status code
func (o *UpdateUsingPATCHMixin5BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update using p a t c h mixin5 bad request response a status code equal to that given
func (o *UpdateUsingPATCHMixin5BadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateUsingPATCHMixin5BadRequest) Error() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/resource-metadata][%d] updateUsingPATCHMixin5BadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUsingPATCHMixin5BadRequest) String() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/resource-metadata][%d] updateUsingPATCHMixin5BadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUsingPATCHMixin5BadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUsingPATCHMixin5BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUsingPATCHMixin5NotFound creates a UpdateUsingPATCHMixin5NotFound with default headers values
func NewUpdateUsingPATCHMixin5NotFound() *UpdateUsingPATCHMixin5NotFound {
	return &UpdateUsingPATCHMixin5NotFound{}
}

/*
UpdateUsingPATCHMixin5NotFound describes a response with status code 404, with default header values.

'Not found' if no project with the provided id
*/
type UpdateUsingPATCHMixin5NotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update using p a t c h mixin5 not found response has a 2xx status code
func (o *UpdateUsingPATCHMixin5NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update using p a t c h mixin5 not found response has a 3xx status code
func (o *UpdateUsingPATCHMixin5NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update using p a t c h mixin5 not found response has a 4xx status code
func (o *UpdateUsingPATCHMixin5NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update using p a t c h mixin5 not found response has a 5xx status code
func (o *UpdateUsingPATCHMixin5NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update using p a t c h mixin5 not found response a status code equal to that given
func (o *UpdateUsingPATCHMixin5NotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateUsingPATCHMixin5NotFound) Error() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/resource-metadata][%d] updateUsingPATCHMixin5NotFound  %+v", 404, o.Payload)
}

func (o *UpdateUsingPATCHMixin5NotFound) String() string {
	return fmt.Sprintf("[PATCH /project-service/api/projects/{id}/resource-metadata][%d] updateUsingPATCHMixin5NotFound  %+v", 404, o.Payload)
}

func (o *UpdateUsingPATCHMixin5NotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUsingPATCHMixin5NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
