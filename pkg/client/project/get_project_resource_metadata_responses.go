// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetProjectResourceMetadataReader is a Reader for the GetProjectResourceMetadata structure.
type GetProjectResourceMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectResourceMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectResourceMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetProjectResourceMetadataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProjectResourceMetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetProjectResourceMetadataOK creates a GetProjectResourceMetadataOK with default headers values
func NewGetProjectResourceMetadataOK() *GetProjectResourceMetadataOK {
	return &GetProjectResourceMetadataOK{}
}

/*GetProjectResourceMetadataOK handles this case with default header values.

successful operation
*/
type GetProjectResourceMetadataOK struct {
	Payload *models.ProjectResourceMetadata
}

func (o *GetProjectResourceMetadataOK) Error() string {
	return fmt.Sprintf("[GET /iaas/api/projects/{id}/resource-metadata][%d] getProjectResourceMetadataOK  %+v", 200, o.Payload)
}

func (o *GetProjectResourceMetadataOK) GetPayload() *models.ProjectResourceMetadata {
	return o.Payload
}

func (o *GetProjectResourceMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectResourceMetadata)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectResourceMetadataForbidden creates a GetProjectResourceMetadataForbidden with default headers values
func NewGetProjectResourceMetadataForbidden() *GetProjectResourceMetadataForbidden {
	return &GetProjectResourceMetadataForbidden{}
}

/*GetProjectResourceMetadataForbidden handles this case with default header values.

Forbidden
*/
type GetProjectResourceMetadataForbidden struct {
}

func (o *GetProjectResourceMetadataForbidden) Error() string {
	return fmt.Sprintf("[GET /iaas/api/projects/{id}/resource-metadata][%d] getProjectResourceMetadataForbidden ", 403)
}

func (o *GetProjectResourceMetadataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProjectResourceMetadataNotFound creates a GetProjectResourceMetadataNotFound with default headers values
func NewGetProjectResourceMetadataNotFound() *GetProjectResourceMetadataNotFound {
	return &GetProjectResourceMetadataNotFound{}
}

/*GetProjectResourceMetadataNotFound handles this case with default header values.

Not Found
*/
type GetProjectResourceMetadataNotFound struct {
	Payload *models.Error
}

func (o *GetProjectResourceMetadataNotFound) Error() string {
	return fmt.Sprintf("[GET /iaas/api/projects/{id}/resource-metadata][%d] getProjectResourceMetadataNotFound  %+v", 404, o.Payload)
}

func (o *GetProjectResourceMetadataNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetProjectResourceMetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
