// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateProject(params *CreateProjectParams, opts ...ClientOption) (*CreateProjectCreated, error)

	CreateUsingPOSTMixin5(params *CreateUsingPOSTMixin5Params, opts ...ClientOption) (*CreateUsingPOSTMixin5Created, error)

	DeleteProject(params *DeleteProjectParams, opts ...ClientOption) (*DeleteProjectNoContent, error)

	DeleteProjectUsingDELETE(params *DeleteProjectUsingDELETEParams, opts ...ClientOption) (*DeleteProjectUsingDELETEOK, error)

	GetAllProjectsUsingGET(params *GetAllProjectsUsingGETParams, opts ...ClientOption) (*GetAllProjectsUsingGETOK, error)

	GetProject(params *GetProjectParams, opts ...ClientOption) (*GetProjectOK, error)

	GetProjectResourceMetadata(params *GetProjectResourceMetadataParams, opts ...ClientOption) (*GetProjectResourceMetadataOK, error)

	GetProjectUsingGET(params *GetProjectUsingGETParams, opts ...ClientOption) (*GetProjectUsingGETOK, error)

	GetProjects(params *GetProjectsParams, opts ...ClientOption) (*GetProjectsOK, error)

	GetUsingGETMixin5(params *GetUsingGETMixin5Params, opts ...ClientOption) (*GetUsingGETMixin5OK, error)

	ModifyProjectCostsUsingPATCH(params *ModifyProjectCostsUsingPATCHParams, opts ...ClientOption) (*ModifyProjectCostsUsingPATCHOK, error)

	ModifyProjectPrincipalsUsingPATCH(params *ModifyProjectPrincipalsUsingPATCHParams, opts ...ClientOption) (*ModifyProjectPrincipalsUsingPATCHOK, error)

	ModifyProjectUsingPATCH(params *ModifyProjectUsingPATCHParams, opts ...ClientOption) (*ModifyProjectUsingPATCHOK, error)

	SyncProjectsPrincipalsUsingPOST(params *SyncProjectsPrincipalsUsingPOSTParams, opts ...ClientOption) (*SyncProjectsPrincipalsUsingPOSTOK, error)

	UpdateProject(params *UpdateProjectParams, opts ...ClientOption) (*UpdateProjectOK, error)

	UpdateProjectResourceMetadata(params *UpdateProjectResourceMetadataParams, opts ...ClientOption) (*UpdateProjectResourceMetadataOK, error)

	UpdateUsingPATCHMixin5(params *UpdateUsingPATCHMixin5Params, opts ...ClientOption) (*UpdateUsingPATCHMixin5OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateProject creates project

Create project
*/
func (a *Client) CreateProject(params *CreateProjectParams, opts ...ClientOption) (*CreateProjectCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProject",
		Method:             "POST",
		PathPattern:        "/iaas/api/projects",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateUsingPOSTMixin5 creates a project
*/
func (a *Client) CreateUsingPOSTMixin5(params *CreateUsingPOSTMixin5Params, opts ...ClientOption) (*CreateUsingPOSTMixin5Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOSTMixin5Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUsingPOSTMixin5",
		Method:             "POST",
		PathPattern:        "/project-service/api/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUsingPOSTMixin5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUsingPOSTMixin5Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUsingPOSTMixin5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProject deletes project

Delete project with a given id
*/
func (a *Client) DeleteProject(params *DeleteProjectParams, opts ...ClientOption) (*DeleteProjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProject",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/projects/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectUsingDELETE deletes a project

Deletes a project by id.
*/
func (a *Client) DeleteProjectUsingDELETE(params *DeleteProjectUsingDELETEParams, opts ...ClientOption) (*DeleteProjectUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProjectUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/project-service/api/projects/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProjectUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProjectUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllProjectsUsingGET gets all projects

Get all projects with specified paging parameters.
*/
func (a *Client) GetAllProjectsUsingGET(params *GetAllProjectsUsingGETParams, opts ...ClientOption) (*GetAllProjectsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllProjectsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllProjectsUsingGET",
		Method:             "GET",
		PathPattern:        "/project-service/api/projects",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllProjectsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllProjectsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllProjectsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProject gets project

Get project with a given id
*/
func (a *Client) GetProject(params *GetProjectParams, opts ...ClientOption) (*GetProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProject",
		Method:             "GET",
		PathPattern:        "/iaas/api/projects/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectResourceMetadata gets project resource metadata

Get project resource metadata by a given project id
*/
func (a *Client) GetProjectResourceMetadata(params *GetProjectResourceMetadataParams, opts ...ClientOption) (*GetProjectResourceMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectResourceMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectResourceMetadata",
		Method:             "GET",
		PathPattern:        "/iaas/api/projects/{id}/resource-metadata",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectResourceMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectResourceMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectResourceMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectUsingGET retrieves a project

Retrieves a project by id.
*/
func (a *Client) GetProjectUsingGET(params *GetProjectUsingGETParams, opts ...ClientOption) (*GetProjectUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectUsingGET",
		Method:             "GET",
		PathPattern:        "/project-service/api/projects/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjects gets projects

Get all projects
*/
func (a *Client) GetProjects(params *GetProjectsParams, opts ...ClientOption) (*GetProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjects",
		Method:             "GET",
		PathPattern:        "/iaas/api/projects",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsingGETMixin5 retrieves a resource metadata for a project

Retrieves a resource metadata for a project by id.
*/
func (a *Client) GetUsingGETMixin5(params *GetUsingGETMixin5Params, opts ...ClientOption) (*GetUsingGETMixin5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGETMixin5Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUsingGETMixin5",
		Method:             "GET",
		PathPattern:        "/project-service/api/projects/{id}/resource-metadata",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsingGETMixin5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGETMixin5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsingGETMixin5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModifyProjectCostsUsingPATCH modifies a project cost

Modifies the cost of a project specified by id.
*/
func (a *Client) ModifyProjectCostsUsingPATCH(params *ModifyProjectCostsUsingPATCHParams, opts ...ClientOption) (*ModifyProjectCostsUsingPATCHOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyProjectCostsUsingPATCHParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyProjectCostsUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/project-service/api/projects/{id}/cost",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyProjectCostsUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyProjectCostsUsingPATCHOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyProjectCostsUsingPATCH: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModifyProjectPrincipalsUsingPATCH modifies principals assigned to a project

Modifies principals assigned to a project by id.
*/
func (a *Client) ModifyProjectPrincipalsUsingPATCH(params *ModifyProjectPrincipalsUsingPATCHParams, opts ...ClientOption) (*ModifyProjectPrincipalsUsingPATCHOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyProjectPrincipalsUsingPATCHParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyProjectPrincipalsUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/project-service/api/projects/{id}/principals",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyProjectPrincipalsUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyProjectPrincipalsUsingPATCHOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyProjectPrincipalsUsingPATCH: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModifyProjectUsingPATCH modifies a project

Modifies a project by id. Fields that can be modified: name, description, constraints, properties, cost, operation timeout, shared resources.
*/
func (a *Client) ModifyProjectUsingPATCH(params *ModifyProjectUsingPATCHParams, opts ...ClientOption) (*ModifyProjectUsingPATCHOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyProjectUsingPATCHParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyProjectUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/project-service/api/projects/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyProjectUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyProjectUsingPATCHOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyProjectUsingPATCH: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SyncProjectsPrincipalsUsingPOST syncs principals assigned to any project within user organization
*/
func (a *Client) SyncProjectsPrincipalsUsingPOST(params *SyncProjectsPrincipalsUsingPOSTParams, opts ...ClientOption) (*SyncProjectsPrincipalsUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncProjectsPrincipalsUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncProjectsPrincipalsUsingPOST",
		Method:             "POST",
		PathPattern:        "/project-service/api/projects/{id}/sync-principals",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SyncProjectsPrincipalsUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncProjectsPrincipalsUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for syncProjectsPrincipalsUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateProject updates project

Update project
*/
func (a *Client) UpdateProject(params *UpdateProjectParams, opts ...ClientOption) (*UpdateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProject",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/projects/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateProjectResourceMetadata updates project resource metadata

Update project resource metadata by a given project id
*/
func (a *Client) UpdateProjectResourceMetadata(params *UpdateProjectResourceMetadataParams, opts ...ClientOption) (*UpdateProjectResourceMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectResourceMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProjectResourceMetadata",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/projects/{id}/resource-metadata",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProjectResourceMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectResourceMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProjectResourceMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUsingPATCHMixin5 modifies a project resource metadata

Modifies the resources metadata of a project specified by id.
*/
func (a *Client) UpdateUsingPATCHMixin5(params *UpdateUsingPATCHMixin5Params, opts ...ClientOption) (*UpdateUsingPATCHMixin5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPATCHMixin5Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUsingPATCHMixin5",
		Method:             "PATCH",
		PathPattern:        "/project-service/api/projects/{id}/resource-metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUsingPATCHMixin5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPATCHMixin5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPATCHMixin5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
