// Code generated by go-swagger; DO NOT EDIT.

package onboarding_plan_execution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryPlanExecutionsParams creates a new QueryPlanExecutionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryPlanExecutionsParams() *QueryPlanExecutionsParams {
	return &QueryPlanExecutionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryPlanExecutionsParamsWithTimeout creates a new QueryPlanExecutionsParams object
// with the ability to set a timeout on a request.
func NewQueryPlanExecutionsParamsWithTimeout(timeout time.Duration) *QueryPlanExecutionsParams {
	return &QueryPlanExecutionsParams{
		timeout: timeout,
	}
}

// NewQueryPlanExecutionsParamsWithContext creates a new QueryPlanExecutionsParams object
// with the ability to set a context for a request.
func NewQueryPlanExecutionsParamsWithContext(ctx context.Context) *QueryPlanExecutionsParams {
	return &QueryPlanExecutionsParams{
		Context: ctx,
	}
}

// NewQueryPlanExecutionsParamsWithHTTPClient creates a new QueryPlanExecutionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryPlanExecutionsParamsWithHTTPClient(client *http.Client) *QueryPlanExecutionsParams {
	return &QueryPlanExecutionsParams{
		HTTPClient: client,
	}
}

/*
QueryPlanExecutionsParams contains all the parameters to send to the API endpoint

	for the query plan executions operation.

	Typically these are written to a http.Request.
*/
type QueryPlanExecutionsParams struct {

	/* DollarExpand.

	   Expand document contents
	*/
	DollarExpand *bool

	/* DollarFilter.

	   OData filter expression
	*/
	DollarFilter *string

	/* DollarLimit.

	   Set maximum number of documents to return in this query
	*/
	DollarLimit *int64

	/* DollarSelect.

	   Comma-separated list of fields to populate in query result
	*/
	DollarSelect *string

	/* DollarTenantLinks.

	   Comma-separated list
	*/
	DollarTenantLinks *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query plan executions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryPlanExecutionsParams) WithDefaults() *QueryPlanExecutionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query plan executions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryPlanExecutionsParams) SetDefaults() {
	var (
		dollarExpandDefault = bool(false)
	)

	val := QueryPlanExecutionsParams{
		DollarExpand: &dollarExpandDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the query plan executions params
func (o *QueryPlanExecutionsParams) WithTimeout(timeout time.Duration) *QueryPlanExecutionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query plan executions params
func (o *QueryPlanExecutionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query plan executions params
func (o *QueryPlanExecutionsParams) WithContext(ctx context.Context) *QueryPlanExecutionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query plan executions params
func (o *QueryPlanExecutionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query plan executions params
func (o *QueryPlanExecutionsParams) WithHTTPClient(client *http.Client) *QueryPlanExecutionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query plan executions params
func (o *QueryPlanExecutionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarExpand adds the dollarExpand to the query plan executions params
func (o *QueryPlanExecutionsParams) WithDollarExpand(dollarExpand *bool) *QueryPlanExecutionsParams {
	o.SetDollarExpand(dollarExpand)
	return o
}

// SetDollarExpand adds the dollarExpand to the query plan executions params
func (o *QueryPlanExecutionsParams) SetDollarExpand(dollarExpand *bool) {
	o.DollarExpand = dollarExpand
}

// WithDollarFilter adds the dollarFilter to the query plan executions params
func (o *QueryPlanExecutionsParams) WithDollarFilter(dollarFilter *string) *QueryPlanExecutionsParams {
	o.SetDollarFilter(dollarFilter)
	return o
}

// SetDollarFilter adds the dollarFilter to the query plan executions params
func (o *QueryPlanExecutionsParams) SetDollarFilter(dollarFilter *string) {
	o.DollarFilter = dollarFilter
}

// WithDollarLimit adds the dollarLimit to the query plan executions params
func (o *QueryPlanExecutionsParams) WithDollarLimit(dollarLimit *int64) *QueryPlanExecutionsParams {
	o.SetDollarLimit(dollarLimit)
	return o
}

// SetDollarLimit adds the dollarLimit to the query plan executions params
func (o *QueryPlanExecutionsParams) SetDollarLimit(dollarLimit *int64) {
	o.DollarLimit = dollarLimit
}

// WithDollarSelect adds the dollarSelect to the query plan executions params
func (o *QueryPlanExecutionsParams) WithDollarSelect(dollarSelect *string) *QueryPlanExecutionsParams {
	o.SetDollarSelect(dollarSelect)
	return o
}

// SetDollarSelect adds the dollarSelect to the query plan executions params
func (o *QueryPlanExecutionsParams) SetDollarSelect(dollarSelect *string) {
	o.DollarSelect = dollarSelect
}

// WithDollarTenantLinks adds the dollarTenantLinks to the query plan executions params
func (o *QueryPlanExecutionsParams) WithDollarTenantLinks(dollarTenantLinks *string) *QueryPlanExecutionsParams {
	o.SetDollarTenantLinks(dollarTenantLinks)
	return o
}

// SetDollarTenantLinks adds the dollarTenantLinks to the query plan executions params
func (o *QueryPlanExecutionsParams) SetDollarTenantLinks(dollarTenantLinks *string) {
	o.DollarTenantLinks = dollarTenantLinks
}

// WriteToRequest writes these params to a swagger request
func (o *QueryPlanExecutionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarExpand != nil {

		// query param $expand
		var qrDollarExpand bool

		if o.DollarExpand != nil {
			qrDollarExpand = *o.DollarExpand
		}
		qDollarExpand := swag.FormatBool(qrDollarExpand)
		if qDollarExpand != "" {

			if err := r.SetQueryParam("$expand", qDollarExpand); err != nil {
				return err
			}
		}
	}

	if o.DollarFilter != nil {

		// query param $filter
		var qrDollarFilter string

		if o.DollarFilter != nil {
			qrDollarFilter = *o.DollarFilter
		}
		qDollarFilter := qrDollarFilter
		if qDollarFilter != "" {

			if err := r.SetQueryParam("$filter", qDollarFilter); err != nil {
				return err
			}
		}
	}

	if o.DollarLimit != nil {

		// query param $limit
		var qrDollarLimit int64

		if o.DollarLimit != nil {
			qrDollarLimit = *o.DollarLimit
		}
		qDollarLimit := swag.FormatInt64(qrDollarLimit)
		if qDollarLimit != "" {

			if err := r.SetQueryParam("$limit", qDollarLimit); err != nil {
				return err
			}
		}
	}

	if o.DollarSelect != nil {

		// query param $select
		var qrDollarSelect string

		if o.DollarSelect != nil {
			qrDollarSelect = *o.DollarSelect
		}
		qDollarSelect := qrDollarSelect
		if qDollarSelect != "" {

			if err := r.SetQueryParam("$select", qDollarSelect); err != nil {
				return err
			}
		}
	}

	if o.DollarTenantLinks != nil {

		// query param $tenantLinks
		var qrDollarTenantLinks string

		if o.DollarTenantLinks != nil {
			qrDollarTenantLinks = *o.DollarTenantLinks
		}
		qDollarTenantLinks := qrDollarTenantLinks
		if qDollarTenantLinks != "" {

			if err := r.SetQueryParam("$tenantLinks", qDollarTenantLinks); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
