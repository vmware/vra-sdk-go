// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// RestartMachineReader is a Reader for the RestartMachine structure.
type RestartMachineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RestartMachineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewRestartMachineAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRestartMachineForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRestartMachineNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRestartMachineAccepted creates a RestartMachineAccepted with default headers values
func NewRestartMachineAccepted() *RestartMachineAccepted {
	return &RestartMachineAccepted{}
}

/*RestartMachineAccepted handles this case with default header values.

successful operation
*/
type RestartMachineAccepted struct {
	Payload *models.RequestTracker
}

func (o *RestartMachineAccepted) Error() string {
	return fmt.Sprintf("[POST /iaas/api/machines/{id}/operations/restart][%d] restartMachineAccepted  %+v", 202, o.Payload)
}

func (o *RestartMachineAccepted) GetPayload() *models.RequestTracker {
	return o.Payload
}

func (o *RestartMachineAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestTracker)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRestartMachineForbidden creates a RestartMachineForbidden with default headers values
func NewRestartMachineForbidden() *RestartMachineForbidden {
	return &RestartMachineForbidden{}
}

/*RestartMachineForbidden handles this case with default header values.

Forbidden
*/
type RestartMachineForbidden struct {
}

func (o *RestartMachineForbidden) Error() string {
	return fmt.Sprintf("[POST /iaas/api/machines/{id}/operations/restart][%d] restartMachineForbidden ", 403)
}

func (o *RestartMachineForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRestartMachineNotFound creates a RestartMachineNotFound with default headers values
func NewRestartMachineNotFound() *RestartMachineNotFound {
	return &RestartMachineNotFound{}
}

/*RestartMachineNotFound handles this case with default header values.

Not Found
*/
type RestartMachineNotFound struct {
	Payload *models.Error
}

func (o *RestartMachineNotFound) Error() string {
	return fmt.Sprintf("[POST /iaas/api/machines/{id}/operations/restart][%d] restartMachineNotFound  %+v", 404, o.Payload)
}

func (o *RestartMachineNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RestartMachineNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
