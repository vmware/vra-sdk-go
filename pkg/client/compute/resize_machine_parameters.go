// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewResizeMachineParams creates a new ResizeMachineParams object
// with the default values initialized.
func NewResizeMachineParams() *ResizeMachineParams {
	var ()
	return &ResizeMachineParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewResizeMachineParamsWithTimeout creates a new ResizeMachineParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewResizeMachineParamsWithTimeout(timeout time.Duration) *ResizeMachineParams {
	var ()
	return &ResizeMachineParams{

		timeout: timeout,
	}
}

// NewResizeMachineParamsWithContext creates a new ResizeMachineParams object
// with the default values initialized, and the ability to set a context for a request
func NewResizeMachineParamsWithContext(ctx context.Context) *ResizeMachineParams {
	var ()
	return &ResizeMachineParams{

		Context: ctx,
	}
}

// NewResizeMachineParamsWithHTTPClient creates a new ResizeMachineParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewResizeMachineParamsWithHTTPClient(client *http.Client) *ResizeMachineParams {
	var ()
	return &ResizeMachineParams{
		HTTPClient: client,
	}
}

/*ResizeMachineParams contains all the parameters to send to the API endpoint
for the resize machine operation typically these are written to a http.Request
*/
type ResizeMachineParams struct {

	/*APIVersion
	  The version of the API in yyyy-MM-dd format (UTC). For versioning information refer to /iaas/api/about

	*/
	APIVersion *string
	/*CPUCount
	  The desired number of CPUs to resize the Machine

	*/
	CPUCount *string
	/*ID
	  The id of the Machine.

	*/
	ID string
	/*MemoryInMB
	  The desired memory in MBs to resize the Machine

	*/
	MemoryInMB *string
	/*Name
	  The desired flavor to resize the Machine.

	*/
	Name *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the resize machine params
func (o *ResizeMachineParams) WithTimeout(timeout time.Duration) *ResizeMachineParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the resize machine params
func (o *ResizeMachineParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the resize machine params
func (o *ResizeMachineParams) WithContext(ctx context.Context) *ResizeMachineParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the resize machine params
func (o *ResizeMachineParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the resize machine params
func (o *ResizeMachineParams) WithHTTPClient(client *http.Client) *ResizeMachineParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the resize machine params
func (o *ResizeMachineParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the resize machine params
func (o *ResizeMachineParams) WithAPIVersion(aPIVersion *string) *ResizeMachineParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the resize machine params
func (o *ResizeMachineParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithCPUCount adds the cPUCount to the resize machine params
func (o *ResizeMachineParams) WithCPUCount(cPUCount *string) *ResizeMachineParams {
	o.SetCPUCount(cPUCount)
	return o
}

// SetCPUCount adds the cpuCount to the resize machine params
func (o *ResizeMachineParams) SetCPUCount(cPUCount *string) {
	o.CPUCount = cPUCount
}

// WithID adds the id to the resize machine params
func (o *ResizeMachineParams) WithID(id string) *ResizeMachineParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the resize machine params
func (o *ResizeMachineParams) SetID(id string) {
	o.ID = id
}

// WithMemoryInMB adds the memoryInMB to the resize machine params
func (o *ResizeMachineParams) WithMemoryInMB(memoryInMB *string) *ResizeMachineParams {
	o.SetMemoryInMB(memoryInMB)
	return o
}

// SetMemoryInMB adds the memoryInMB to the resize machine params
func (o *ResizeMachineParams) SetMemoryInMB(memoryInMB *string) {
	o.MemoryInMB = memoryInMB
}

// WithName adds the name to the resize machine params
func (o *ResizeMachineParams) WithName(name *string) *ResizeMachineParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the resize machine params
func (o *ResizeMachineParams) SetName(name *string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *ResizeMachineParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// query param apiVersion
		var qrAPIVersion string
		if o.APIVersion != nil {
			qrAPIVersion = *o.APIVersion
		}
		qAPIVersion := qrAPIVersion
		if qAPIVersion != "" {
			if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
				return err
			}
		}

	}

	if o.CPUCount != nil {

		// query param cpuCount
		var qrCPUCount string
		if o.CPUCount != nil {
			qrCPUCount = *o.CPUCount
		}
		qCPUCount := qrCPUCount
		if qCPUCount != "" {
			if err := r.SetQueryParam("cpuCount", qCPUCount); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.MemoryInMB != nil {

		// query param memoryInMB
		var qrMemoryInMB string
		if o.MemoryInMB != nil {
			qrMemoryInMB = *o.MemoryInMB
		}
		qMemoryInMB := qrMemoryInMB
		if qMemoryInMB != "" {
			if err := r.SetQueryParam("memoryInMB", qMemoryInMB); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
