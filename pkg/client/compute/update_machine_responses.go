// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateMachineReader is a Reader for the UpdateMachine structure.
type UpdateMachineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMachineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateMachineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateMachineForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateMachineNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateMachineOK creates a UpdateMachineOK with default headers values
func NewUpdateMachineOK() *UpdateMachineOK {
	return &UpdateMachineOK{}
}

/*UpdateMachineOK handles this case with default header values.

successful operation
*/
type UpdateMachineOK struct {
	Payload *models.Machine
}

func (o *UpdateMachineOK) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/machines/{id}][%d] updateMachineOK  %+v", 200, o.Payload)
}

func (o *UpdateMachineOK) GetPayload() *models.Machine {
	return o.Payload
}

func (o *UpdateMachineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Machine)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMachineForbidden creates a UpdateMachineForbidden with default headers values
func NewUpdateMachineForbidden() *UpdateMachineForbidden {
	return &UpdateMachineForbidden{}
}

/*UpdateMachineForbidden handles this case with default header values.

Forbidden
*/
type UpdateMachineForbidden struct {
}

func (o *UpdateMachineForbidden) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/machines/{id}][%d] updateMachineForbidden ", 403)
}

func (o *UpdateMachineForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateMachineNotFound creates a UpdateMachineNotFound with default headers values
func NewUpdateMachineNotFound() *UpdateMachineNotFound {
	return &UpdateMachineNotFound{}
}

/*UpdateMachineNotFound handles this case with default header values.

Not Found
*/
type UpdateMachineNotFound struct {
	Payload *models.Error
}

func (o *UpdateMachineNotFound) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/machines/{id}][%d] updateMachineNotFound  %+v", 404, o.Payload)
}

func (o *UpdateMachineNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateMachineNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
