// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetMachineSnapshotReader is a Reader for the GetMachineSnapshot structure.
type GetMachineSnapshotReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMachineSnapshotReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMachineSnapshotOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetMachineSnapshotForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMachineSnapshotNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetMachineSnapshotOK creates a GetMachineSnapshotOK with default headers values
func NewGetMachineSnapshotOK() *GetMachineSnapshotOK {
	return &GetMachineSnapshotOK{}
}

/* GetMachineSnapshotOK describes a response with status code 200, with default header values.

successful operation
*/
type GetMachineSnapshotOK struct {
	Payload *models.BlockDevice
}

func (o *GetMachineSnapshotOK) Error() string {
	return fmt.Sprintf("[GET /iaas/api/machines/{id}/snapshots/{snapshotId}][%d] getMachineSnapshotOK  %+v", 200, o.Payload)
}
func (o *GetMachineSnapshotOK) GetPayload() *models.BlockDevice {
	return o.Payload
}

func (o *GetMachineSnapshotOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BlockDevice)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMachineSnapshotForbidden creates a GetMachineSnapshotForbidden with default headers values
func NewGetMachineSnapshotForbidden() *GetMachineSnapshotForbidden {
	return &GetMachineSnapshotForbidden{}
}

/* GetMachineSnapshotForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetMachineSnapshotForbidden struct {
	Payload *models.ServiceErrorResponse
}

func (o *GetMachineSnapshotForbidden) Error() string {
	return fmt.Sprintf("[GET /iaas/api/machines/{id}/snapshots/{snapshotId}][%d] getMachineSnapshotForbidden  %+v", 403, o.Payload)
}
func (o *GetMachineSnapshotForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *GetMachineSnapshotForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMachineSnapshotNotFound creates a GetMachineSnapshotNotFound with default headers values
func NewGetMachineSnapshotNotFound() *GetMachineSnapshotNotFound {
	return &GetMachineSnapshotNotFound{}
}

/* GetMachineSnapshotNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetMachineSnapshotNotFound struct {
	Payload *models.Error
}

func (o *GetMachineSnapshotNotFound) Error() string {
	return fmt.Sprintf("[GET /iaas/api/machines/{id}/snapshots/{snapshotId}][%d] getMachineSnapshotNotFound  %+v", 404, o.Payload)
}
func (o *GetMachineSnapshotNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetMachineSnapshotNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
