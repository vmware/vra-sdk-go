// Code generated by go-swagger; DO NOT EDIT.

package blueprint_terraform_integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListTerraformVersionsUsingGETParams creates a new ListTerraformVersionsUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListTerraformVersionsUsingGETParams() *ListTerraformVersionsUsingGETParams {
	return &ListTerraformVersionsUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListTerraformVersionsUsingGETParamsWithTimeout creates a new ListTerraformVersionsUsingGETParams object
// with the ability to set a timeout on a request.
func NewListTerraformVersionsUsingGETParamsWithTimeout(timeout time.Duration) *ListTerraformVersionsUsingGETParams {
	return &ListTerraformVersionsUsingGETParams{
		timeout: timeout,
	}
}

// NewListTerraformVersionsUsingGETParamsWithContext creates a new ListTerraformVersionsUsingGETParams object
// with the ability to set a context for a request.
func NewListTerraformVersionsUsingGETParamsWithContext(ctx context.Context) *ListTerraformVersionsUsingGETParams {
	return &ListTerraformVersionsUsingGETParams{
		Context: ctx,
	}
}

// NewListTerraformVersionsUsingGETParamsWithHTTPClient creates a new ListTerraformVersionsUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewListTerraformVersionsUsingGETParamsWithHTTPClient(client *http.Client) *ListTerraformVersionsUsingGETParams {
	return &ListTerraformVersionsUsingGETParams{
		HTTPClient: client,
	}
}

/* ListTerraformVersionsUsingGETParams contains all the parameters to send to the API endpoint
   for the list terraform versions using g e t operation.

   Typically these are written to a http.Request.
*/
type ListTerraformVersionsUsingGETParams struct {

	/* DollarOrderby.

	   Sorting criteria in the format: property (asc|desc). Default sort order is descending on updatedAt. Sorting is supported on fields createdAt, updatedAt, createdBy, updatedBy, version.
	*/
	DollarOrderby []string

	/* DollarSkip.

	   Number of records you want to skip

	   Format: int32
	*/
	DollarSkip *int32

	/* DollarTop.

	   Number of records you want

	   Format: int32
	*/
	DollarTop *int32

	/* OnlyEnabled.

	   Include only enabled versions
	*/
	OnlyEnabled *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list terraform versions using get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListTerraformVersionsUsingGETParams) WithDefaults() *ListTerraformVersionsUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list terraform versions using get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListTerraformVersionsUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list terraform versions using get params
func (o *ListTerraformVersionsUsingGETParams) WithTimeout(timeout time.Duration) *ListTerraformVersionsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list terraform versions using get params
func (o *ListTerraformVersionsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list terraform versions using get params
func (o *ListTerraformVersionsUsingGETParams) WithContext(ctx context.Context) *ListTerraformVersionsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list terraform versions using get params
func (o *ListTerraformVersionsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list terraform versions using get params
func (o *ListTerraformVersionsUsingGETParams) WithHTTPClient(client *http.Client) *ListTerraformVersionsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list terraform versions using get params
func (o *ListTerraformVersionsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarOrderby adds the dollarOrderby to the list terraform versions using get params
func (o *ListTerraformVersionsUsingGETParams) WithDollarOrderby(dollarOrderby []string) *ListTerraformVersionsUsingGETParams {
	o.SetDollarOrderby(dollarOrderby)
	return o
}

// SetDollarOrderby adds the dollarOrderby to the list terraform versions using get params
func (o *ListTerraformVersionsUsingGETParams) SetDollarOrderby(dollarOrderby []string) {
	o.DollarOrderby = dollarOrderby
}

// WithDollarSkip adds the dollarSkip to the list terraform versions using get params
func (o *ListTerraformVersionsUsingGETParams) WithDollarSkip(dollarSkip *int32) *ListTerraformVersionsUsingGETParams {
	o.SetDollarSkip(dollarSkip)
	return o
}

// SetDollarSkip adds the dollarSkip to the list terraform versions using get params
func (o *ListTerraformVersionsUsingGETParams) SetDollarSkip(dollarSkip *int32) {
	o.DollarSkip = dollarSkip
}

// WithDollarTop adds the dollarTop to the list terraform versions using get params
func (o *ListTerraformVersionsUsingGETParams) WithDollarTop(dollarTop *int32) *ListTerraformVersionsUsingGETParams {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the list terraform versions using get params
func (o *ListTerraformVersionsUsingGETParams) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithOnlyEnabled adds the onlyEnabled to the list terraform versions using get params
func (o *ListTerraformVersionsUsingGETParams) WithOnlyEnabled(onlyEnabled *bool) *ListTerraformVersionsUsingGETParams {
	o.SetOnlyEnabled(onlyEnabled)
	return o
}

// SetOnlyEnabled adds the onlyEnabled to the list terraform versions using get params
func (o *ListTerraformVersionsUsingGETParams) SetOnlyEnabled(onlyEnabled *bool) {
	o.OnlyEnabled = onlyEnabled
}

// WriteToRequest writes these params to a swagger request
func (o *ListTerraformVersionsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarOrderby != nil {

		// binding items for $orderby
		joinedDollarOrderby := o.bindParamDollarOrderby(reg)

		// query array param $orderby
		if err := r.SetQueryParam("$orderby", joinedDollarOrderby...); err != nil {
			return err
		}
	}

	if o.DollarSkip != nil {

		// query param $skip
		var qrDollarSkip int32

		if o.DollarSkip != nil {
			qrDollarSkip = *o.DollarSkip
		}
		qDollarSkip := swag.FormatInt32(qrDollarSkip)
		if qDollarSkip != "" {

			if err := r.SetQueryParam("$skip", qDollarSkip); err != nil {
				return err
			}
		}
	}

	if o.DollarTop != nil {

		// query param $top
		var qrDollarTop int32

		if o.DollarTop != nil {
			qrDollarTop = *o.DollarTop
		}
		qDollarTop := swag.FormatInt32(qrDollarTop)
		if qDollarTop != "" {

			if err := r.SetQueryParam("$top", qDollarTop); err != nil {
				return err
			}
		}
	}

	if o.OnlyEnabled != nil {

		// query param onlyEnabled
		var qrOnlyEnabled bool

		if o.OnlyEnabled != nil {
			qrOnlyEnabled = *o.OnlyEnabled
		}
		qOnlyEnabled := swag.FormatBool(qrOnlyEnabled)
		if qOnlyEnabled != "" {

			if err := r.SetQueryParam("onlyEnabled", qOnlyEnabled); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListTerraformVersionsUsingGET binds the parameter $orderby
func (o *ListTerraformVersionsUsingGETParams) bindParamDollarOrderby(formats strfmt.Registry) []string {
	dollarOrderbyIR := o.DollarOrderby

	var dollarOrderbyIC []string
	for _, dollarOrderbyIIR := range dollarOrderbyIR { // explode []string

		dollarOrderbyIIV := dollarOrderbyIIR // string as string
		dollarOrderbyIC = append(dollarOrderbyIC, dollarOrderbyIIV)
	}

	// items.CollectionFormat: "multi"
	dollarOrderbyIS := swag.JoinByFormat(dollarOrderbyIC, "multi")

	return dollarOrderbyIS
}
