// Code generated by go-swagger; DO NOT EDIT.

package blueprint_terraform_integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetConfigurationSourceTreeUsingGETParams creates a new GetConfigurationSourceTreeUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetConfigurationSourceTreeUsingGETParams() *GetConfigurationSourceTreeUsingGETParams {
	return &GetConfigurationSourceTreeUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetConfigurationSourceTreeUsingGETParamsWithTimeout creates a new GetConfigurationSourceTreeUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetConfigurationSourceTreeUsingGETParamsWithTimeout(timeout time.Duration) *GetConfigurationSourceTreeUsingGETParams {
	return &GetConfigurationSourceTreeUsingGETParams{
		timeout: timeout,
	}
}

// NewGetConfigurationSourceTreeUsingGETParamsWithContext creates a new GetConfigurationSourceTreeUsingGETParams object
// with the ability to set a context for a request.
func NewGetConfigurationSourceTreeUsingGETParamsWithContext(ctx context.Context) *GetConfigurationSourceTreeUsingGETParams {
	return &GetConfigurationSourceTreeUsingGETParams{
		Context: ctx,
	}
}

// NewGetConfigurationSourceTreeUsingGETParamsWithHTTPClient creates a new GetConfigurationSourceTreeUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetConfigurationSourceTreeUsingGETParamsWithHTTPClient(client *http.Client) *GetConfigurationSourceTreeUsingGETParams {
	return &GetConfigurationSourceTreeUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetConfigurationSourceTreeUsingGETParams contains all the parameters to send to the API endpoint

	for the get configuration source tree using g e t operation.

	Typically these are written to a http.Request.
*/
type GetConfigurationSourceTreeUsingGETParams struct {

	/* APIVersion.

	   The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /blueprint/api/about
	*/
	APIVersion *string

	/* CommitID.

	   The commit ID corresponding to the version of the configuration source.
	*/
	CommitID *string

	/* ConfigurationSourceID.

	   The ID of the configuration source to inspect.

	   Format: uuid
	*/
	ConfigurationSourceID strfmt.UUID

	/* Path.

	   A file path prefix. The prefix is interpreted in the context of the configuration source's path prefix. Results will only include directories under this path.
	*/
	Path *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get configuration source tree using get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetConfigurationSourceTreeUsingGETParams) WithDefaults() *GetConfigurationSourceTreeUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get configuration source tree using get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetConfigurationSourceTreeUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get configuration source tree using get params
func (o *GetConfigurationSourceTreeUsingGETParams) WithTimeout(timeout time.Duration) *GetConfigurationSourceTreeUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get configuration source tree using get params
func (o *GetConfigurationSourceTreeUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get configuration source tree using get params
func (o *GetConfigurationSourceTreeUsingGETParams) WithContext(ctx context.Context) *GetConfigurationSourceTreeUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get configuration source tree using get params
func (o *GetConfigurationSourceTreeUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get configuration source tree using get params
func (o *GetConfigurationSourceTreeUsingGETParams) WithHTTPClient(client *http.Client) *GetConfigurationSourceTreeUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get configuration source tree using get params
func (o *GetConfigurationSourceTreeUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get configuration source tree using get params
func (o *GetConfigurationSourceTreeUsingGETParams) WithAPIVersion(aPIVersion *string) *GetConfigurationSourceTreeUsingGETParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get configuration source tree using get params
func (o *GetConfigurationSourceTreeUsingGETParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithCommitID adds the commitID to the get configuration source tree using get params
func (o *GetConfigurationSourceTreeUsingGETParams) WithCommitID(commitID *string) *GetConfigurationSourceTreeUsingGETParams {
	o.SetCommitID(commitID)
	return o
}

// SetCommitID adds the commitId to the get configuration source tree using get params
func (o *GetConfigurationSourceTreeUsingGETParams) SetCommitID(commitID *string) {
	o.CommitID = commitID
}

// WithConfigurationSourceID adds the configurationSourceID to the get configuration source tree using get params
func (o *GetConfigurationSourceTreeUsingGETParams) WithConfigurationSourceID(configurationSourceID strfmt.UUID) *GetConfigurationSourceTreeUsingGETParams {
	o.SetConfigurationSourceID(configurationSourceID)
	return o
}

// SetConfigurationSourceID adds the configurationSourceId to the get configuration source tree using get params
func (o *GetConfigurationSourceTreeUsingGETParams) SetConfigurationSourceID(configurationSourceID strfmt.UUID) {
	o.ConfigurationSourceID = configurationSourceID
}

// WithPath adds the path to the get configuration source tree using get params
func (o *GetConfigurationSourceTreeUsingGETParams) WithPath(path *string) *GetConfigurationSourceTreeUsingGETParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get configuration source tree using get params
func (o *GetConfigurationSourceTreeUsingGETParams) SetPath(path *string) {
	o.Path = path
}

// WriteToRequest writes these params to a swagger request
func (o *GetConfigurationSourceTreeUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// query param apiVersion
		var qrAPIVersion string

		if o.APIVersion != nil {
			qrAPIVersion = *o.APIVersion
		}
		qAPIVersion := qrAPIVersion
		if qAPIVersion != "" {

			if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
				return err
			}
		}
	}

	if o.CommitID != nil {

		// query param commitId
		var qrCommitID string

		if o.CommitID != nil {
			qrCommitID = *o.CommitID
		}
		qCommitID := qrCommitID
		if qCommitID != "" {

			if err := r.SetQueryParam("commitId", qCommitID); err != nil {
				return err
			}
		}
	}

	// query param configurationSourceId
	qrConfigurationSourceID := o.ConfigurationSourceID
	qConfigurationSourceID := qrConfigurationSourceID.String()
	if qConfigurationSourceID != "" {

		if err := r.SetQueryParam("configurationSourceId", qConfigurationSourceID); err != nil {
			return err
		}
	}

	if o.Path != nil {

		// query param path
		var qrPath string

		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {

			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
