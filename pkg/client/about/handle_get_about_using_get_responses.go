// Code generated by go-swagger; DO NOT EDIT.

package about

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// HandleGetAboutUsingGETReader is a Reader for the HandleGetAboutUsingGET structure.
type HandleGetAboutUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HandleGetAboutUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHandleGetAboutUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewHandleGetAboutUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHandleGetAboutUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHandleGetAboutUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewHandleGetAboutUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewHandleGetAboutUsingGETOK creates a HandleGetAboutUsingGETOK with default headers values
func NewHandleGetAboutUsingGETOK() *HandleGetAboutUsingGETOK {
	return &HandleGetAboutUsingGETOK{}
}

/*
HandleGetAboutUsingGETOK describes a response with status code 200, with default header values.

'Success' with the requested Endpoint
*/
type HandleGetAboutUsingGETOK struct {
	Payload models.About
}

// IsSuccess returns true when this handle get about using g e t o k response has a 2xx status code
func (o *HandleGetAboutUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this handle get about using g e t o k response has a 3xx status code
func (o *HandleGetAboutUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle get about using g e t o k response has a 4xx status code
func (o *HandleGetAboutUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this handle get about using g e t o k response has a 5xx status code
func (o *HandleGetAboutUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this handle get about using g e t o k response a status code equal to that given
func (o *HandleGetAboutUsingGETOK) IsCode(code int) bool {
	return code == 200
}

func (o *HandleGetAboutUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/about][%d] handleGetAboutUsingGETOK  %+v", 200, o.Payload)
}

func (o *HandleGetAboutUsingGETOK) String() string {
	return fmt.Sprintf("[GET /codestream/api/about][%d] handleGetAboutUsingGETOK  %+v", 200, o.Payload)
}

func (o *HandleGetAboutUsingGETOK) GetPayload() models.About {
	return o.Payload
}

func (o *HandleGetAboutUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalAbout(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewHandleGetAboutUsingGETUnauthorized creates a HandleGetAboutUsingGETUnauthorized with default headers values
func NewHandleGetAboutUsingGETUnauthorized() *HandleGetAboutUsingGETUnauthorized {
	return &HandleGetAboutUsingGETUnauthorized{}
}

/*
HandleGetAboutUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type HandleGetAboutUsingGETUnauthorized struct {
}

// IsSuccess returns true when this handle get about using g e t unauthorized response has a 2xx status code
func (o *HandleGetAboutUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle get about using g e t unauthorized response has a 3xx status code
func (o *HandleGetAboutUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle get about using g e t unauthorized response has a 4xx status code
func (o *HandleGetAboutUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this handle get about using g e t unauthorized response has a 5xx status code
func (o *HandleGetAboutUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this handle get about using g e t unauthorized response a status code equal to that given
func (o *HandleGetAboutUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *HandleGetAboutUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/about][%d] handleGetAboutUsingGETUnauthorized ", 401)
}

func (o *HandleGetAboutUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /codestream/api/about][%d] handleGetAboutUsingGETUnauthorized ", 401)
}

func (o *HandleGetAboutUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandleGetAboutUsingGETForbidden creates a HandleGetAboutUsingGETForbidden with default headers values
func NewHandleGetAboutUsingGETForbidden() *HandleGetAboutUsingGETForbidden {
	return &HandleGetAboutUsingGETForbidden{}
}

/*
HandleGetAboutUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type HandleGetAboutUsingGETForbidden struct {
}

// IsSuccess returns true when this handle get about using g e t forbidden response has a 2xx status code
func (o *HandleGetAboutUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle get about using g e t forbidden response has a 3xx status code
func (o *HandleGetAboutUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle get about using g e t forbidden response has a 4xx status code
func (o *HandleGetAboutUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this handle get about using g e t forbidden response has a 5xx status code
func (o *HandleGetAboutUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this handle get about using g e t forbidden response a status code equal to that given
func (o *HandleGetAboutUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *HandleGetAboutUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/about][%d] handleGetAboutUsingGETForbidden ", 403)
}

func (o *HandleGetAboutUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /codestream/api/about][%d] handleGetAboutUsingGETForbidden ", 403)
}

func (o *HandleGetAboutUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandleGetAboutUsingGETNotFound creates a HandleGetAboutUsingGETNotFound with default headers values
func NewHandleGetAboutUsingGETNotFound() *HandleGetAboutUsingGETNotFound {
	return &HandleGetAboutUsingGETNotFound{}
}

/*
HandleGetAboutUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type HandleGetAboutUsingGETNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this handle get about using g e t not found response has a 2xx status code
func (o *HandleGetAboutUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle get about using g e t not found response has a 3xx status code
func (o *HandleGetAboutUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle get about using g e t not found response has a 4xx status code
func (o *HandleGetAboutUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this handle get about using g e t not found response has a 5xx status code
func (o *HandleGetAboutUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this handle get about using g e t not found response a status code equal to that given
func (o *HandleGetAboutUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *HandleGetAboutUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/about][%d] handleGetAboutUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *HandleGetAboutUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /codestream/api/about][%d] handleGetAboutUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *HandleGetAboutUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *HandleGetAboutUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHandleGetAboutUsingGETInternalServerError creates a HandleGetAboutUsingGETInternalServerError with default headers values
func NewHandleGetAboutUsingGETInternalServerError() *HandleGetAboutUsingGETInternalServerError {
	return &HandleGetAboutUsingGETInternalServerError{}
}

/*
HandleGetAboutUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type HandleGetAboutUsingGETInternalServerError struct {
}

// IsSuccess returns true when this handle get about using g e t internal server error response has a 2xx status code
func (o *HandleGetAboutUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle get about using g e t internal server error response has a 3xx status code
func (o *HandleGetAboutUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle get about using g e t internal server error response has a 4xx status code
func (o *HandleGetAboutUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this handle get about using g e t internal server error response has a 5xx status code
func (o *HandleGetAboutUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this handle get about using g e t internal server error response a status code equal to that given
func (o *HandleGetAboutUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *HandleGetAboutUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/about][%d] handleGetAboutUsingGETInternalServerError ", 500)
}

func (o *HandleGetAboutUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /codestream/api/about][%d] handleGetAboutUsingGETInternalServerError ", 500)
}

func (o *HandleGetAboutUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
