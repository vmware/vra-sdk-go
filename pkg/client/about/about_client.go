// Code generated by go-swagger; DO NOT EDIT.

package about

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new about API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for about API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAboutPage(params *GetAboutPageParams, opts ...ClientOption) (*GetAboutPageOK, error)

	GetAboutPageMixin5(params *GetAboutPageMixin5Params, opts ...ClientOption) (*GetAboutPageMixin5OK, error)

	GetAboutUsingGET(params *GetAboutUsingGETParams, opts ...ClientOption) (*GetAboutUsingGETOK, error)

	GetAboutUsingGET1(params *GetAboutUsingGET1Params, opts ...ClientOption) (*GetAboutUsingGET1OK, error)

	HandleGetAboutUsingGET(params *HandleGetAboutUsingGETParams, opts ...ClientOption) (*HandleGetAboutUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GetAboutPage gets about page

	The page contains information about the supported API versions and the latest API version. The version parameter is optional but highly recommended.

If you do not specify explicitly an exact version, you will be calling the latest supported General Availability API version.
Here is an example of a call which specifies the exact version you are using: `GET /iaas/api/network-profiles?apiVersion=2021-07-15`

Note that this version is deprecated: 2019-01-15.
*/
func (a *Client) GetAboutPage(params *GetAboutPageParams, opts ...ClientOption) (*GetAboutPageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAboutPageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAboutPage",
		Method:             "GET",
		PathPattern:        "/iaas/api/about",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAboutPageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAboutPageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAboutPage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAboutPageMixin5 gets about page

	The page contains information about the supported API versions and the latest API version. The version parameter is optional but highly recommended.

If you do not specify explicitly an exact version, you will be calling the latest supported API version.
Here is an example of a call which specifies the exact version you are using: `GET /project-service/api/projects?apiVersion=2019-01-15`
*/
func (a *Client) GetAboutPageMixin5(params *GetAboutPageMixin5Params, opts ...ClientOption) (*GetAboutPageMixin5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAboutPageMixin5Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAboutPageMixin5",
		Method:             "GET",
		PathPattern:        "/project-service/api/about",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAboutPageMixin5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAboutPageMixin5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAboutPageMixin5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAboutUsingGET returns content API information

	The page contains information about the supported API versions and the latest API version. The version parameter is optional but highly recommended.

If you do not specify explicitly an exact version, you will be calling the latest supported API version.
Here is an example of a call which specifies the exact version you are using: GET /content/api/sources?apiVersion=2019-01-15
*/
func (a *Client) GetAboutUsingGET(params *GetAboutUsingGETParams, opts ...ClientOption) (*GetAboutUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAboutUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAboutUsingGET",
		Method:             "GET",
		PathPattern:        "/content/api/about",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAboutUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAboutUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAboutUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAboutUsingGET1 returns blueprint API information

	The page contains information about the supported API versions and the latest API version. The version parameter is optional but highly recommended.

If you do not specify explicitly an exact version, you will be calling the latest supported API version.
Here is an example of a call which specifies the exact version you are using: GET /blueprint/api/blueprints?apiVersion=2019-09-12
*/
func (a *Client) GetAboutUsingGET1(params *GetAboutUsingGET1Params, opts ...ClientOption) (*GetAboutUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAboutUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAboutUsingGET_1",
		Method:             "GET",
		PathPattern:        "/blueprint/api/about",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAboutUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAboutUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAboutUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	HandleGetAboutUsingGET gets about page

	The page contains information about the supported API versions and the latest API version. The version parameter is optional but highly recommended.

If you do not specify explicitly an exact version, you will be calling the latest supported API version.
Here is an example of a call which specifies the exact version you are using: `GET /codestream/api/pipelines?apiVersion=2019-10-17`
*/
func (a *Client) HandleGetAboutUsingGET(params *HandleGetAboutUsingGETParams, opts ...ClientOption) (*HandleGetAboutUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleGetAboutUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "handleGetAboutUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/about",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleGetAboutUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HandleGetAboutUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for handleGetAboutUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
