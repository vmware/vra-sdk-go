// Code generated by go-swagger; DO NOT EDIT.

package location

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetZoneReader is a Reader for the GetZone structure.
type GetZoneReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetZoneReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetZoneOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetZoneForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetZoneNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetZoneOK creates a GetZoneOK with default headers values
func NewGetZoneOK() *GetZoneOK {
	return &GetZoneOK{}
}

/*
GetZoneOK describes a response with status code 200, with default header values.

successful operation
*/
type GetZoneOK struct {
	Payload *models.Zone
}

// IsSuccess returns true when this get zone o k response has a 2xx status code
func (o *GetZoneOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get zone o k response has a 3xx status code
func (o *GetZoneOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get zone o k response has a 4xx status code
func (o *GetZoneOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get zone o k response has a 5xx status code
func (o *GetZoneOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get zone o k response a status code equal to that given
func (o *GetZoneOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetZoneOK) Error() string {
	return fmt.Sprintf("[GET /iaas/api/zones/{id}][%d] getZoneOK  %+v", 200, o.Payload)
}

func (o *GetZoneOK) String() string {
	return fmt.Sprintf("[GET /iaas/api/zones/{id}][%d] getZoneOK  %+v", 200, o.Payload)
}

func (o *GetZoneOK) GetPayload() *models.Zone {
	return o.Payload
}

func (o *GetZoneOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Zone)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetZoneForbidden creates a GetZoneForbidden with default headers values
func NewGetZoneForbidden() *GetZoneForbidden {
	return &GetZoneForbidden{}
}

/*
GetZoneForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetZoneForbidden struct {
	Payload *models.ServiceErrorResponse
}

// IsSuccess returns true when this get zone forbidden response has a 2xx status code
func (o *GetZoneForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get zone forbidden response has a 3xx status code
func (o *GetZoneForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get zone forbidden response has a 4xx status code
func (o *GetZoneForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get zone forbidden response has a 5xx status code
func (o *GetZoneForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get zone forbidden response a status code equal to that given
func (o *GetZoneForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetZoneForbidden) Error() string {
	return fmt.Sprintf("[GET /iaas/api/zones/{id}][%d] getZoneForbidden  %+v", 403, o.Payload)
}

func (o *GetZoneForbidden) String() string {
	return fmt.Sprintf("[GET /iaas/api/zones/{id}][%d] getZoneForbidden  %+v", 403, o.Payload)
}

func (o *GetZoneForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *GetZoneForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetZoneNotFound creates a GetZoneNotFound with default headers values
func NewGetZoneNotFound() *GetZoneNotFound {
	return &GetZoneNotFound{}
}

/*
GetZoneNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetZoneNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get zone not found response has a 2xx status code
func (o *GetZoneNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get zone not found response has a 3xx status code
func (o *GetZoneNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get zone not found response has a 4xx status code
func (o *GetZoneNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get zone not found response has a 5xx status code
func (o *GetZoneNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get zone not found response a status code equal to that given
func (o *GetZoneNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetZoneNotFound) Error() string {
	return fmt.Sprintf("[GET /iaas/api/zones/{id}][%d] getZoneNotFound  %+v", 404, o.Payload)
}

func (o *GetZoneNotFound) String() string {
	return fmt.Sprintf("[GET /iaas/api/zones/{id}][%d] getZoneNotFound  %+v", 404, o.Payload)
}

func (o *GetZoneNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetZoneNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
