// Code generated by go-swagger; DO NOT EDIT.

package policy_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTypesUsingGET1Params creates a new GetTypesUsingGET1Params object
// with the default values initialized.
func NewGetTypesUsingGET1Params() *GetTypesUsingGET1Params {
	var ()
	return &GetTypesUsingGET1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTypesUsingGET1ParamsWithTimeout creates a new GetTypesUsingGET1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTypesUsingGET1ParamsWithTimeout(timeout time.Duration) *GetTypesUsingGET1Params {
	var ()
	return &GetTypesUsingGET1Params{

		timeout: timeout,
	}
}

// NewGetTypesUsingGET1ParamsWithContext creates a new GetTypesUsingGET1Params object
// with the default values initialized, and the ability to set a context for a request
func NewGetTypesUsingGET1ParamsWithContext(ctx context.Context) *GetTypesUsingGET1Params {
	var ()
	return &GetTypesUsingGET1Params{

		Context: ctx,
	}
}

// NewGetTypesUsingGET1ParamsWithHTTPClient creates a new GetTypesUsingGET1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTypesUsingGET1ParamsWithHTTPClient(client *http.Client) *GetTypesUsingGET1Params {
	var ()
	return &GetTypesUsingGET1Params{
		HTTPClient: client,
	}
}

/*GetTypesUsingGET1Params contains all the parameters to send to the API endpoint
for the get types using get1 operation typically these are written to a http.Request
*/
type GetTypesUsingGET1Params struct {

	/*DollarOrderby
	  Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.

	*/
	DollarOrderby []string
	/*DollarSkip
	  Number of records you want to skip

	*/
	DollarSkip *int32
	/*DollarTop
	  Number of records you want

	*/
	DollarTop *int32
	/*ExpandSchema
	  Retrieves the schema for this policy type

	*/
	ExpandSchema *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get types using get1 params
func (o *GetTypesUsingGET1Params) WithTimeout(timeout time.Duration) *GetTypesUsingGET1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get types using get1 params
func (o *GetTypesUsingGET1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get types using get1 params
func (o *GetTypesUsingGET1Params) WithContext(ctx context.Context) *GetTypesUsingGET1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get types using get1 params
func (o *GetTypesUsingGET1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get types using get1 params
func (o *GetTypesUsingGET1Params) WithHTTPClient(client *http.Client) *GetTypesUsingGET1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get types using get1 params
func (o *GetTypesUsingGET1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarOrderby adds the dollarOrderby to the get types using get1 params
func (o *GetTypesUsingGET1Params) WithDollarOrderby(dollarOrderby []string) *GetTypesUsingGET1Params {
	o.SetDollarOrderby(dollarOrderby)
	return o
}

// SetDollarOrderby adds the dollarOrderby to the get types using get1 params
func (o *GetTypesUsingGET1Params) SetDollarOrderby(dollarOrderby []string) {
	o.DollarOrderby = dollarOrderby
}

// WithDollarSkip adds the dollarSkip to the get types using get1 params
func (o *GetTypesUsingGET1Params) WithDollarSkip(dollarSkip *int32) *GetTypesUsingGET1Params {
	o.SetDollarSkip(dollarSkip)
	return o
}

// SetDollarSkip adds the dollarSkip to the get types using get1 params
func (o *GetTypesUsingGET1Params) SetDollarSkip(dollarSkip *int32) {
	o.DollarSkip = dollarSkip
}

// WithDollarTop adds the dollarTop to the get types using get1 params
func (o *GetTypesUsingGET1Params) WithDollarTop(dollarTop *int32) *GetTypesUsingGET1Params {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the get types using get1 params
func (o *GetTypesUsingGET1Params) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithExpandSchema adds the expandSchema to the get types using get1 params
func (o *GetTypesUsingGET1Params) WithExpandSchema(expandSchema *bool) *GetTypesUsingGET1Params {
	o.SetExpandSchema(expandSchema)
	return o
}

// SetExpandSchema adds the expandSchema to the get types using get1 params
func (o *GetTypesUsingGET1Params) SetExpandSchema(expandSchema *bool) {
	o.ExpandSchema = expandSchema
}

// WriteToRequest writes these params to a swagger request
func (o *GetTypesUsingGET1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesDollarOrderby := o.DollarOrderby

	joinedDollarOrderby := swag.JoinByFormat(valuesDollarOrderby, "multi")
	// query array param $orderby
	if err := r.SetQueryParam("$orderby", joinedDollarOrderby...); err != nil {
		return err
	}

	if o.DollarSkip != nil {

		// query param $skip
		var qrDollarSkip int32
		if o.DollarSkip != nil {
			qrDollarSkip = *o.DollarSkip
		}
		qDollarSkip := swag.FormatInt32(qrDollarSkip)
		if qDollarSkip != "" {
			if err := r.SetQueryParam("$skip", qDollarSkip); err != nil {
				return err
			}
		}

	}

	if o.DollarTop != nil {

		// query param $top
		var qrDollarTop int32
		if o.DollarTop != nil {
			qrDollarTop = *o.DollarTop
		}
		qDollarTop := swag.FormatInt32(qrDollarTop)
		if qDollarTop != "" {
			if err := r.SetQueryParam("$top", qDollarTop); err != nil {
				return err
			}
		}

	}

	if o.ExpandSchema != nil {

		// query param expandSchema
		var qrExpandSchema bool
		if o.ExpandSchema != nil {
			qrExpandSchema = *o.ExpandSchema
		}
		qExpandSchema := swag.FormatBool(qrExpandSchema)
		if qExpandSchema != "" {
			if err := r.SetQueryParam("expandSchema", qExpandSchema); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
