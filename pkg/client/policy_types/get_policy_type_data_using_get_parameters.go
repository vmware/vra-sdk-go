// Code generated by go-swagger; DO NOT EDIT.

package policy_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPolicyTypeDataUsingGETParams creates a new GetPolicyTypeDataUsingGETParams object
// with the default values initialized.
func NewGetPolicyTypeDataUsingGETParams() *GetPolicyTypeDataUsingGETParams {
	var ()
	return &GetPolicyTypeDataUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPolicyTypeDataUsingGETParamsWithTimeout creates a new GetPolicyTypeDataUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPolicyTypeDataUsingGETParamsWithTimeout(timeout time.Duration) *GetPolicyTypeDataUsingGETParams {
	var ()
	return &GetPolicyTypeDataUsingGETParams{

		timeout: timeout,
	}
}

// NewGetPolicyTypeDataUsingGETParamsWithContext creates a new GetPolicyTypeDataUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPolicyTypeDataUsingGETParamsWithContext(ctx context.Context) *GetPolicyTypeDataUsingGETParams {
	var ()
	return &GetPolicyTypeDataUsingGETParams{

		Context: ctx,
	}
}

// NewGetPolicyTypeDataUsingGETParamsWithHTTPClient creates a new GetPolicyTypeDataUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPolicyTypeDataUsingGETParamsWithHTTPClient(client *http.Client) *GetPolicyTypeDataUsingGETParams {
	var ()
	return &GetPolicyTypeDataUsingGETParams{
		HTTPClient: client,
	}
}

/*GetPolicyTypeDataUsingGETParams contains all the parameters to send to the API endpoint
for the get policy type data using g e t operation typically these are written to a http.Request
*/
type GetPolicyTypeDataUsingGETParams struct {

	/*DollarOrderby
	  Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.

	*/
	DollarOrderby []string
	/*DollarSkip
	  Number of records you want to skip

	*/
	DollarSkip *int32
	/*DollarTop
	  Number of records you want

	*/
	DollarTop *int32
	/*DataPath
	  Data path

	*/
	DataPath string
	/*ID
	  Policy type ID

	*/
	ID string
	/*ProjectID
	  Optional projectId to further contextualize returned data elements

	*/
	ProjectID *string
	/*Search
	  Search param for data elements

	*/
	Search *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) WithTimeout(timeout time.Duration) *GetPolicyTypeDataUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) WithContext(ctx context.Context) *GetPolicyTypeDataUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) WithHTTPClient(client *http.Client) *GetPolicyTypeDataUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarOrderby adds the dollarOrderby to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) WithDollarOrderby(dollarOrderby []string) *GetPolicyTypeDataUsingGETParams {
	o.SetDollarOrderby(dollarOrderby)
	return o
}

// SetDollarOrderby adds the dollarOrderby to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) SetDollarOrderby(dollarOrderby []string) {
	o.DollarOrderby = dollarOrderby
}

// WithDollarSkip adds the dollarSkip to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) WithDollarSkip(dollarSkip *int32) *GetPolicyTypeDataUsingGETParams {
	o.SetDollarSkip(dollarSkip)
	return o
}

// SetDollarSkip adds the dollarSkip to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) SetDollarSkip(dollarSkip *int32) {
	o.DollarSkip = dollarSkip
}

// WithDollarTop adds the dollarTop to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) WithDollarTop(dollarTop *int32) *GetPolicyTypeDataUsingGETParams {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithDataPath adds the dataPath to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) WithDataPath(dataPath string) *GetPolicyTypeDataUsingGETParams {
	o.SetDataPath(dataPath)
	return o
}

// SetDataPath adds the dataPath to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) SetDataPath(dataPath string) {
	o.DataPath = dataPath
}

// WithID adds the id to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) WithID(id string) *GetPolicyTypeDataUsingGETParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) SetID(id string) {
	o.ID = id
}

// WithProjectID adds the projectID to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) WithProjectID(projectID *string) *GetPolicyTypeDataUsingGETParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithSearch adds the search to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) WithSearch(search *string) *GetPolicyTypeDataUsingGETParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get policy type data using get params
func (o *GetPolicyTypeDataUsingGETParams) SetSearch(search *string) {
	o.Search = search
}

// WriteToRequest writes these params to a swagger request
func (o *GetPolicyTypeDataUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesDollarOrderby := o.DollarOrderby

	joinedDollarOrderby := swag.JoinByFormat(valuesDollarOrderby, "multi")
	// query array param $orderby
	if err := r.SetQueryParam("$orderby", joinedDollarOrderby...); err != nil {
		return err
	}

	if o.DollarSkip != nil {

		// query param $skip
		var qrDollarSkip int32
		if o.DollarSkip != nil {
			qrDollarSkip = *o.DollarSkip
		}
		qDollarSkip := swag.FormatInt32(qrDollarSkip)
		if qDollarSkip != "" {
			if err := r.SetQueryParam("$skip", qDollarSkip); err != nil {
				return err
			}
		}

	}

	if o.DollarTop != nil {

		// query param $top
		var qrDollarTop int32
		if o.DollarTop != nil {
			qrDollarTop = *o.DollarTop
		}
		qDollarTop := swag.FormatInt32(qrDollarTop)
		if qDollarTop != "" {
			if err := r.SetQueryParam("$top", qDollarTop); err != nil {
				return err
			}
		}

	}

	// path param dataPath
	if err := r.SetPathParam("dataPath", o.DataPath); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID string
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {
			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
