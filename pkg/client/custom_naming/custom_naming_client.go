// Code generated by go-swagger; DO NOT EDIT.

package custom_naming

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new custom naming API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for custom naming API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCustomName(params *CreateCustomNameParams, opts ...ClientOption) (*CreateCustomNameCreated, error)

	DeleteCustomname(params *DeleteCustomnameParams, opts ...ClientOption) (*DeleteCustomnameNoContent, error)

	GetCustomName(params *GetCustomNameParams, opts ...ClientOption) (*GetCustomNameOK, error)

	GetCustomNameByProjectID(params *GetCustomNameByProjectIDParams, opts ...ClientOption) (*GetCustomNameByProjectIDOK, error)

	UpdateCustomName(params *UpdateCustomNameParams, opts ...ClientOption) (*UpdateCustomNameOK, *UpdateCustomNameNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateCustomName creates custom name

Create Custom Name
*/
func (a *Client) CreateCustomName(params *CreateCustomNameParams, opts ...ClientOption) (*CreateCustomNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCustomName",
		Method:             "POST",
		PathPattern:        "/iaas/api/naming",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCustomNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCustomNameCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCustomName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCustomname deletes custom name

Delete custom name with a given id
*/
func (a *Client) DeleteCustomname(params *DeleteCustomnameParams, opts ...ClientOption) (*DeleteCustomnameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomnameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCustomname",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/naming/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCustomnameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomnameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCustomname: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCustomName gets custom name by Id

Get Custom Name by Id
*/
func (a *Client) GetCustomName(params *GetCustomNameParams, opts ...ClientOption) (*GetCustomNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCustomName",
		Method:             "GET",
		PathPattern:        "/iaas/api/naming/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCustomNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCustomName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCustomNameByProjectID gets custom names for project Id

Get Custom Names For Project Id
*/
func (a *Client) GetCustomNameByProjectID(params *GetCustomNameByProjectIDParams, opts ...ClientOption) (*GetCustomNameByProjectIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomNameByProjectIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCustomNameByProjectId",
		Method:             "GET",
		PathPattern:        "/iaas/api/naming/projectId/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomNameByProjectIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCustomNameByProjectIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCustomNameByProjectId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCustomName updates custom name

Update custom name
*/
func (a *Client) UpdateCustomName(params *UpdateCustomNameParams, opts ...ClientOption) (*UpdateCustomNameOK, *UpdateCustomNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCustomName",
		Method:             "PUT",
		PathPattern:        "/iaas/api/naming",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCustomNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateCustomNameOK:
		return value, nil, nil
	case *UpdateCustomNameNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for custom_naming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
