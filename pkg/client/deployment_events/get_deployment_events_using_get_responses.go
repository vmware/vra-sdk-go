// Code generated by go-swagger; DO NOT EDIT.

package deployment_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetDeploymentEventsUsingGETReader is a Reader for the GetDeploymentEventsUsingGET structure.
type GetDeploymentEventsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeploymentEventsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeploymentEventsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDeploymentEventsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDeploymentEventsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDeploymentEventsUsingGETOK creates a GetDeploymentEventsUsingGETOK with default headers values
func NewGetDeploymentEventsUsingGETOK() *GetDeploymentEventsUsingGETOK {
	return &GetDeploymentEventsUsingGETOK{}
}

/*GetDeploymentEventsUsingGETOK handles this case with default header values.

OK
*/
type GetDeploymentEventsUsingGETOK struct {
	Payload *models.PageOfDeploymentEvent
}

func (o *GetDeploymentEventsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/events][%d] getDeploymentEventsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetDeploymentEventsUsingGETOK) GetPayload() *models.PageOfDeploymentEvent {
	return o.Payload
}

func (o *GetDeploymentEventsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageOfDeploymentEvent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeploymentEventsUsingGETUnauthorized creates a GetDeploymentEventsUsingGETUnauthorized with default headers values
func NewGetDeploymentEventsUsingGETUnauthorized() *GetDeploymentEventsUsingGETUnauthorized {
	return &GetDeploymentEventsUsingGETUnauthorized{}
}

/*GetDeploymentEventsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetDeploymentEventsUsingGETUnauthorized struct {
}

func (o *GetDeploymentEventsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/events][%d] getDeploymentEventsUsingGETUnauthorized ", 401)
}

func (o *GetDeploymentEventsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeploymentEventsUsingGETNotFound creates a GetDeploymentEventsUsingGETNotFound with default headers values
func NewGetDeploymentEventsUsingGETNotFound() *GetDeploymentEventsUsingGETNotFound {
	return &GetDeploymentEventsUsingGETNotFound{}
}

/*GetDeploymentEventsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetDeploymentEventsUsingGETNotFound struct {
	Payload *models.Error
}

func (o *GetDeploymentEventsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/events][%d] getDeploymentEventsUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetDeploymentEventsUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDeploymentEventsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
