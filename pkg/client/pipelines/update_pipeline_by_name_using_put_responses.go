// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdatePipelineByNameUsingPUTReader is a Reader for the UpdatePipelineByNameUsingPUT structure.
type UpdatePipelineByNameUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePipelineByNameUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePipelineByNameUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdatePipelineByNameUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdatePipelineByNameUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePipelineByNameUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdatePipelineByNameUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdatePipelineByNameUsingPUTOK creates a UpdatePipelineByNameUsingPUTOK with default headers values
func NewUpdatePipelineByNameUsingPUTOK() *UpdatePipelineByNameUsingPUTOK {
	return &UpdatePipelineByNameUsingPUTOK{}
}

/*
UpdatePipelineByNameUsingPUTOK describes a response with status code 200, with default header values.

'Success' with the updated Pipeline
*/
type UpdatePipelineByNameUsingPUTOK struct {
	Payload models.Pipeline
}

// IsSuccess returns true when this update pipeline by name using p u t o k response has a 2xx status code
func (o *UpdatePipelineByNameUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update pipeline by name using p u t o k response has a 3xx status code
func (o *UpdatePipelineByNameUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update pipeline by name using p u t o k response has a 4xx status code
func (o *UpdatePipelineByNameUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update pipeline by name using p u t o k response has a 5xx status code
func (o *UpdatePipelineByNameUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update pipeline by name using p u t o k response a status code equal to that given
func (o *UpdatePipelineByNameUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdatePipelineByNameUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/pipelines/{project}/{name}][%d] updatePipelineByNameUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdatePipelineByNameUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /codestream/api/pipelines/{project}/{name}][%d] updatePipelineByNameUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdatePipelineByNameUsingPUTOK) GetPayload() models.Pipeline {
	return o.Payload
}

func (o *UpdatePipelineByNameUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalPipeline(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewUpdatePipelineByNameUsingPUTUnauthorized creates a UpdatePipelineByNameUsingPUTUnauthorized with default headers values
func NewUpdatePipelineByNameUsingPUTUnauthorized() *UpdatePipelineByNameUsingPUTUnauthorized {
	return &UpdatePipelineByNameUsingPUTUnauthorized{}
}

/*
UpdatePipelineByNameUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type UpdatePipelineByNameUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update pipeline by name using p u t unauthorized response has a 2xx status code
func (o *UpdatePipelineByNameUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update pipeline by name using p u t unauthorized response has a 3xx status code
func (o *UpdatePipelineByNameUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update pipeline by name using p u t unauthorized response has a 4xx status code
func (o *UpdatePipelineByNameUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update pipeline by name using p u t unauthorized response has a 5xx status code
func (o *UpdatePipelineByNameUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update pipeline by name using p u t unauthorized response a status code equal to that given
func (o *UpdatePipelineByNameUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdatePipelineByNameUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/pipelines/{project}/{name}][%d] updatePipelineByNameUsingPUTUnauthorized ", 401)
}

func (o *UpdatePipelineByNameUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /codestream/api/pipelines/{project}/{name}][%d] updatePipelineByNameUsingPUTUnauthorized ", 401)
}

func (o *UpdatePipelineByNameUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePipelineByNameUsingPUTForbidden creates a UpdatePipelineByNameUsingPUTForbidden with default headers values
func NewUpdatePipelineByNameUsingPUTForbidden() *UpdatePipelineByNameUsingPUTForbidden {
	return &UpdatePipelineByNameUsingPUTForbidden{}
}

/*
UpdatePipelineByNameUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdatePipelineByNameUsingPUTForbidden struct {
}

// IsSuccess returns true when this update pipeline by name using p u t forbidden response has a 2xx status code
func (o *UpdatePipelineByNameUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update pipeline by name using p u t forbidden response has a 3xx status code
func (o *UpdatePipelineByNameUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update pipeline by name using p u t forbidden response has a 4xx status code
func (o *UpdatePipelineByNameUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update pipeline by name using p u t forbidden response has a 5xx status code
func (o *UpdatePipelineByNameUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update pipeline by name using p u t forbidden response a status code equal to that given
func (o *UpdatePipelineByNameUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdatePipelineByNameUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/pipelines/{project}/{name}][%d] updatePipelineByNameUsingPUTForbidden ", 403)
}

func (o *UpdatePipelineByNameUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /codestream/api/pipelines/{project}/{name}][%d] updatePipelineByNameUsingPUTForbidden ", 403)
}

func (o *UpdatePipelineByNameUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePipelineByNameUsingPUTNotFound creates a UpdatePipelineByNameUsingPUTNotFound with default headers values
func NewUpdatePipelineByNameUsingPUTNotFound() *UpdatePipelineByNameUsingPUTNotFound {
	return &UpdatePipelineByNameUsingPUTNotFound{}
}

/*
UpdatePipelineByNameUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdatePipelineByNameUsingPUTNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update pipeline by name using p u t not found response has a 2xx status code
func (o *UpdatePipelineByNameUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update pipeline by name using p u t not found response has a 3xx status code
func (o *UpdatePipelineByNameUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update pipeline by name using p u t not found response has a 4xx status code
func (o *UpdatePipelineByNameUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update pipeline by name using p u t not found response has a 5xx status code
func (o *UpdatePipelineByNameUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update pipeline by name using p u t not found response a status code equal to that given
func (o *UpdatePipelineByNameUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdatePipelineByNameUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/pipelines/{project}/{name}][%d] updatePipelineByNameUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePipelineByNameUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /codestream/api/pipelines/{project}/{name}][%d] updatePipelineByNameUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePipelineByNameUsingPUTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdatePipelineByNameUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePipelineByNameUsingPUTInternalServerError creates a UpdatePipelineByNameUsingPUTInternalServerError with default headers values
func NewUpdatePipelineByNameUsingPUTInternalServerError() *UpdatePipelineByNameUsingPUTInternalServerError {
	return &UpdatePipelineByNameUsingPUTInternalServerError{}
}

/*
UpdatePipelineByNameUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdatePipelineByNameUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update pipeline by name using p u t internal server error response has a 2xx status code
func (o *UpdatePipelineByNameUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update pipeline by name using p u t internal server error response has a 3xx status code
func (o *UpdatePipelineByNameUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update pipeline by name using p u t internal server error response has a 4xx status code
func (o *UpdatePipelineByNameUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update pipeline by name using p u t internal server error response has a 5xx status code
func (o *UpdatePipelineByNameUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update pipeline by name using p u t internal server error response a status code equal to that given
func (o *UpdatePipelineByNameUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdatePipelineByNameUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/pipelines/{project}/{name}][%d] updatePipelineByNameUsingPUTInternalServerError ", 500)
}

func (o *UpdatePipelineByNameUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /codestream/api/pipelines/{project}/{name}][%d] updatePipelineByNameUsingPUTInternalServerError ", 500)
}

func (o *UpdatePipelineByNameUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
