// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// PatchPipelineByNameUsingPATCHReader is a Reader for the PatchPipelineByNameUsingPATCH structure.
type PatchPipelineByNameUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchPipelineByNameUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchPipelineByNameUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchPipelineByNameUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchPipelineByNameUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchPipelineByNameUsingPATCHNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchPipelineByNameUsingPATCHInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchPipelineByNameUsingPATCHOK creates a PatchPipelineByNameUsingPATCHOK with default headers values
func NewPatchPipelineByNameUsingPATCHOK() *PatchPipelineByNameUsingPATCHOK {
	return &PatchPipelineByNameUsingPATCHOK{}
}

/* PatchPipelineByNameUsingPATCHOK describes a response with status code 200, with default header values.

'Success' with the updated Pipeline
*/
type PatchPipelineByNameUsingPATCHOK struct {
	Payload models.Pipeline
}

func (o *PatchPipelineByNameUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{project}/{name}][%d] patchPipelineByNameUsingPATCHOK  %+v", 200, o.Payload)
}
func (o *PatchPipelineByNameUsingPATCHOK) GetPayload() models.Pipeline {
	return o.Payload
}

func (o *PatchPipelineByNameUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalPipeline(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewPatchPipelineByNameUsingPATCHUnauthorized creates a PatchPipelineByNameUsingPATCHUnauthorized with default headers values
func NewPatchPipelineByNameUsingPATCHUnauthorized() *PatchPipelineByNameUsingPATCHUnauthorized {
	return &PatchPipelineByNameUsingPATCHUnauthorized{}
}

/* PatchPipelineByNameUsingPATCHUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type PatchPipelineByNameUsingPATCHUnauthorized struct {
}

func (o *PatchPipelineByNameUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{project}/{name}][%d] patchPipelineByNameUsingPATCHUnauthorized ", 401)
}

func (o *PatchPipelineByNameUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchPipelineByNameUsingPATCHForbidden creates a PatchPipelineByNameUsingPATCHForbidden with default headers values
func NewPatchPipelineByNameUsingPATCHForbidden() *PatchPipelineByNameUsingPATCHForbidden {
	return &PatchPipelineByNameUsingPATCHForbidden{}
}

/* PatchPipelineByNameUsingPATCHForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchPipelineByNameUsingPATCHForbidden struct {
}

func (o *PatchPipelineByNameUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{project}/{name}][%d] patchPipelineByNameUsingPATCHForbidden ", 403)
}

func (o *PatchPipelineByNameUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchPipelineByNameUsingPATCHNotFound creates a PatchPipelineByNameUsingPATCHNotFound with default headers values
func NewPatchPipelineByNameUsingPATCHNotFound() *PatchPipelineByNameUsingPATCHNotFound {
	return &PatchPipelineByNameUsingPATCHNotFound{}
}

/* PatchPipelineByNameUsingPATCHNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchPipelineByNameUsingPATCHNotFound struct {
	Payload *models.Error
}

func (o *PatchPipelineByNameUsingPATCHNotFound) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{project}/{name}][%d] patchPipelineByNameUsingPATCHNotFound  %+v", 404, o.Payload)
}
func (o *PatchPipelineByNameUsingPATCHNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchPipelineByNameUsingPATCHNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPipelineByNameUsingPATCHInternalServerError creates a PatchPipelineByNameUsingPATCHInternalServerError with default headers values
func NewPatchPipelineByNameUsingPATCHInternalServerError() *PatchPipelineByNameUsingPATCHInternalServerError {
	return &PatchPipelineByNameUsingPATCHInternalServerError{}
}

/* PatchPipelineByNameUsingPATCHInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PatchPipelineByNameUsingPATCHInternalServerError struct {
}

func (o *PatchPipelineByNameUsingPATCHInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{project}/{name}][%d] patchPipelineByNameUsingPATCHInternalServerError ", 500)
}

func (o *PatchPipelineByNameUsingPATCHInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
