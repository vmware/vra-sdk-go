// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// PatchPipelineGlobalUsingPATCHReader is a Reader for the PatchPipelineGlobalUsingPATCH structure.
type PatchPipelineGlobalUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchPipelineGlobalUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchPipelineGlobalUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchPipelineGlobalUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchPipelineGlobalUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchPipelineGlobalUsingPATCHNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchPipelineGlobalUsingPATCHInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchPipelineGlobalUsingPATCHOK creates a PatchPipelineGlobalUsingPATCHOK with default headers values
func NewPatchPipelineGlobalUsingPATCHOK() *PatchPipelineGlobalUsingPATCHOK {
	return &PatchPipelineGlobalUsingPATCHOK{}
}

/*
PatchPipelineGlobalUsingPATCHOK describes a response with status code 200, with default header values.

'Success' with the updated Pipeline
*/
type PatchPipelineGlobalUsingPATCHOK struct {
	Payload models.Pipeline
}

// IsSuccess returns true when this patch pipeline global using p a t c h o k response has a 2xx status code
func (o *PatchPipelineGlobalUsingPATCHOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch pipeline global using p a t c h o k response has a 3xx status code
func (o *PatchPipelineGlobalUsingPATCHOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch pipeline global using p a t c h o k response has a 4xx status code
func (o *PatchPipelineGlobalUsingPATCHOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch pipeline global using p a t c h o k response has a 5xx status code
func (o *PatchPipelineGlobalUsingPATCHOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch pipeline global using p a t c h o k response a status code equal to that given
func (o *PatchPipelineGlobalUsingPATCHOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchPipelineGlobalUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}/global][%d] patchPipelineGlobalUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *PatchPipelineGlobalUsingPATCHOK) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}/global][%d] patchPipelineGlobalUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *PatchPipelineGlobalUsingPATCHOK) GetPayload() models.Pipeline {
	return o.Payload
}

func (o *PatchPipelineGlobalUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalPipeline(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewPatchPipelineGlobalUsingPATCHUnauthorized creates a PatchPipelineGlobalUsingPATCHUnauthorized with default headers values
func NewPatchPipelineGlobalUsingPATCHUnauthorized() *PatchPipelineGlobalUsingPATCHUnauthorized {
	return &PatchPipelineGlobalUsingPATCHUnauthorized{}
}

/*
PatchPipelineGlobalUsingPATCHUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type PatchPipelineGlobalUsingPATCHUnauthorized struct {
}

// IsSuccess returns true when this patch pipeline global using p a t c h unauthorized response has a 2xx status code
func (o *PatchPipelineGlobalUsingPATCHUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch pipeline global using p a t c h unauthorized response has a 3xx status code
func (o *PatchPipelineGlobalUsingPATCHUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch pipeline global using p a t c h unauthorized response has a 4xx status code
func (o *PatchPipelineGlobalUsingPATCHUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch pipeline global using p a t c h unauthorized response has a 5xx status code
func (o *PatchPipelineGlobalUsingPATCHUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch pipeline global using p a t c h unauthorized response a status code equal to that given
func (o *PatchPipelineGlobalUsingPATCHUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchPipelineGlobalUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}/global][%d] patchPipelineGlobalUsingPATCHUnauthorized ", 401)
}

func (o *PatchPipelineGlobalUsingPATCHUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}/global][%d] patchPipelineGlobalUsingPATCHUnauthorized ", 401)
}

func (o *PatchPipelineGlobalUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchPipelineGlobalUsingPATCHForbidden creates a PatchPipelineGlobalUsingPATCHForbidden with default headers values
func NewPatchPipelineGlobalUsingPATCHForbidden() *PatchPipelineGlobalUsingPATCHForbidden {
	return &PatchPipelineGlobalUsingPATCHForbidden{}
}

/*
PatchPipelineGlobalUsingPATCHForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchPipelineGlobalUsingPATCHForbidden struct {
}

// IsSuccess returns true when this patch pipeline global using p a t c h forbidden response has a 2xx status code
func (o *PatchPipelineGlobalUsingPATCHForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch pipeline global using p a t c h forbidden response has a 3xx status code
func (o *PatchPipelineGlobalUsingPATCHForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch pipeline global using p a t c h forbidden response has a 4xx status code
func (o *PatchPipelineGlobalUsingPATCHForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch pipeline global using p a t c h forbidden response has a 5xx status code
func (o *PatchPipelineGlobalUsingPATCHForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch pipeline global using p a t c h forbidden response a status code equal to that given
func (o *PatchPipelineGlobalUsingPATCHForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchPipelineGlobalUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}/global][%d] patchPipelineGlobalUsingPATCHForbidden ", 403)
}

func (o *PatchPipelineGlobalUsingPATCHForbidden) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}/global][%d] patchPipelineGlobalUsingPATCHForbidden ", 403)
}

func (o *PatchPipelineGlobalUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchPipelineGlobalUsingPATCHNotFound creates a PatchPipelineGlobalUsingPATCHNotFound with default headers values
func NewPatchPipelineGlobalUsingPATCHNotFound() *PatchPipelineGlobalUsingPATCHNotFound {
	return &PatchPipelineGlobalUsingPATCHNotFound{}
}

/*
PatchPipelineGlobalUsingPATCHNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchPipelineGlobalUsingPATCHNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch pipeline global using p a t c h not found response has a 2xx status code
func (o *PatchPipelineGlobalUsingPATCHNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch pipeline global using p a t c h not found response has a 3xx status code
func (o *PatchPipelineGlobalUsingPATCHNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch pipeline global using p a t c h not found response has a 4xx status code
func (o *PatchPipelineGlobalUsingPATCHNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch pipeline global using p a t c h not found response has a 5xx status code
func (o *PatchPipelineGlobalUsingPATCHNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch pipeline global using p a t c h not found response a status code equal to that given
func (o *PatchPipelineGlobalUsingPATCHNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchPipelineGlobalUsingPATCHNotFound) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}/global][%d] patchPipelineGlobalUsingPATCHNotFound  %+v", 404, o.Payload)
}

func (o *PatchPipelineGlobalUsingPATCHNotFound) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}/global][%d] patchPipelineGlobalUsingPATCHNotFound  %+v", 404, o.Payload)
}

func (o *PatchPipelineGlobalUsingPATCHNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchPipelineGlobalUsingPATCHNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPipelineGlobalUsingPATCHInternalServerError creates a PatchPipelineGlobalUsingPATCHInternalServerError with default headers values
func NewPatchPipelineGlobalUsingPATCHInternalServerError() *PatchPipelineGlobalUsingPATCHInternalServerError {
	return &PatchPipelineGlobalUsingPATCHInternalServerError{}
}

/*
PatchPipelineGlobalUsingPATCHInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PatchPipelineGlobalUsingPATCHInternalServerError struct {
}

// IsSuccess returns true when this patch pipeline global using p a t c h internal server error response has a 2xx status code
func (o *PatchPipelineGlobalUsingPATCHInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch pipeline global using p a t c h internal server error response has a 3xx status code
func (o *PatchPipelineGlobalUsingPATCHInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch pipeline global using p a t c h internal server error response has a 4xx status code
func (o *PatchPipelineGlobalUsingPATCHInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch pipeline global using p a t c h internal server error response has a 5xx status code
func (o *PatchPipelineGlobalUsingPATCHInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch pipeline global using p a t c h internal server error response a status code equal to that given
func (o *PatchPipelineGlobalUsingPATCHInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchPipelineGlobalUsingPATCHInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}/global][%d] patchPipelineGlobalUsingPATCHInternalServerError ", 500)
}

func (o *PatchPipelineGlobalUsingPATCHInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}/global][%d] patchPipelineGlobalUsingPATCHInternalServerError ", 500)
}

func (o *PatchPipelineGlobalUsingPATCHInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
