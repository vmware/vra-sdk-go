// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// PatchPipelineUsingPATCHReader is a Reader for the PatchPipelineUsingPATCH structure.
type PatchPipelineUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchPipelineUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchPipelineUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchPipelineUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchPipelineUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchPipelineUsingPATCHNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchPipelineUsingPATCHInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchPipelineUsingPATCHOK creates a PatchPipelineUsingPATCHOK with default headers values
func NewPatchPipelineUsingPATCHOK() *PatchPipelineUsingPATCHOK {
	return &PatchPipelineUsingPATCHOK{}
}

/*
PatchPipelineUsingPATCHOK describes a response with status code 200, with default header values.

'Success' with the updated Pipeline
*/
type PatchPipelineUsingPATCHOK struct {
	Payload models.Pipeline
}

// IsSuccess returns true when this patch pipeline using p a t c h o k response has a 2xx status code
func (o *PatchPipelineUsingPATCHOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch pipeline using p a t c h o k response has a 3xx status code
func (o *PatchPipelineUsingPATCHOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch pipeline using p a t c h o k response has a 4xx status code
func (o *PatchPipelineUsingPATCHOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch pipeline using p a t c h o k response has a 5xx status code
func (o *PatchPipelineUsingPATCHOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch pipeline using p a t c h o k response a status code equal to that given
func (o *PatchPipelineUsingPATCHOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchPipelineUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}][%d] patchPipelineUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *PatchPipelineUsingPATCHOK) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}][%d] patchPipelineUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *PatchPipelineUsingPATCHOK) GetPayload() models.Pipeline {
	return o.Payload
}

func (o *PatchPipelineUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalPipeline(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewPatchPipelineUsingPATCHUnauthorized creates a PatchPipelineUsingPATCHUnauthorized with default headers values
func NewPatchPipelineUsingPATCHUnauthorized() *PatchPipelineUsingPATCHUnauthorized {
	return &PatchPipelineUsingPATCHUnauthorized{}
}

/*
PatchPipelineUsingPATCHUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type PatchPipelineUsingPATCHUnauthorized struct {
}

// IsSuccess returns true when this patch pipeline using p a t c h unauthorized response has a 2xx status code
func (o *PatchPipelineUsingPATCHUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch pipeline using p a t c h unauthorized response has a 3xx status code
func (o *PatchPipelineUsingPATCHUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch pipeline using p a t c h unauthorized response has a 4xx status code
func (o *PatchPipelineUsingPATCHUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch pipeline using p a t c h unauthorized response has a 5xx status code
func (o *PatchPipelineUsingPATCHUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch pipeline using p a t c h unauthorized response a status code equal to that given
func (o *PatchPipelineUsingPATCHUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchPipelineUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}][%d] patchPipelineUsingPATCHUnauthorized ", 401)
}

func (o *PatchPipelineUsingPATCHUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}][%d] patchPipelineUsingPATCHUnauthorized ", 401)
}

func (o *PatchPipelineUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchPipelineUsingPATCHForbidden creates a PatchPipelineUsingPATCHForbidden with default headers values
func NewPatchPipelineUsingPATCHForbidden() *PatchPipelineUsingPATCHForbidden {
	return &PatchPipelineUsingPATCHForbidden{}
}

/*
PatchPipelineUsingPATCHForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchPipelineUsingPATCHForbidden struct {
}

// IsSuccess returns true when this patch pipeline using p a t c h forbidden response has a 2xx status code
func (o *PatchPipelineUsingPATCHForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch pipeline using p a t c h forbidden response has a 3xx status code
func (o *PatchPipelineUsingPATCHForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch pipeline using p a t c h forbidden response has a 4xx status code
func (o *PatchPipelineUsingPATCHForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch pipeline using p a t c h forbidden response has a 5xx status code
func (o *PatchPipelineUsingPATCHForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch pipeline using p a t c h forbidden response a status code equal to that given
func (o *PatchPipelineUsingPATCHForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchPipelineUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}][%d] patchPipelineUsingPATCHForbidden ", 403)
}

func (o *PatchPipelineUsingPATCHForbidden) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}][%d] patchPipelineUsingPATCHForbidden ", 403)
}

func (o *PatchPipelineUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchPipelineUsingPATCHNotFound creates a PatchPipelineUsingPATCHNotFound with default headers values
func NewPatchPipelineUsingPATCHNotFound() *PatchPipelineUsingPATCHNotFound {
	return &PatchPipelineUsingPATCHNotFound{}
}

/*
PatchPipelineUsingPATCHNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchPipelineUsingPATCHNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch pipeline using p a t c h not found response has a 2xx status code
func (o *PatchPipelineUsingPATCHNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch pipeline using p a t c h not found response has a 3xx status code
func (o *PatchPipelineUsingPATCHNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch pipeline using p a t c h not found response has a 4xx status code
func (o *PatchPipelineUsingPATCHNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch pipeline using p a t c h not found response has a 5xx status code
func (o *PatchPipelineUsingPATCHNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch pipeline using p a t c h not found response a status code equal to that given
func (o *PatchPipelineUsingPATCHNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchPipelineUsingPATCHNotFound) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}][%d] patchPipelineUsingPATCHNotFound  %+v", 404, o.Payload)
}

func (o *PatchPipelineUsingPATCHNotFound) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}][%d] patchPipelineUsingPATCHNotFound  %+v", 404, o.Payload)
}

func (o *PatchPipelineUsingPATCHNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchPipelineUsingPATCHNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPipelineUsingPATCHInternalServerError creates a PatchPipelineUsingPATCHInternalServerError with default headers values
func NewPatchPipelineUsingPATCHInternalServerError() *PatchPipelineUsingPATCHInternalServerError {
	return &PatchPipelineUsingPATCHInternalServerError{}
}

/*
PatchPipelineUsingPATCHInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PatchPipelineUsingPATCHInternalServerError struct {
}

// IsSuccess returns true when this patch pipeline using p a t c h internal server error response has a 2xx status code
func (o *PatchPipelineUsingPATCHInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch pipeline using p a t c h internal server error response has a 3xx status code
func (o *PatchPipelineUsingPATCHInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch pipeline using p a t c h internal server error response has a 4xx status code
func (o *PatchPipelineUsingPATCHInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch pipeline using p a t c h internal server error response has a 5xx status code
func (o *PatchPipelineUsingPATCHInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch pipeline using p a t c h internal server error response a status code equal to that given
func (o *PatchPipelineUsingPATCHInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchPipelineUsingPATCHInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}][%d] patchPipelineUsingPATCHInternalServerError ", 500)
}

func (o *PatchPipelineUsingPATCHInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /codestream/api/pipelines/{id}][%d] patchPipelineUsingPATCHInternalServerError ", 500)
}

func (o *PatchPipelineUsingPATCHInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
