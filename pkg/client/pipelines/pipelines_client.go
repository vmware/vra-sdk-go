// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pipelines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pipelines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ActOnPipelineUsingPOST(params *ActOnPipelineUsingPOSTParams, opts ...ClientOption) (*ActOnPipelineUsingPOSTOK, error)

	CloneByNameUsingPOST2(params *CloneByNameUsingPOST2Params, opts ...ClientOption) (*CloneByNameUsingPOST2OK, error)

	CreateUsingPOST6(params *CreateUsingPOST6Params, opts ...ClientOption) (*CreateUsingPOST6OK, error)

	DeleteUsingDELETE8(params *DeleteUsingDELETE8Params, opts ...ClientOption) (*DeleteUsingDELETE8OK, error)

	DeleteUsingDELETE9(params *DeleteUsingDELETE9Params, opts ...ClientOption) (*DeleteUsingDELETE9OK, error)

	ExecuteByNameUsingPOST(params *ExecuteByNameUsingPOSTParams, opts ...ClientOption) (*ExecuteByNameUsingPOSTOK, *ExecuteByNameUsingPOSTAccepted, error)

	ExecuteUsingPOST(params *ExecuteUsingPOSTParams, opts ...ClientOption) (*ExecuteUsingPOSTOK, *ExecuteUsingPOSTAccepted, error)

	ExportUsingGET(params *ExportUsingGETParams, opts ...ClientOption) (*ExportUsingGETOK, error)

	GetAllUsingGET9(params *GetAllUsingGET9Params, opts ...ClientOption) (*GetAllUsingGET9OK, error)

	GetExecutionByIndexAndPipelineIDUsingGET(params *GetExecutionByIndexAndPipelineIDUsingGETParams, opts ...ClientOption) (*GetExecutionByIndexAndPipelineIDUsingGETOK, error)

	GetExecutionByNameAndIndexUsingGET(params *GetExecutionByNameAndIndexUsingGETParams, opts ...ClientOption) (*GetExecutionByNameAndIndexUsingGETOK, error)

	GetExecutionsByIDUsingGET(params *GetExecutionsByIDUsingGETParams, opts ...ClientOption) (*GetExecutionsByIDUsingGETOK, error)

	GetExecutionsByNameUsingGET(params *GetExecutionsByNameUsingGETParams, opts ...ClientOption) (*GetExecutionsByNameUsingGETOK, error)

	GetPipelineTilesUsingGET(params *GetPipelineTilesUsingGETParams, opts ...ClientOption) (*GetPipelineTilesUsingGETOK, error)

	GetUsingGET2(params *GetUsingGET2Params, opts ...ClientOption) (*GetUsingGET2OK, error)

	GetUsingGET3(params *GetUsingGET3Params, opts ...ClientOption) (*GetUsingGET3OK, error)

	ImportYamlUsingPOST(params *ImportYamlUsingPOSTParams, opts ...ClientOption) (*ImportYamlUsingPOSTOK, error)

	PatchUsingPATCH(params *PatchUsingPATCHParams, opts ...ClientOption) (*PatchUsingPATCHOK, error)

	PatchUsingPATCH1(params *PatchUsingPATCH1Params, opts ...ClientOption) (*PatchUsingPATCH1OK, error)

	UpdateUsingPUT2(params *UpdateUsingPUT2Params, opts ...ClientOption) (*UpdateUsingPUT2OK, error)

	UpdateUsingPUT3(params *UpdateUsingPUT3Params, opts ...ClientOption) (*UpdateUsingPUT3OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ActOnPipelineUsingPOST clones a pipeline

  Clone a Pipeline with the given id
*/
func (a *Client) ActOnPipelineUsingPOST(params *ActOnPipelineUsingPOSTParams, opts ...ClientOption) (*ActOnPipelineUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActOnPipelineUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "actOnPipelineUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/pipelines/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActOnPipelineUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActOnPipelineUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for actOnPipelineUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CloneByNameUsingPOST2 clones a pipeline by project and name

  Clone a Pipeline with the given project and name
*/
func (a *Client) CloneByNameUsingPOST2(params *CloneByNameUsingPOST2Params, opts ...ClientOption) (*CloneByNameUsingPOST2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneByNameUsingPOST2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloneByNameUsingPOST_2",
		Method:             "POST",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloneByNameUsingPOST2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneByNameUsingPOST2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloneByNameUsingPOST_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUsingPOST6 creates a pipeline

  Create a Pipeline based on the given project
*/
func (a *Client) CreateUsingPOST6(params *CreateUsingPOST6Params, opts ...ClientOption) (*CreateUsingPOST6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOST6Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUsingPOST_6",
		Method:             "POST",
		PathPattern:        "/codestream/api/pipelines",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUsingPOST6Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUsingPOST6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUsingPOST_6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUsingDELETE8 deletes a pipeline by id

  Delete a Pipeline with the given id
*/
func (a *Client) DeleteUsingDELETE8(params *DeleteUsingDELETE8Params, opts ...ClientOption) (*DeleteUsingDELETE8OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE8Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_8",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/pipelines/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE8Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE8OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_8: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUsingDELETE9 deletes a pipeline by project and name

  Delete a Pipeline with the given project and name
*/
func (a *Client) DeleteUsingDELETE9(params *DeleteUsingDELETE9Params, opts ...ClientOption) (*DeleteUsingDELETE9OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE9Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_9",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE9Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE9OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_9: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecuteByNameUsingPOST executes a pipeline

  Execute a Pipeline based on the given project and name
*/
func (a *Client) ExecuteByNameUsingPOST(params *ExecuteByNameUsingPOSTParams, opts ...ClientOption) (*ExecuteByNameUsingPOSTOK, *ExecuteByNameUsingPOSTAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteByNameUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "executeByNameUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}/executions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteByNameUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ExecuteByNameUsingPOSTOK:
		return value, nil, nil
	case *ExecuteByNameUsingPOSTAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pipelines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecuteUsingPOST executes a pipeline

  Execute a Pipeline based on the given id
*/
func (a *Client) ExecuteUsingPOST(params *ExecuteUsingPOSTParams, opts ...ClientOption) (*ExecuteUsingPOSTOK, *ExecuteUsingPOSTAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "executeUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/pipelines/{id}/executions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ExecuteUsingPOSTOK:
		return value, nil, nil
	case *ExecuteUsingPOSTAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pipelines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportUsingGET exports

  Exports a single pipeline (and endpoints referred in that pipeline) or list of pipelines/ endpoints as 'YAML' in a given project
*/
func (a *Client) ExportUsingGET(params *ExportUsingGETParams, opts ...ClientOption) (*ExportUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "exportUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/export",
		ProducesMediaTypes: []string{"application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExportUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUsingGET9 gets all pipelines

  Get all Pipelines with specified paging and filter parameters.
*/
func (a *Client) GetAllUsingGET9(params *GetAllUsingGET9Params, opts ...ClientOption) (*GetAllUsingGET9OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET9Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsingGET_9",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipelines",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllUsingGET9Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET9OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_9: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetExecutionByIndexAndPipelineIDUsingGET gets an execution

  Get an Execution based on the given pipeline id and execution index
*/
func (a *Client) GetExecutionByIndexAndPipelineIDUsingGET(params *GetExecutionByIndexAndPipelineIDUsingGETParams, opts ...ClientOption) (*GetExecutionByIndexAndPipelineIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionByIndexAndPipelineIDUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getExecutionByIndexAndPipelineIdUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipelines/{id}/executions/{index}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExecutionByIndexAndPipelineIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutionByIndexAndPipelineIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExecutionByIndexAndPipelineIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetExecutionByNameAndIndexUsingGET gets an execution

  Get an Execution based on the given pipeline id and execution index
*/
func (a *Client) GetExecutionByNameAndIndexUsingGET(params *GetExecutionByNameAndIndexUsingGETParams, opts ...ClientOption) (*GetExecutionByNameAndIndexUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionByNameAndIndexUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getExecutionByNameAndIndexUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}/executions/{index}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExecutionByNameAndIndexUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutionByNameAndIndexUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExecutionByNameAndIndexUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetExecutionsByIDUsingGET gets all executions of a pipeline

  Get all Executions of a Pipeline with specified paging and filter parameters.
*/
func (a *Client) GetExecutionsByIDUsingGET(params *GetExecutionsByIDUsingGETParams, opts ...ClientOption) (*GetExecutionsByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionsByIDUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getExecutionsByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipelines/{id}/executions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExecutionsByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutionsByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExecutionsByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetExecutionsByNameUsingGET gets all executions of a pipeline

  Get all Executions of a Pipeline with specified paging and filter parameters.
*/
func (a *Client) GetExecutionsByNameUsingGET(params *GetExecutionsByNameUsingGETParams, opts ...ClientOption) (*GetExecutionsByNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionsByNameUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getExecutionsByNameUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}/executions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExecutionsByNameUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutionsByNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExecutionsByNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPipelineTilesUsingGET gets pipeline tiles

  Get Pipeline Tiles
*/
func (a *Client) GetPipelineTilesUsingGET(params *GetPipelineTilesUsingGETParams, opts ...ClientOption) (*GetPipelineTilesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineTilesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPipelineTilesUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipeline-tiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPipelineTilesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineTilesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelineTilesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsingGET2 gets a pipeline

  Get a Pipeline with the given id
*/
func (a *Client) GetUsingGET2(params *GetUsingGET2Params, opts ...ClientOption) (*GetUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUsingGET_2",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipelines/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsingGET3 gets a pipeline by project and name

  Get a Pipeline with the given project and name
*/
func (a *Client) GetUsingGET3(params *GetUsingGET3Params, opts ...ClientOption) (*GetUsingGET3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGET3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUsingGET_3",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsingGET3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGET3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsingGET_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportYamlUsingPOST imports

  Imports pipeline(s)/endpoint(s) into Code Stream.
*/
func (a *Client) ImportYamlUsingPOST(params *ImportYamlUsingPOSTParams, opts ...ClientOption) (*ImportYamlUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportYamlUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importYamlUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/import",
		ProducesMediaTypes: []string{"application/x-yaml"},
		ConsumesMediaTypes: []string{"application/x-yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ImportYamlUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportYamlUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importYamlUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchUsingPATCH updates a pipeline by id

  Update a Pipeline with the given id
*/
func (a *Client) PatchUsingPATCH(params *PatchUsingPATCHParams, opts ...ClientOption) (*PatchUsingPATCHOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchUsingPATCHParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/pipelines/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchUsingPATCHOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchUsingPATCH: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchUsingPATCH1 updates a pipeline by project and name

  Update a Pipeline with the given project and name
*/
func (a *Client) PatchUsingPATCH1(params *PatchUsingPATCH1Params, opts ...ClientOption) (*PatchUsingPATCH1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchUsingPATCH1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchUsingPATCH_1",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchUsingPATCH1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchUsingPATCH1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchUsingPATCH_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUsingPUT2 updates a pipeline by id

  Update a Pipeline with the given id
*/
func (a *Client) UpdateUsingPUT2(params *UpdateUsingPUT2Params, opts ...ClientOption) (*UpdateUsingPUT2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUT2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUsingPUT_2",
		Method:             "PUT",
		PathPattern:        "/codestream/api/pipelines/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUsingPUT2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPUT2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPUT_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUsingPUT3 updates a pipeline by project and name

  Update a Pipeline with the given project and name
*/
func (a *Client) UpdateUsingPUT3(params *UpdateUsingPUT3Params, opts ...ClientOption) (*UpdateUsingPUT3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUT3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUsingPUT_3",
		Method:             "PUT",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUsingPUT3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPUT3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPUT_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
