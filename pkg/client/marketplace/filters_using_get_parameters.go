// Code generated by go-swagger; DO NOT EDIT.

package marketplace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFiltersUsingGETParams creates a new FiltersUsingGETParams object
// with the default values initialized.
func NewFiltersUsingGETParams() *FiltersUsingGETParams {
	var (
		expandDefault = bool(false)
	)
	return &FiltersUsingGETParams{
		Expand: &expandDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewFiltersUsingGETParamsWithTimeout creates a new FiltersUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFiltersUsingGETParamsWithTimeout(timeout time.Duration) *FiltersUsingGETParams {
	var (
		expandDefault = bool(false)
	)
	return &FiltersUsingGETParams{
		Expand: &expandDefault,

		timeout: timeout,
	}
}

// NewFiltersUsingGETParamsWithContext creates a new FiltersUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewFiltersUsingGETParamsWithContext(ctx context.Context) *FiltersUsingGETParams {
	var (
		expandDefault = bool(false)
	)
	return &FiltersUsingGETParams{
		Expand: &expandDefault,

		Context: ctx,
	}
}

// NewFiltersUsingGETParamsWithHTTPClient creates a new FiltersUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFiltersUsingGETParamsWithHTTPClient(client *http.Client) *FiltersUsingGETParams {
	var (
		expandDefault = bool(false)
	)
	return &FiltersUsingGETParams{
		Expand:     &expandDefault,
		HTTPClient: client,
	}
}

/*FiltersUsingGETParams contains all the parameters to send to the API endpoint
for the filters using g e t operation typically these are written to a http.Request
*/
type FiltersUsingGETParams struct {

	/*APIVersion
	  The version of the API in yyyy-MM-dd format (UTC). For versioning information, please refer to /content/api/about

	*/
	APIVersion *string
	/*Expand
	  expand

	*/
	Expand *bool
	/*SourceID
	  Content Source Id

	*/
	SourceID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the filters using get params
func (o *FiltersUsingGETParams) WithTimeout(timeout time.Duration) *FiltersUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the filters using get params
func (o *FiltersUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the filters using get params
func (o *FiltersUsingGETParams) WithContext(ctx context.Context) *FiltersUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the filters using get params
func (o *FiltersUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the filters using get params
func (o *FiltersUsingGETParams) WithHTTPClient(client *http.Client) *FiltersUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the filters using get params
func (o *FiltersUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the filters using get params
func (o *FiltersUsingGETParams) WithAPIVersion(aPIVersion *string) *FiltersUsingGETParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the filters using get params
func (o *FiltersUsingGETParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithExpand adds the expand to the filters using get params
func (o *FiltersUsingGETParams) WithExpand(expand *bool) *FiltersUsingGETParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the filters using get params
func (o *FiltersUsingGETParams) SetExpand(expand *bool) {
	o.Expand = expand
}

// WithSourceID adds the sourceID to the filters using get params
func (o *FiltersUsingGETParams) WithSourceID(sourceID strfmt.UUID) *FiltersUsingGETParams {
	o.SetSourceID(sourceID)
	return o
}

// SetSourceID adds the sourceId to the filters using get params
func (o *FiltersUsingGETParams) SetSourceID(sourceID strfmt.UUID) {
	o.SourceID = sourceID
}

// WriteToRequest writes these params to a swagger request
func (o *FiltersUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// query param apiVersion
		var qrAPIVersion string
		if o.APIVersion != nil {
			qrAPIVersion = *o.APIVersion
		}
		qAPIVersion := qrAPIVersion
		if qAPIVersion != "" {
			if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
				return err
			}
		}

	}

	if o.Expand != nil {

		// query param expand
		var qrExpand bool
		if o.Expand != nil {
			qrExpand = *o.Expand
		}
		qExpand := swag.FormatBool(qrExpand)
		if qExpand != "" {
			if err := r.SetQueryParam("expand", qExpand); err != nil {
				return err
			}
		}

	}

	// path param sourceId
	if err := r.SetPathParam("sourceId", o.SourceID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
