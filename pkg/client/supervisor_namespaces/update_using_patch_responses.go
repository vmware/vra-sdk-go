// Code generated by go-swagger; DO NOT EDIT.

package supervisor_namespaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateUsingPATCHReader is a Reader for the UpdateUsingPATCH structure.
type UpdateUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateUsingPATCHOK creates a UpdateUsingPATCHOK with default headers values
func NewUpdateUsingPATCHOK() *UpdateUsingPATCHOK {
	return &UpdateUsingPATCHOK{}
}

/*
UpdateUsingPATCHOK describes a response with status code 200, with default header values.

OK
*/
type UpdateUsingPATCHOK struct {
	Payload *models.SupervisorNamespace
}

// IsSuccess returns true when this update using p a t c h o k response has a 2xx status code
func (o *UpdateUsingPATCHOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update using p a t c h o k response has a 3xx status code
func (o *UpdateUsingPATCHOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update using p a t c h o k response has a 4xx status code
func (o *UpdateUsingPATCHOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update using p a t c h o k response has a 5xx status code
func (o *UpdateUsingPATCHOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update using p a t c h o k response a status code equal to that given
func (o *UpdateUsingPATCHOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /cmx/api/resources/supervisor-namespaces/{selfLinkId}][%d] updateUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *UpdateUsingPATCHOK) String() string {
	return fmt.Sprintf("[PATCH /cmx/api/resources/supervisor-namespaces/{selfLinkId}][%d] updateUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *UpdateUsingPATCHOK) GetPayload() *models.SupervisorNamespace {
	return o.Payload
}

func (o *UpdateUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SupervisorNamespace)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUsingPATCHForbidden creates a UpdateUsingPATCHForbidden with default headers values
func NewUpdateUsingPATCHForbidden() *UpdateUsingPATCHForbidden {
	return &UpdateUsingPATCHForbidden{}
}

/*
UpdateUsingPATCHForbidden describes a response with status code 403, with default header values.

Forbidden, the user lacks permissions
*/
type UpdateUsingPATCHForbidden struct {
}

// IsSuccess returns true when this update using p a t c h forbidden response has a 2xx status code
func (o *UpdateUsingPATCHForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update using p a t c h forbidden response has a 3xx status code
func (o *UpdateUsingPATCHForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update using p a t c h forbidden response has a 4xx status code
func (o *UpdateUsingPATCHForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update using p a t c h forbidden response has a 5xx status code
func (o *UpdateUsingPATCHForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update using p a t c h forbidden response a status code equal to that given
func (o *UpdateUsingPATCHForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /cmx/api/resources/supervisor-namespaces/{selfLinkId}][%d] updateUsingPATCHForbidden ", 403)
}

func (o *UpdateUsingPATCHForbidden) String() string {
	return fmt.Sprintf("[PATCH /cmx/api/resources/supervisor-namespaces/{selfLinkId}][%d] updateUsingPATCHForbidden ", 403)
}

func (o *UpdateUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
