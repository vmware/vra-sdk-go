// Code generated by go-swagger; DO NOT EDIT.

package supervisor_namespaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetNamespaceUsingGETReader is a Reader for the GetNamespaceUsingGET structure.
type GetNamespaceUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNamespaceUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNamespaceUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetNamespaceUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNamespaceUsingGETOK creates a GetNamespaceUsingGETOK with default headers values
func NewGetNamespaceUsingGETOK() *GetNamespaceUsingGETOK {
	return &GetNamespaceUsingGETOK{}
}

/*
GetNamespaceUsingGETOK describes a response with status code 200, with default header values.

OK
*/
type GetNamespaceUsingGETOK struct {
	Payload *models.SupervisorNamespace
}

// IsSuccess returns true when this get namespace using g e t o k response has a 2xx status code
func (o *GetNamespaceUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get namespace using g e t o k response has a 3xx status code
func (o *GetNamespaceUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get namespace using g e t o k response has a 4xx status code
func (o *GetNamespaceUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get namespace using g e t o k response has a 5xx status code
func (o *GetNamespaceUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get namespace using g e t o k response a status code equal to that given
func (o *GetNamespaceUsingGETOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetNamespaceUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /cmx/api/resources/supervisor-namespaces/{selfLinkId}][%d] getNamespaceUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetNamespaceUsingGETOK) String() string {
	return fmt.Sprintf("[GET /cmx/api/resources/supervisor-namespaces/{selfLinkId}][%d] getNamespaceUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetNamespaceUsingGETOK) GetPayload() *models.SupervisorNamespace {
	return o.Payload
}

func (o *GetNamespaceUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SupervisorNamespace)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNamespaceUsingGETForbidden creates a GetNamespaceUsingGETForbidden with default headers values
func NewGetNamespaceUsingGETForbidden() *GetNamespaceUsingGETForbidden {
	return &GetNamespaceUsingGETForbidden{}
}

/*
GetNamespaceUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden, the user lacks permissions
*/
type GetNamespaceUsingGETForbidden struct {
}

// IsSuccess returns true when this get namespace using g e t forbidden response has a 2xx status code
func (o *GetNamespaceUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get namespace using g e t forbidden response has a 3xx status code
func (o *GetNamespaceUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get namespace using g e t forbidden response has a 4xx status code
func (o *GetNamespaceUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get namespace using g e t forbidden response has a 5xx status code
func (o *GetNamespaceUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get namespace using g e t forbidden response a status code equal to that given
func (o *GetNamespaceUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetNamespaceUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /cmx/api/resources/supervisor-namespaces/{selfLinkId}][%d] getNamespaceUsingGETForbidden ", 403)
}

func (o *GetNamespaceUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /cmx/api/resources/supervisor-namespaces/{selfLinkId}][%d] getNamespaceUsingGETForbidden ", 403)
}

func (o *GetNamespaceUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
