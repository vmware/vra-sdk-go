// Code generated by go-swagger; DO NOT EDIT.

package deployment_actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetDeploymentActionsUsingGETReader is a Reader for the GetDeploymentActionsUsingGET structure.
type GetDeploymentActionsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeploymentActionsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeploymentActionsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDeploymentActionsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDeploymentActionsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDeploymentActionsUsingGETOK creates a GetDeploymentActionsUsingGETOK with default headers values
func NewGetDeploymentActionsUsingGETOK() *GetDeploymentActionsUsingGETOK {
	return &GetDeploymentActionsUsingGETOK{}
}

/*GetDeploymentActionsUsingGETOK handles this case with default header values.

OK
*/
type GetDeploymentActionsUsingGETOK struct {
	Payload []*models.ResourceAction
}

func (o *GetDeploymentActionsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/actions][%d] getDeploymentActionsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetDeploymentActionsUsingGETOK) GetPayload() []*models.ResourceAction {
	return o.Payload
}

func (o *GetDeploymentActionsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeploymentActionsUsingGETUnauthorized creates a GetDeploymentActionsUsingGETUnauthorized with default headers values
func NewGetDeploymentActionsUsingGETUnauthorized() *GetDeploymentActionsUsingGETUnauthorized {
	return &GetDeploymentActionsUsingGETUnauthorized{}
}

/*GetDeploymentActionsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetDeploymentActionsUsingGETUnauthorized struct {
}

func (o *GetDeploymentActionsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/actions][%d] getDeploymentActionsUsingGETUnauthorized ", 401)
}

func (o *GetDeploymentActionsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeploymentActionsUsingGETNotFound creates a GetDeploymentActionsUsingGETNotFound with default headers values
func NewGetDeploymentActionsUsingGETNotFound() *GetDeploymentActionsUsingGETNotFound {
	return &GetDeploymentActionsUsingGETNotFound{}
}

/*GetDeploymentActionsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetDeploymentActionsUsingGETNotFound struct {
	Payload *models.Error
}

func (o *GetDeploymentActionsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/actions][%d] getDeploymentActionsUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetDeploymentActionsUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDeploymentActionsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
