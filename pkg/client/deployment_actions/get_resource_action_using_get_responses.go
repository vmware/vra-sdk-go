// Code generated by go-swagger; DO NOT EDIT.

package deployment_actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetResourceActionUsingGETReader is a Reader for the GetResourceActionUsingGET structure.
type GetResourceActionUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetResourceActionUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetResourceActionUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetResourceActionUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetResourceActionUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetResourceActionUsingGETOK creates a GetResourceActionUsingGETOK with default headers values
func NewGetResourceActionUsingGETOK() *GetResourceActionUsingGETOK {
	return &GetResourceActionUsingGETOK{}
}

/*GetResourceActionUsingGETOK handles this case with default header values.

OK
*/
type GetResourceActionUsingGETOK struct {
	Payload *models.ResourceAction
}

func (o *GetResourceActionUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/resources/{resourceId}/actions/{actionId}][%d] getResourceActionUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetResourceActionUsingGETOK) GetPayload() *models.ResourceAction {
	return o.Payload
}

func (o *GetResourceActionUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResourceAction)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetResourceActionUsingGETUnauthorized creates a GetResourceActionUsingGETUnauthorized with default headers values
func NewGetResourceActionUsingGETUnauthorized() *GetResourceActionUsingGETUnauthorized {
	return &GetResourceActionUsingGETUnauthorized{}
}

/*GetResourceActionUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetResourceActionUsingGETUnauthorized struct {
}

func (o *GetResourceActionUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/resources/{resourceId}/actions/{actionId}][%d] getResourceActionUsingGETUnauthorized ", 401)
}

func (o *GetResourceActionUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetResourceActionUsingGETNotFound creates a GetResourceActionUsingGETNotFound with default headers values
func NewGetResourceActionUsingGETNotFound() *GetResourceActionUsingGETNotFound {
	return &GetResourceActionUsingGETNotFound{}
}

/*GetResourceActionUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetResourceActionUsingGETNotFound struct {
	Payload *models.Error
}

func (o *GetResourceActionUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}/resources/{resourceId}/actions/{actionId}][%d] getResourceActionUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetResourceActionUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetResourceActionUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
