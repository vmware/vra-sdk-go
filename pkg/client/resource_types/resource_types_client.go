// Code generated by go-swagger; DO NOT EDIT.

package resource_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new resource types API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resource types API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetResourceTypeUsingGET(params *GetResourceTypeUsingGETParams, opts ...ClientOption) (*GetResourceTypeUsingGETOK, error)

	GetResourceTypeUsingGET2(params *GetResourceTypeUsingGET2Params, opts ...ClientOption) (*GetResourceTypeUsingGET2OK, error)

	ListResourceTypesUsingGET(params *ListResourceTypesUsingGETParams, opts ...ClientOption) (*ListResourceTypesUsingGETOK, error)

	ListResourceTypesUsingGET2(params *ListResourceTypesUsingGET2Params, opts ...ClientOption) (*ListResourceTypesUsingGET2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetResourceTypeUsingGET returns resource type details
*/
func (a *Client) GetResourceTypeUsingGET(params *GetResourceTypeUsingGETParams, opts ...ClientOption) (*GetResourceTypeUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceTypeUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceTypeUsingGET",
		Method:             "GET",
		PathPattern:        "/blueprint/api/resource-types/{resourceTypeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceTypeUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceTypeUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceTypeUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourceTypeUsingGET2 fetches a specific resource type

Returns the Resource type with the supplied ID.
*/
func (a *Client) GetResourceTypeUsingGET2(params *GetResourceTypeUsingGET2Params, opts ...ClientOption) (*GetResourceTypeUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceTypeUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceTypeUsingGET_2",
		Method:             "GET",
		PathPattern:        "/deployment/api/resource-types/{resourceTypeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceTypeUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceTypeUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceTypeUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListResourceTypesUsingGET lists resource types
*/
func (a *Client) ListResourceTypesUsingGET(params *ListResourceTypesUsingGETParams, opts ...ClientOption) (*ListResourceTypesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListResourceTypesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listResourceTypesUsingGET",
		Method:             "GET",
		PathPattern:        "/blueprint/api/resource-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListResourceTypesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListResourceTypesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listResourceTypesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListResourceTypesUsingGET2 fetches all resource types

Returns a paginated list of Resource Types.
*/
func (a *Client) ListResourceTypesUsingGET2(params *ListResourceTypesUsingGET2Params, opts ...ClientOption) (*ListResourceTypesUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListResourceTypesUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "listResourceTypesUsingGET_2",
		Method:             "GET",
		PathPattern:        "/deployment/api/resource-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListResourceTypesUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListResourceTypesUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listResourceTypesUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
