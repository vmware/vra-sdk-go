// Code generated by go-swagger; DO NOT EDIT.

package resource_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListResourceTypesUsingGET2Params creates a new ListResourceTypesUsingGET2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListResourceTypesUsingGET2Params() *ListResourceTypesUsingGET2Params {
	return &ListResourceTypesUsingGET2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewListResourceTypesUsingGET2ParamsWithTimeout creates a new ListResourceTypesUsingGET2Params object
// with the ability to set a timeout on a request.
func NewListResourceTypesUsingGET2ParamsWithTimeout(timeout time.Duration) *ListResourceTypesUsingGET2Params {
	return &ListResourceTypesUsingGET2Params{
		timeout: timeout,
	}
}

// NewListResourceTypesUsingGET2ParamsWithContext creates a new ListResourceTypesUsingGET2Params object
// with the ability to set a context for a request.
func NewListResourceTypesUsingGET2ParamsWithContext(ctx context.Context) *ListResourceTypesUsingGET2Params {
	return &ListResourceTypesUsingGET2Params{
		Context: ctx,
	}
}

// NewListResourceTypesUsingGET2ParamsWithHTTPClient creates a new ListResourceTypesUsingGET2Params object
// with the ability to set a custom HTTPClient for a request.
func NewListResourceTypesUsingGET2ParamsWithHTTPClient(client *http.Client) *ListResourceTypesUsingGET2Params {
	return &ListResourceTypesUsingGET2Params{
		HTTPClient: client,
	}
}

/* ListResourceTypesUsingGET2Params contains all the parameters to send to the API endpoint
   for the list resource types using g e t 2 operation.

   Typically these are written to a http.Request.
*/
type ListResourceTypesUsingGET2Params struct {

	/* DollarOrderby.

	   Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
	*/
	DollarOrderby []string

	/* DollarSkip.

	   Number of records you want to skip

	   Format: int32
	*/
	DollarSkip *int32

	/* DollarTop.

	   Number of records you want

	   Format: int32
	*/
	DollarTop *int32

	/* APIVersion.

	   The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.
	*/
	APIVersion *string

	/* ComposableOnly.

	   Include only composable resource types
	*/
	ComposableOnly *bool

	/* Ids.

	   Filter by list of resource type ids
	*/
	Ids []string

	/* ProjectIds.

	   Filter by list of project ids
	*/
	ProjectIds []string

	/* ProviderID.

	   Filter by provider ID
	*/
	ProviderID *string

	/* Search.

	   Search by name and description
	*/
	Search *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list resource types using g e t 2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListResourceTypesUsingGET2Params) WithDefaults() *ListResourceTypesUsingGET2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list resource types using g e t 2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListResourceTypesUsingGET2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) WithTimeout(timeout time.Duration) *ListResourceTypesUsingGET2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) WithContext(ctx context.Context) *ListResourceTypesUsingGET2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) WithHTTPClient(client *http.Client) *ListResourceTypesUsingGET2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarOrderby adds the dollarOrderby to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) WithDollarOrderby(dollarOrderby []string) *ListResourceTypesUsingGET2Params {
	o.SetDollarOrderby(dollarOrderby)
	return o
}

// SetDollarOrderby adds the dollarOrderby to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) SetDollarOrderby(dollarOrderby []string) {
	o.DollarOrderby = dollarOrderby
}

// WithDollarSkip adds the dollarSkip to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) WithDollarSkip(dollarSkip *int32) *ListResourceTypesUsingGET2Params {
	o.SetDollarSkip(dollarSkip)
	return o
}

// SetDollarSkip adds the dollarSkip to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) SetDollarSkip(dollarSkip *int32) {
	o.DollarSkip = dollarSkip
}

// WithDollarTop adds the dollarTop to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) WithDollarTop(dollarTop *int32) *ListResourceTypesUsingGET2Params {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithAPIVersion adds the aPIVersion to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) WithAPIVersion(aPIVersion *string) *ListResourceTypesUsingGET2Params {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithComposableOnly adds the composableOnly to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) WithComposableOnly(composableOnly *bool) *ListResourceTypesUsingGET2Params {
	o.SetComposableOnly(composableOnly)
	return o
}

// SetComposableOnly adds the composableOnly to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) SetComposableOnly(composableOnly *bool) {
	o.ComposableOnly = composableOnly
}

// WithIds adds the ids to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) WithIds(ids []string) *ListResourceTypesUsingGET2Params {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) SetIds(ids []string) {
	o.Ids = ids
}

// WithProjectIds adds the projectIds to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) WithProjectIds(projectIds []string) *ListResourceTypesUsingGET2Params {
	o.SetProjectIds(projectIds)
	return o
}

// SetProjectIds adds the projectIds to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) SetProjectIds(projectIds []string) {
	o.ProjectIds = projectIds
}

// WithProviderID adds the providerID to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) WithProviderID(providerID *string) *ListResourceTypesUsingGET2Params {
	o.SetProviderID(providerID)
	return o
}

// SetProviderID adds the providerId to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) SetProviderID(providerID *string) {
	o.ProviderID = providerID
}

// WithSearch adds the search to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) WithSearch(search *string) *ListResourceTypesUsingGET2Params {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the list resource types using g e t 2 params
func (o *ListResourceTypesUsingGET2Params) SetSearch(search *string) {
	o.Search = search
}

// WriteToRequest writes these params to a swagger request
func (o *ListResourceTypesUsingGET2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarOrderby != nil {

		// binding items for $orderby
		joinedDollarOrderby := o.bindParamDollarOrderby(reg)

		// query array param $orderby
		if err := r.SetQueryParam("$orderby", joinedDollarOrderby...); err != nil {
			return err
		}
	}

	if o.DollarSkip != nil {

		// query param $skip
		var qrDollarSkip int32

		if o.DollarSkip != nil {
			qrDollarSkip = *o.DollarSkip
		}
		qDollarSkip := swag.FormatInt32(qrDollarSkip)
		if qDollarSkip != "" {

			if err := r.SetQueryParam("$skip", qDollarSkip); err != nil {
				return err
			}
		}
	}

	if o.DollarTop != nil {

		// query param $top
		var qrDollarTop int32

		if o.DollarTop != nil {
			qrDollarTop = *o.DollarTop
		}
		qDollarTop := swag.FormatInt32(qrDollarTop)
		if qDollarTop != "" {

			if err := r.SetQueryParam("$top", qDollarTop); err != nil {
				return err
			}
		}
	}

	if o.APIVersion != nil {

		// query param apiVersion
		var qrAPIVersion string

		if o.APIVersion != nil {
			qrAPIVersion = *o.APIVersion
		}
		qAPIVersion := qrAPIVersion
		if qAPIVersion != "" {

			if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
				return err
			}
		}
	}

	if o.ComposableOnly != nil {

		// query param composableOnly
		var qrComposableOnly bool

		if o.ComposableOnly != nil {
			qrComposableOnly = *o.ComposableOnly
		}
		qComposableOnly := swag.FormatBool(qrComposableOnly)
		if qComposableOnly != "" {

			if err := r.SetQueryParam("composableOnly", qComposableOnly); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.ProjectIds != nil {

		// binding items for projectIds
		joinedProjectIds := o.bindParamProjectIds(reg)

		// query array param projectIds
		if err := r.SetQueryParam("projectIds", joinedProjectIds...); err != nil {
			return err
		}
	}

	if o.ProviderID != nil {

		// query param providerId
		var qrProviderID string

		if o.ProviderID != nil {
			qrProviderID = *o.ProviderID
		}
		qProviderID := qrProviderID
		if qProviderID != "" {

			if err := r.SetQueryParam("providerId", qProviderID); err != nil {
				return err
			}
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListResourceTypesUsingGET2 binds the parameter $orderby
func (o *ListResourceTypesUsingGET2Params) bindParamDollarOrderby(formats strfmt.Registry) []string {
	dollarOrderbyIR := o.DollarOrderby

	var dollarOrderbyIC []string
	for _, dollarOrderbyIIR := range dollarOrderbyIR { // explode []string

		dollarOrderbyIIV := dollarOrderbyIIR // string as string
		dollarOrderbyIC = append(dollarOrderbyIC, dollarOrderbyIIV)
	}

	// items.CollectionFormat: "multi"
	dollarOrderbyIS := swag.JoinByFormat(dollarOrderbyIC, "multi")

	return dollarOrderbyIS
}

// bindParamListResourceTypesUsingGET2 binds the parameter ids
func (o *ListResourceTypesUsingGET2Params) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []string

		idsIIV := idsIIR // string as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "multi"
	idsIS := swag.JoinByFormat(idsIC, "multi")

	return idsIS
}

// bindParamListResourceTypesUsingGET2 binds the parameter projectIds
func (o *ListResourceTypesUsingGET2Params) bindParamProjectIds(formats strfmt.Registry) []string {
	projectIdsIR := o.ProjectIds

	var projectIdsIC []string
	for _, projectIdsIIR := range projectIdsIR { // explode []string

		projectIdsIIV := projectIdsIIR // string as string
		projectIdsIC = append(projectIdsIC, projectIdsIIV)
	}

	// items.CollectionFormat: "multi"
	projectIdsIS := swag.JoinByFormat(projectIdsIC, "multi")

	return projectIdsIS
}
