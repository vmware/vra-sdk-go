// Code generated by go-swagger; DO NOT EDIT.

package source_control_sync

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSyncHistoryUsingGETParams creates a new SyncHistoryUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSyncHistoryUsingGETParams() *SyncHistoryUsingGETParams {
	return &SyncHistoryUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSyncHistoryUsingGETParamsWithTimeout creates a new SyncHistoryUsingGETParams object
// with the ability to set a timeout on a request.
func NewSyncHistoryUsingGETParamsWithTimeout(timeout time.Duration) *SyncHistoryUsingGETParams {
	return &SyncHistoryUsingGETParams{
		timeout: timeout,
	}
}

// NewSyncHistoryUsingGETParamsWithContext creates a new SyncHistoryUsingGETParams object
// with the ability to set a context for a request.
func NewSyncHistoryUsingGETParamsWithContext(ctx context.Context) *SyncHistoryUsingGETParams {
	return &SyncHistoryUsingGETParams{
		Context: ctx,
	}
}

// NewSyncHistoryUsingGETParamsWithHTTPClient creates a new SyncHistoryUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewSyncHistoryUsingGETParamsWithHTTPClient(client *http.Client) *SyncHistoryUsingGETParams {
	return &SyncHistoryUsingGETParams{
		HTTPClient: client,
	}
}

/*
SyncHistoryUsingGETParams contains all the parameters to send to the API endpoint

	for the sync history using g e t operation.

	Typically these are written to a http.Request.
*/
type SyncHistoryUsingGETParams struct {

	/* APIVersion.

	   The version of the API in yyyy-MM-dd format (UTC). For versioning information, please refer to /content/api/about
	*/
	APIVersion *string

	/* ContentName.

	   Search based on content name
	*/
	ContentName *string

	/* ContentType.

	   Search based on content type
	*/
	ContentType *string

	/* IntegrationID.

	   Search based on integration id
	*/
	IntegrationID *string

	/* ProjectIds.

	   Search based on project ids
	*/
	ProjectIds []string

	/* RequestID.

	   Search based on request Id
	*/
	RequestID *string

	/* SourceIds.

	   Search based on content source ids
	*/
	SourceIds []strfmt.UUID

	/* Status.

	   Search based on sync status
	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the sync history using get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SyncHistoryUsingGETParams) WithDefaults() *SyncHistoryUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the sync history using get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SyncHistoryUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the sync history using get params
func (o *SyncHistoryUsingGETParams) WithTimeout(timeout time.Duration) *SyncHistoryUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sync history using get params
func (o *SyncHistoryUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sync history using get params
func (o *SyncHistoryUsingGETParams) WithContext(ctx context.Context) *SyncHistoryUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sync history using get params
func (o *SyncHistoryUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sync history using get params
func (o *SyncHistoryUsingGETParams) WithHTTPClient(client *http.Client) *SyncHistoryUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sync history using get params
func (o *SyncHistoryUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the sync history using get params
func (o *SyncHistoryUsingGETParams) WithAPIVersion(aPIVersion *string) *SyncHistoryUsingGETParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the sync history using get params
func (o *SyncHistoryUsingGETParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithContentName adds the contentName to the sync history using get params
func (o *SyncHistoryUsingGETParams) WithContentName(contentName *string) *SyncHistoryUsingGETParams {
	o.SetContentName(contentName)
	return o
}

// SetContentName adds the contentName to the sync history using get params
func (o *SyncHistoryUsingGETParams) SetContentName(contentName *string) {
	o.ContentName = contentName
}

// WithContentType adds the contentType to the sync history using get params
func (o *SyncHistoryUsingGETParams) WithContentType(contentType *string) *SyncHistoryUsingGETParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the sync history using get params
func (o *SyncHistoryUsingGETParams) SetContentType(contentType *string) {
	o.ContentType = contentType
}

// WithIntegrationID adds the integrationID to the sync history using get params
func (o *SyncHistoryUsingGETParams) WithIntegrationID(integrationID *string) *SyncHistoryUsingGETParams {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the sync history using get params
func (o *SyncHistoryUsingGETParams) SetIntegrationID(integrationID *string) {
	o.IntegrationID = integrationID
}

// WithProjectIds adds the projectIds to the sync history using get params
func (o *SyncHistoryUsingGETParams) WithProjectIds(projectIds []string) *SyncHistoryUsingGETParams {
	o.SetProjectIds(projectIds)
	return o
}

// SetProjectIds adds the projectIds to the sync history using get params
func (o *SyncHistoryUsingGETParams) SetProjectIds(projectIds []string) {
	o.ProjectIds = projectIds
}

// WithRequestID adds the requestID to the sync history using get params
func (o *SyncHistoryUsingGETParams) WithRequestID(requestID *string) *SyncHistoryUsingGETParams {
	o.SetRequestID(requestID)
	return o
}

// SetRequestID adds the requestId to the sync history using get params
func (o *SyncHistoryUsingGETParams) SetRequestID(requestID *string) {
	o.RequestID = requestID
}

// WithSourceIds adds the sourceIds to the sync history using get params
func (o *SyncHistoryUsingGETParams) WithSourceIds(sourceIds []strfmt.UUID) *SyncHistoryUsingGETParams {
	o.SetSourceIds(sourceIds)
	return o
}

// SetSourceIds adds the sourceIds to the sync history using get params
func (o *SyncHistoryUsingGETParams) SetSourceIds(sourceIds []strfmt.UUID) {
	o.SourceIds = sourceIds
}

// WithStatus adds the status to the sync history using get params
func (o *SyncHistoryUsingGETParams) WithStatus(status *string) *SyncHistoryUsingGETParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the sync history using get params
func (o *SyncHistoryUsingGETParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *SyncHistoryUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// query param apiVersion
		var qrAPIVersion string

		if o.APIVersion != nil {
			qrAPIVersion = *o.APIVersion
		}
		qAPIVersion := qrAPIVersion
		if qAPIVersion != "" {

			if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
				return err
			}
		}
	}

	if o.ContentName != nil {

		// query param contentName
		var qrContentName string

		if o.ContentName != nil {
			qrContentName = *o.ContentName
		}
		qContentName := qrContentName
		if qContentName != "" {

			if err := r.SetQueryParam("contentName", qContentName); err != nil {
				return err
			}
		}
	}

	if o.ContentType != nil {

		// query param contentType
		var qrContentType string

		if o.ContentType != nil {
			qrContentType = *o.ContentType
		}
		qContentType := qrContentType
		if qContentType != "" {

			if err := r.SetQueryParam("contentType", qContentType); err != nil {
				return err
			}
		}
	}

	if o.IntegrationID != nil {

		// query param integrationId
		var qrIntegrationID string

		if o.IntegrationID != nil {
			qrIntegrationID = *o.IntegrationID
		}
		qIntegrationID := qrIntegrationID
		if qIntegrationID != "" {

			if err := r.SetQueryParam("integrationId", qIntegrationID); err != nil {
				return err
			}
		}
	}

	if o.ProjectIds != nil {

		// binding items for projectIds
		joinedProjectIds := o.bindParamProjectIds(reg)

		// query array param projectIds
		if err := r.SetQueryParam("projectIds", joinedProjectIds...); err != nil {
			return err
		}
	}

	if o.RequestID != nil {

		// query param requestId
		var qrRequestID string

		if o.RequestID != nil {
			qrRequestID = *o.RequestID
		}
		qRequestID := qrRequestID
		if qRequestID != "" {

			if err := r.SetQueryParam("requestId", qRequestID); err != nil {
				return err
			}
		}
	}

	if o.SourceIds != nil {

		// binding items for sourceIds
		joinedSourceIds := o.bindParamSourceIds(reg)

		// query array param sourceIds
		if err := r.SetQueryParam("sourceIds", joinedSourceIds...); err != nil {
			return err
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSyncHistoryUsingGET binds the parameter projectIds
func (o *SyncHistoryUsingGETParams) bindParamProjectIds(formats strfmt.Registry) []string {
	projectIdsIR := o.ProjectIds

	var projectIdsIC []string
	for _, projectIdsIIR := range projectIdsIR { // explode []string

		projectIdsIIV := projectIdsIIR // string as string
		projectIdsIC = append(projectIdsIC, projectIdsIIV)
	}

	// items.CollectionFormat: "multi"
	projectIdsIS := swag.JoinByFormat(projectIdsIC, "multi")

	return projectIdsIS
}

// bindParamSyncHistoryUsingGET binds the parameter sourceIds
func (o *SyncHistoryUsingGETParams) bindParamSourceIds(formats strfmt.Registry) []string {
	sourceIdsIR := o.SourceIds

	var sourceIdsIC []string
	for _, sourceIdsIIR := range sourceIdsIR { // explode []strfmt.UUID

		sourceIdsIIV := sourceIdsIIR.String() // strfmt.UUID as string
		sourceIdsIC = append(sourceIdsIC, sourceIdsIIV)
	}

	// items.CollectionFormat: "multi"
	sourceIdsIS := swag.JoinByFormat(sourceIdsIC, "multi")

	return sourceIdsIS
}
