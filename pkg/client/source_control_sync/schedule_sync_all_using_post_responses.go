// Code generated by go-swagger; DO NOT EDIT.

package source_control_sync

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// ScheduleSyncAllUsingPOSTReader is a Reader for the ScheduleSyncAllUsingPOST structure.
type ScheduleSyncAllUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ScheduleSyncAllUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewScheduleSyncAllUsingPOSTAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewScheduleSyncAllUsingPOSTAccepted creates a ScheduleSyncAllUsingPOSTAccepted with default headers values
func NewScheduleSyncAllUsingPOSTAccepted() *ScheduleSyncAllUsingPOSTAccepted {
	return &ScheduleSyncAllUsingPOSTAccepted{}
}

/*ScheduleSyncAllUsingPOSTAccepted handles this case with default header values.

Submitted sync requests
*/
type ScheduleSyncAllUsingPOSTAccepted struct {
	Payload *models.SourceControlSyncRequests
}

func (o *ScheduleSyncAllUsingPOSTAccepted) Error() string {
	return fmt.Sprintf("[POST /content/api/sourcecontrol/sync-all-requests][%d] scheduleSyncAllUsingPOSTAccepted  %+v", 202, o.Payload)
}

func (o *ScheduleSyncAllUsingPOSTAccepted) GetPayload() *models.SourceControlSyncRequests {
	return o.Payload
}

func (o *ScheduleSyncAllUsingPOSTAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SourceControlSyncRequests)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
