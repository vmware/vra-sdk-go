// Code generated by go-swagger; DO NOT EDIT.

package executions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new executions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for executions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAllExecutionsUsingDELETE(params *DeleteAllExecutionsUsingDELETEParams, opts ...ClientOption) (*DeleteAllExecutionsUsingDELETEAccepted, error)

	DeleteExecutionByIDUsingDELETE(params *DeleteExecutionByIDUsingDELETEParams, opts ...ClientOption) (*DeleteExecutionByIDUsingDELETEOK, error)

	GetAllExecutionsUsingGET(params *GetAllExecutionsUsingGETParams, opts ...ClientOption) (*GetAllExecutionsUsingGETOK, error)

	GetExecutionByIDUsingGET(params *GetExecutionByIDUsingGETParams, opts ...ClientOption) (*GetExecutionByIDUsingGETOK, error)

	ModifyExecutionUsingPOST(params *ModifyExecutionUsingPOSTParams, opts ...ClientOption) (*ModifyExecutionUsingPOSTOK, error)

	UpdateUsingPOST(params *UpdateUsingPOSTParams, opts ...ClientOption) (*UpdateUsingPOSTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAllExecutionsUsingDELETE deletes all executions

Delete executions that match the specified filter.
*/
func (a *Client) DeleteAllExecutionsUsingDELETE(params *DeleteAllExecutionsUsingDELETEParams, opts ...ClientOption) (*DeleteAllExecutionsUsingDELETEAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllExecutionsUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAllExecutionsUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/executions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllExecutionsUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAllExecutionsUsingDELETEAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAllExecutionsUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteExecutionByIDUsingDELETE deletes an execution by id

Delete an Execution
*/
func (a *Client) DeleteExecutionByIDUsingDELETE(params *DeleteExecutionByIDUsingDELETEParams, opts ...ClientOption) (*DeleteExecutionByIDUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExecutionByIDUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteExecutionByIdUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/executions/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExecutionByIDUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteExecutionByIDUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteExecutionByIdUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllExecutionsUsingGET gets all executions

Get all Executions with specified paging and filter parameters.
*/
func (a *Client) GetAllExecutionsUsingGET(params *GetAllExecutionsUsingGETParams, opts ...ClientOption) (*GetAllExecutionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllExecutionsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllExecutionsUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/executions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllExecutionsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllExecutionsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllExecutionsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExecutionByIDUsingGET gets an execution

Get an Execution by id
*/
func (a *Client) GetExecutionByIDUsingGET(params *GetExecutionByIDUsingGETParams, opts ...ClientOption) (*GetExecutionByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionByIDUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getExecutionByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/executions/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExecutionByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutionByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExecutionByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModifyExecutionUsingPOST acts on an execution

Actions supported are pause, resume, cancel and tag
*/
func (a *Client) ModifyExecutionUsingPOST(params *ModifyExecutionUsingPOSTParams, opts ...ClientOption) (*ModifyExecutionUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyExecutionUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyExecutionUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/executions/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyExecutionUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyExecutionUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyExecutionUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUsingPOST updates a batch of user operations

Approves/ Rejects a set of user operations
*/
func (a *Client) UpdateUsingPOST(params *UpdateUsingPOSTParams, opts ...ClientOption) (*UpdateUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/batch-user-operations",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
