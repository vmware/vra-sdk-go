// Code generated by go-swagger; DO NOT EDIT.

package executions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new executions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for executions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAllUsingDELETE(params *DeleteAllUsingDELETEParams, opts ...ClientOption) (*DeleteAllUsingDELETEAccepted, error)

	DeleteUsingDELETE3(params *DeleteUsingDELETE3Params, opts ...ClientOption) (*DeleteUsingDELETE3OK, error)

	GetAllUsingGET3(params *GetAllUsingGET3Params, opts ...ClientOption) (*GetAllUsingGET3OK, error)

	GetUsingGET1(params *GetUsingGET1Params, opts ...ClientOption) (*GetUsingGET1OK, error)

	ModifyExecutionUsingPOST(params *ModifyExecutionUsingPOSTParams, opts ...ClientOption) (*ModifyExecutionUsingPOSTOK, error)

	UpdateUsingPOST(params *UpdateUsingPOSTParams, opts ...ClientOption) (*UpdateUsingPOSTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAllUsingDELETE deletes all executions

  Delete executions that match the specified filter.
*/
func (a *Client) DeleteAllUsingDELETE(params *DeleteAllUsingDELETEParams, opts ...ClientOption) (*DeleteAllUsingDELETEAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAllUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/executions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAllUsingDELETEAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAllUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUsingDELETE3 deletes an execution by id

  Delete an Execution
*/
func (a *Client) DeleteUsingDELETE3(params *DeleteUsingDELETE3Params, opts ...ClientOption) (*DeleteUsingDELETE3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_3",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/executions/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUsingGET3 gets all executions

  Get all Executions with specified paging and filter parameters.
*/
func (a *Client) GetAllUsingGET3(params *GetAllUsingGET3Params, opts ...ClientOption) (*GetAllUsingGET3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsingGET_3",
		Method:             "GET",
		PathPattern:        "/codestream/api/executions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllUsingGET3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsingGET1 gets an execution

  Get an Execution by id
*/
func (a *Client) GetUsingGET1(params *GetUsingGET1Params, opts ...ClientOption) (*GetUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUsingGET_1",
		Method:             "GET",
		PathPattern:        "/codestream/api/executions/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ModifyExecutionUsingPOST acts on an execution

  Actions supported are pause, resume, cancel and tag
*/
func (a *Client) ModifyExecutionUsingPOST(params *ModifyExecutionUsingPOSTParams, opts ...ClientOption) (*ModifyExecutionUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyExecutionUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyExecutionUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/executions/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyExecutionUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyExecutionUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyExecutionUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUsingPOST updates a batch of user operations

  Approves/ Rejects a set of user operations
*/
func (a *Client) UpdateUsingPOST(params *UpdateUsingPOSTParams, opts ...ClientOption) (*UpdateUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/batch-user-operations",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
