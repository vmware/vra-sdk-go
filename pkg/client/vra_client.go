// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/client/about"
	"github.com/vmware/vra-sdk-go/pkg/client/blueprint"
	"github.com/vmware/vra-sdk-go/pkg/client/blueprint_requests"
	"github.com/vmware/vra-sdk-go/pkg/client/blueprint_validation"
	"github.com/vmware/vra-sdk-go/pkg/client/catalog_admin_items"
	"github.com/vmware/vra-sdk-go/pkg/client/catalog_entitlements"
	"github.com/vmware/vra-sdk-go/pkg/client/catalog_item_types"
	"github.com/vmware/vra-sdk-go/pkg/client/catalog_items"
	"github.com/vmware/vra-sdk-go/pkg/client/catalog_sources"
	"github.com/vmware/vra-sdk-go/pkg/client/cloud_account"
	"github.com/vmware/vra-sdk-go/pkg/client/compute"
	"github.com/vmware/vra-sdk-go/pkg/client/content_source"
	"github.com/vmware/vra-sdk-go/pkg/client/data_collector"
	"github.com/vmware/vra-sdk-go/pkg/client/deployment"
	"github.com/vmware/vra-sdk-go/pkg/client/deployment_actions"
	"github.com/vmware/vra-sdk-go/pkg/client/deployment_events"
	"github.com/vmware/vra-sdk-go/pkg/client/deployments"
	"github.com/vmware/vra-sdk-go/pkg/client/disk"
	"github.com/vmware/vra-sdk-go/pkg/client/fabric_aws_volume_types"
	"github.com/vmware/vra-sdk-go/pkg/client/fabric_azure_storage_account"
	"github.com/vmware/vra-sdk-go/pkg/client/fabric_compute"
	"github.com/vmware/vra-sdk-go/pkg/client/fabric_flavors"
	"github.com/vmware/vra-sdk-go/pkg/client/fabric_images"
	"github.com/vmware/vra-sdk-go/pkg/client/fabric_network"
	"github.com/vmware/vra-sdk-go/pkg/client/fabric_vsphere_datastore"
	"github.com/vmware/vra-sdk-go/pkg/client/fabric_vsphere_storage_policies"
	"github.com/vmware/vra-sdk-go/pkg/client/flavor_profile"
	"github.com/vmware/vra-sdk-go/pkg/client/flavors"
	"github.com/vmware/vra-sdk-go/pkg/client/icons"
	"github.com/vmware/vra-sdk-go/pkg/client/image_profile"
	"github.com/vmware/vra-sdk-go/pkg/client/images"
	"github.com/vmware/vra-sdk-go/pkg/client/load_balancer"
	"github.com/vmware/vra-sdk-go/pkg/client/location"
	"github.com/vmware/vra-sdk-go/pkg/client/login"
	"github.com/vmware/vra-sdk-go/pkg/client/marketplace"
	"github.com/vmware/vra-sdk-go/pkg/client/marketplace_downloads"
	"github.com/vmware/vra-sdk-go/pkg/client/network"
	"github.com/vmware/vra-sdk-go/pkg/client/network_ip_range"
	"github.com/vmware/vra-sdk-go/pkg/client/network_profile"
	"github.com/vmware/vra-sdk-go/pkg/client/policies"
	"github.com/vmware/vra-sdk-go/pkg/client/policy_decisions"
	"github.com/vmware/vra-sdk-go/pkg/client/policy_types"
	"github.com/vmware/vra-sdk-go/pkg/client/pricing_card_assignments"
	"github.com/vmware/vra-sdk-go/pkg/client/pricing_cards"
	"github.com/vmware/vra-sdk-go/pkg/client/project"
	"github.com/vmware/vra-sdk-go/pkg/client/request"
	"github.com/vmware/vra-sdk-go/pkg/client/resource_types"
	"github.com/vmware/vra-sdk-go/pkg/client/security_group"
	"github.com/vmware/vra-sdk-go/pkg/client/source_control_sync"
	"github.com/vmware/vra-sdk-go/pkg/client/storage_profile"
	"github.com/vmware/vra-sdk-go/pkg/client/tags"
)

// Default vmware cloud assembly iaas  HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "api.mgmt.cloud.vmware.com"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new vmware cloud assembly iaas  HTTP client.
func NewHTTPClient(formats strfmt.Registry) *MulticloudIaaS {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new vmware cloud assembly iaas  HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *MulticloudIaaS {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new vmware cloud assembly iaas  client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *MulticloudIaaS {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(MulticloudIaaS)
	cli.Transport = transport

	cli.About = about.New(transport, formats)

	cli.Blueprint = blueprint.New(transport, formats)

	cli.BlueprintRequests = blueprint_requests.New(transport, formats)

	cli.BlueprintValidation = blueprint_validation.New(transport, formats)

	cli.CatalogAdminItems = catalog_admin_items.New(transport, formats)

	cli.CatalogEntitlements = catalog_entitlements.New(transport, formats)

	cli.CatalogItemTypes = catalog_item_types.New(transport, formats)

	cli.CatalogItems = catalog_items.New(transport, formats)

	cli.CatalogSources = catalog_sources.New(transport, formats)

	cli.CloudAccount = cloud_account.New(transport, formats)

	cli.Compute = compute.New(transport, formats)

	cli.ContentSource = content_source.New(transport, formats)

	cli.DataCollector = data_collector.New(transport, formats)

	cli.Deployment = deployment.New(transport, formats)

	cli.DeploymentActions = deployment_actions.New(transport, formats)

	cli.DeploymentEvents = deployment_events.New(transport, formats)

	cli.Deployments = deployments.New(transport, formats)

	cli.Disk = disk.New(transport, formats)

	cli.FabricawsVolumeTypes = fabric_aws_volume_types.New(transport, formats)

	cli.FabricAzureStorageAccount = fabric_azure_storage_account.New(transport, formats)

	cli.FabricCompute = fabric_compute.New(transport, formats)

	cli.FabricFlavors = fabric_flavors.New(transport, formats)

	cli.FabricImages = fabric_images.New(transport, formats)

	cli.FabricNetwork = fabric_network.New(transport, formats)

	cli.FabricvSphereDatastore = fabric_vsphere_datastore.New(transport, formats)

	cli.FabricvSphereStoragePolicies = fabric_vsphere_storage_policies.New(transport, formats)

	cli.FlavorProfile = flavor_profile.New(transport, formats)

	cli.Flavors = flavors.New(transport, formats)

	cli.Icons = icons.New(transport, formats)

	cli.ImageProfile = image_profile.New(transport, formats)

	cli.Images = images.New(transport, formats)

	cli.LoadBalancer = load_balancer.New(transport, formats)

	cli.Location = location.New(transport, formats)

	cli.Login = login.New(transport, formats)

	cli.Marketplace = marketplace.New(transport, formats)

	cli.MarketplaceDownloads = marketplace_downloads.New(transport, formats)

	cli.Network = network.New(transport, formats)

	cli.NetworkIPRange = network_ip_range.New(transport, formats)

	cli.NetworkProfile = network_profile.New(transport, formats)

	cli.Policies = policies.New(transport, formats)

	cli.PolicyDecisions = policy_decisions.New(transport, formats)

	cli.PolicyTypes = policy_types.New(transport, formats)

	cli.PricingCardAssignments = pricing_card_assignments.New(transport, formats)

	cli.PricingCards = pricing_cards.New(transport, formats)

	cli.Project = project.New(transport, formats)

	cli.Request = request.New(transport, formats)

	cli.ResourceTypes = resource_types.New(transport, formats)

	cli.SecurityGroup = security_group.New(transport, formats)

	cli.SourceControlSync = source_control_sync.New(transport, formats)

	cli.StorageProfile = storage_profile.New(transport, formats)

	cli.Tags = tags.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// MulticloudIaaS is a client for vmware cloud assembly iaas 
type MulticloudIaaS struct {
	About *about.Client

	Blueprint *blueprint.Client

	BlueprintRequests *blueprint_requests.Client

	BlueprintValidation *blueprint_validation.Client

	CatalogAdminItems *catalog_admin_items.Client

	CatalogEntitlements *catalog_entitlements.Client

	CatalogItemTypes *catalog_item_types.Client

	CatalogItems *catalog_items.Client

	CatalogSources *catalog_sources.Client

	CloudAccount *cloud_account.Client

	Compute *compute.Client

	ContentSource *content_source.Client

	DataCollector *data_collector.Client

	Deployment *deployment.Client

	DeploymentActions *deployment_actions.Client

	DeploymentEvents *deployment_events.Client

	Deployments *deployments.Client

	Disk *disk.Client

	FabricawsVolumeTypes *fabric_aws_volume_types.Client

	FabricAzureStorageAccount *fabric_azure_storage_account.Client

	FabricCompute *fabric_compute.Client

	FabricFlavors *fabric_flavors.Client

	FabricImages *fabric_images.Client

	FabricNetwork *fabric_network.Client

	FabricvSphereDatastore *fabric_vsphere_datastore.Client

	FabricvSphereStoragePolicies *fabric_vsphere_storage_policies.Client

	FlavorProfile *flavor_profile.Client

	Flavors *flavors.Client

	Icons *icons.Client

	ImageProfile *image_profile.Client

	Images *images.Client

	LoadBalancer *load_balancer.Client

	Location *location.Client

	Login *login.Client

	Marketplace *marketplace.Client

	MarketplaceDownloads *marketplace_downloads.Client

	Network *network.Client

	NetworkIPRange *network_ip_range.Client

	NetworkProfile *network_profile.Client

	Policies *policies.Client

	PolicyDecisions *policy_decisions.Client

	PolicyTypes *policy_types.Client

	PricingCardAssignments *pricing_card_assignments.Client

	PricingCards *pricing_cards.Client

	Project *project.Client

	Request *request.Client

	ResourceTypes *resource_types.Client

	SecurityGroup *security_group.Client

	SourceControlSync *source_control_sync.Client

	StorageProfile *storage_profile.Client

	Tags *tags.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *MulticloudIaaS) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.About.SetTransport(transport)

	c.Blueprint.SetTransport(transport)

	c.BlueprintRequests.SetTransport(transport)

	c.BlueprintValidation.SetTransport(transport)

	c.CatalogAdminItems.SetTransport(transport)

	c.CatalogEntitlements.SetTransport(transport)

	c.CatalogItemTypes.SetTransport(transport)

	c.CatalogItems.SetTransport(transport)

	c.CatalogSources.SetTransport(transport)

	c.CloudAccount.SetTransport(transport)

	c.Compute.SetTransport(transport)

	c.ContentSource.SetTransport(transport)

	c.DataCollector.SetTransport(transport)

	c.Deployment.SetTransport(transport)

	c.DeploymentActions.SetTransport(transport)

	c.DeploymentEvents.SetTransport(transport)

	c.Deployments.SetTransport(transport)

	c.Disk.SetTransport(transport)

	c.FabricawsVolumeTypes.SetTransport(transport)

	c.FabricAzureStorageAccount.SetTransport(transport)

	c.FabricCompute.SetTransport(transport)

	c.FabricFlavors.SetTransport(transport)

	c.FabricImages.SetTransport(transport)

	c.FabricNetwork.SetTransport(transport)

	c.FabricvSphereDatastore.SetTransport(transport)

	c.FabricvSphereStoragePolicies.SetTransport(transport)

	c.FlavorProfile.SetTransport(transport)

	c.Flavors.SetTransport(transport)

	c.Icons.SetTransport(transport)

	c.ImageProfile.SetTransport(transport)

	c.Images.SetTransport(transport)

	c.LoadBalancer.SetTransport(transport)

	c.Location.SetTransport(transport)

	c.Login.SetTransport(transport)

	c.Marketplace.SetTransport(transport)

	c.MarketplaceDownloads.SetTransport(transport)

	c.Network.SetTransport(transport)

	c.NetworkIPRange.SetTransport(transport)

	c.NetworkProfile.SetTransport(transport)

	c.Policies.SetTransport(transport)

	c.PolicyDecisions.SetTransport(transport)

	c.PolicyTypes.SetTransport(transport)

	c.PricingCardAssignments.SetTransport(transport)

	c.PricingCards.SetTransport(transport)

	c.Project.SetTransport(transport)

	c.Request.SetTransport(transport)

	c.ResourceTypes.SetTransport(transport)

	c.SecurityGroup.SetTransport(transport)

	c.SourceControlSync.SetTransport(transport)

	c.StorageProfile.SetTransport(transport)

	c.Tags.SetTransport(transport)

}
