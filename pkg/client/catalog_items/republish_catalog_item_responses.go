// Code generated by go-swagger; DO NOT EDIT.

package catalog_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// RepublishCatalogItemReader is a Reader for the RepublishCatalogItem structure.
type RepublishCatalogItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepublishCatalogItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepublishCatalogItemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRepublishCatalogItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRepublishCatalogItemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRepublishCatalogItemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRepublishCatalogItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRepublishCatalogItemOK creates a RepublishCatalogItemOK with default headers values
func NewRepublishCatalogItemOK() *RepublishCatalogItemOK {
	return &RepublishCatalogItemOK{}
}

/*
RepublishCatalogItemOK describes a response with status code 200, with default header values.

OK
*/
type RepublishCatalogItemOK struct {
	Payload *models.CatalogItem
}

// IsSuccess returns true when this republish catalog item o k response has a 2xx status code
func (o *RepublishCatalogItemOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this republish catalog item o k response has a 3xx status code
func (o *RepublishCatalogItemOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this republish catalog item o k response has a 4xx status code
func (o *RepublishCatalogItemOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this republish catalog item o k response has a 5xx status code
func (o *RepublishCatalogItemOK) IsServerError() bool {
	return false
}

// IsCode returns true when this republish catalog item o k response a status code equal to that given
func (o *RepublishCatalogItemOK) IsCode(code int) bool {
	return code == 200
}

func (o *RepublishCatalogItemOK) Error() string {
	return fmt.Sprintf("[POST /catalog/api/items/{catalogItemId}:republish][%d] republishCatalogItemOK  %+v", 200, o.Payload)
}

func (o *RepublishCatalogItemOK) String() string {
	return fmt.Sprintf("[POST /catalog/api/items/{catalogItemId}:republish][%d] republishCatalogItemOK  %+v", 200, o.Payload)
}

func (o *RepublishCatalogItemOK) GetPayload() *models.CatalogItem {
	return o.Payload
}

func (o *RepublishCatalogItemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CatalogItem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepublishCatalogItemBadRequest creates a RepublishCatalogItemBadRequest with default headers values
func NewRepublishCatalogItemBadRequest() *RepublishCatalogItemBadRequest {
	return &RepublishCatalogItemBadRequest{}
}

/*
RepublishCatalogItemBadRequest describes a response with status code 400, with default header values.

Invalid request - bad data
*/
type RepublishCatalogItemBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this republish catalog item bad request response has a 2xx status code
func (o *RepublishCatalogItemBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this republish catalog item bad request response has a 3xx status code
func (o *RepublishCatalogItemBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this republish catalog item bad request response has a 4xx status code
func (o *RepublishCatalogItemBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this republish catalog item bad request response has a 5xx status code
func (o *RepublishCatalogItemBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this republish catalog item bad request response a status code equal to that given
func (o *RepublishCatalogItemBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RepublishCatalogItemBadRequest) Error() string {
	return fmt.Sprintf("[POST /catalog/api/items/{catalogItemId}:republish][%d] republishCatalogItemBadRequest  %+v", 400, o.Payload)
}

func (o *RepublishCatalogItemBadRequest) String() string {
	return fmt.Sprintf("[POST /catalog/api/items/{catalogItemId}:republish][%d] republishCatalogItemBadRequest  %+v", 400, o.Payload)
}

func (o *RepublishCatalogItemBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RepublishCatalogItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepublishCatalogItemUnauthorized creates a RepublishCatalogItemUnauthorized with default headers values
func NewRepublishCatalogItemUnauthorized() *RepublishCatalogItemUnauthorized {
	return &RepublishCatalogItemUnauthorized{}
}

/*
RepublishCatalogItemUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RepublishCatalogItemUnauthorized struct {
}

// IsSuccess returns true when this republish catalog item unauthorized response has a 2xx status code
func (o *RepublishCatalogItemUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this republish catalog item unauthorized response has a 3xx status code
func (o *RepublishCatalogItemUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this republish catalog item unauthorized response has a 4xx status code
func (o *RepublishCatalogItemUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this republish catalog item unauthorized response has a 5xx status code
func (o *RepublishCatalogItemUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this republish catalog item unauthorized response a status code equal to that given
func (o *RepublishCatalogItemUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RepublishCatalogItemUnauthorized) Error() string {
	return fmt.Sprintf("[POST /catalog/api/items/{catalogItemId}:republish][%d] republishCatalogItemUnauthorized ", 401)
}

func (o *RepublishCatalogItemUnauthorized) String() string {
	return fmt.Sprintf("[POST /catalog/api/items/{catalogItemId}:republish][%d] republishCatalogItemUnauthorized ", 401)
}

func (o *RepublishCatalogItemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRepublishCatalogItemForbidden creates a RepublishCatalogItemForbidden with default headers values
func NewRepublishCatalogItemForbidden() *RepublishCatalogItemForbidden {
	return &RepublishCatalogItemForbidden{}
}

/*
RepublishCatalogItemForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RepublishCatalogItemForbidden struct {
}

// IsSuccess returns true when this republish catalog item forbidden response has a 2xx status code
func (o *RepublishCatalogItemForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this republish catalog item forbidden response has a 3xx status code
func (o *RepublishCatalogItemForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this republish catalog item forbidden response has a 4xx status code
func (o *RepublishCatalogItemForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this republish catalog item forbidden response has a 5xx status code
func (o *RepublishCatalogItemForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this republish catalog item forbidden response a status code equal to that given
func (o *RepublishCatalogItemForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RepublishCatalogItemForbidden) Error() string {
	return fmt.Sprintf("[POST /catalog/api/items/{catalogItemId}:republish][%d] republishCatalogItemForbidden ", 403)
}

func (o *RepublishCatalogItemForbidden) String() string {
	return fmt.Sprintf("[POST /catalog/api/items/{catalogItemId}:republish][%d] republishCatalogItemForbidden ", 403)
}

func (o *RepublishCatalogItemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRepublishCatalogItemNotFound creates a RepublishCatalogItemNotFound with default headers values
func NewRepublishCatalogItemNotFound() *RepublishCatalogItemNotFound {
	return &RepublishCatalogItemNotFound{}
}

/*
RepublishCatalogItemNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RepublishCatalogItemNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this republish catalog item not found response has a 2xx status code
func (o *RepublishCatalogItemNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this republish catalog item not found response has a 3xx status code
func (o *RepublishCatalogItemNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this republish catalog item not found response has a 4xx status code
func (o *RepublishCatalogItemNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this republish catalog item not found response has a 5xx status code
func (o *RepublishCatalogItemNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this republish catalog item not found response a status code equal to that given
func (o *RepublishCatalogItemNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RepublishCatalogItemNotFound) Error() string {
	return fmt.Sprintf("[POST /catalog/api/items/{catalogItemId}:republish][%d] republishCatalogItemNotFound  %+v", 404, o.Payload)
}

func (o *RepublishCatalogItemNotFound) String() string {
	return fmt.Sprintf("[POST /catalog/api/items/{catalogItemId}:republish][%d] republishCatalogItemNotFound  %+v", 404, o.Payload)
}

func (o *RepublishCatalogItemNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RepublishCatalogItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
