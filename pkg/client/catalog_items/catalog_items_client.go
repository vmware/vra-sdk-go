// Code generated by go-swagger; DO NOT EDIT.

package catalog_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new catalog items API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog items API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetCatalogItemUsingGET5(params *GetCatalogItemUsingGET5Params, opts ...ClientOption) (*GetCatalogItemUsingGET5OK, error)

	GetCatalogItemsUsingGET5(params *GetCatalogItemsUsingGET5Params, opts ...ClientOption) (*GetCatalogItemsUsingGET5OK, error)

	GetUpfrontPriceResponseForCatalogItemUsingGET2(params *GetUpfrontPriceResponseForCatalogItemUsingGET2Params, opts ...ClientOption) (*GetUpfrontPriceResponseForCatalogItemUsingGET2OK, error)

	GetVersionByIDUsingGET2(params *GetVersionByIDUsingGET2Params, opts ...ClientOption) (*GetVersionByIDUsingGET2OK, error)

	GetVersionsUsingGET2(params *GetVersionsUsingGET2Params, opts ...ClientOption) (*GetVersionsUsingGET2OK, error)

	RequestCatalogItemInstancesUsingPOST1(params *RequestCatalogItemInstancesUsingPOST1Params, opts ...ClientOption) (*RequestCatalogItemInstancesUsingPOST1OK, error)

	SubmitUpfrontPriceRequestForCatalogItemUsingPOST2(params *SubmitUpfrontPriceRequestForCatalogItemUsingPOST2Params, opts ...ClientOption) (*SubmitUpfrontPriceRequestForCatalogItemUsingPOST2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetCatalogItemUsingGET5 finds a catalog item with specified ID

Returns the catalog item with the specified ID.
*/
func (a *Client) GetCatalogItemUsingGET5(params *GetCatalogItemUsingGET5Params, opts ...ClientOption) (*GetCatalogItemUsingGET5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogItemUsingGET5Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCatalogItemUsingGET_5",
		Method:             "GET",
		PathPattern:        "/catalog/api/items/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCatalogItemUsingGET5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogItemUsingGET5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCatalogItemUsingGET_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCatalogItemsUsingGET5 fetches a list of catalog items

Returns a paginated list of catalog items.
*/
func (a *Client) GetCatalogItemsUsingGET5(params *GetCatalogItemsUsingGET5Params, opts ...ClientOption) (*GetCatalogItemsUsingGET5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogItemsUsingGET5Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCatalogItemsUsingGET_5",
		Method:             "GET",
		PathPattern:        "/catalog/api/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCatalogItemsUsingGET5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogItemsUsingGET5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCatalogItemsUsingGET_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUpfrontPriceResponseForCatalogItemUsingGET2 gets a response with upfront prices for a given catalog item

Returns upfront prices of a given catalog item.
*/
func (a *Client) GetUpfrontPriceResponseForCatalogItemUsingGET2(params *GetUpfrontPriceResponseForCatalogItemUsingGET2Params, opts ...ClientOption) (*GetUpfrontPriceResponseForCatalogItemUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpfrontPriceResponseForCatalogItemUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUpfrontPriceResponseForCatalogItemUsingGET_2",
		Method:             "GET",
		PathPattern:        "/catalog/api/items/{id}/upfront-prices/{upfrontPriceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUpfrontPriceResponseForCatalogItemUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUpfrontPriceResponseForCatalogItemUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUpfrontPriceResponseForCatalogItemUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVersionByIDUsingGET2 fetches detailed catalog item version

Returns a detailed catalog item version.
*/
func (a *Client) GetVersionByIDUsingGET2(params *GetVersionByIDUsingGET2Params, opts ...ClientOption) (*GetVersionByIDUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionByIDUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVersionByIdUsingGET_2",
		Method:             "GET",
		PathPattern:        "/catalog/api/items/{id}/versions/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVersionByIDUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionByIDUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersionByIdUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVersionsUsingGET2 fetches a list of catalog items with versions

Returns a paginated list of catalog item versions.
*/
func (a *Client) GetVersionsUsingGET2(params *GetVersionsUsingGET2Params, opts ...ClientOption) (*GetVersionsUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionsUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVersionsUsingGET_2",
		Method:             "GET",
		PathPattern:        "/catalog/api/items/{id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVersionsUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionsUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersionsUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RequestCatalogItemInstancesUsingPOST1 creates deployments

Creates deployments from a catalog item.
*/
func (a *Client) RequestCatalogItemInstancesUsingPOST1(params *RequestCatalogItemInstancesUsingPOST1Params, opts ...ClientOption) (*RequestCatalogItemInstancesUsingPOST1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestCatalogItemInstancesUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestCatalogItemInstancesUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/catalog/api/items/{id}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestCatalogItemInstancesUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestCatalogItemInstancesUsingPOST1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for requestCatalogItemInstancesUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubmitUpfrontPriceRequestForCatalogItemUsingPOST2 creates a request to calculate upfront price for a given catalog item

Returns upfront price response for a given catalog item.
*/
func (a *Client) SubmitUpfrontPriceRequestForCatalogItemUsingPOST2(params *SubmitUpfrontPriceRequestForCatalogItemUsingPOST2Params, opts ...ClientOption) (*SubmitUpfrontPriceRequestForCatalogItemUsingPOST2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitUpfrontPriceRequestForCatalogItemUsingPOST2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "submitUpfrontPriceRequestForCatalogItemUsingPOST_2",
		Method:             "POST",
		PathPattern:        "/catalog/api/items/{id}/upfront-prices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubmitUpfrontPriceRequestForCatalogItemUsingPOST2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitUpfrontPriceRequestForCatalogItemUsingPOST2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitUpfrontPriceRequestForCatalogItemUsingPOST_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
