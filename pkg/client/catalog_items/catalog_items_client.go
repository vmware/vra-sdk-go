// Code generated by go-swagger; DO NOT EDIT.

package catalog_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new catalog items API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog items API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCatalogItemUsingGET1 finds a catalog item with specified ID

Returns the catalog item with the specified ID.
*/
func (a *Client) GetCatalogItemUsingGET1(params *GetCatalogItemUsingGET1Params) (*GetCatalogItemUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogItemUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogItemUsingGET_1",
		Method:             "GET",
		PathPattern:        "/catalog/api/items/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCatalogItemUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogItemUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCatalogItemUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCatalogItemsUsingGET1 fetches a list of catalog items

Returns a paginated list of catalog items.
*/
func (a *Client) GetCatalogItemsUsingGET1(params *GetCatalogItemsUsingGET1Params) (*GetCatalogItemsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogItemsUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogItemsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/catalog/api/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCatalogItemsUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogItemsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCatalogItemsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUpfrontPriceResponseForCatalogItemUsingGET gets a response with upfront prices for a given catalog item

Returns upfront prices of a given catalog item.
*/
func (a *Client) GetUpfrontPriceResponseForCatalogItemUsingGET(params *GetUpfrontPriceResponseForCatalogItemUsingGETParams) (*GetUpfrontPriceResponseForCatalogItemUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpfrontPriceResponseForCatalogItemUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUpfrontPriceResponseForCatalogItemUsingGET",
		Method:             "GET",
		PathPattern:        "/catalog/api/items/{id}/upfront-prices/{upfrontPriceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUpfrontPriceResponseForCatalogItemUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUpfrontPriceResponseForCatalogItemUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUpfrontPriceResponseForCatalogItemUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVersionByIDUsingGET fetches detailed catalog item version

Returns a detailed catalog item version.
*/
func (a *Client) GetVersionByIDUsingGET(params *GetVersionByIDUsingGETParams) (*GetVersionByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVersionByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/catalog/api/items/{id}/versions/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVersionByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersionByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVersionsUsingGET fetches a list of catalog items with versions

Returns a paginated list of catalog item versions.
*/
func (a *Client) GetVersionsUsingGET(params *GetVersionsUsingGETParams) (*GetVersionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVersionsUsingGET",
		Method:             "GET",
		PathPattern:        "/catalog/api/items/{id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVersionsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersionsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RequestCatalogItemUsingPOST creates a deployment

Creates a deployment from a catalog item.
*/
func (a *Client) RequestCatalogItemUsingPOST(params *RequestCatalogItemUsingPOSTParams) (*RequestCatalogItemUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestCatalogItemUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "requestCatalogItemUsingPOST",
		Method:             "POST",
		PathPattern:        "/catalog/api/items/{id}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestCatalogItemUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestCatalogItemUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for requestCatalogItemUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubmitUpfrontPriceRequestForCatalogItemUsingPOST creates a request to calculate upfront price for a given catalog item

Returns upfront price response for a given catalog item.
*/
func (a *Client) SubmitUpfrontPriceRequestForCatalogItemUsingPOST(params *SubmitUpfrontPriceRequestForCatalogItemUsingPOSTParams) (*SubmitUpfrontPriceRequestForCatalogItemUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitUpfrontPriceRequestForCatalogItemUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "submitUpfrontPriceRequestForCatalogItemUsingPOST",
		Method:             "POST",
		PathPattern:        "/catalog/api/items/{id}/upfront-prices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubmitUpfrontPriceRequestForCatalogItemUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitUpfrontPriceRequestForCatalogItemUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitUpfrontPriceRequestForCatalogItemUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
