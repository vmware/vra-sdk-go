// Code generated by go-swagger; DO NOT EDIT.

package catalog_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetVersionsUsingGETReader is a Reader for the GetVersionsUsingGET structure.
type GetVersionsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVersionsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVersionsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetVersionsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVersionsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetVersionsUsingGETOK creates a GetVersionsUsingGETOK with default headers values
func NewGetVersionsUsingGETOK() *GetVersionsUsingGETOK {
	return &GetVersionsUsingGETOK{}
}

/*GetVersionsUsingGETOK handles this case with default header values.

OK
*/
type GetVersionsUsingGETOK struct {
	Payload *models.PageOfCatalogItemVersion
}

func (o *GetVersionsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /catalog/api/items/{id}/versions][%d] getVersionsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetVersionsUsingGETOK) GetPayload() *models.PageOfCatalogItemVersion {
	return o.Payload
}

func (o *GetVersionsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageOfCatalogItemVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsUsingGETUnauthorized creates a GetVersionsUsingGETUnauthorized with default headers values
func NewGetVersionsUsingGETUnauthorized() *GetVersionsUsingGETUnauthorized {
	return &GetVersionsUsingGETUnauthorized{}
}

/*GetVersionsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetVersionsUsingGETUnauthorized struct {
}

func (o *GetVersionsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /catalog/api/items/{id}/versions][%d] getVersionsUsingGETUnauthorized ", 401)
}

func (o *GetVersionsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVersionsUsingGETNotFound creates a GetVersionsUsingGETNotFound with default headers values
func NewGetVersionsUsingGETNotFound() *GetVersionsUsingGETNotFound {
	return &GetVersionsUsingGETNotFound{}
}

/*GetVersionsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetVersionsUsingGETNotFound struct {
	Payload *models.Error
}

func (o *GetVersionsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /catalog/api/items/{id}/versions][%d] getVersionsUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetVersionsUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVersionsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
