// Code generated by go-swagger; DO NOT EDIT.

package flavor_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateFlavorProfileReader is a Reader for the UpdateFlavorProfile structure.
type UpdateFlavorProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateFlavorProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateFlavorProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateFlavorProfileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateFlavorProfileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateFlavorProfileOK creates a UpdateFlavorProfileOK with default headers values
func NewUpdateFlavorProfileOK() *UpdateFlavorProfileOK {
	return &UpdateFlavorProfileOK{}
}

/*
UpdateFlavorProfileOK describes a response with status code 200, with default header values.

successful operation
*/
type UpdateFlavorProfileOK struct {
	Payload *models.FlavorProfile
}

// IsSuccess returns true when this update flavor profile o k response has a 2xx status code
func (o *UpdateFlavorProfileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update flavor profile o k response has a 3xx status code
func (o *UpdateFlavorProfileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update flavor profile o k response has a 4xx status code
func (o *UpdateFlavorProfileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update flavor profile o k response has a 5xx status code
func (o *UpdateFlavorProfileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update flavor profile o k response a status code equal to that given
func (o *UpdateFlavorProfileOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateFlavorProfileOK) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/flavor-profiles/{id}][%d] updateFlavorProfileOK  %+v", 200, o.Payload)
}

func (o *UpdateFlavorProfileOK) String() string {
	return fmt.Sprintf("[PATCH /iaas/api/flavor-profiles/{id}][%d] updateFlavorProfileOK  %+v", 200, o.Payload)
}

func (o *UpdateFlavorProfileOK) GetPayload() *models.FlavorProfile {
	return o.Payload
}

func (o *UpdateFlavorProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FlavorProfile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFlavorProfileForbidden creates a UpdateFlavorProfileForbidden with default headers values
func NewUpdateFlavorProfileForbidden() *UpdateFlavorProfileForbidden {
	return &UpdateFlavorProfileForbidden{}
}

/*
UpdateFlavorProfileForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateFlavorProfileForbidden struct {
	Payload *models.ServiceErrorResponse
}

// IsSuccess returns true when this update flavor profile forbidden response has a 2xx status code
func (o *UpdateFlavorProfileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update flavor profile forbidden response has a 3xx status code
func (o *UpdateFlavorProfileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update flavor profile forbidden response has a 4xx status code
func (o *UpdateFlavorProfileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update flavor profile forbidden response has a 5xx status code
func (o *UpdateFlavorProfileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update flavor profile forbidden response a status code equal to that given
func (o *UpdateFlavorProfileForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateFlavorProfileForbidden) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/flavor-profiles/{id}][%d] updateFlavorProfileForbidden  %+v", 403, o.Payload)
}

func (o *UpdateFlavorProfileForbidden) String() string {
	return fmt.Sprintf("[PATCH /iaas/api/flavor-profiles/{id}][%d] updateFlavorProfileForbidden  %+v", 403, o.Payload)
}

func (o *UpdateFlavorProfileForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *UpdateFlavorProfileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFlavorProfileNotFound creates a UpdateFlavorProfileNotFound with default headers values
func NewUpdateFlavorProfileNotFound() *UpdateFlavorProfileNotFound {
	return &UpdateFlavorProfileNotFound{}
}

/*
UpdateFlavorProfileNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateFlavorProfileNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update flavor profile not found response has a 2xx status code
func (o *UpdateFlavorProfileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update flavor profile not found response has a 3xx status code
func (o *UpdateFlavorProfileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update flavor profile not found response has a 4xx status code
func (o *UpdateFlavorProfileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update flavor profile not found response has a 5xx status code
func (o *UpdateFlavorProfileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update flavor profile not found response a status code equal to that given
func (o *UpdateFlavorProfileNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateFlavorProfileNotFound) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/flavor-profiles/{id}][%d] updateFlavorProfileNotFound  %+v", 404, o.Payload)
}

func (o *UpdateFlavorProfileNotFound) String() string {
	return fmt.Sprintf("[PATCH /iaas/api/flavor-profiles/{id}][%d] updateFlavorProfileNotFound  %+v", 404, o.Payload)
}

func (o *UpdateFlavorProfileNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateFlavorProfileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
