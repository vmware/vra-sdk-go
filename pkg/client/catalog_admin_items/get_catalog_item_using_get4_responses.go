// Code generated by go-swagger; DO NOT EDIT.

package catalog_admin_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetCatalogItemUsingGET4Reader is a Reader for the GetCatalogItemUsingGET4 structure.
type GetCatalogItemUsingGET4Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCatalogItemUsingGET4Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCatalogItemUsingGET4OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetCatalogItemUsingGET4Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCatalogItemUsingGET4NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCatalogItemUsingGET4OK creates a GetCatalogItemUsingGET4OK with default headers values
func NewGetCatalogItemUsingGET4OK() *GetCatalogItemUsingGET4OK {
	return &GetCatalogItemUsingGET4OK{}
}

/* GetCatalogItemUsingGET4OK describes a response with status code 200, with default header values.

OK
*/
type GetCatalogItemUsingGET4OK struct {
	Payload *models.CatalogItem
}

func (o *GetCatalogItemUsingGET4OK) Error() string {
	return fmt.Sprintf("[GET /catalog/api/admin/items/{id}][%d] getCatalogItemUsingGET4OK  %+v", 200, o.Payload)
}
func (o *GetCatalogItemUsingGET4OK) GetPayload() *models.CatalogItem {
	return o.Payload
}

func (o *GetCatalogItemUsingGET4OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CatalogItem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogItemUsingGET4Unauthorized creates a GetCatalogItemUsingGET4Unauthorized with default headers values
func NewGetCatalogItemUsingGET4Unauthorized() *GetCatalogItemUsingGET4Unauthorized {
	return &GetCatalogItemUsingGET4Unauthorized{}
}

/* GetCatalogItemUsingGET4Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetCatalogItemUsingGET4Unauthorized struct {
}

func (o *GetCatalogItemUsingGET4Unauthorized) Error() string {
	return fmt.Sprintf("[GET /catalog/api/admin/items/{id}][%d] getCatalogItemUsingGET4Unauthorized ", 401)
}

func (o *GetCatalogItemUsingGET4Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCatalogItemUsingGET4NotFound creates a GetCatalogItemUsingGET4NotFound with default headers values
func NewGetCatalogItemUsingGET4NotFound() *GetCatalogItemUsingGET4NotFound {
	return &GetCatalogItemUsingGET4NotFound{}
}

/* GetCatalogItemUsingGET4NotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetCatalogItemUsingGET4NotFound struct {
	Payload *models.Error
}

func (o *GetCatalogItemUsingGET4NotFound) Error() string {
	return fmt.Sprintf("[GET /catalog/api/admin/items/{id}][%d] getCatalogItemUsingGET4NotFound  %+v", 404, o.Payload)
}
func (o *GetCatalogItemUsingGET4NotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCatalogItemUsingGET4NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
