// Code generated by go-swagger; DO NOT EDIT.

package catalog_admin_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new catalog admin items API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog admin items API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetCatalogItemUsingGET4(params *GetCatalogItemUsingGET4Params, opts ...ClientOption) (*GetCatalogItemUsingGET4OK, error)

	GetCatalogItemsUsingGET4(params *GetCatalogItemsUsingGET4Params, opts ...ClientOption) (*GetCatalogItemsUsingGET4OK, error)

	UpdateCatalogItemUsingPATCH2(params *UpdateCatalogItemUsingPATCH2Params, opts ...ClientOption) (*UpdateCatalogItemUsingPATCH2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetCatalogItemUsingGET4 finds a catalog item with specified id

Returns the catalog item with the specified id.
*/
func (a *Client) GetCatalogItemUsingGET4(params *GetCatalogItemUsingGET4Params, opts ...ClientOption) (*GetCatalogItemUsingGET4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogItemUsingGET4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCatalogItemUsingGET_4",
		Method:             "GET",
		PathPattern:        "/catalog/api/admin/items/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCatalogItemUsingGET4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogItemUsingGET4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCatalogItemUsingGET_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCatalogItemsUsingGET4 fetches a list of catalog items

Returns a paginated list of catalog items.
*/
func (a *Client) GetCatalogItemsUsingGET4(params *GetCatalogItemsUsingGET4Params, opts ...ClientOption) (*GetCatalogItemsUsingGET4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogItemsUsingGET4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCatalogItemsUsingGET_4",
		Method:             "GET",
		PathPattern:        "/catalog/api/admin/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCatalogItemsUsingGET4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogItemsUsingGET4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCatalogItemsUsingGET_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCatalogItemUsingPATCH2 sets an icon or request limit to a catalog item

Updates a catalog item with specified icon id or request limit.
*/
func (a *Client) UpdateCatalogItemUsingPATCH2(params *UpdateCatalogItemUsingPATCH2Params, opts ...ClientOption) (*UpdateCatalogItemUsingPATCH2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCatalogItemUsingPATCH2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCatalogItemUsingPATCH_2",
		Method:             "PATCH",
		PathPattern:        "/catalog/api/admin/items/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCatalogItemUsingPATCH2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCatalogItemUsingPATCH2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCatalogItemUsingPATCH_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
