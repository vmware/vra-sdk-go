// Code generated by go-swagger; DO NOT EDIT.

package catalog_admin_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// NewUpdateCatalogItemUsingPATCHParams creates a new UpdateCatalogItemUsingPATCHParams object
// with the default values initialized.
func NewUpdateCatalogItemUsingPATCHParams() *UpdateCatalogItemUsingPATCHParams {
	var ()
	return &UpdateCatalogItemUsingPATCHParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateCatalogItemUsingPATCHParamsWithTimeout creates a new UpdateCatalogItemUsingPATCHParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateCatalogItemUsingPATCHParamsWithTimeout(timeout time.Duration) *UpdateCatalogItemUsingPATCHParams {
	var ()
	return &UpdateCatalogItemUsingPATCHParams{

		timeout: timeout,
	}
}

// NewUpdateCatalogItemUsingPATCHParamsWithContext creates a new UpdateCatalogItemUsingPATCHParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateCatalogItemUsingPATCHParamsWithContext(ctx context.Context) *UpdateCatalogItemUsingPATCHParams {
	var ()
	return &UpdateCatalogItemUsingPATCHParams{

		Context: ctx,
	}
}

// NewUpdateCatalogItemUsingPATCHParamsWithHTTPClient creates a new UpdateCatalogItemUsingPATCHParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateCatalogItemUsingPATCHParamsWithHTTPClient(client *http.Client) *UpdateCatalogItemUsingPATCHParams {
	var ()
	return &UpdateCatalogItemUsingPATCHParams{
		HTTPClient: client,
	}
}

/*UpdateCatalogItemUsingPATCHParams contains all the parameters to send to the API endpoint
for the update catalog item using p a t c h operation typically these are written to a http.Request
*/
type UpdateCatalogItemUsingPATCHParams struct {

	/*ID
	  The unique id of item to update.

	*/
	ID strfmt.UUID
	/*Patch
	  The patch that apply to the item

	*/
	Patch *models.AdminCatalogItemPatch

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update catalog item using p a t c h params
func (o *UpdateCatalogItemUsingPATCHParams) WithTimeout(timeout time.Duration) *UpdateCatalogItemUsingPATCHParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update catalog item using p a t c h params
func (o *UpdateCatalogItemUsingPATCHParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update catalog item using p a t c h params
func (o *UpdateCatalogItemUsingPATCHParams) WithContext(ctx context.Context) *UpdateCatalogItemUsingPATCHParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update catalog item using p a t c h params
func (o *UpdateCatalogItemUsingPATCHParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update catalog item using p a t c h params
func (o *UpdateCatalogItemUsingPATCHParams) WithHTTPClient(client *http.Client) *UpdateCatalogItemUsingPATCHParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update catalog item using p a t c h params
func (o *UpdateCatalogItemUsingPATCHParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the update catalog item using p a t c h params
func (o *UpdateCatalogItemUsingPATCHParams) WithID(id strfmt.UUID) *UpdateCatalogItemUsingPATCHParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update catalog item using p a t c h params
func (o *UpdateCatalogItemUsingPATCHParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WithPatch adds the patch to the update catalog item using p a t c h params
func (o *UpdateCatalogItemUsingPATCHParams) WithPatch(patch *models.AdminCatalogItemPatch) *UpdateCatalogItemUsingPATCHParams {
	o.SetPatch(patch)
	return o
}

// SetPatch adds the patch to the update catalog item using p a t c h params
func (o *UpdateCatalogItemUsingPATCHParams) SetPatch(patch *models.AdminCatalogItemPatch) {
	o.Patch = patch
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateCatalogItemUsingPATCHParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if o.Patch != nil {
		if err := r.SetBodyParam(o.Patch); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
