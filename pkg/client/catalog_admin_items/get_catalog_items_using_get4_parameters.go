// Code generated by go-swagger; DO NOT EDIT.

package catalog_admin_items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCatalogItemsUsingGET4Params creates a new GetCatalogItemsUsingGET4Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCatalogItemsUsingGET4Params() *GetCatalogItemsUsingGET4Params {
	return &GetCatalogItemsUsingGET4Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCatalogItemsUsingGET4ParamsWithTimeout creates a new GetCatalogItemsUsingGET4Params object
// with the ability to set a timeout on a request.
func NewGetCatalogItemsUsingGET4ParamsWithTimeout(timeout time.Duration) *GetCatalogItemsUsingGET4Params {
	return &GetCatalogItemsUsingGET4Params{
		timeout: timeout,
	}
}

// NewGetCatalogItemsUsingGET4ParamsWithContext creates a new GetCatalogItemsUsingGET4Params object
// with the ability to set a context for a request.
func NewGetCatalogItemsUsingGET4ParamsWithContext(ctx context.Context) *GetCatalogItemsUsingGET4Params {
	return &GetCatalogItemsUsingGET4Params{
		Context: ctx,
	}
}

// NewGetCatalogItemsUsingGET4ParamsWithHTTPClient creates a new GetCatalogItemsUsingGET4Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetCatalogItemsUsingGET4ParamsWithHTTPClient(client *http.Client) *GetCatalogItemsUsingGET4Params {
	return &GetCatalogItemsUsingGET4Params{
		HTTPClient: client,
	}
}

/*
GetCatalogItemsUsingGET4Params contains all the parameters to send to the API endpoint

	for the get catalog items using g e t 4 operation.

	Typically these are written to a http.Request.
*/
type GetCatalogItemsUsingGET4Params struct {

	/* DollarOrderby.

	   Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
	*/
	DollarOrderby []string

	/* DollarSkip.

	   Number of records you want to skip

	   Format: int32
	*/
	DollarSkip *int32

	/* DollarTop.

	   Number of records you want

	   Format: int32
	*/
	DollarTop *int32

	/* APIVersion.

	   The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.
	*/
	APIVersion *string

	/* ProjectID.

	   Matches which can be requested within project with the given projectId
	*/
	ProjectID *string

	/* Search.

	   Matches will have this string somewhere in their name or description.
	*/
	Search *string

	/* SourceIds.

	   A list of Content Source IDs. Results will be from one of these sources.
	*/
	SourceIds []strfmt.UUID

	/* Types.

	   A list of Catalog Item Type IDs. Results will be one of these types.
	*/
	Types []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get catalog items using g e t 4 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCatalogItemsUsingGET4Params) WithDefaults() *GetCatalogItemsUsingGET4Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get catalog items using g e t 4 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCatalogItemsUsingGET4Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) WithTimeout(timeout time.Duration) *GetCatalogItemsUsingGET4Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) WithContext(ctx context.Context) *GetCatalogItemsUsingGET4Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) WithHTTPClient(client *http.Client) *GetCatalogItemsUsingGET4Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarOrderby adds the dollarOrderby to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) WithDollarOrderby(dollarOrderby []string) *GetCatalogItemsUsingGET4Params {
	o.SetDollarOrderby(dollarOrderby)
	return o
}

// SetDollarOrderby adds the dollarOrderby to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) SetDollarOrderby(dollarOrderby []string) {
	o.DollarOrderby = dollarOrderby
}

// WithDollarSkip adds the dollarSkip to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) WithDollarSkip(dollarSkip *int32) *GetCatalogItemsUsingGET4Params {
	o.SetDollarSkip(dollarSkip)
	return o
}

// SetDollarSkip adds the dollarSkip to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) SetDollarSkip(dollarSkip *int32) {
	o.DollarSkip = dollarSkip
}

// WithDollarTop adds the dollarTop to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) WithDollarTop(dollarTop *int32) *GetCatalogItemsUsingGET4Params {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithAPIVersion adds the aPIVersion to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) WithAPIVersion(aPIVersion *string) *GetCatalogItemsUsingGET4Params {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithProjectID adds the projectID to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) WithProjectID(projectID *string) *GetCatalogItemsUsingGET4Params {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithSearch adds the search to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) WithSearch(search *string) *GetCatalogItemsUsingGET4Params {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) SetSearch(search *string) {
	o.Search = search
}

// WithSourceIds adds the sourceIds to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) WithSourceIds(sourceIds []strfmt.UUID) *GetCatalogItemsUsingGET4Params {
	o.SetSourceIds(sourceIds)
	return o
}

// SetSourceIds adds the sourceIds to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) SetSourceIds(sourceIds []strfmt.UUID) {
	o.SourceIds = sourceIds
}

// WithTypes adds the types to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) WithTypes(types []string) *GetCatalogItemsUsingGET4Params {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the get catalog items using g e t 4 params
func (o *GetCatalogItemsUsingGET4Params) SetTypes(types []string) {
	o.Types = types
}

// WriteToRequest writes these params to a swagger request
func (o *GetCatalogItemsUsingGET4Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarOrderby != nil {

		// binding items for $orderby
		joinedDollarOrderby := o.bindParamDollarOrderby(reg)

		// query array param $orderby
		if err := r.SetQueryParam("$orderby", joinedDollarOrderby...); err != nil {
			return err
		}
	}

	if o.DollarSkip != nil {

		// query param $skip
		var qrDollarSkip int32

		if o.DollarSkip != nil {
			qrDollarSkip = *o.DollarSkip
		}
		qDollarSkip := swag.FormatInt32(qrDollarSkip)
		if qDollarSkip != "" {

			if err := r.SetQueryParam("$skip", qDollarSkip); err != nil {
				return err
			}
		}
	}

	if o.DollarTop != nil {

		// query param $top
		var qrDollarTop int32

		if o.DollarTop != nil {
			qrDollarTop = *o.DollarTop
		}
		qDollarTop := swag.FormatInt32(qrDollarTop)
		if qDollarTop != "" {

			if err := r.SetQueryParam("$top", qDollarTop); err != nil {
				return err
			}
		}
	}

	if o.APIVersion != nil {

		// query param apiVersion
		var qrAPIVersion string

		if o.APIVersion != nil {
			qrAPIVersion = *o.APIVersion
		}
		qAPIVersion := qrAPIVersion
		if qAPIVersion != "" {

			if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
				return err
			}
		}
	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID string

		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {

			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if o.SourceIds != nil {

		// binding items for sourceIds
		joinedSourceIds := o.bindParamSourceIds(reg)

		// query array param sourceIds
		if err := r.SetQueryParam("sourceIds", joinedSourceIds...); err != nil {
			return err
		}
	}

	if o.Types != nil {

		// binding items for types
		joinedTypes := o.bindParamTypes(reg)

		// query array param types
		if err := r.SetQueryParam("types", joinedTypes...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetCatalogItemsUsingGET4 binds the parameter $orderby
func (o *GetCatalogItemsUsingGET4Params) bindParamDollarOrderby(formats strfmt.Registry) []string {
	dollarOrderbyIR := o.DollarOrderby

	var dollarOrderbyIC []string
	for _, dollarOrderbyIIR := range dollarOrderbyIR { // explode []string

		dollarOrderbyIIV := dollarOrderbyIIR // string as string
		dollarOrderbyIC = append(dollarOrderbyIC, dollarOrderbyIIV)
	}

	// items.CollectionFormat: "multi"
	dollarOrderbyIS := swag.JoinByFormat(dollarOrderbyIC, "multi")

	return dollarOrderbyIS
}

// bindParamGetCatalogItemsUsingGET4 binds the parameter sourceIds
func (o *GetCatalogItemsUsingGET4Params) bindParamSourceIds(formats strfmt.Registry) []string {
	sourceIdsIR := o.SourceIds

	var sourceIdsIC []string
	for _, sourceIdsIIR := range sourceIdsIR { // explode []strfmt.UUID

		sourceIdsIIV := sourceIdsIIR.String() // strfmt.UUID as string
		sourceIdsIC = append(sourceIdsIC, sourceIdsIIV)
	}

	// items.CollectionFormat: "multi"
	sourceIdsIS := swag.JoinByFormat(sourceIdsIC, "multi")

	return sourceIdsIS
}

// bindParamGetCatalogItemsUsingGET4 binds the parameter types
func (o *GetCatalogItemsUsingGET4Params) bindParamTypes(formats strfmt.Registry) []string {
	typesIR := o.Types

	var typesIC []string
	for _, typesIIR := range typesIR { // explode []string

		typesIIV := typesIIR // string as string
		typesIC = append(typesIC, typesIIV)
	}

	// items.CollectionFormat: "multi"
	typesIS := swag.JoinByFormat(typesIC, "multi")

	return typesIS
}
