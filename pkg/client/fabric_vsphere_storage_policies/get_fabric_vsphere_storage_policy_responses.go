// Code generated by go-swagger; DO NOT EDIT.

package fabric_vsphere_storage_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetFabricVSphereStoragePolicyReader is a Reader for the GetFabricVSphereStoragePolicy structure.
type GetFabricVSphereStoragePolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFabricVSphereStoragePolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFabricVSphereStoragePolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetFabricVSphereStoragePolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFabricVSphereStoragePolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetFabricVSphereStoragePolicyOK creates a GetFabricVSphereStoragePolicyOK with default headers values
func NewGetFabricVSphereStoragePolicyOK() *GetFabricVSphereStoragePolicyOK {
	return &GetFabricVSphereStoragePolicyOK{}
}

/*
GetFabricVSphereStoragePolicyOK describes a response with status code 200, with default header values.

successful operation
*/
type GetFabricVSphereStoragePolicyOK struct {
	Payload *models.FabricVsphereStoragePolicy
}

// IsSuccess returns true when this get fabric v sphere storage policy o k response has a 2xx status code
func (o *GetFabricVSphereStoragePolicyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get fabric v sphere storage policy o k response has a 3xx status code
func (o *GetFabricVSphereStoragePolicyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get fabric v sphere storage policy o k response has a 4xx status code
func (o *GetFabricVSphereStoragePolicyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get fabric v sphere storage policy o k response has a 5xx status code
func (o *GetFabricVSphereStoragePolicyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get fabric v sphere storage policy o k response a status code equal to that given
func (o *GetFabricVSphereStoragePolicyOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetFabricVSphereStoragePolicyOK) Error() string {
	return fmt.Sprintf("[GET /iaas/api/fabric-vsphere-storage-policies/{id}][%d] getFabricVSphereStoragePolicyOK  %+v", 200, o.Payload)
}

func (o *GetFabricVSphereStoragePolicyOK) String() string {
	return fmt.Sprintf("[GET /iaas/api/fabric-vsphere-storage-policies/{id}][%d] getFabricVSphereStoragePolicyOK  %+v", 200, o.Payload)
}

func (o *GetFabricVSphereStoragePolicyOK) GetPayload() *models.FabricVsphereStoragePolicy {
	return o.Payload
}

func (o *GetFabricVSphereStoragePolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FabricVsphereStoragePolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFabricVSphereStoragePolicyForbidden creates a GetFabricVSphereStoragePolicyForbidden with default headers values
func NewGetFabricVSphereStoragePolicyForbidden() *GetFabricVSphereStoragePolicyForbidden {
	return &GetFabricVSphereStoragePolicyForbidden{}
}

/*
GetFabricVSphereStoragePolicyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetFabricVSphereStoragePolicyForbidden struct {
	Payload *models.ServiceErrorResponse
}

// IsSuccess returns true when this get fabric v sphere storage policy forbidden response has a 2xx status code
func (o *GetFabricVSphereStoragePolicyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get fabric v sphere storage policy forbidden response has a 3xx status code
func (o *GetFabricVSphereStoragePolicyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get fabric v sphere storage policy forbidden response has a 4xx status code
func (o *GetFabricVSphereStoragePolicyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get fabric v sphere storage policy forbidden response has a 5xx status code
func (o *GetFabricVSphereStoragePolicyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get fabric v sphere storage policy forbidden response a status code equal to that given
func (o *GetFabricVSphereStoragePolicyForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetFabricVSphereStoragePolicyForbidden) Error() string {
	return fmt.Sprintf("[GET /iaas/api/fabric-vsphere-storage-policies/{id}][%d] getFabricVSphereStoragePolicyForbidden  %+v", 403, o.Payload)
}

func (o *GetFabricVSphereStoragePolicyForbidden) String() string {
	return fmt.Sprintf("[GET /iaas/api/fabric-vsphere-storage-policies/{id}][%d] getFabricVSphereStoragePolicyForbidden  %+v", 403, o.Payload)
}

func (o *GetFabricVSphereStoragePolicyForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *GetFabricVSphereStoragePolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFabricVSphereStoragePolicyNotFound creates a GetFabricVSphereStoragePolicyNotFound with default headers values
func NewGetFabricVSphereStoragePolicyNotFound() *GetFabricVSphereStoragePolicyNotFound {
	return &GetFabricVSphereStoragePolicyNotFound{}
}

/*
GetFabricVSphereStoragePolicyNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetFabricVSphereStoragePolicyNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get fabric v sphere storage policy not found response has a 2xx status code
func (o *GetFabricVSphereStoragePolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get fabric v sphere storage policy not found response has a 3xx status code
func (o *GetFabricVSphereStoragePolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get fabric v sphere storage policy not found response has a 4xx status code
func (o *GetFabricVSphereStoragePolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get fabric v sphere storage policy not found response has a 5xx status code
func (o *GetFabricVSphereStoragePolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get fabric v sphere storage policy not found response a status code equal to that given
func (o *GetFabricVSphereStoragePolicyNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetFabricVSphereStoragePolicyNotFound) Error() string {
	return fmt.Sprintf("[GET /iaas/api/fabric-vsphere-storage-policies/{id}][%d] getFabricVSphereStoragePolicyNotFound  %+v", 404, o.Payload)
}

func (o *GetFabricVSphereStoragePolicyNotFound) String() string {
	return fmt.Sprintf("[GET /iaas/api/fabric-vsphere-storage-policies/{id}][%d] getFabricVSphereStoragePolicyNotFound  %+v", 404, o.Payload)
}

func (o *GetFabricVSphereStoragePolicyNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetFabricVSphereStoragePolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
