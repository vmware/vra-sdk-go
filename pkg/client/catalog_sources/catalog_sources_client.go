// Code generated by go-swagger; DO NOT EDIT.

package catalog_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new catalog sources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog sources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteUsingDELETE4(params *DeleteUsingDELETE4Params, opts ...ClientOption) (*DeleteUsingDELETE4NoContent, error)

	GetPageUsingGET2(params *GetPageUsingGET2Params, opts ...ClientOption) (*GetPageUsingGET2OK, error)

	GetUsingGET2(params *GetUsingGET2Params, opts ...ClientOption) (*GetUsingGET2OK, error)

	PostUsingPOST2(params *PostUsingPOST2Params, opts ...ClientOption) (*PostUsingPOST2OK, *PostUsingPOST2Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteUsingDELETE4 deletes catalog source

Deletes the catalog source with the supplied ID.
*/
func (a *Client) DeleteUsingDELETE4(params *DeleteUsingDELETE4Params, opts ...ClientOption) (*DeleteUsingDELETE4NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_4",
		Method:             "DELETE",
		PathPattern:        "/catalog/api/admin/sources/{sourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE4NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPageUsingGET2 fetches catalog sources

Returns a paginated list of catalog sources.
*/
func (a *Client) GetPageUsingGET2(params *GetPageUsingGET2Params, opts ...ClientOption) (*GetPageUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPageUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPageUsingGET_2",
		Method:             "GET",
		PathPattern:        "/catalog/api/admin/sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPageUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPageUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPageUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsingGET2 fetches a specific catalog source for the given ID

Returns the catalog source with the supplied ID.
*/
func (a *Client) GetUsingGET2(params *GetUsingGET2Params, opts ...ClientOption) (*GetUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUsingGET_2",
		Method:             "GET",
		PathPattern:        "/catalog/api/admin/sources/{sourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostUsingPOST2 creates or update a catalog source creating or updating also imports or re imports the associated catalog items

Creates a new catalog source or updates an existing catalog source based on the request body and imports catalog items from it.
*/
func (a *Client) PostUsingPOST2(params *PostUsingPOST2Params, opts ...ClientOption) (*PostUsingPOST2OK, *PostUsingPOST2Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsingPOST2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "postUsingPOST_2",
		Method:             "POST",
		PathPattern:        "/catalog/api/admin/sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsingPOST2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostUsingPOST2OK:
		return value, nil, nil
	case *PostUsingPOST2Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for catalog_sources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
