// Code generated by go-swagger; DO NOT EDIT.

package t_m_c_endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new t m c endpoints API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for t m c endpoints API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRequestTrackerUsingPOST(params *CreateRequestTrackerUsingPOSTParams, opts ...ClientOption) (*CreateRequestTrackerUsingPOSTOK, error)

	GetClusterGroupsByEndpointUsingGET(params *GetClusterGroupsByEndpointUsingGETParams, opts ...ClientOption) (*GetClusterGroupsByEndpointUsingGETOK, error)

	GetClusterGroupsByRequestTrackerUsingGET(params *GetClusterGroupsByRequestTrackerUsingGETParams, opts ...ClientOption) (*GetClusterGroupsByRequestTrackerUsingGETOK, error)

	GetTmcCliBinariesUsingGET(params *GetTmcCliBinariesUsingGETParams, opts ...ClientOption) (*GetTmcCliBinariesUsingGETOK, error)

	GetWorkspacesByEndpointUsingGET(params *GetWorkspacesByEndpointUsingGETParams, opts ...ClientOption) (*GetWorkspacesByEndpointUsingGETOK, error)

	GetWorkspacesByRequestTrackerUsingGET(params *GetWorkspacesByRequestTrackerUsingGETParams, opts ...ClientOption) (*GetWorkspacesByRequestTrackerUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateRequestTrackerUsingPOST creates a request tracker for endpoint creation

Create a request tracker for a TMC endpoint by providing the endpoint configuration
*/
func (a *Client) CreateRequestTrackerUsingPOST(params *CreateRequestTrackerUsingPOSTParams, opts ...ClientOption) (*CreateRequestTrackerUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRequestTrackerUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRequestTrackerUsingPOST",
		Method:             "POST",
		PathPattern:        "/cmx/api/resources/tmc/endpoints/request-tracker",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRequestTrackerUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRequestTrackerUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRequestTrackerUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterGroupsByEndpointUsingGET gets all cluster groups for t m c endpoint

Get cluster groups for a TMC endpoint by provided TMC endpoint id and starting with the provided cluster group name. If cluster group name is not provided, then all cluster groups are returned
*/
func (a *Client) GetClusterGroupsByEndpointUsingGET(params *GetClusterGroupsByEndpointUsingGETParams, opts ...ClientOption) (*GetClusterGroupsByEndpointUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterGroupsByEndpointUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterGroupsByEndpointUsingGET",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/tmc/endpoints/{id}/clustergroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterGroupsByEndpointUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterGroupsByEndpointUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterGroupsByEndpointUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClusterGroupsByRequestTrackerUsingGET gets all cluster groups for t m c endpoint

Get cluster groups for a TMC endpoint by provided TMC endpoint id and starting with the provided cluster group name. If cluster group name is not provided, then all cluster groups are returned
*/
func (a *Client) GetClusterGroupsByRequestTrackerUsingGET(params *GetClusterGroupsByRequestTrackerUsingGETParams, opts ...ClientOption) (*GetClusterGroupsByRequestTrackerUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterGroupsByRequestTrackerUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterGroupsByRequestTrackerUsingGET",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/tmc/endpoints/clustergroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterGroupsByRequestTrackerUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterGroupsByRequestTrackerUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterGroupsByRequestTrackerUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTmcCliBinariesUsingGET gets tmc c l i binaries

Get Tanzu CLI binaries for Mac, Linux, Windows
*/
func (a *Client) GetTmcCliBinariesUsingGET(params *GetTmcCliBinariesUsingGETParams, opts ...ClientOption) (*GetTmcCliBinariesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTmcCliBinariesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTmcCliBinariesUsingGET",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/tmc/endpoints/tanzu-cli-binaries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTmcCliBinariesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTmcCliBinariesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTmcCliBinariesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkspacesByEndpointUsingGET gets all workspace names list for t m c endpoint

Get workspace names list for a TMC endpoint by provided TMC endpoint id and starting with the default workspace name. If workspace name is not provided, then all workspaces are returned
*/
func (a *Client) GetWorkspacesByEndpointUsingGET(params *GetWorkspacesByEndpointUsingGETParams, opts ...ClientOption) (*GetWorkspacesByEndpointUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspacesByEndpointUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkspacesByEndpointUsingGET",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/tmc/endpoints/{id}/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspacesByEndpointUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspacesByEndpointUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkspacesByEndpointUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkspacesByRequestTrackerUsingGET gets all workspace names list for t m c endpoint

Get workspace names list for a TMC endpoint by provided TMC endpoint id and starting with the default workspace name. If workspace name is not provided, then all workspaces are returned
*/
func (a *Client) GetWorkspacesByRequestTrackerUsingGET(params *GetWorkspacesByRequestTrackerUsingGETParams, opts ...ClientOption) (*GetWorkspacesByRequestTrackerUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspacesByRequestTrackerUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkspacesByRequestTrackerUsingGET",
		Method:             "GET",
		PathPattern:        "/cmx/api/resources/tmc/endpoints/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspacesByRequestTrackerUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspacesByRequestTrackerUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkspacesByRequestTrackerUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
