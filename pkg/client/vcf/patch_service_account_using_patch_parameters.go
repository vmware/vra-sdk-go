// Code generated by go-swagger; DO NOT EDIT.

package vcf

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPatchServiceAccountUsingPATCHParams creates a new PatchServiceAccountUsingPATCHParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchServiceAccountUsingPATCHParams() *PatchServiceAccountUsingPATCHParams {
	return &PatchServiceAccountUsingPATCHParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchServiceAccountUsingPATCHParamsWithTimeout creates a new PatchServiceAccountUsingPATCHParams object
// with the ability to set a timeout on a request.
func NewPatchServiceAccountUsingPATCHParamsWithTimeout(timeout time.Duration) *PatchServiceAccountUsingPATCHParams {
	return &PatchServiceAccountUsingPATCHParams{
		timeout: timeout,
	}
}

// NewPatchServiceAccountUsingPATCHParamsWithContext creates a new PatchServiceAccountUsingPATCHParams object
// with the ability to set a context for a request.
func NewPatchServiceAccountUsingPATCHParamsWithContext(ctx context.Context) *PatchServiceAccountUsingPATCHParams {
	return &PatchServiceAccountUsingPATCHParams{
		Context: ctx,
	}
}

// NewPatchServiceAccountUsingPATCHParamsWithHTTPClient creates a new PatchServiceAccountUsingPATCHParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchServiceAccountUsingPATCHParamsWithHTTPClient(client *http.Client) *PatchServiceAccountUsingPATCHParams {
	return &PatchServiceAccountUsingPATCHParams{
		HTTPClient: client,
	}
}

/*
PatchServiceAccountUsingPATCHParams contains all the parameters to send to the API endpoint

	for the patch service account using p a t c h operation.

	Typically these are written to a http.Request.
*/
type PatchServiceAccountUsingPATCHParams struct {

	/* DomainID.

	   domainId
	*/
	DomainID string

	/* IntegrationID.

	   integrationId
	*/
	IntegrationID string

	/* PatchRequest.

	   patchRequest
	*/
	PatchRequest map[string]string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch service account using p a t c h params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchServiceAccountUsingPATCHParams) WithDefaults() *PatchServiceAccountUsingPATCHParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch service account using p a t c h params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchServiceAccountUsingPATCHParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the patch service account using p a t c h params
func (o *PatchServiceAccountUsingPATCHParams) WithTimeout(timeout time.Duration) *PatchServiceAccountUsingPATCHParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch service account using p a t c h params
func (o *PatchServiceAccountUsingPATCHParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch service account using p a t c h params
func (o *PatchServiceAccountUsingPATCHParams) WithContext(ctx context.Context) *PatchServiceAccountUsingPATCHParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch service account using p a t c h params
func (o *PatchServiceAccountUsingPATCHParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch service account using p a t c h params
func (o *PatchServiceAccountUsingPATCHParams) WithHTTPClient(client *http.Client) *PatchServiceAccountUsingPATCHParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch service account using p a t c h params
func (o *PatchServiceAccountUsingPATCHParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomainID adds the domainID to the patch service account using p a t c h params
func (o *PatchServiceAccountUsingPATCHParams) WithDomainID(domainID string) *PatchServiceAccountUsingPATCHParams {
	o.SetDomainID(domainID)
	return o
}

// SetDomainID adds the domainId to the patch service account using p a t c h params
func (o *PatchServiceAccountUsingPATCHParams) SetDomainID(domainID string) {
	o.DomainID = domainID
}

// WithIntegrationID adds the integrationID to the patch service account using p a t c h params
func (o *PatchServiceAccountUsingPATCHParams) WithIntegrationID(integrationID string) *PatchServiceAccountUsingPATCHParams {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the patch service account using p a t c h params
func (o *PatchServiceAccountUsingPATCHParams) SetIntegrationID(integrationID string) {
	o.IntegrationID = integrationID
}

// WithPatchRequest adds the patchRequest to the patch service account using p a t c h params
func (o *PatchServiceAccountUsingPATCHParams) WithPatchRequest(patchRequest map[string]string) *PatchServiceAccountUsingPATCHParams {
	o.SetPatchRequest(patchRequest)
	return o
}

// SetPatchRequest adds the patchRequest to the patch service account using p a t c h params
func (o *PatchServiceAccountUsingPATCHParams) SetPatchRequest(patchRequest map[string]string) {
	o.PatchRequest = patchRequest
}

// WriteToRequest writes these params to a swagger request
func (o *PatchServiceAccountUsingPATCHParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param domainId
	if err := r.SetPathParam("domainId", o.DomainID); err != nil {
		return err
	}

	// path param integrationId
	if err := r.SetPathParam("integrationId", o.IntegrationID); err != nil {
		return err
	}
	if o.PatchRequest != nil {
		if err := r.SetBodyParam(o.PatchRequest); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
