// Code generated by go-swagger; DO NOT EDIT.

package vcf

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetDomainsUsingGETReader is a Reader for the GetDomainsUsingGET structure.
type GetDomainsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDomainsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDomainsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDomainsUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDomainsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDomainsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDomainsUsingGETOK creates a GetDomainsUsingGETOK with default headers values
func NewGetDomainsUsingGETOK() *GetDomainsUsingGETOK {
	return &GetDomainsUsingGETOK{}
}

/*
GetDomainsUsingGETOK describes a response with status code 200, with default header values.

Get domains of the vCF endpoint
*/
type GetDomainsUsingGETOK struct {
	Payload *models.VcfDomain
}

// IsSuccess returns true when this get domains using g e t o k response has a 2xx status code
func (o *GetDomainsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get domains using g e t o k response has a 3xx status code
func (o *GetDomainsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domains using g e t o k response has a 4xx status code
func (o *GetDomainsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get domains using g e t o k response has a 5xx status code
func (o *GetDomainsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get domains using g e t o k response a status code equal to that given
func (o *GetDomainsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetDomainsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /content/api/vcf/{integrationId}/domains][%d] getDomainsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetDomainsUsingGETOK) String() string {
	return fmt.Sprintf("[GET /content/api/vcf/{integrationId}/domains][%d] getDomainsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetDomainsUsingGETOK) GetPayload() *models.VcfDomain {
	return o.Payload
}

func (o *GetDomainsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VcfDomain)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainsUsingGETBadRequest creates a GetDomainsUsingGETBadRequest with default headers values
func NewGetDomainsUsingGETBadRequest() *GetDomainsUsingGETBadRequest {
	return &GetDomainsUsingGETBadRequest{}
}

/*
GetDomainsUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetDomainsUsingGETBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get domains using g e t bad request response has a 2xx status code
func (o *GetDomainsUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domains using g e t bad request response has a 3xx status code
func (o *GetDomainsUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domains using g e t bad request response has a 4xx status code
func (o *GetDomainsUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domains using g e t bad request response has a 5xx status code
func (o *GetDomainsUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get domains using g e t bad request response a status code equal to that given
func (o *GetDomainsUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetDomainsUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /content/api/vcf/{integrationId}/domains][%d] getDomainsUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetDomainsUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /content/api/vcf/{integrationId}/domains][%d] getDomainsUsingGETBadRequest  %+v", 400, o.Payload)
}

func (o *GetDomainsUsingGETBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDomainsUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainsUsingGETUnauthorized creates a GetDomainsUsingGETUnauthorized with default headers values
func NewGetDomainsUsingGETUnauthorized() *GetDomainsUsingGETUnauthorized {
	return &GetDomainsUsingGETUnauthorized{}
}

/*
GetDomainsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetDomainsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get domains using g e t unauthorized response has a 2xx status code
func (o *GetDomainsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domains using g e t unauthorized response has a 3xx status code
func (o *GetDomainsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domains using g e t unauthorized response has a 4xx status code
func (o *GetDomainsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domains using g e t unauthorized response has a 5xx status code
func (o *GetDomainsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get domains using g e t unauthorized response a status code equal to that given
func (o *GetDomainsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetDomainsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /content/api/vcf/{integrationId}/domains][%d] getDomainsUsingGETUnauthorized ", 401)
}

func (o *GetDomainsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /content/api/vcf/{integrationId}/domains][%d] getDomainsUsingGETUnauthorized ", 401)
}

func (o *GetDomainsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDomainsUsingGETForbidden creates a GetDomainsUsingGETForbidden with default headers values
func NewGetDomainsUsingGETForbidden() *GetDomainsUsingGETForbidden {
	return &GetDomainsUsingGETForbidden{}
}

/*
GetDomainsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetDomainsUsingGETForbidden struct {
}

// IsSuccess returns true when this get domains using g e t forbidden response has a 2xx status code
func (o *GetDomainsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domains using g e t forbidden response has a 3xx status code
func (o *GetDomainsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domains using g e t forbidden response has a 4xx status code
func (o *GetDomainsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domains using g e t forbidden response has a 5xx status code
func (o *GetDomainsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get domains using g e t forbidden response a status code equal to that given
func (o *GetDomainsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetDomainsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /content/api/vcf/{integrationId}/domains][%d] getDomainsUsingGETForbidden ", 403)
}

func (o *GetDomainsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /content/api/vcf/{integrationId}/domains][%d] getDomainsUsingGETForbidden ", 403)
}

func (o *GetDomainsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
