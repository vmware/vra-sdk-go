// Code generated by go-swagger; DO NOT EDIT.

package vcf

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// EnumerateDomainsUsingPOSTReader is a Reader for the EnumerateDomainsUsingPOST structure.
type EnumerateDomainsUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnumerateDomainsUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnumerateDomainsUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnumerateDomainsUsingPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEnumerateDomainsUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEnumerateDomainsUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEnumerateDomainsUsingPOSTOK creates a EnumerateDomainsUsingPOSTOK with default headers values
func NewEnumerateDomainsUsingPOSTOK() *EnumerateDomainsUsingPOSTOK {
	return &EnumerateDomainsUsingPOSTOK{}
}

/*
EnumerateDomainsUsingPOSTOK describes a response with status code 200, with default header values.

Get domains of the vCF endpoint
*/
type EnumerateDomainsUsingPOSTOK struct {
	Payload *models.VcfDomains
}

// IsSuccess returns true when this enumerate domains using p o s t o k response has a 2xx status code
func (o *EnumerateDomainsUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enumerate domains using p o s t o k response has a 3xx status code
func (o *EnumerateDomainsUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumerate domains using p o s t o k response has a 4xx status code
func (o *EnumerateDomainsUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this enumerate domains using p o s t o k response has a 5xx status code
func (o *EnumerateDomainsUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this enumerate domains using p o s t o k response a status code equal to that given
func (o *EnumerateDomainsUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

func (o *EnumerateDomainsUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /content/api/vcf/domains-enumeration][%d] enumerateDomainsUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *EnumerateDomainsUsingPOSTOK) String() string {
	return fmt.Sprintf("[POST /content/api/vcf/domains-enumeration][%d] enumerateDomainsUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *EnumerateDomainsUsingPOSTOK) GetPayload() *models.VcfDomains {
	return o.Payload
}

func (o *EnumerateDomainsUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VcfDomains)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnumerateDomainsUsingPOSTBadRequest creates a EnumerateDomainsUsingPOSTBadRequest with default headers values
func NewEnumerateDomainsUsingPOSTBadRequest() *EnumerateDomainsUsingPOSTBadRequest {
	return &EnumerateDomainsUsingPOSTBadRequest{}
}

/*
EnumerateDomainsUsingPOSTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EnumerateDomainsUsingPOSTBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this enumerate domains using p o s t bad request response has a 2xx status code
func (o *EnumerateDomainsUsingPOSTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enumerate domains using p o s t bad request response has a 3xx status code
func (o *EnumerateDomainsUsingPOSTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumerate domains using p o s t bad request response has a 4xx status code
func (o *EnumerateDomainsUsingPOSTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this enumerate domains using p o s t bad request response has a 5xx status code
func (o *EnumerateDomainsUsingPOSTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this enumerate domains using p o s t bad request response a status code equal to that given
func (o *EnumerateDomainsUsingPOSTBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *EnumerateDomainsUsingPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /content/api/vcf/domains-enumeration][%d] enumerateDomainsUsingPOSTBadRequest  %+v", 400, o.Payload)
}

func (o *EnumerateDomainsUsingPOSTBadRequest) String() string {
	return fmt.Sprintf("[POST /content/api/vcf/domains-enumeration][%d] enumerateDomainsUsingPOSTBadRequest  %+v", 400, o.Payload)
}

func (o *EnumerateDomainsUsingPOSTBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *EnumerateDomainsUsingPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnumerateDomainsUsingPOSTUnauthorized creates a EnumerateDomainsUsingPOSTUnauthorized with default headers values
func NewEnumerateDomainsUsingPOSTUnauthorized() *EnumerateDomainsUsingPOSTUnauthorized {
	return &EnumerateDomainsUsingPOSTUnauthorized{}
}

/*
EnumerateDomainsUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type EnumerateDomainsUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this enumerate domains using p o s t unauthorized response has a 2xx status code
func (o *EnumerateDomainsUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enumerate domains using p o s t unauthorized response has a 3xx status code
func (o *EnumerateDomainsUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumerate domains using p o s t unauthorized response has a 4xx status code
func (o *EnumerateDomainsUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this enumerate domains using p o s t unauthorized response has a 5xx status code
func (o *EnumerateDomainsUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this enumerate domains using p o s t unauthorized response a status code equal to that given
func (o *EnumerateDomainsUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *EnumerateDomainsUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /content/api/vcf/domains-enumeration][%d] enumerateDomainsUsingPOSTUnauthorized ", 401)
}

func (o *EnumerateDomainsUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /content/api/vcf/domains-enumeration][%d] enumerateDomainsUsingPOSTUnauthorized ", 401)
}

func (o *EnumerateDomainsUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnumerateDomainsUsingPOSTForbidden creates a EnumerateDomainsUsingPOSTForbidden with default headers values
func NewEnumerateDomainsUsingPOSTForbidden() *EnumerateDomainsUsingPOSTForbidden {
	return &EnumerateDomainsUsingPOSTForbidden{}
}

/*
EnumerateDomainsUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EnumerateDomainsUsingPOSTForbidden struct {
}

// IsSuccess returns true when this enumerate domains using p o s t forbidden response has a 2xx status code
func (o *EnumerateDomainsUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enumerate domains using p o s t forbidden response has a 3xx status code
func (o *EnumerateDomainsUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumerate domains using p o s t forbidden response has a 4xx status code
func (o *EnumerateDomainsUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this enumerate domains using p o s t forbidden response has a 5xx status code
func (o *EnumerateDomainsUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this enumerate domains using p o s t forbidden response a status code equal to that given
func (o *EnumerateDomainsUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *EnumerateDomainsUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /content/api/vcf/domains-enumeration][%d] enumerateDomainsUsingPOSTForbidden ", 403)
}

func (o *EnumerateDomainsUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /content/api/vcf/domains-enumeration][%d] enumerateDomainsUsingPOSTForbidden ", 403)
}

func (o *EnumerateDomainsUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
