// Code generated by go-swagger; DO NOT EDIT.

package endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateEndpointByIDUsingPUTReader is a Reader for the UpdateEndpointByIDUsingPUT structure.
type UpdateEndpointByIDUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEndpointByIDUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateEndpointByIDUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateEndpointByIDUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateEndpointByIDUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateEndpointByIDUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateEndpointByIDUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateEndpointByIDUsingPUTOK creates a UpdateEndpointByIDUsingPUTOK with default headers values
func NewUpdateEndpointByIDUsingPUTOK() *UpdateEndpointByIDUsingPUTOK {
	return &UpdateEndpointByIDUsingPUTOK{}
}

/*
UpdateEndpointByIDUsingPUTOK describes a response with status code 200, with default header values.

'Success' with the updated Endpoint
*/
type UpdateEndpointByIDUsingPUTOK struct {
	Payload models.Endpoint
}

// IsSuccess returns true when this update endpoint by Id using p u t o k response has a 2xx status code
func (o *UpdateEndpointByIDUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update endpoint by Id using p u t o k response has a 3xx status code
func (o *UpdateEndpointByIDUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update endpoint by Id using p u t o k response has a 4xx status code
func (o *UpdateEndpointByIDUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update endpoint by Id using p u t o k response has a 5xx status code
func (o *UpdateEndpointByIDUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update endpoint by Id using p u t o k response a status code equal to that given
func (o *UpdateEndpointByIDUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateEndpointByIDUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{id}][%d] updateEndpointByIdUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateEndpointByIDUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{id}][%d] updateEndpointByIdUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateEndpointByIDUsingPUTOK) GetPayload() models.Endpoint {
	return o.Payload
}

func (o *UpdateEndpointByIDUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalEndpoint(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewUpdateEndpointByIDUsingPUTUnauthorized creates a UpdateEndpointByIDUsingPUTUnauthorized with default headers values
func NewUpdateEndpointByIDUsingPUTUnauthorized() *UpdateEndpointByIDUsingPUTUnauthorized {
	return &UpdateEndpointByIDUsingPUTUnauthorized{}
}

/*
UpdateEndpointByIDUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type UpdateEndpointByIDUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update endpoint by Id using p u t unauthorized response has a 2xx status code
func (o *UpdateEndpointByIDUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update endpoint by Id using p u t unauthorized response has a 3xx status code
func (o *UpdateEndpointByIDUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update endpoint by Id using p u t unauthorized response has a 4xx status code
func (o *UpdateEndpointByIDUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update endpoint by Id using p u t unauthorized response has a 5xx status code
func (o *UpdateEndpointByIDUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update endpoint by Id using p u t unauthorized response a status code equal to that given
func (o *UpdateEndpointByIDUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateEndpointByIDUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{id}][%d] updateEndpointByIdUsingPUTUnauthorized ", 401)
}

func (o *UpdateEndpointByIDUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{id}][%d] updateEndpointByIdUsingPUTUnauthorized ", 401)
}

func (o *UpdateEndpointByIDUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEndpointByIDUsingPUTForbidden creates a UpdateEndpointByIDUsingPUTForbidden with default headers values
func NewUpdateEndpointByIDUsingPUTForbidden() *UpdateEndpointByIDUsingPUTForbidden {
	return &UpdateEndpointByIDUsingPUTForbidden{}
}

/*
UpdateEndpointByIDUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateEndpointByIDUsingPUTForbidden struct {
}

// IsSuccess returns true when this update endpoint by Id using p u t forbidden response has a 2xx status code
func (o *UpdateEndpointByIDUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update endpoint by Id using p u t forbidden response has a 3xx status code
func (o *UpdateEndpointByIDUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update endpoint by Id using p u t forbidden response has a 4xx status code
func (o *UpdateEndpointByIDUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update endpoint by Id using p u t forbidden response has a 5xx status code
func (o *UpdateEndpointByIDUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update endpoint by Id using p u t forbidden response a status code equal to that given
func (o *UpdateEndpointByIDUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateEndpointByIDUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{id}][%d] updateEndpointByIdUsingPUTForbidden ", 403)
}

func (o *UpdateEndpointByIDUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{id}][%d] updateEndpointByIdUsingPUTForbidden ", 403)
}

func (o *UpdateEndpointByIDUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEndpointByIDUsingPUTNotFound creates a UpdateEndpointByIDUsingPUTNotFound with default headers values
func NewUpdateEndpointByIDUsingPUTNotFound() *UpdateEndpointByIDUsingPUTNotFound {
	return &UpdateEndpointByIDUsingPUTNotFound{}
}

/*
UpdateEndpointByIDUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateEndpointByIDUsingPUTNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update endpoint by Id using p u t not found response has a 2xx status code
func (o *UpdateEndpointByIDUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update endpoint by Id using p u t not found response has a 3xx status code
func (o *UpdateEndpointByIDUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update endpoint by Id using p u t not found response has a 4xx status code
func (o *UpdateEndpointByIDUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update endpoint by Id using p u t not found response has a 5xx status code
func (o *UpdateEndpointByIDUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update endpoint by Id using p u t not found response a status code equal to that given
func (o *UpdateEndpointByIDUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateEndpointByIDUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{id}][%d] updateEndpointByIdUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateEndpointByIDUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{id}][%d] updateEndpointByIdUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateEndpointByIDUsingPUTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateEndpointByIDUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEndpointByIDUsingPUTInternalServerError creates a UpdateEndpointByIDUsingPUTInternalServerError with default headers values
func NewUpdateEndpointByIDUsingPUTInternalServerError() *UpdateEndpointByIDUsingPUTInternalServerError {
	return &UpdateEndpointByIDUsingPUTInternalServerError{}
}

/*
UpdateEndpointByIDUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateEndpointByIDUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update endpoint by Id using p u t internal server error response has a 2xx status code
func (o *UpdateEndpointByIDUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update endpoint by Id using p u t internal server error response has a 3xx status code
func (o *UpdateEndpointByIDUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update endpoint by Id using p u t internal server error response has a 4xx status code
func (o *UpdateEndpointByIDUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update endpoint by Id using p u t internal server error response has a 5xx status code
func (o *UpdateEndpointByIDUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update endpoint by Id using p u t internal server error response a status code equal to that given
func (o *UpdateEndpointByIDUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateEndpointByIDUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{id}][%d] updateEndpointByIdUsingPUTInternalServerError ", 500)
}

func (o *UpdateEndpointByIDUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{id}][%d] updateEndpointByIdUsingPUTInternalServerError ", 500)
}

func (o *UpdateEndpointByIDUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
