// Code generated by go-swagger; DO NOT EDIT.

package endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetUsingGETReader is a Reader for the GetUsingGET structure.
type GetUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUsingGETOK creates a GetUsingGETOK with default headers values
func NewGetUsingGETOK() *GetUsingGETOK {
	return &GetUsingGETOK{}
}

/* GetUsingGETOK describes a response with status code 200, with default header values.

'Success' with endpoint certificate details
*/
type GetUsingGETOK struct {
	Payload models.EndpointCertificateChain
}

func (o *GetUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/endpoint-certificate][%d] getUsingGETOK  %+v", 200, o.Payload)
}
func (o *GetUsingGETOK) GetPayload() models.EndpointCertificateChain {
	return o.Payload
}

func (o *GetUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalEndpointCertificateChain(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewGetUsingGETUnauthorized creates a GetUsingGETUnauthorized with default headers values
func NewGetUsingGETUnauthorized() *GetUsingGETUnauthorized {
	return &GetUsingGETUnauthorized{}
}

/* GetUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type GetUsingGETUnauthorized struct {
}

func (o *GetUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/endpoint-certificate][%d] getUsingGETUnauthorized ", 401)
}

func (o *GetUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUsingGETForbidden creates a GetUsingGETForbidden with default headers values
func NewGetUsingGETForbidden() *GetUsingGETForbidden {
	return &GetUsingGETForbidden{}
}

/* GetUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetUsingGETForbidden struct {
}

func (o *GetUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/endpoint-certificate][%d] getUsingGETForbidden ", 403)
}

func (o *GetUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUsingGETNotFound creates a GetUsingGETNotFound with default headers values
func NewGetUsingGETNotFound() *GetUsingGETNotFound {
	return &GetUsingGETNotFound{}
}

/* GetUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetUsingGETNotFound struct {
	Payload *models.Error
}

func (o *GetUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/endpoint-certificate][%d] getUsingGETNotFound  %+v", 404, o.Payload)
}
func (o *GetUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsingGETInternalServerError creates a GetUsingGETInternalServerError with default headers values
func NewGetUsingGETInternalServerError() *GetUsingGETInternalServerError {
	return &GetUsingGETInternalServerError{}
}

/* GetUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetUsingGETInternalServerError struct {
}

func (o *GetUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/endpoint-certificate][%d] getUsingGETInternalServerError ", 500)
}

func (o *GetUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
