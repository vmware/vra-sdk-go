// Code generated by go-swagger; DO NOT EDIT.

package endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateEndpointByNameUsingPUTReader is a Reader for the UpdateEndpointByNameUsingPUT structure.
type UpdateEndpointByNameUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEndpointByNameUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateEndpointByNameUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateEndpointByNameUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateEndpointByNameUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateEndpointByNameUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateEndpointByNameUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateEndpointByNameUsingPUTOK creates a UpdateEndpointByNameUsingPUTOK with default headers values
func NewUpdateEndpointByNameUsingPUTOK() *UpdateEndpointByNameUsingPUTOK {
	return &UpdateEndpointByNameUsingPUTOK{}
}

/*
UpdateEndpointByNameUsingPUTOK describes a response with status code 200, with default header values.

'Success' with the updated Endpoint
*/
type UpdateEndpointByNameUsingPUTOK struct {
	Payload models.Endpoint
}

// IsSuccess returns true when this update endpoint by name using p u t o k response has a 2xx status code
func (o *UpdateEndpointByNameUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update endpoint by name using p u t o k response has a 3xx status code
func (o *UpdateEndpointByNameUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update endpoint by name using p u t o k response has a 4xx status code
func (o *UpdateEndpointByNameUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update endpoint by name using p u t o k response has a 5xx status code
func (o *UpdateEndpointByNameUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update endpoint by name using p u t o k response a status code equal to that given
func (o *UpdateEndpointByNameUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateEndpointByNameUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{project}/{name}][%d] updateEndpointByNameUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateEndpointByNameUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{project}/{name}][%d] updateEndpointByNameUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateEndpointByNameUsingPUTOK) GetPayload() models.Endpoint {
	return o.Payload
}

func (o *UpdateEndpointByNameUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalEndpoint(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewUpdateEndpointByNameUsingPUTUnauthorized creates a UpdateEndpointByNameUsingPUTUnauthorized with default headers values
func NewUpdateEndpointByNameUsingPUTUnauthorized() *UpdateEndpointByNameUsingPUTUnauthorized {
	return &UpdateEndpointByNameUsingPUTUnauthorized{}
}

/*
UpdateEndpointByNameUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type UpdateEndpointByNameUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update endpoint by name using p u t unauthorized response has a 2xx status code
func (o *UpdateEndpointByNameUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update endpoint by name using p u t unauthorized response has a 3xx status code
func (o *UpdateEndpointByNameUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update endpoint by name using p u t unauthorized response has a 4xx status code
func (o *UpdateEndpointByNameUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update endpoint by name using p u t unauthorized response has a 5xx status code
func (o *UpdateEndpointByNameUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update endpoint by name using p u t unauthorized response a status code equal to that given
func (o *UpdateEndpointByNameUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateEndpointByNameUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{project}/{name}][%d] updateEndpointByNameUsingPUTUnauthorized ", 401)
}

func (o *UpdateEndpointByNameUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{project}/{name}][%d] updateEndpointByNameUsingPUTUnauthorized ", 401)
}

func (o *UpdateEndpointByNameUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEndpointByNameUsingPUTForbidden creates a UpdateEndpointByNameUsingPUTForbidden with default headers values
func NewUpdateEndpointByNameUsingPUTForbidden() *UpdateEndpointByNameUsingPUTForbidden {
	return &UpdateEndpointByNameUsingPUTForbidden{}
}

/*
UpdateEndpointByNameUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateEndpointByNameUsingPUTForbidden struct {
}

// IsSuccess returns true when this update endpoint by name using p u t forbidden response has a 2xx status code
func (o *UpdateEndpointByNameUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update endpoint by name using p u t forbidden response has a 3xx status code
func (o *UpdateEndpointByNameUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update endpoint by name using p u t forbidden response has a 4xx status code
func (o *UpdateEndpointByNameUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update endpoint by name using p u t forbidden response has a 5xx status code
func (o *UpdateEndpointByNameUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update endpoint by name using p u t forbidden response a status code equal to that given
func (o *UpdateEndpointByNameUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateEndpointByNameUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{project}/{name}][%d] updateEndpointByNameUsingPUTForbidden ", 403)
}

func (o *UpdateEndpointByNameUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{project}/{name}][%d] updateEndpointByNameUsingPUTForbidden ", 403)
}

func (o *UpdateEndpointByNameUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEndpointByNameUsingPUTNotFound creates a UpdateEndpointByNameUsingPUTNotFound with default headers values
func NewUpdateEndpointByNameUsingPUTNotFound() *UpdateEndpointByNameUsingPUTNotFound {
	return &UpdateEndpointByNameUsingPUTNotFound{}
}

/*
UpdateEndpointByNameUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateEndpointByNameUsingPUTNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update endpoint by name using p u t not found response has a 2xx status code
func (o *UpdateEndpointByNameUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update endpoint by name using p u t not found response has a 3xx status code
func (o *UpdateEndpointByNameUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update endpoint by name using p u t not found response has a 4xx status code
func (o *UpdateEndpointByNameUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update endpoint by name using p u t not found response has a 5xx status code
func (o *UpdateEndpointByNameUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update endpoint by name using p u t not found response a status code equal to that given
func (o *UpdateEndpointByNameUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateEndpointByNameUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{project}/{name}][%d] updateEndpointByNameUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateEndpointByNameUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{project}/{name}][%d] updateEndpointByNameUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateEndpointByNameUsingPUTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateEndpointByNameUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEndpointByNameUsingPUTInternalServerError creates a UpdateEndpointByNameUsingPUTInternalServerError with default headers values
func NewUpdateEndpointByNameUsingPUTInternalServerError() *UpdateEndpointByNameUsingPUTInternalServerError {
	return &UpdateEndpointByNameUsingPUTInternalServerError{}
}

/*
UpdateEndpointByNameUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateEndpointByNameUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update endpoint by name using p u t internal server error response has a 2xx status code
func (o *UpdateEndpointByNameUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update endpoint by name using p u t internal server error response has a 3xx status code
func (o *UpdateEndpointByNameUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update endpoint by name using p u t internal server error response has a 4xx status code
func (o *UpdateEndpointByNameUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update endpoint by name using p u t internal server error response has a 5xx status code
func (o *UpdateEndpointByNameUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update endpoint by name using p u t internal server error response a status code equal to that given
func (o *UpdateEndpointByNameUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateEndpointByNameUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{project}/{name}][%d] updateEndpointByNameUsingPUTInternalServerError ", 500)
}

func (o *UpdateEndpointByNameUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /codestream/api/endpoints/{project}/{name}][%d] updateEndpointByNameUsingPUTInternalServerError ", 500)
}

func (o *UpdateEndpointByNameUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
