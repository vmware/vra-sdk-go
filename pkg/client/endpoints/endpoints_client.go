// Code generated by go-swagger; DO NOT EDIT.

package endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new endpoints API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for endpoints API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEndpointUsingPOST(params *CreateEndpointUsingPOSTParams, opts ...ClientOption) (*CreateEndpointUsingPOSTOK, error)

	DeleteEndpointByIDUsingDELETE(params *DeleteEndpointByIDUsingDELETEParams, opts ...ClientOption) (*DeleteEndpointByIDUsingDELETEOK, error)

	DeleteEndpointByNameUsingDELETE(params *DeleteEndpointByNameUsingDELETEParams, opts ...ClientOption) (*DeleteEndpointByNameUsingDELETEOK, error)

	GetAllEndpointsUsingGET(params *GetAllEndpointsUsingGETParams, opts ...ClientOption) (*GetAllEndpointsUsingGETOK, error)

	GetEndpointByIDUsingGET(params *GetEndpointByIDUsingGETParams, opts ...ClientOption) (*GetEndpointByIDUsingGETOK, error)

	GetEndpointByNameUsingGET(params *GetEndpointByNameUsingGETParams, opts ...ClientOption) (*GetEndpointByNameUsingGETOK, error)

	GetEndpointPropertiesUsingGET(params *GetEndpointPropertiesUsingGETParams, opts ...ClientOption) (*GetEndpointPropertiesUsingGETOK, error)

	GetEndpointTilesUsingGET(params *GetEndpointTilesUsingGETParams, opts ...ClientOption) (*GetEndpointTilesUsingGETOK, error)

	GetUsingGETMixin4(params *GetUsingGETMixin4Params, opts ...ClientOption) (*GetUsingGETMixin4OK, error)

	UpdateEndpointByIDUsingPUT(params *UpdateEndpointByIDUsingPUTParams, opts ...ClientOption) (*UpdateEndpointByIDUsingPUTOK, error)

	UpdateEndpointByNameUsingPUT(params *UpdateEndpointByNameUsingPUTParams, opts ...ClientOption) (*UpdateEndpointByNameUsingPUTOK, error)

	ValidateEndpointUsingPOST(params *ValidateEndpointUsingPOSTParams, opts ...ClientOption) (*ValidateEndpointUsingPOSTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateEndpointUsingPOST creates an endpoint

Create an Endpoint based on the given project
*/
func (a *Client) CreateEndpointUsingPOST(params *CreateEndpointUsingPOSTParams, opts ...ClientOption) (*CreateEndpointUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEndpointUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createEndpointUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/endpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEndpointUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEndpointUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createEndpointUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteEndpointByIDUsingDELETE deletes an endpoint by id

Delete an Endpoint with the given id
*/
func (a *Client) DeleteEndpointByIDUsingDELETE(params *DeleteEndpointByIDUsingDELETEParams, opts ...ClientOption) (*DeleteEndpointByIDUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEndpointByIDUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEndpointByIdUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/endpoints/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEndpointByIDUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEndpointByIDUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEndpointByIdUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteEndpointByNameUsingDELETE deletes an endpoint by project and name

Delete an Endpoint with the given name
*/
func (a *Client) DeleteEndpointByNameUsingDELETE(params *DeleteEndpointByNameUsingDELETEParams, opts ...ClientOption) (*DeleteEndpointByNameUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEndpointByNameUsingDELETEParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEndpointByNameUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/endpoints/{project}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEndpointByNameUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEndpointByNameUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEndpointByNameUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllEndpointsUsingGET gets all endpoints

Get all Endpoints with specified paging and filter parameters
*/
func (a *Client) GetAllEndpointsUsingGET(params *GetAllEndpointsUsingGETParams, opts ...ClientOption) (*GetAllEndpointsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllEndpointsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllEndpointsUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/endpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllEndpointsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllEndpointsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllEndpointsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEndpointByIDUsingGET gets an endpoint

Get an Endpoint with the given id
*/
func (a *Client) GetEndpointByIDUsingGET(params *GetEndpointByIDUsingGETParams, opts ...ClientOption) (*GetEndpointByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEndpointByIDUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEndpointByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/endpoints/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEndpointByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEndpointByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEndpointByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEndpointByNameUsingGET gets an endpoint by project and name

Get an Endpoint with the given project and name
*/
func (a *Client) GetEndpointByNameUsingGET(params *GetEndpointByNameUsingGETParams, opts ...ClientOption) (*GetEndpointByNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEndpointByNameUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEndpointByNameUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/endpoints/{project}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEndpointByNameUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEndpointByNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEndpointByNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEndpointPropertiesUsingGET gets endpoint properties

Get endpoint properties with the given endpoint type
*/
func (a *Client) GetEndpointPropertiesUsingGET(params *GetEndpointPropertiesUsingGETParams, opts ...ClientOption) (*GetEndpointPropertiesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEndpointPropertiesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEndpointPropertiesUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/endpoint-tiles/{type}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEndpointPropertiesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEndpointPropertiesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEndpointPropertiesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEndpointTilesUsingGET gets all endpoint tiles

Get all supported endpoint tiles
*/
func (a *Client) GetEndpointTilesUsingGET(params *GetEndpointTilesUsingGETParams, opts ...ClientOption) (*GetEndpointTilesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEndpointTilesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEndpointTilesUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/endpoint-tiles",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEndpointTilesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEndpointTilesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEndpointTilesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsingGETMixin4 gets endpoint certificate

Get endpoint certificate chain for validation
*/
func (a *Client) GetUsingGETMixin4(params *GetUsingGETMixin4Params, opts ...ClientOption) (*GetUsingGETMixin4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGETMixin4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUsingGETMixin4",
		Method:             "GET",
		PathPattern:        "/codestream/api/endpoint-certificate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsingGETMixin4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGETMixin4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsingGETMixin4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateEndpointByIDUsingPUT updates an endpoint by id

Update an Endpoint with the given id
*/
func (a *Client) UpdateEndpointByIDUsingPUT(params *UpdateEndpointByIDUsingPUTParams, opts ...ClientOption) (*UpdateEndpointByIDUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEndpointByIDUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEndpointByIdUsingPUT",
		Method:             "PUT",
		PathPattern:        "/codestream/api/endpoints/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEndpointByIDUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEndpointByIDUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEndpointByIdUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateEndpointByNameUsingPUT updates an endpoint by project and name

Update an Endpoint with the given project and name
*/
func (a *Client) UpdateEndpointByNameUsingPUT(params *UpdateEndpointByNameUsingPUTParams, opts ...ClientOption) (*UpdateEndpointByNameUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEndpointByNameUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEndpointByNameUsingPUT",
		Method:             "PUT",
		PathPattern:        "/codestream/api/endpoints/{project}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEndpointByNameUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEndpointByNameUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEndpointByNameUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateEndpointUsingPOST validates endpoint

Validates the given endpoint
*/
func (a *Client) ValidateEndpointUsingPOST(params *ValidateEndpointUsingPOSTParams, opts ...ClientOption) (*ValidateEndpointUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateEndpointUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateEndpointUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/endpoint-validation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateEndpointUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateEndpointUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateEndpointUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
