// Code generated by go-swagger; DO NOT EDIT.

package property_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// DeletePropertyGroupUsingDELETEReader is a Reader for the DeletePropertyGroupUsingDELETE structure.
type DeletePropertyGroupUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePropertyGroupUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeletePropertyGroupUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeletePropertyGroupUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeletePropertyGroupUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeletePropertyGroupUsingDELETENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeletePropertyGroupUsingDELETENoContent creates a DeletePropertyGroupUsingDELETENoContent with default headers values
func NewDeletePropertyGroupUsingDELETENoContent() *DeletePropertyGroupUsingDELETENoContent {
	return &DeletePropertyGroupUsingDELETENoContent{}
}

/*
DeletePropertyGroupUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeletePropertyGroupUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete property group using d e l e t e no content response has a 2xx status code
func (o *DeletePropertyGroupUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete property group using d e l e t e no content response has a 3xx status code
func (o *DeletePropertyGroupUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete property group using d e l e t e no content response has a 4xx status code
func (o *DeletePropertyGroupUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete property group using d e l e t e no content response has a 5xx status code
func (o *DeletePropertyGroupUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete property group using d e l e t e no content response a status code equal to that given
func (o *DeletePropertyGroupUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeletePropertyGroupUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /properties/api/property-groups/{propertyGroupId}][%d] deletePropertyGroupUsingDELETENoContent ", 204)
}

func (o *DeletePropertyGroupUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /properties/api/property-groups/{propertyGroupId}][%d] deletePropertyGroupUsingDELETENoContent ", 204)
}

func (o *DeletePropertyGroupUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePropertyGroupUsingDELETEUnauthorized creates a DeletePropertyGroupUsingDELETEUnauthorized with default headers values
func NewDeletePropertyGroupUsingDELETEUnauthorized() *DeletePropertyGroupUsingDELETEUnauthorized {
	return &DeletePropertyGroupUsingDELETEUnauthorized{}
}

/*
DeletePropertyGroupUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeletePropertyGroupUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete property group using d e l e t e unauthorized response has a 2xx status code
func (o *DeletePropertyGroupUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete property group using d e l e t e unauthorized response has a 3xx status code
func (o *DeletePropertyGroupUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete property group using d e l e t e unauthorized response has a 4xx status code
func (o *DeletePropertyGroupUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete property group using d e l e t e unauthorized response has a 5xx status code
func (o *DeletePropertyGroupUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete property group using d e l e t e unauthorized response a status code equal to that given
func (o *DeletePropertyGroupUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeletePropertyGroupUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /properties/api/property-groups/{propertyGroupId}][%d] deletePropertyGroupUsingDELETEUnauthorized ", 401)
}

func (o *DeletePropertyGroupUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /properties/api/property-groups/{propertyGroupId}][%d] deletePropertyGroupUsingDELETEUnauthorized ", 401)
}

func (o *DeletePropertyGroupUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePropertyGroupUsingDELETEForbidden creates a DeletePropertyGroupUsingDELETEForbidden with default headers values
func NewDeletePropertyGroupUsingDELETEForbidden() *DeletePropertyGroupUsingDELETEForbidden {
	return &DeletePropertyGroupUsingDELETEForbidden{}
}

/*
DeletePropertyGroupUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeletePropertyGroupUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete property group using d e l e t e forbidden response has a 2xx status code
func (o *DeletePropertyGroupUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete property group using d e l e t e forbidden response has a 3xx status code
func (o *DeletePropertyGroupUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete property group using d e l e t e forbidden response has a 4xx status code
func (o *DeletePropertyGroupUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete property group using d e l e t e forbidden response has a 5xx status code
func (o *DeletePropertyGroupUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete property group using d e l e t e forbidden response a status code equal to that given
func (o *DeletePropertyGroupUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeletePropertyGroupUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /properties/api/property-groups/{propertyGroupId}][%d] deletePropertyGroupUsingDELETEForbidden ", 403)
}

func (o *DeletePropertyGroupUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /properties/api/property-groups/{propertyGroupId}][%d] deletePropertyGroupUsingDELETEForbidden ", 403)
}

func (o *DeletePropertyGroupUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePropertyGroupUsingDELETENotFound creates a DeletePropertyGroupUsingDELETENotFound with default headers values
func NewDeletePropertyGroupUsingDELETENotFound() *DeletePropertyGroupUsingDELETENotFound {
	return &DeletePropertyGroupUsingDELETENotFound{}
}

/*
DeletePropertyGroupUsingDELETENotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeletePropertyGroupUsingDELETENotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete property group using d e l e t e not found response has a 2xx status code
func (o *DeletePropertyGroupUsingDELETENotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete property group using d e l e t e not found response has a 3xx status code
func (o *DeletePropertyGroupUsingDELETENotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete property group using d e l e t e not found response has a 4xx status code
func (o *DeletePropertyGroupUsingDELETENotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete property group using d e l e t e not found response has a 5xx status code
func (o *DeletePropertyGroupUsingDELETENotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete property group using d e l e t e not found response a status code equal to that given
func (o *DeletePropertyGroupUsingDELETENotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeletePropertyGroupUsingDELETENotFound) Error() string {
	return fmt.Sprintf("[DELETE /properties/api/property-groups/{propertyGroupId}][%d] deletePropertyGroupUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeletePropertyGroupUsingDELETENotFound) String() string {
	return fmt.Sprintf("[DELETE /properties/api/property-groups/{propertyGroupId}][%d] deletePropertyGroupUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeletePropertyGroupUsingDELETENotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeletePropertyGroupUsingDELETENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
