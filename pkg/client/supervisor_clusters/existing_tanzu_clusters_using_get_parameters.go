// Code generated by go-swagger; DO NOT EDIT.

package supervisor_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewExistingTanzuClustersUsingGETParams creates a new ExistingTanzuClustersUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewExistingTanzuClustersUsingGETParams() *ExistingTanzuClustersUsingGETParams {
	return &ExistingTanzuClustersUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewExistingTanzuClustersUsingGETParamsWithTimeout creates a new ExistingTanzuClustersUsingGETParams object
// with the ability to set a timeout on a request.
func NewExistingTanzuClustersUsingGETParamsWithTimeout(timeout time.Duration) *ExistingTanzuClustersUsingGETParams {
	return &ExistingTanzuClustersUsingGETParams{
		timeout: timeout,
	}
}

// NewExistingTanzuClustersUsingGETParamsWithContext creates a new ExistingTanzuClustersUsingGETParams object
// with the ability to set a context for a request.
func NewExistingTanzuClustersUsingGETParamsWithContext(ctx context.Context) *ExistingTanzuClustersUsingGETParams {
	return &ExistingTanzuClustersUsingGETParams{
		Context: ctx,
	}
}

// NewExistingTanzuClustersUsingGETParamsWithHTTPClient creates a new ExistingTanzuClustersUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewExistingTanzuClustersUsingGETParamsWithHTTPClient(client *http.Client) *ExistingTanzuClustersUsingGETParams {
	return &ExistingTanzuClustersUsingGETParams{
		HTTPClient: client,
	}
}

/*
ExistingTanzuClustersUsingGETParams contains all the parameters to send to the API endpoint

	for the existing tanzu clusters using g e t operation.

	Typically these are written to a http.Request.
*/
type ExistingTanzuClustersUsingGETParams struct {

	/* Registered.

	   registered
	*/
	Registered *string

	/* SearchTerm.

	   searchTerm
	*/
	SearchTerm *string

	/* SelfLinkID.

	   selfLinkId
	*/
	SelfLinkID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the existing tanzu clusters using get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExistingTanzuClustersUsingGETParams) WithDefaults() *ExistingTanzuClustersUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the existing tanzu clusters using get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExistingTanzuClustersUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the existing tanzu clusters using get params
func (o *ExistingTanzuClustersUsingGETParams) WithTimeout(timeout time.Duration) *ExistingTanzuClustersUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the existing tanzu clusters using get params
func (o *ExistingTanzuClustersUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the existing tanzu clusters using get params
func (o *ExistingTanzuClustersUsingGETParams) WithContext(ctx context.Context) *ExistingTanzuClustersUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the existing tanzu clusters using get params
func (o *ExistingTanzuClustersUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the existing tanzu clusters using get params
func (o *ExistingTanzuClustersUsingGETParams) WithHTTPClient(client *http.Client) *ExistingTanzuClustersUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the existing tanzu clusters using get params
func (o *ExistingTanzuClustersUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRegistered adds the registered to the existing tanzu clusters using get params
func (o *ExistingTanzuClustersUsingGETParams) WithRegistered(registered *string) *ExistingTanzuClustersUsingGETParams {
	o.SetRegistered(registered)
	return o
}

// SetRegistered adds the registered to the existing tanzu clusters using get params
func (o *ExistingTanzuClustersUsingGETParams) SetRegistered(registered *string) {
	o.Registered = registered
}

// WithSearchTerm adds the searchTerm to the existing tanzu clusters using get params
func (o *ExistingTanzuClustersUsingGETParams) WithSearchTerm(searchTerm *string) *ExistingTanzuClustersUsingGETParams {
	o.SetSearchTerm(searchTerm)
	return o
}

// SetSearchTerm adds the searchTerm to the existing tanzu clusters using get params
func (o *ExistingTanzuClustersUsingGETParams) SetSearchTerm(searchTerm *string) {
	o.SearchTerm = searchTerm
}

// WithSelfLinkID adds the selfLinkID to the existing tanzu clusters using get params
func (o *ExistingTanzuClustersUsingGETParams) WithSelfLinkID(selfLinkID string) *ExistingTanzuClustersUsingGETParams {
	o.SetSelfLinkID(selfLinkID)
	return o
}

// SetSelfLinkID adds the selfLinkId to the existing tanzu clusters using get params
func (o *ExistingTanzuClustersUsingGETParams) SetSelfLinkID(selfLinkID string) {
	o.SelfLinkID = selfLinkID
}

// WriteToRequest writes these params to a swagger request
func (o *ExistingTanzuClustersUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Registered != nil {

		// query param registered
		var qrRegistered string

		if o.Registered != nil {
			qrRegistered = *o.Registered
		}
		qRegistered := qrRegistered
		if qRegistered != "" {

			if err := r.SetQueryParam("registered", qRegistered); err != nil {
				return err
			}
		}
	}

	if o.SearchTerm != nil {

		// query param searchTerm
		var qrSearchTerm string

		if o.SearchTerm != nil {
			qrSearchTerm = *o.SearchTerm
		}
		qSearchTerm := qrSearchTerm
		if qSearchTerm != "" {

			if err := r.SetQueryParam("searchTerm", qSearchTerm); err != nil {
				return err
			}
		}
	}

	// path param selfLinkId
	if err := r.SetPathParam("selfLinkId", o.SelfLinkID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
