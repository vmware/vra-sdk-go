// Code generated by go-swagger; DO NOT EDIT.

package cloud_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cloud account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAwsCloudAccountAsync(params *CreateAwsCloudAccountAsyncParams, opts ...ClientOption) (*CreateAwsCloudAccountAsyncAccepted, error)

	CreateAzureCloudAccountAsync(params *CreateAzureCloudAccountAsyncParams, opts ...ClientOption) (*CreateAzureCloudAccountAsyncAccepted, error)

	CreateCloudAccountAsync(params *CreateCloudAccountAsyncParams, opts ...ClientOption) (*CreateCloudAccountAsyncAccepted, error)

	CreateGcpCloudAccountAsync(params *CreateGcpCloudAccountAsyncParams, opts ...ClientOption) (*CreateGcpCloudAccountAsyncAccepted, error)

	CreateNsxTCloudAccountAsync(params *CreateNsxTCloudAccountAsyncParams, opts ...ClientOption) (*CreateNsxTCloudAccountAsyncAccepted, error)

	CreateNsxVCloudAccountAsync(params *CreateNsxVCloudAccountAsyncParams, opts ...ClientOption) (*CreateNsxVCloudAccountAsyncAccepted, error)

	CreateVSphereCloudAccountAsync(params *CreateVSphereCloudAccountAsyncParams, opts ...ClientOption) (*CreateVSphereCloudAccountAsyncAccepted, error)

	CreateVcfCloudAccountAsync(params *CreateVcfCloudAccountAsyncParams, opts ...ClientOption) (*CreateVcfCloudAccountAsyncAccepted, error)

	CreateVmcCloudAccountAsync(params *CreateVmcCloudAccountAsyncParams, opts ...ClientOption) (*CreateVmcCloudAccountAsyncAccepted, error)

	DeleteAwsCloudAccount(params *DeleteAwsCloudAccountParams, opts ...ClientOption) (*DeleteAwsCloudAccountAccepted, *DeleteAwsCloudAccountNoContent, error)

	DeleteAzureCloudAccount(params *DeleteAzureCloudAccountParams, opts ...ClientOption) (*DeleteAzureCloudAccountAccepted, *DeleteAzureCloudAccountNoContent, error)

	DeleteCloudAccount(params *DeleteCloudAccountParams, opts ...ClientOption) (*DeleteCloudAccountAccepted, error)

	DeleteCloudAccountNsxT(params *DeleteCloudAccountNsxTParams, opts ...ClientOption) (*DeleteCloudAccountNsxTAccepted, *DeleteCloudAccountNsxTNoContent, error)

	DeleteCloudAccountNsxV(params *DeleteCloudAccountNsxVParams, opts ...ClientOption) (*DeleteCloudAccountNsxVAccepted, *DeleteCloudAccountNsxVNoContent, error)

	DeleteGcpCloudAccount(params *DeleteGcpCloudAccountParams, opts ...ClientOption) (*DeleteGcpCloudAccountAccepted, *DeleteGcpCloudAccountNoContent, error)

	DeleteVSphereCloudAccount(params *DeleteVSphereCloudAccountParams, opts ...ClientOption) (*DeleteVSphereCloudAccountAccepted, *DeleteVSphereCloudAccountNoContent, error)

	DeleteVcfCloudAccount(params *DeleteVcfCloudAccountParams, opts ...ClientOption) (*DeleteVcfCloudAccountAccepted, *DeleteVcfCloudAccountNoContent, error)

	DeleteVmcCloudAccount(params *DeleteVmcCloudAccountParams, opts ...ClientOption) (*DeleteVmcCloudAccountAccepted, *DeleteVmcCloudAccountNoContent, error)

	EnumerateAwsRegionsAsync(params *EnumerateAwsRegionsAsyncParams, opts ...ClientOption) (*EnumerateAwsRegionsAsyncAccepted, error)

	EnumerateAzureRegionsAsync(params *EnumerateAzureRegionsAsyncParams, opts ...ClientOption) (*EnumerateAzureRegionsAsyncAccepted, error)

	EnumerateGcpRegionsAsync(params *EnumerateGcpRegionsAsyncParams, opts ...ClientOption) (*EnumerateGcpRegionsAsyncAccepted, error)

	EnumeratePrivateImages(params *EnumeratePrivateImagesParams, opts ...ClientOption) (*EnumeratePrivateImagesAccepted, error)

	EnumeratePrivateImagesAWS(params *EnumeratePrivateImagesAWSParams, opts ...ClientOption) (*EnumeratePrivateImagesAWSAccepted, error)

	EnumeratePrivateImagesAzure(params *EnumeratePrivateImagesAzureParams, opts ...ClientOption) (*EnumeratePrivateImagesAzureAccepted, error)

	EnumeratePrivateImagesGcp(params *EnumeratePrivateImagesGcpParams, opts ...ClientOption) (*EnumeratePrivateImagesGcpAccepted, error)

	EnumeratePrivateImagesVCF(params *EnumeratePrivateImagesVCFParams, opts ...ClientOption) (*EnumeratePrivateImagesVCFAccepted, error)

	EnumeratePrivateImagesVMC(params *EnumeratePrivateImagesVMCParams, opts ...ClientOption) (*EnumeratePrivateImagesVMCAccepted, error)

	EnumeratePrivateImagesVSphere(params *EnumeratePrivateImagesVSphereParams, opts ...ClientOption) (*EnumeratePrivateImagesVSphereAccepted, error)

	EnumerateRegionsAsync(params *EnumerateRegionsAsyncParams, opts ...ClientOption) (*EnumerateRegionsAsyncAccepted, error)

	EnumerateVSphereRegionsAsync(params *EnumerateVSphereRegionsAsyncParams, opts ...ClientOption) (*EnumerateVSphereRegionsAsyncAccepted, error)

	EnumerateVcfRegionsAsync(params *EnumerateVcfRegionsAsyncParams, opts ...ClientOption) (*EnumerateVcfRegionsAsyncAccepted, error)

	EnumerateVmcRegionsAsync(params *EnumerateVmcRegionsAsyncParams, opts ...ClientOption) (*EnumerateVmcRegionsAsyncAccepted, error)

	GetAwsCloudAccount(params *GetAwsCloudAccountParams, opts ...ClientOption) (*GetAwsCloudAccountOK, error)

	GetAwsCloudAccounts(params *GetAwsCloudAccountsParams, opts ...ClientOption) (*GetAwsCloudAccountsOK, error)

	GetAzureCloudAccount(params *GetAzureCloudAccountParams, opts ...ClientOption) (*GetAzureCloudAccountOK, error)

	GetAzureCloudAccounts(params *GetAzureCloudAccountsParams, opts ...ClientOption) (*GetAzureCloudAccountsOK, error)

	GetCloudAccount(params *GetCloudAccountParams, opts ...ClientOption) (*GetCloudAccountOK, error)

	GetCloudAccounts(params *GetCloudAccountsParams, opts ...ClientOption) (*GetCloudAccountsOK, error)

	GetGcpCloudAccount(params *GetGcpCloudAccountParams, opts ...ClientOption) (*GetGcpCloudAccountOK, error)

	GetGcpCloudAccounts(params *GetGcpCloudAccountsParams, opts ...ClientOption) (*GetGcpCloudAccountsOK, error)

	GetNsxTCloudAccount(params *GetNsxTCloudAccountParams, opts ...ClientOption) (*GetNsxTCloudAccountOK, error)

	GetNsxTCloudAccounts(params *GetNsxTCloudAccountsParams, opts ...ClientOption) (*GetNsxTCloudAccountsOK, error)

	GetNsxVCloudAccount(params *GetNsxVCloudAccountParams, opts ...ClientOption) (*GetNsxVCloudAccountOK, error)

	GetNsxVCloudAccounts(params *GetNsxVCloudAccountsParams, opts ...ClientOption) (*GetNsxVCloudAccountsOK, error)

	GetRegionEnumerationResult(params *GetRegionEnumerationResultParams, opts ...ClientOption) (*GetRegionEnumerationResultOK, error)

	GetVSphereCloudAccount(params *GetVSphereCloudAccountParams, opts ...ClientOption) (*GetVSphereCloudAccountOK, error)

	GetVSphereCloudAccounts(params *GetVSphereCloudAccountsParams, opts ...ClientOption) (*GetVSphereCloudAccountsOK, error)

	GetVcfCloudAccount(params *GetVcfCloudAccountParams, opts ...ClientOption) (*GetVcfCloudAccountOK, error)

	GetVcfCloudAccounts(params *GetVcfCloudAccountsParams, opts ...ClientOption) (*GetVcfCloudAccountsOK, error)

	GetVmcCloudAccount(params *GetVmcCloudAccountParams, opts ...ClientOption) (*GetVmcCloudAccountOK, error)

	GetVmcCloudAccounts(params *GetVmcCloudAccountsParams, opts ...ClientOption) (*GetVmcCloudAccountsOK, error)

	UpdateAWSCloudAccountAsync(params *UpdateAWSCloudAccountAsyncParams, opts ...ClientOption) (*UpdateAWSCloudAccountAsyncAccepted, error)

	UpdateAzureCloudAccountAsync(params *UpdateAzureCloudAccountAsyncParams, opts ...ClientOption) (*UpdateAzureCloudAccountAsyncAccepted, error)

	UpdateCloudAccountAsync(params *UpdateCloudAccountAsyncParams, opts ...ClientOption) (*UpdateCloudAccountAsyncAccepted, error)

	UpdateGcpCloudAccountAsync(params *UpdateGcpCloudAccountAsyncParams, opts ...ClientOption) (*UpdateGcpCloudAccountAsyncAccepted, error)

	UpdateNsxTCloudAccountAsync(params *UpdateNsxTCloudAccountAsyncParams, opts ...ClientOption) (*UpdateNsxTCloudAccountAsyncAccepted, error)

	UpdateNsxVCloudAccountAsync(params *UpdateNsxVCloudAccountAsyncParams, opts ...ClientOption) (*UpdateNsxVCloudAccountAsyncAccepted, error)

	UpdateVMCCloudAccountAsync(params *UpdateVMCCloudAccountAsyncParams, opts ...ClientOption) (*UpdateVMCCloudAccountAsyncAccepted, error)

	UpdateVSphereCloudAccountAsync(params *UpdateVSphereCloudAccountAsyncParams, opts ...ClientOption) (*UpdateVSphereCloudAccountAsyncAccepted, error)

	UpdateVcfCloudAccountAsync(params *UpdateVcfCloudAccountAsyncParams, opts ...ClientOption) (*UpdateVcfCloudAccountAsyncAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAwsCloudAccountAsync creates a cloud account

  Create a cloud account in the current organization
*/
func (a *Client) CreateAwsCloudAccountAsync(params *CreateAwsCloudAccountAsyncParams, opts ...ClientOption) (*CreateAwsCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAwsCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAwsCloudAccountAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-aws",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAwsCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAwsCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAwsCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAzureCloudAccountAsync creates a cloud account

  Create a cloud account in the current organization
*/
func (a *Client) CreateAzureCloudAccountAsync(params *CreateAzureCloudAccountAsyncParams, opts ...ClientOption) (*CreateAzureCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAzureCloudAccountAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-azure",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAzureCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCloudAccountAsync creates a cloud account

  Create a cloud account in the current organization
*/
func (a *Client) CreateCloudAccountAsync(params *CreateCloudAccountAsyncParams, opts ...ClientOption) (*CreateCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCloudAccountAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateGcpCloudAccountAsync creates a cloud account

  Create a cloud account in the current organization
*/
func (a *Client) CreateGcpCloudAccountAsync(params *CreateGcpCloudAccountAsyncParams, opts ...ClientOption) (*CreateGcpCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGcpCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGcpCloudAccountAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-gcp",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGcpCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGcpCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGcpCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNsxTCloudAccountAsync creates a cloud account

  Create a cloud account in the current organization
*/
func (a *Client) CreateNsxTCloudAccountAsync(params *CreateNsxTCloudAccountAsyncParams, opts ...ClientOption) (*CreateNsxTCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNsxTCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNsxTCloudAccountAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNsxTCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNsxTCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNsxTCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNsxVCloudAccountAsync creates a cloud account

  Create a cloud account in the current organization
*/
func (a *Client) CreateNsxVCloudAccountAsync(params *CreateNsxVCloudAccountAsyncParams, opts ...ClientOption) (*CreateNsxVCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNsxVCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNsxVCloudAccountAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNsxVCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNsxVCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNsxVCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVSphereCloudAccountAsync creates a cloud account

  Create a cloud account in the current organization
*/
func (a *Client) CreateVSphereCloudAccountAsync(params *CreateVSphereCloudAccountAsyncParams, opts ...ClientOption) (*CreateVSphereCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVSphereCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createVSphereCloudAccountAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVSphereCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVSphereCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVSphereCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVcfCloudAccountAsync creates a cloud account

  Create a cloud account in the current organization
*/
func (a *Client) CreateVcfCloudAccountAsync(params *CreateVcfCloudAccountAsyncParams, opts ...ClientOption) (*CreateVcfCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVcfCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createVcfCloudAccountAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vcf",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVcfCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVcfCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVcfCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVmcCloudAccountAsync creates a cloud account

  Create a cloud account in the current organization
*/
func (a *Client) CreateVmcCloudAccountAsync(params *CreateVmcCloudAccountAsyncParams, opts ...ClientOption) (*CreateVmcCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVmcCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createVmcCloudAccountAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vmc",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVmcCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVmcCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVmcCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAwsCloudAccount deletes an a w s cloud account

  Delete an AWS cloud account with a given id
*/
func (a *Client) DeleteAwsCloudAccount(params *DeleteAwsCloudAccountParams, opts ...ClientOption) (*DeleteAwsCloudAccountAccepted, *DeleteAwsCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAwsCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAwsCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-aws/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAwsCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAwsCloudAccountAccepted:
		return value, nil, nil
	case *DeleteAwsCloudAccountNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud_account: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAzureCloudAccount deletes an azure cloud account

  Delete an Azure Cloud Account with a given id
*/
func (a *Client) DeleteAzureCloudAccount(params *DeleteAzureCloudAccountParams, opts ...ClientOption) (*DeleteAzureCloudAccountAccepted, *DeleteAzureCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAzureCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAzureCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-azure/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAzureCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAzureCloudAccountAccepted:
		return value, nil, nil
	case *DeleteAzureCloudAccountNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud_account: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCloudAccount deletes a cloud account

  Delete a cloud account with a given id
*/
func (a *Client) DeleteCloudAccount(params *DeleteCloudAccountParams, opts ...ClientOption) (*DeleteCloudAccountAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCloudAccountAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCloudAccountNsxT deletes a n s x t cloud account

  Delete a NSX-T cloud account with a given id
*/
func (a *Client) DeleteCloudAccountNsxT(params *DeleteCloudAccountNsxTParams, opts ...ClientOption) (*DeleteCloudAccountNsxTAccepted, *DeleteCloudAccountNsxTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountNsxTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCloudAccountNsx-T",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountNsxTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCloudAccountNsxTAccepted:
		return value, nil, nil
	case *DeleteCloudAccountNsxTNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud_account: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCloudAccountNsxV deletes a n s v v cloud account

  Delete a NSV-V cloud account with a given id
*/
func (a *Client) DeleteCloudAccountNsxV(params *DeleteCloudAccountNsxVParams, opts ...ClientOption) (*DeleteCloudAccountNsxVAccepted, *DeleteCloudAccountNsxVNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountNsxVParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCloudAccountNsx-V",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountNsxVReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCloudAccountNsxVAccepted:
		return value, nil, nil
	case *DeleteCloudAccountNsxVNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud_account: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGcpCloudAccount deletes an g c p cloud account

  Delete an GCP cloud account with a given id
*/
func (a *Client) DeleteGcpCloudAccount(params *DeleteGcpCloudAccountParams, opts ...ClientOption) (*DeleteGcpCloudAccountAccepted, *DeleteGcpCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGcpCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteGcpCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-gcp/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGcpCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteGcpCloudAccountAccepted:
		return value, nil, nil
	case *DeleteGcpCloudAccountNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud_account: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVSphereCloudAccount deletes a v sphere cloud account

  Delete a vSphere Cloud Account with a given id
*/
func (a *Client) DeleteVSphereCloudAccount(params *DeleteVSphereCloudAccountParams, opts ...ClientOption) (*DeleteVSphereCloudAccountAccepted, *DeleteVSphereCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVSphereCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVSphereCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVSphereCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteVSphereCloudAccountAccepted:
		return value, nil, nil
	case *DeleteVSphereCloudAccountNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud_account: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVcfCloudAccount deletes an v c f cloud account

  Delete an VCF cloud account with a given id
*/
func (a *Client) DeleteVcfCloudAccount(params *DeleteVcfCloudAccountParams, opts ...ClientOption) (*DeleteVcfCloudAccountAccepted, *DeleteVcfCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVcfCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVcfCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-vcf/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVcfCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteVcfCloudAccountAccepted:
		return value, nil, nil
	case *DeleteVcfCloudAccountNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud_account: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVmcCloudAccount deletes an VM c cloud account

  Delete an VMC cloud account with a given id
*/
func (a *Client) DeleteVmcCloudAccount(params *DeleteVmcCloudAccountParams, opts ...ClientOption) (*DeleteVmcCloudAccountAccepted, *DeleteVmcCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVmcCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVmcCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-vmc/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVmcCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteVmcCloudAccountAccepted:
		return value, nil, nil
	case *DeleteVmcCloudAccountNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud_account: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnumerateAwsRegionsAsync gets the available regions for specified a w s cloud account

  Get the available regions for specified AWS cloud account
*/
func (a *Client) EnumerateAwsRegionsAsync(params *EnumerateAwsRegionsAsyncParams, opts ...ClientOption) (*EnumerateAwsRegionsAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateAwsRegionsAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumerateAwsRegionsAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-aws/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateAwsRegionsAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateAwsRegionsAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateAwsRegionsAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnumerateAzureRegionsAsync gets the available regions for specified azure cloud account

  Get the available regions for specified Azure cloud account
*/
func (a *Client) EnumerateAzureRegionsAsync(params *EnumerateAzureRegionsAsyncParams, opts ...ClientOption) (*EnumerateAzureRegionsAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateAzureRegionsAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumerateAzureRegionsAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-azure/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateAzureRegionsAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateAzureRegionsAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateAzureRegionsAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnumerateGcpRegionsAsync gets the available regions for specified g c p cloud account

  Get the available regions for specified GCP cloud account
*/
func (a *Client) EnumerateGcpRegionsAsync(params *EnumerateGcpRegionsAsyncParams, opts ...ClientOption) (*EnumerateGcpRegionsAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateGcpRegionsAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumerateGcpRegionsAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-gcp/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateGcpRegionsAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateGcpRegionsAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateGcpRegionsAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnumeratePrivateImages enumerates all private images for enabled regions of the specified cloud account
*/
func (a *Client) EnumeratePrivateImages(params *EnumeratePrivateImagesParams, opts ...ClientOption) (*EnumeratePrivateImagesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumeratePrivateImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumeratePrivateImages",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts/{id}/private-image-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumeratePrivateImagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumeratePrivateImagesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumeratePrivateImages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnumeratePrivateImagesAWS enumerates all private images for enabled regions of the specified a w s account
*/
func (a *Client) EnumeratePrivateImagesAWS(params *EnumeratePrivateImagesAWSParams, opts ...ClientOption) (*EnumeratePrivateImagesAWSAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumeratePrivateImagesAWSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumeratePrivateImagesAWS",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-aws/{id}/private-image-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumeratePrivateImagesAWSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumeratePrivateImagesAWSAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumeratePrivateImagesAWS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnumeratePrivateImagesAzure enumerates all private images for enabled regions of the specified azure account
*/
func (a *Client) EnumeratePrivateImagesAzure(params *EnumeratePrivateImagesAzureParams, opts ...ClientOption) (*EnumeratePrivateImagesAzureAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumeratePrivateImagesAzureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumeratePrivateImagesAzure",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-azure/{id}/private-image-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumeratePrivateImagesAzureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumeratePrivateImagesAzureAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumeratePrivateImagesAzure: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnumeratePrivateImagesGcp enumerates all private images for enabled regions of the specified g c p account
*/
func (a *Client) EnumeratePrivateImagesGcp(params *EnumeratePrivateImagesGcpParams, opts ...ClientOption) (*EnumeratePrivateImagesGcpAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumeratePrivateImagesGcpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumeratePrivateImagesGcp",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-gcp/{id}/private-image-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumeratePrivateImagesGcpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumeratePrivateImagesGcpAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumeratePrivateImagesGcp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnumeratePrivateImagesVCF enumerates all private images for enabled regions of the specified v c f account
*/
func (a *Client) EnumeratePrivateImagesVCF(params *EnumeratePrivateImagesVCFParams, opts ...ClientOption) (*EnumeratePrivateImagesVCFAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumeratePrivateImagesVCFParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumeratePrivateImagesVCF",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vcf/{id}/private-image-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumeratePrivateImagesVCFReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumeratePrivateImagesVCFAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumeratePrivateImagesVCF: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnumeratePrivateImagesVMC enumerates all private images for enabled regions of the specified VM c account
*/
func (a *Client) EnumeratePrivateImagesVMC(params *EnumeratePrivateImagesVMCParams, opts ...ClientOption) (*EnumeratePrivateImagesVMCAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumeratePrivateImagesVMCParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumeratePrivateImagesVMC",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vmc/{id}/private-image-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumeratePrivateImagesVMCReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumeratePrivateImagesVMCAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumeratePrivateImagesVMC: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnumeratePrivateImagesVSphere enumerates all private images for enabled regions of the specified v sphere account
*/
func (a *Client) EnumeratePrivateImagesVSphere(params *EnumeratePrivateImagesVSphereParams, opts ...ClientOption) (*EnumeratePrivateImagesVSphereAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumeratePrivateImagesVSphereParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumeratePrivateImagesVSphere",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/{id}/private-image-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumeratePrivateImagesVSphereReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumeratePrivateImagesVSphereAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumeratePrivateImagesVSphere: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnumerateRegionsAsync gets the available regions for specified cloud account

  Get the available regions for specified cloud account
*/
func (a *Client) EnumerateRegionsAsync(params *EnumerateRegionsAsyncParams, opts ...ClientOption) (*EnumerateRegionsAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateRegionsAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumerateRegionsAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateRegionsAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateRegionsAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateRegionsAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnumerateVSphereRegionsAsync gets the available regions for specified v sphere cloud account

  Get the available regions for specified vSphere cloud account
*/
func (a *Client) EnumerateVSphereRegionsAsync(params *EnumerateVSphereRegionsAsyncParams, opts ...ClientOption) (*EnumerateVSphereRegionsAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateVSphereRegionsAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumerateVSphereRegionsAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateVSphereRegionsAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateVSphereRegionsAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateVSphereRegionsAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnumerateVcfRegionsAsync gets the available regions for specified v c f cloud account

  Get the available regions for specified VCF cloud account
*/
func (a *Client) EnumerateVcfRegionsAsync(params *EnumerateVcfRegionsAsyncParams, opts ...ClientOption) (*EnumerateVcfRegionsAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateVcfRegionsAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumerateVcfRegionsAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vcf/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateVcfRegionsAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateVcfRegionsAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateVcfRegionsAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnumerateVmcRegionsAsync gets the available regions for specified VM c cloud account

  Get the available regions for specified VMC cloud account
*/
func (a *Client) EnumerateVmcRegionsAsync(params *EnumerateVmcRegionsAsyncParams, opts ...ClientOption) (*EnumerateVmcRegionsAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateVmcRegionsAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumerateVmcRegionsAsync",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vmc/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateVmcRegionsAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateVmcRegionsAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateVmcRegionsAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAwsCloudAccount gets an a w s cloud account

  Get an AWS cloud account with a given id
*/
func (a *Client) GetAwsCloudAccount(params *GetAwsCloudAccountParams, opts ...ClientOption) (*GetAwsCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAwsCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-aws/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAwsCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAwsCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAwsCloudAccounts gets a w s cloud accounts

  Get all AWS cloud accounts within the current organization
*/
func (a *Client) GetAwsCloudAccounts(params *GetAwsCloudAccountsParams, opts ...ClientOption) (*GetAwsCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsCloudAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAwsCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-aws",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAwsCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAwsCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAzureCloudAccount gets an azure cloud account

  Get an Azure Cloud Account with a given id
*/
func (a *Client) GetAzureCloudAccount(params *GetAzureCloudAccountParams, opts ...ClientOption) (*GetAzureCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAzureCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-azure/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAzureCloudAccounts gets azure cloud accounts

  Get all Azure cloud accounts within the current organization
*/
func (a *Client) GetAzureCloudAccounts(params *GetAzureCloudAccountsParams, opts ...ClientOption) (*GetAzureCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureCloudAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAzureCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-azure",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCloudAccount gets cloud account

  Get cloud account with a given id
*/
func (a *Client) GetCloudAccount(params *GetCloudAccountParams, opts ...ClientOption) (*GetCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCloudAccounts gets cloud accounts

  Get all cloud accounts within the current organization
*/
func (a *Client) GetCloudAccounts(params *GetCloudAccountsParams, opts ...ClientOption) (*GetCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGcpCloudAccount gets an g c p cloud account

  Get an GCP cloud account with a given id
*/
func (a *Client) GetGcpCloudAccount(params *GetGcpCloudAccountParams, opts ...ClientOption) (*GetGcpCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcpCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGcpCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-gcp/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGcpCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcpCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGcpCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGcpCloudAccounts gets g c p cloud accounts

  Get all GCP cloud accounts within the current organization
*/
func (a *Client) GetGcpCloudAccounts(params *GetGcpCloudAccountsParams, opts ...ClientOption) (*GetGcpCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcpCloudAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGcpCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-gcp",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGcpCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcpCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGcpCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNsxTCloudAccount gets an n s x t cloud account

  Get an NSX-T cloud account with a given id
*/
func (a *Client) GetNsxTCloudAccount(params *GetNsxTCloudAccountParams, opts ...ClientOption) (*GetNsxTCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxTCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxTCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxTCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxTCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxTCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNsxTCloudAccounts gets n s x t cloud accounts

  Get all NSX-T cloud accounts within the current organization
*/
func (a *Client) GetNsxTCloudAccounts(params *GetNsxTCloudAccountsParams, opts ...ClientOption) (*GetNsxTCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxTCloudAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxTCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxTCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxTCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxTCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNsxVCloudAccount gets an n s x v cloud account

  Get an NSX-V cloud account with a given id
*/
func (a *Client) GetNsxVCloudAccount(params *GetNsxVCloudAccountParams, opts ...ClientOption) (*GetNsxVCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxVCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxVCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxVCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxVCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxVCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNsxVCloudAccounts gets n s x v cloud accounts

  Get all NSX-V cloud accounts within the current organization
*/
func (a *Client) GetNsxVCloudAccounts(params *GetNsxVCloudAccountsParams, opts ...ClientOption) (*GetNsxVCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxVCloudAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxVCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxVCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxVCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxVCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRegionEnumerationResult gets region enumeration response

  Get region enumeration response for a given id
*/
func (a *Client) GetRegionEnumerationResult(params *GetRegionEnumerationResultParams, opts ...ClientOption) (*GetRegionEnumerationResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionEnumerationResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRegionEnumerationResult",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts/region-enumeration/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRegionEnumerationResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRegionEnumerationResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRegionEnumerationResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVSphereCloudAccount gets an v sphere cloud account

  Get an vSphere cloud account with a given id
*/
func (a *Client) GetVSphereCloudAccount(params *GetVSphereCloudAccountParams, opts ...ClientOption) (*GetVSphereCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVSphereCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVSphereCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVSphereCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVSphereCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVSphereCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVSphereCloudAccounts gets v sphere cloud accounts

  Get all vSphere cloud accounts within the current organization
*/
func (a *Client) GetVSphereCloudAccounts(params *GetVSphereCloudAccountsParams, opts ...ClientOption) (*GetVSphereCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVSphereCloudAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVSphereCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVSphereCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVSphereCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVSphereCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcfCloudAccount gets an v c f cloud account

  Get an VCF cloud account with a given id
*/
func (a *Client) GetVcfCloudAccount(params *GetVcfCloudAccountParams, opts ...ClientOption) (*GetVcfCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcfCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcfCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vcf/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcfCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcfCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcfCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcfCloudAccounts gets v c f cloud accounts

  Get all VCF cloud accounts within the current organization
*/
func (a *Client) GetVcfCloudAccounts(params *GetVcfCloudAccountsParams, opts ...ClientOption) (*GetVcfCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcfCloudAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcfCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vcf",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcfCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcfCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcfCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVmcCloudAccount gets an VM c cloud account

  Get an VMC cloud account with a given id
*/
func (a *Client) GetVmcCloudAccount(params *GetVmcCloudAccountParams, opts ...ClientOption) (*GetVmcCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVmcCloudAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVmcCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vmc/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVmcCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVmcCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVmcCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVmcCloudAccounts gets VM c cloud accounts

  Get all VMC cloud accounts within the current organization
*/
func (a *Client) GetVmcCloudAccounts(params *GetVmcCloudAccountsParams, opts ...ClientOption) (*GetVmcCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVmcCloudAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVmcCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vmc",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVmcCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVmcCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVmcCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAWSCloudAccountAsync updates a w s cloud account

  Update AWS cloud account
*/
func (a *Client) UpdateAWSCloudAccountAsync(params *UpdateAWSCloudAccountAsyncParams, opts ...ClientOption) (*UpdateAWSCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAWSCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAWSCloudAccountAsync",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-aws/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAWSCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAWSCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAWSCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAzureCloudAccountAsync updates azure cloud account

  Update Azure cloud account
*/
func (a *Client) UpdateAzureCloudAccountAsync(params *UpdateAzureCloudAccountAsyncParams, opts ...ClientOption) (*UpdateAzureCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAzureCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAzureCloudAccountAsync",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-azure/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAzureCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAzureCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAzureCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCloudAccountAsync updates cloud account

  Update a single CloudAccount
*/
func (a *Client) UpdateCloudAccountAsync(params *UpdateCloudAccountAsyncParams, opts ...ClientOption) (*UpdateCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCloudAccountAsync",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGcpCloudAccountAsync updates g c p cloud account

  Update GCP cloud account
*/
func (a *Client) UpdateGcpCloudAccountAsync(params *UpdateGcpCloudAccountAsyncParams, opts ...ClientOption) (*UpdateGcpCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGcpCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGcpCloudAccountAsync",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-gcp/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGcpCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGcpCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGcpCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNsxTCloudAccountAsync updates n s x t cloud account

  Update NSX-T cloud account
*/
func (a *Client) UpdateNsxTCloudAccountAsync(params *UpdateNsxTCloudAccountAsyncParams, opts ...ClientOption) (*UpdateNsxTCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNsxTCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNsxTCloudAccountAsync",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNsxTCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNsxTCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNsxTCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNsxVCloudAccountAsync updates n s x v cloud account

  Update NSX-V cloud account
*/
func (a *Client) UpdateNsxVCloudAccountAsync(params *UpdateNsxVCloudAccountAsyncParams, opts ...ClientOption) (*UpdateNsxVCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNsxVCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNsxVCloudAccountAsync",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNsxVCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNsxVCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNsxVCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVMCCloudAccountAsync updates VM c cloud account

  Update VMC cloud account
*/
func (a *Client) UpdateVMCCloudAccountAsync(params *UpdateVMCCloudAccountAsyncParams, opts ...ClientOption) (*UpdateVMCCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVMCCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVMCCloudAccountAsync",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-vmc/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVMCCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVMCCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVMCCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVSphereCloudAccountAsync updates v sphere cloud account

  Update vSphere cloud account
*/
func (a *Client) UpdateVSphereCloudAccountAsync(params *UpdateVSphereCloudAccountAsyncParams, opts ...ClientOption) (*UpdateVSphereCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVSphereCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVSphereCloudAccountAsync",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVSphereCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVSphereCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVSphereCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVcfCloudAccountAsync updates v c f cloud account

  Update VCF cloud account
*/
func (a *Client) UpdateVcfCloudAccountAsync(params *UpdateVcfCloudAccountAsyncParams, opts ...ClientOption) (*UpdateVcfCloudAccountAsyncAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVcfCloudAccountAsyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVcfCloudAccountAsync",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-vcf/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVcfCloudAccountAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVcfCloudAccountAsyncAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVcfCloudAccountAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
