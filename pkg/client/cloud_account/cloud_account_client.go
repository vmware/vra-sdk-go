// Code generated by go-swagger; DO NOT EDIT.

package cloud_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new cloud account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateAwsCloudAccount creates an a w s cloud account

Create an AWS cloud account in the current organization
*/
func (a *Client) CreateAwsCloudAccount(params *CreateAwsCloudAccountParams) (*CreateAwsCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAwsCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAwsCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-aws",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAwsCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAwsCloudAccountCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAwsCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAzureCloudAccount creates an azure cloud account

Create an Azure cloud account in the current organization
*/
func (a *Client) CreateAzureCloudAccount(params *CreateAzureCloudAccountParams) (*CreateAzureCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAzureCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-azure",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureCloudAccountCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAzureCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCloudAccount creates a cloud account

Create a cloud account in the current organization
*/
func (a *Client) CreateCloudAccount(params *CreateCloudAccountParams) (*CreateCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCloudAccountCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGcpCloudAccount creates an g c p cloud account

Create an GCP cloud account in the current organization
*/
func (a *Client) CreateGcpCloudAccount(params *CreateGcpCloudAccountParams) (*CreateGcpCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGcpCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createGcpCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-gcp",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGcpCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGcpCloudAccountCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGcpCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNsxTCloudAccount creates a n s x t cloud account

Create a NSX-T cloud account in the current organization
*/
func (a *Client) CreateNsxTCloudAccount(params *CreateNsxTCloudAccountParams) (*CreateNsxTCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNsxTCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNsxTCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNsxTCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNsxTCloudAccountCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNsxTCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNsxVCloudAccount creates a n s x v cloud account

Create a NSX-V cloud account within the current organization
*/
func (a *Client) CreateNsxVCloudAccount(params *CreateNsxVCloudAccountParams) (*CreateNsxVCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNsxVCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNsxVCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNsxVCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNsxVCloudAccountCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNsxVCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateVSphereCloudAccount creates a v sphere cloud account

Create a vSphere cloud account within the current organization
*/
func (a *Client) CreateVSphereCloudAccount(params *CreateVSphereCloudAccountParams) (*CreateVSphereCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVSphereCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createVSphereCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVSphereCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVSphereCloudAccountCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVSphereCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateVcfCloudAccount creates an v c f cloud account

Create an VCF cloud account in the current organization
*/
func (a *Client) CreateVcfCloudAccount(params *CreateVcfCloudAccountParams) (*CreateVcfCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVcfCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createVcfCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vcf",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVcfCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVcfCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVcfCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateVmcCloudAccount creates an VM c cloud account

Create an VMC cloud account in the current organization
*/
func (a *Client) CreateVmcCloudAccount(params *CreateVmcCloudAccountParams) (*CreateVmcCloudAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVmcCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createVmcCloudAccount",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vmc",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVmcCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVmcCloudAccountCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVmcCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAwsCloudAccount deletes an a w s cloud account

Delete an AWS cloud account with a given id
*/
func (a *Client) DeleteAwsCloudAccount(params *DeleteAwsCloudAccountParams) (*DeleteAwsCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAwsCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAwsCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-aws/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAwsCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAwsCloudAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAwsCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAzureCloudAccount deletes an azure cloud account

Delete an Azure Cloud Account with a given id
*/
func (a *Client) DeleteAzureCloudAccount(params *DeleteAzureCloudAccountParams) (*DeleteAzureCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAzureCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAzureCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-azure/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAzureCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAzureCloudAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAzureCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCloudAccount deletes a cloud account

Delete a cloud account with a given id
*/
func (a *Client) DeleteCloudAccount(params *DeleteCloudAccountParams) (*DeleteCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCloudAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCloudAccountNsxT deletes a n s x t cloud account

Delete a NSX-T cloud account with a given id
*/
func (a *Client) DeleteCloudAccountNsxT(params *DeleteCloudAccountNsxTParams) (*DeleteCloudAccountNsxTNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountNsxTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudAccountNsx-T",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountNsxTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCloudAccountNsxTNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCloudAccountNsx-T: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCloudAccountNsxV deletes a n s v v cloud account

Delete a NSV-V cloud account with a given id
*/
func (a *Client) DeleteCloudAccountNsxV(params *DeleteCloudAccountNsxVParams) (*DeleteCloudAccountNsxVNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountNsxVParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudAccountNsx-V",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountNsxVReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCloudAccountNsxVNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCloudAccountNsx-V: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteGcpCloudAccount deletes an g c p cloud account

Delete an GCP cloud account with a given id
*/
func (a *Client) DeleteGcpCloudAccount(params *DeleteGcpCloudAccountParams) (*DeleteGcpCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGcpCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGcpCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-gcp/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGcpCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGcpCloudAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGcpCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteVSphereCloudAccount deletes a v sphere cloud account

Delete a vSphere Cloud Account with a given id
*/
func (a *Client) DeleteVSphereCloudAccount(params *DeleteVSphereCloudAccountParams) (*DeleteVSphereCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVSphereCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteVSphereCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVSphereCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVSphereCloudAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteVSphereCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteVcfCloudAccount deletes an v c f cloud account

Delete an VCF cloud account with a given id
*/
func (a *Client) DeleteVcfCloudAccount(params *DeleteVcfCloudAccountParams) (*DeleteVcfCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVcfCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteVcfCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-vcf/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVcfCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVcfCloudAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteVcfCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteVmcCloudAccount deletes an VM c cloud account

Delete an VMC cloud account with a given id
*/
func (a *Client) DeleteVmcCloudAccount(params *DeleteVmcCloudAccountParams) (*DeleteVmcCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVmcCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteVmcCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/iaas/api/cloud-accounts-vmc/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVmcCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVmcCloudAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteVmcCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnumerateAwsRegions gets the available regions for specified a w s cloud account

Get the available regions for specified AWS cloud account
*/
func (a *Client) EnumerateAwsRegions(params *EnumerateAwsRegionsParams) (*EnumerateAwsRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateAwsRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateAwsRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-aws/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateAwsRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateAwsRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateAwsRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnumerateAzureRegions gets the available regions for specified azure cloud account

Get the available regions for specified Azure cloud account
*/
func (a *Client) EnumerateAzureRegions(params *EnumerateAzureRegionsParams) (*EnumerateAzureRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateAzureRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateAzureRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-azure/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateAzureRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateAzureRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateAzureRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnumerateGcpRegions gets the available regions for specified g c p cloud account

Get the available regions for specified GCP cloud account
*/
func (a *Client) EnumerateGcpRegions(params *EnumerateGcpRegionsParams) (*EnumerateGcpRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateGcpRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateGcpRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-gcp/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateGcpRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateGcpRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateGcpRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnumeratePrivateImages enumerates all private images for enabled regions of the specified cloud account
*/
func (a *Client) EnumeratePrivateImages(params *EnumeratePrivateImagesParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumeratePrivateImagesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumeratePrivateImages",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts/{id}/private-image-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumeratePrivateImagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
EnumeratePrivateImagesAWS enumerates all private images for enabled regions of the specified a w s account
*/
func (a *Client) EnumeratePrivateImagesAWS(params *EnumeratePrivateImagesAWSParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumeratePrivateImagesAWSParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumeratePrivateImagesAWS",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-aws/{id}/private-image-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumeratePrivateImagesAWSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
EnumeratePrivateImagesAzure enumerates all private images for enabled regions of the specified azure account
*/
func (a *Client) EnumeratePrivateImagesAzure(params *EnumeratePrivateImagesAzureParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumeratePrivateImagesAzureParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumeratePrivateImagesAzure",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-azure/{id}/private-image-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumeratePrivateImagesAzureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
EnumeratePrivateImagesGcp enumerates all private images for enabled regions of the specified g c p account
*/
func (a *Client) EnumeratePrivateImagesGcp(params *EnumeratePrivateImagesGcpParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumeratePrivateImagesGcpParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumeratePrivateImagesGcp",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-gcp/{id}/private-image-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumeratePrivateImagesGcpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
EnumeratePrivateImagesVCF enumerates all private images for enabled regions of the specified v c f account
*/
func (a *Client) EnumeratePrivateImagesVCF(params *EnumeratePrivateImagesVCFParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumeratePrivateImagesVCFParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumeratePrivateImagesVCF",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vcf/{id}/private-image-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumeratePrivateImagesVCFReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
EnumeratePrivateImagesVMC enumerates all private images for enabled regions of the specified VM c account
*/
func (a *Client) EnumeratePrivateImagesVMC(params *EnumeratePrivateImagesVMCParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumeratePrivateImagesVMCParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumeratePrivateImagesVMC",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vmc/{id}/private-image-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumeratePrivateImagesVMCReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
EnumeratePrivateImagesVSphere enumerates all private images for enabled regions of the specified v sphere account
*/
func (a *Client) EnumeratePrivateImagesVSphere(params *EnumeratePrivateImagesVSphereParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumeratePrivateImagesVSphereParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumeratePrivateImagesVSphere",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/{id}/private-image-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumeratePrivateImagesVSphereReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
EnumerateRegions gets the available regions for specified cloud account

Get the available regions for specified cloud account
*/
func (a *Client) EnumerateRegions(params *EnumerateRegionsParams) (*EnumerateRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnumerateVSphereRegions gets the available regions for specified v sphere cloud account

Get the available regions for specified vSphere cloud account
*/
func (a *Client) EnumerateVSphereRegions(params *EnumerateVSphereRegionsParams) (*EnumerateVSphereRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateVSphereRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateVSphereRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateVSphereRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateVSphereRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateVSphereRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnumerateVcfRegions gets the available regions for specified v c f cloud account

Get the available regions for specified VCF cloud account
*/
func (a *Client) EnumerateVcfRegions(params *EnumerateVcfRegionsParams) (*EnumerateVcfRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateVcfRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateVcfRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vcf/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateVcfRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateVcfRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateVcfRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnumerateVmcRegions gets the available regions for specified VM c cloud account

Get the available regions for specified VMC cloud account
*/
func (a *Client) EnumerateVmcRegions(params *EnumerateVmcRegionsParams) (*EnumerateVmcRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateVmcRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enumerateVmcRegions",
		Method:             "POST",
		PathPattern:        "/iaas/api/cloud-accounts-vmc/region-enumeration",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateVmcRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateVmcRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateVmcRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAwsCloudAccount gets an a w s cloud account

Get an AWS cloud account with a given id
*/
func (a *Client) GetAwsCloudAccount(params *GetAwsCloudAccountParams) (*GetAwsCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-aws/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAwsCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAwsCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAwsCloudAccounts gets a w s cloud accounts

Get all AWS cloud accounts within the current organization
*/
func (a *Client) GetAwsCloudAccounts(params *GetAwsCloudAccountsParams) (*GetAwsCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-aws",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAwsCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAwsCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAzureCloudAccount gets an azure cloud account

Get an Azure Cloud Account with a given id
*/
func (a *Client) GetAzureCloudAccount(params *GetAzureCloudAccountParams) (*GetAzureCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-azure/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAzureCloudAccounts gets azure cloud accounts

Get all Azure cloud accounts within the current organization
*/
func (a *Client) GetAzureCloudAccounts(params *GetAzureCloudAccountsParams) (*GetAzureCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAzureCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-azure",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCloudAccount gets cloud account

Get cloud account with a given id
*/
func (a *Client) GetCloudAccount(params *GetCloudAccountParams) (*GetCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCloudAccounts gets cloud accounts

Get all cloud accounts within the current organization
*/
func (a *Client) GetCloudAccounts(params *GetCloudAccountsParams) (*GetCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcpCloudAccount gets an g c p cloud account

Get an GCP cloud account with a given id
*/
func (a *Client) GetGcpCloudAccount(params *GetGcpCloudAccountParams) (*GetGcpCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcpCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGcpCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-gcp/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGcpCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcpCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGcpCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGcpCloudAccounts gets g c p cloud accounts

Get all GCP cloud accounts within the current organization
*/
func (a *Client) GetGcpCloudAccounts(params *GetGcpCloudAccountsParams) (*GetGcpCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGcpCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGcpCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-gcp",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGcpCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGcpCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGcpCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNsxTCloudAccount gets an n s x t cloud account

Get an NSX-T cloud account with a given id
*/
func (a *Client) GetNsxTCloudAccount(params *GetNsxTCloudAccountParams) (*GetNsxTCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxTCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNsxTCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxTCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxTCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxTCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNsxTCloudAccounts gets n s x t cloud accounts

Get all NSX-T cloud accounts within the current organization
*/
func (a *Client) GetNsxTCloudAccounts(params *GetNsxTCloudAccountsParams) (*GetNsxTCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxTCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNsxTCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxTCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxTCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxTCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNsxVCloudAccount gets an n s x v cloud account

Get an NSX-V cloud account with a given id
*/
func (a *Client) GetNsxVCloudAccount(params *GetNsxVCloudAccountParams) (*GetNsxVCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxVCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNsxVCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxVCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxVCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxVCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNsxVCloudAccounts gets n s x v cloud accounts

Get all NSX-V cloud accounts within the current organization
*/
func (a *Client) GetNsxVCloudAccounts(params *GetNsxVCloudAccountsParams) (*GetNsxVCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNsxVCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNsxVCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNsxVCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNsxVCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxVCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVSphereCloudAccount gets an v sphere cloud account

Get an vSphere cloud account with a given id
*/
func (a *Client) GetVSphereCloudAccount(params *GetVSphereCloudAccountParams) (*GetVSphereCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVSphereCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVSphereCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVSphereCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVSphereCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVSphereCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVSphereCloudAccounts gets v sphere cloud accounts

Get all vSphere cloud accounts within the current organization
*/
func (a *Client) GetVSphereCloudAccounts(params *GetVSphereCloudAccountsParams) (*GetVSphereCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVSphereCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVSphereCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVSphereCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVSphereCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVSphereCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVcfCloudAccount gets an v c f cloud account

Get an VCF cloud account with a given id
*/
func (a *Client) GetVcfCloudAccount(params *GetVcfCloudAccountParams) (*GetVcfCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcfCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVcfCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vcf/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcfCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcfCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcfCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVcfCloudAccounts gets v c f cloud accounts

Get all VCF cloud accounts within the current organization
*/
func (a *Client) GetVcfCloudAccounts(params *GetVcfCloudAccountsParams) (*GetVcfCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcfCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVcfCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vcf",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcfCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcfCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcfCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVmcCloudAccount gets an VM c cloud account

Get an VMC cloud account with a given id
*/
func (a *Client) GetVmcCloudAccount(params *GetVmcCloudAccountParams) (*GetVmcCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVmcCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVmcCloudAccount",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vmc/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVmcCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVmcCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVmcCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVmcCloudAccounts gets VM c cloud accounts

Get all VMC cloud accounts within the current organization
*/
func (a *Client) GetVmcCloudAccounts(params *GetVmcCloudAccountsParams) (*GetVmcCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVmcCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVmcCloudAccounts",
		Method:             "GET",
		PathPattern:        "/iaas/api/cloud-accounts-vmc",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVmcCloudAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVmcCloudAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVmcCloudAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAwsCloudAccount updates a w s cloud account

Update AWS cloud account
*/
func (a *Client) UpdateAwsCloudAccount(params *UpdateAwsCloudAccountParams) (*UpdateAwsCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAwsCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAwsCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-aws/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAwsCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAwsCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAwsCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAzureCloudAccount updates azure cloud account

Update Azure cloud account
*/
func (a *Client) UpdateAzureCloudAccount(params *UpdateAzureCloudAccountParams) (*UpdateAzureCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAzureCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAzureCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-azure/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAzureCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAzureCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAzureCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCloudAccount updates cloud account

Update a single CloudAccount
*/
func (a *Client) UpdateCloudAccount(params *UpdateCloudAccountParams) (*UpdateCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGcpCloudAccount updates g c p cloud account

Update GCP cloud account
*/
func (a *Client) UpdateGcpCloudAccount(params *UpdateGcpCloudAccountParams) (*UpdateGcpCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGcpCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateGcpCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-gcp/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGcpCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGcpCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGcpCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNsxTCloudAccount updates n s x t cloud account

Update NSX-T cloud account
*/
func (a *Client) UpdateNsxTCloudAccount(params *UpdateNsxTCloudAccountParams) (*UpdateNsxTCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNsxTCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNsxTCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-t/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNsxTCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNsxTCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNsxTCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNsxVCloudAccount updates n s x v cloud account

Update NSX-V cloud account
*/
func (a *Client) UpdateNsxVCloudAccount(params *UpdateNsxVCloudAccountParams) (*UpdateNsxVCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNsxVCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNsxVCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-nsx-v/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNsxVCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNsxVCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNsxVCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVSphereCloudAccount updates v sphere cloud account

Update vSphere cloud account
*/
func (a *Client) UpdateVSphereCloudAccount(params *UpdateVSphereCloudAccountParams) (*UpdateVSphereCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVSphereCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateVSphereCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-vsphere/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVSphereCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVSphereCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVSphereCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVcfCloudAccount updates v c f cloud account

Update VCF cloud account
*/
func (a *Client) UpdateVcfCloudAccount(params *UpdateVcfCloudAccountParams) (*UpdateVcfCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVcfCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateVcfCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-vcf/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVcfCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVcfCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVcfCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVmcCloudAccount updates VM c cloud account

Update VMC cloud account
*/
func (a *Client) UpdateVmcCloudAccount(params *UpdateVmcCloudAccountParams) (*UpdateVmcCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVmcCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateVmcCloudAccount",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/cloud-accounts-vmc/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVmcCloudAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVmcCloudAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVmcCloudAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
