// Code generated by go-swagger; DO NOT EDIT.

package cloud_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// EnumerateAzureRegionsAsyncReader is a Reader for the EnumerateAzureRegionsAsync structure.
type EnumerateAzureRegionsAsyncReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnumerateAzureRegionsAsyncReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewEnumerateAzureRegionsAsyncAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnumerateAzureRegionsAsyncBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEnumerateAzureRegionsAsyncForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEnumerateAzureRegionsAsyncAccepted creates a EnumerateAzureRegionsAsyncAccepted with default headers values
func NewEnumerateAzureRegionsAsyncAccepted() *EnumerateAzureRegionsAsyncAccepted {
	return &EnumerateAzureRegionsAsyncAccepted{}
}

/*
EnumerateAzureRegionsAsyncAccepted describes a response with status code 202, with default header values.

successful operation
*/
type EnumerateAzureRegionsAsyncAccepted struct {
	Payload *models.RequestTracker
}

// IsSuccess returns true when this enumerate azure regions async accepted response has a 2xx status code
func (o *EnumerateAzureRegionsAsyncAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enumerate azure regions async accepted response has a 3xx status code
func (o *EnumerateAzureRegionsAsyncAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumerate azure regions async accepted response has a 4xx status code
func (o *EnumerateAzureRegionsAsyncAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this enumerate azure regions async accepted response has a 5xx status code
func (o *EnumerateAzureRegionsAsyncAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this enumerate azure regions async accepted response a status code equal to that given
func (o *EnumerateAzureRegionsAsyncAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *EnumerateAzureRegionsAsyncAccepted) Error() string {
	return fmt.Sprintf("[POST /iaas/api/cloud-accounts-azure/region-enumeration][%d] enumerateAzureRegionsAsyncAccepted  %+v", 202, o.Payload)
}

func (o *EnumerateAzureRegionsAsyncAccepted) String() string {
	return fmt.Sprintf("[POST /iaas/api/cloud-accounts-azure/region-enumeration][%d] enumerateAzureRegionsAsyncAccepted  %+v", 202, o.Payload)
}

func (o *EnumerateAzureRegionsAsyncAccepted) GetPayload() *models.RequestTracker {
	return o.Payload
}

func (o *EnumerateAzureRegionsAsyncAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestTracker)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnumerateAzureRegionsAsyncBadRequest creates a EnumerateAzureRegionsAsyncBadRequest with default headers values
func NewEnumerateAzureRegionsAsyncBadRequest() *EnumerateAzureRegionsAsyncBadRequest {
	return &EnumerateAzureRegionsAsyncBadRequest{}
}

/*
EnumerateAzureRegionsAsyncBadRequest describes a response with status code 400, with default header values.

Invalid Request - bad data
*/
type EnumerateAzureRegionsAsyncBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this enumerate azure regions async bad request response has a 2xx status code
func (o *EnumerateAzureRegionsAsyncBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enumerate azure regions async bad request response has a 3xx status code
func (o *EnumerateAzureRegionsAsyncBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumerate azure regions async bad request response has a 4xx status code
func (o *EnumerateAzureRegionsAsyncBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this enumerate azure regions async bad request response has a 5xx status code
func (o *EnumerateAzureRegionsAsyncBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this enumerate azure regions async bad request response a status code equal to that given
func (o *EnumerateAzureRegionsAsyncBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *EnumerateAzureRegionsAsyncBadRequest) Error() string {
	return fmt.Sprintf("[POST /iaas/api/cloud-accounts-azure/region-enumeration][%d] enumerateAzureRegionsAsyncBadRequest  %+v", 400, o.Payload)
}

func (o *EnumerateAzureRegionsAsyncBadRequest) String() string {
	return fmt.Sprintf("[POST /iaas/api/cloud-accounts-azure/region-enumeration][%d] enumerateAzureRegionsAsyncBadRequest  %+v", 400, o.Payload)
}

func (o *EnumerateAzureRegionsAsyncBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *EnumerateAzureRegionsAsyncBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnumerateAzureRegionsAsyncForbidden creates a EnumerateAzureRegionsAsyncForbidden with default headers values
func NewEnumerateAzureRegionsAsyncForbidden() *EnumerateAzureRegionsAsyncForbidden {
	return &EnumerateAzureRegionsAsyncForbidden{}
}

/*
EnumerateAzureRegionsAsyncForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EnumerateAzureRegionsAsyncForbidden struct {
	Payload *models.ServiceErrorResponse
}

// IsSuccess returns true when this enumerate azure regions async forbidden response has a 2xx status code
func (o *EnumerateAzureRegionsAsyncForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enumerate azure regions async forbidden response has a 3xx status code
func (o *EnumerateAzureRegionsAsyncForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumerate azure regions async forbidden response has a 4xx status code
func (o *EnumerateAzureRegionsAsyncForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this enumerate azure regions async forbidden response has a 5xx status code
func (o *EnumerateAzureRegionsAsyncForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this enumerate azure regions async forbidden response a status code equal to that given
func (o *EnumerateAzureRegionsAsyncForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *EnumerateAzureRegionsAsyncForbidden) Error() string {
	return fmt.Sprintf("[POST /iaas/api/cloud-accounts-azure/region-enumeration][%d] enumerateAzureRegionsAsyncForbidden  %+v", 403, o.Payload)
}

func (o *EnumerateAzureRegionsAsyncForbidden) String() string {
	return fmt.Sprintf("[POST /iaas/api/cloud-accounts-azure/region-enumeration][%d] enumerateAzureRegionsAsyncForbidden  %+v", 403, o.Payload)
}

func (o *EnumerateAzureRegionsAsyncForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *EnumerateAzureRegionsAsyncForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
