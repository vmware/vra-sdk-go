// Code generated by go-swagger; DO NOT EDIT.

package cloud_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// DeleteCloudAccountNsxTReader is a Reader for the DeleteCloudAccountNsxT structure.
type DeleteCloudAccountNsxTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteCloudAccountNsxTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewDeleteCloudAccountNsxTAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteCloudAccountNsxTNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteCloudAccountNsxTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteCloudAccountNsxTAccepted creates a DeleteCloudAccountNsxTAccepted with default headers values
func NewDeleteCloudAccountNsxTAccepted() *DeleteCloudAccountNsxTAccepted {
	return &DeleteCloudAccountNsxTAccepted{}
}

/* DeleteCloudAccountNsxTAccepted describes a response with status code 202, with default header values.

successful operation
*/
type DeleteCloudAccountNsxTAccepted struct {
	Payload *models.RequestTracker
}

func (o *DeleteCloudAccountNsxTAccepted) Error() string {
	return fmt.Sprintf("[DELETE /iaas/api/cloud-accounts-nsx-t/{id}][%d] deleteCloudAccountNsxTAccepted  %+v", 202, o.Payload)
}
func (o *DeleteCloudAccountNsxTAccepted) GetPayload() *models.RequestTracker {
	return o.Payload
}

func (o *DeleteCloudAccountNsxTAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestTracker)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCloudAccountNsxTNoContent creates a DeleteCloudAccountNsxTNoContent with default headers values
func NewDeleteCloudAccountNsxTNoContent() *DeleteCloudAccountNsxTNoContent {
	return &DeleteCloudAccountNsxTNoContent{}
}

/* DeleteCloudAccountNsxTNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteCloudAccountNsxTNoContent struct {
}

func (o *DeleteCloudAccountNsxTNoContent) Error() string {
	return fmt.Sprintf("[DELETE /iaas/api/cloud-accounts-nsx-t/{id}][%d] deleteCloudAccountNsxTNoContent ", 204)
}

func (o *DeleteCloudAccountNsxTNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteCloudAccountNsxTForbidden creates a DeleteCloudAccountNsxTForbidden with default headers values
func NewDeleteCloudAccountNsxTForbidden() *DeleteCloudAccountNsxTForbidden {
	return &DeleteCloudAccountNsxTForbidden{}
}

/* DeleteCloudAccountNsxTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteCloudAccountNsxTForbidden struct {
	Payload *models.ServiceErrorResponse
}

func (o *DeleteCloudAccountNsxTForbidden) Error() string {
	return fmt.Sprintf("[DELETE /iaas/api/cloud-accounts-nsx-t/{id}][%d] deleteCloudAccountNsxTForbidden  %+v", 403, o.Payload)
}
func (o *DeleteCloudAccountNsxTForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *DeleteCloudAccountNsxTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
