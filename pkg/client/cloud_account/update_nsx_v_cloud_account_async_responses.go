// Code generated by go-swagger; DO NOT EDIT.

package cloud_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateNsxVCloudAccountAsyncReader is a Reader for the UpdateNsxVCloudAccountAsync structure.
type UpdateNsxVCloudAccountAsyncReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNsxVCloudAccountAsyncReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewUpdateNsxVCloudAccountAsyncAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateNsxVCloudAccountAsyncForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateNsxVCloudAccountAsyncNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNsxVCloudAccountAsyncAccepted creates a UpdateNsxVCloudAccountAsyncAccepted with default headers values
func NewUpdateNsxVCloudAccountAsyncAccepted() *UpdateNsxVCloudAccountAsyncAccepted {
	return &UpdateNsxVCloudAccountAsyncAccepted{}
}

/*
UpdateNsxVCloudAccountAsyncAccepted describes a response with status code 202, with default header values.

successful operation
*/
type UpdateNsxVCloudAccountAsyncAccepted struct {
	Payload *models.RequestTracker
}

// IsSuccess returns true when this update nsx v cloud account async accepted response has a 2xx status code
func (o *UpdateNsxVCloudAccountAsyncAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update nsx v cloud account async accepted response has a 3xx status code
func (o *UpdateNsxVCloudAccountAsyncAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update nsx v cloud account async accepted response has a 4xx status code
func (o *UpdateNsxVCloudAccountAsyncAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update nsx v cloud account async accepted response has a 5xx status code
func (o *UpdateNsxVCloudAccountAsyncAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update nsx v cloud account async accepted response a status code equal to that given
func (o *UpdateNsxVCloudAccountAsyncAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *UpdateNsxVCloudAccountAsyncAccepted) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/cloud-accounts-nsx-v/{id}][%d] updateNsxVCloudAccountAsyncAccepted  %+v", 202, o.Payload)
}

func (o *UpdateNsxVCloudAccountAsyncAccepted) String() string {
	return fmt.Sprintf("[PATCH /iaas/api/cloud-accounts-nsx-v/{id}][%d] updateNsxVCloudAccountAsyncAccepted  %+v", 202, o.Payload)
}

func (o *UpdateNsxVCloudAccountAsyncAccepted) GetPayload() *models.RequestTracker {
	return o.Payload
}

func (o *UpdateNsxVCloudAccountAsyncAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestTracker)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNsxVCloudAccountAsyncForbidden creates a UpdateNsxVCloudAccountAsyncForbidden with default headers values
func NewUpdateNsxVCloudAccountAsyncForbidden() *UpdateNsxVCloudAccountAsyncForbidden {
	return &UpdateNsxVCloudAccountAsyncForbidden{}
}

/*
UpdateNsxVCloudAccountAsyncForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateNsxVCloudAccountAsyncForbidden struct {
	Payload *models.ServiceErrorResponse
}

// IsSuccess returns true when this update nsx v cloud account async forbidden response has a 2xx status code
func (o *UpdateNsxVCloudAccountAsyncForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update nsx v cloud account async forbidden response has a 3xx status code
func (o *UpdateNsxVCloudAccountAsyncForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update nsx v cloud account async forbidden response has a 4xx status code
func (o *UpdateNsxVCloudAccountAsyncForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update nsx v cloud account async forbidden response has a 5xx status code
func (o *UpdateNsxVCloudAccountAsyncForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update nsx v cloud account async forbidden response a status code equal to that given
func (o *UpdateNsxVCloudAccountAsyncForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateNsxVCloudAccountAsyncForbidden) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/cloud-accounts-nsx-v/{id}][%d] updateNsxVCloudAccountAsyncForbidden  %+v", 403, o.Payload)
}

func (o *UpdateNsxVCloudAccountAsyncForbidden) String() string {
	return fmt.Sprintf("[PATCH /iaas/api/cloud-accounts-nsx-v/{id}][%d] updateNsxVCloudAccountAsyncForbidden  %+v", 403, o.Payload)
}

func (o *UpdateNsxVCloudAccountAsyncForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *UpdateNsxVCloudAccountAsyncForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNsxVCloudAccountAsyncNotFound creates a UpdateNsxVCloudAccountAsyncNotFound with default headers values
func NewUpdateNsxVCloudAccountAsyncNotFound() *UpdateNsxVCloudAccountAsyncNotFound {
	return &UpdateNsxVCloudAccountAsyncNotFound{}
}

/*
UpdateNsxVCloudAccountAsyncNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateNsxVCloudAccountAsyncNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update nsx v cloud account async not found response has a 2xx status code
func (o *UpdateNsxVCloudAccountAsyncNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update nsx v cloud account async not found response has a 3xx status code
func (o *UpdateNsxVCloudAccountAsyncNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update nsx v cloud account async not found response has a 4xx status code
func (o *UpdateNsxVCloudAccountAsyncNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update nsx v cloud account async not found response has a 5xx status code
func (o *UpdateNsxVCloudAccountAsyncNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update nsx v cloud account async not found response a status code equal to that given
func (o *UpdateNsxVCloudAccountAsyncNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateNsxVCloudAccountAsyncNotFound) Error() string {
	return fmt.Sprintf("[PATCH /iaas/api/cloud-accounts-nsx-v/{id}][%d] updateNsxVCloudAccountAsyncNotFound  %+v", 404, o.Payload)
}

func (o *UpdateNsxVCloudAccountAsyncNotFound) String() string {
	return fmt.Sprintf("[PATCH /iaas/api/cloud-accounts-nsx-v/{id}][%d] updateNsxVCloudAccountAsyncNotFound  %+v", 404, o.Payload)
}

func (o *UpdateNsxVCloudAccountAsyncNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateNsxVCloudAccountAsyncNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
