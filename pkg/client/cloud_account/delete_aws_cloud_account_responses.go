// Code generated by go-swagger; DO NOT EDIT.

package cloud_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// DeleteAwsCloudAccountReader is a Reader for the DeleteAwsCloudAccount structure.
type DeleteAwsCloudAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAwsCloudAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewDeleteAwsCloudAccountAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteAwsCloudAccountNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteAwsCloudAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteAwsCloudAccountAccepted creates a DeleteAwsCloudAccountAccepted with default headers values
func NewDeleteAwsCloudAccountAccepted() *DeleteAwsCloudAccountAccepted {
	return &DeleteAwsCloudAccountAccepted{}
}

/* DeleteAwsCloudAccountAccepted describes a response with status code 202, with default header values.

successful operation
*/
type DeleteAwsCloudAccountAccepted struct {
	Payload *models.RequestTracker
}

func (o *DeleteAwsCloudAccountAccepted) Error() string {
	return fmt.Sprintf("[DELETE /iaas/api/cloud-accounts-aws/{id}][%d] deleteAwsCloudAccountAccepted  %+v", 202, o.Payload)
}
func (o *DeleteAwsCloudAccountAccepted) GetPayload() *models.RequestTracker {
	return o.Payload
}

func (o *DeleteAwsCloudAccountAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestTracker)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAwsCloudAccountNoContent creates a DeleteAwsCloudAccountNoContent with default headers values
func NewDeleteAwsCloudAccountNoContent() *DeleteAwsCloudAccountNoContent {
	return &DeleteAwsCloudAccountNoContent{}
}

/* DeleteAwsCloudAccountNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteAwsCloudAccountNoContent struct {
}

func (o *DeleteAwsCloudAccountNoContent) Error() string {
	return fmt.Sprintf("[DELETE /iaas/api/cloud-accounts-aws/{id}][%d] deleteAwsCloudAccountNoContent ", 204)
}

func (o *DeleteAwsCloudAccountNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAwsCloudAccountForbidden creates a DeleteAwsCloudAccountForbidden with default headers values
func NewDeleteAwsCloudAccountForbidden() *DeleteAwsCloudAccountForbidden {
	return &DeleteAwsCloudAccountForbidden{}
}

/* DeleteAwsCloudAccountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteAwsCloudAccountForbidden struct {
	Payload *models.ServiceErrorResponse
}

func (o *DeleteAwsCloudAccountForbidden) Error() string {
	return fmt.Sprintf("[DELETE /iaas/api/cloud-accounts-aws/{id}][%d] deleteAwsCloudAccountForbidden  %+v", 403, o.Payload)
}
func (o *DeleteAwsCloudAccountForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *DeleteAwsCloudAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
