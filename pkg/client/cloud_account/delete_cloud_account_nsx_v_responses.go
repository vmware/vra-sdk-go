// Code generated by go-swagger; DO NOT EDIT.

package cloud_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// DeleteCloudAccountNsxVReader is a Reader for the DeleteCloudAccountNsxV structure.
type DeleteCloudAccountNsxVReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteCloudAccountNsxVReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewDeleteCloudAccountNsxVAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteCloudAccountNsxVNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteCloudAccountNsxVForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteCloudAccountNsxVAccepted creates a DeleteCloudAccountNsxVAccepted with default headers values
func NewDeleteCloudAccountNsxVAccepted() *DeleteCloudAccountNsxVAccepted {
	return &DeleteCloudAccountNsxVAccepted{}
}

/* DeleteCloudAccountNsxVAccepted describes a response with status code 202, with default header values.

successful operation
*/
type DeleteCloudAccountNsxVAccepted struct {
	Payload *models.RequestTracker
}

func (o *DeleteCloudAccountNsxVAccepted) Error() string {
	return fmt.Sprintf("[DELETE /iaas/api/cloud-accounts-nsx-v/{id}][%d] deleteCloudAccountNsxVAccepted  %+v", 202, o.Payload)
}
func (o *DeleteCloudAccountNsxVAccepted) GetPayload() *models.RequestTracker {
	return o.Payload
}

func (o *DeleteCloudAccountNsxVAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestTracker)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCloudAccountNsxVNoContent creates a DeleteCloudAccountNsxVNoContent with default headers values
func NewDeleteCloudAccountNsxVNoContent() *DeleteCloudAccountNsxVNoContent {
	return &DeleteCloudAccountNsxVNoContent{}
}

/* DeleteCloudAccountNsxVNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteCloudAccountNsxVNoContent struct {
}

func (o *DeleteCloudAccountNsxVNoContent) Error() string {
	return fmt.Sprintf("[DELETE /iaas/api/cloud-accounts-nsx-v/{id}][%d] deleteCloudAccountNsxVNoContent ", 204)
}

func (o *DeleteCloudAccountNsxVNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteCloudAccountNsxVForbidden creates a DeleteCloudAccountNsxVForbidden with default headers values
func NewDeleteCloudAccountNsxVForbidden() *DeleteCloudAccountNsxVForbidden {
	return &DeleteCloudAccountNsxVForbidden{}
}

/* DeleteCloudAccountNsxVForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteCloudAccountNsxVForbidden struct {
	Payload *models.ServiceErrorResponse
}

func (o *DeleteCloudAccountNsxVForbidden) Error() string {
	return fmt.Sprintf("[DELETE /iaas/api/cloud-accounts-nsx-v/{id}][%d] deleteCloudAccountNsxVForbidden  %+v", 403, o.Payload)
}
func (o *DeleteCloudAccountNsxVForbidden) GetPayload() *models.ServiceErrorResponse {
	return o.Payload
}

func (o *DeleteCloudAccountNsxVForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
