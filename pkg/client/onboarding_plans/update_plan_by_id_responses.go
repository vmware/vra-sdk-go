// Code generated by go-swagger; DO NOT EDIT.

package onboarding_plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdatePlanByIDReader is a Reader for the UpdatePlanByID structure.
type UpdatePlanByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePlanByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePlanByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdatePlanByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdatePlanByIDOK creates a UpdatePlanByIDOK with default headers values
func NewUpdatePlanByIDOK() *UpdatePlanByIDOK {
	return &UpdatePlanByIDOK{}
}

/*
UpdatePlanByIDOK describes a response with status code 200, with default header values.

Success
*/
type UpdatePlanByIDOK struct {
}

// IsSuccess returns true when this update plan by Id o k response has a 2xx status code
func (o *UpdatePlanByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update plan by Id o k response has a 3xx status code
func (o *UpdatePlanByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update plan by Id o k response has a 4xx status code
func (o *UpdatePlanByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update plan by Id o k response has a 5xx status code
func (o *UpdatePlanByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update plan by Id o k response a status code equal to that given
func (o *UpdatePlanByIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdatePlanByIDOK) Error() string {
	return fmt.Sprintf("[PATCH /relocation/onboarding/plan/{id}][%d] updatePlanByIdOK ", 200)
}

func (o *UpdatePlanByIDOK) String() string {
	return fmt.Sprintf("[PATCH /relocation/onboarding/plan/{id}][%d] updatePlanByIdOK ", 200)
}

func (o *UpdatePlanByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePlanByIDUnauthorized creates a UpdatePlanByIDUnauthorized with default headers values
func NewUpdatePlanByIDUnauthorized() *UpdatePlanByIDUnauthorized {
	return &UpdatePlanByIDUnauthorized{}
}

/*
UpdatePlanByIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdatePlanByIDUnauthorized struct {
}

// IsSuccess returns true when this update plan by Id unauthorized response has a 2xx status code
func (o *UpdatePlanByIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update plan by Id unauthorized response has a 3xx status code
func (o *UpdatePlanByIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update plan by Id unauthorized response has a 4xx status code
func (o *UpdatePlanByIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update plan by Id unauthorized response has a 5xx status code
func (o *UpdatePlanByIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update plan by Id unauthorized response a status code equal to that given
func (o *UpdatePlanByIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdatePlanByIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /relocation/onboarding/plan/{id}][%d] updatePlanByIdUnauthorized ", 401)
}

func (o *UpdatePlanByIDUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /relocation/onboarding/plan/{id}][%d] updatePlanByIdUnauthorized ", 401)
}

func (o *UpdatePlanByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
