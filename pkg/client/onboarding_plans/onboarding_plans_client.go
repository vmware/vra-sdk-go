// Code generated by go-swagger; DO NOT EDIT.

package onboarding_plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new onboarding plans API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for onboarding plans API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePlan(params *CreatePlanParams, opts ...ClientOption) (*CreatePlanOK, error)

	DeletePlanByID(params *DeletePlanByIDParams, opts ...ClientOption) (*DeletePlanByIDOK, error)

	GetPlanByID(params *GetPlanByIDParams, opts ...ClientOption) (*GetPlanByIDOK, error)

	QueryPlans(params *QueryPlansParams, opts ...ClientOption) (*QueryPlansOK, error)

	UpdatePlanByID(params *UpdatePlanByIDParams, opts ...ClientOption) (*UpdatePlanByIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreatePlan creates an onboarding plan
*/
func (a *Client) CreatePlan(params *CreatePlanParams, opts ...ClientOption) (*CreatePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPlan",
		Method:             "POST",
		PathPattern:        "/relocation/onboarding/plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePlanByID deletes the selected onboarding plan
*/
func (a *Client) DeletePlanByID(params *DeletePlanByIDParams, opts ...ClientOption) (*DeletePlanByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePlanByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePlanById",
		Method:             "DELETE",
		PathPattern:        "/relocation/onboarding/plan/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePlanByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePlanByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePlanById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPlanByID gets the selected onboarding plan
*/
func (a *Client) GetPlanByID(params *GetPlanByIDParams, opts ...ClientOption) (*GetPlanByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlanByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPlanById",
		Method:             "GET",
		PathPattern:        "/relocation/onboarding/plan/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPlanByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlanByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPlanById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryPlans queries for onboarding plans
*/
func (a *Client) QueryPlans(params *QueryPlansParams, opts ...ClientOption) (*QueryPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryPlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "queryPlans",
		Method:             "GET",
		PathPattern:        "/relocation/onboarding/plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryPlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queryPlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePlanByID updates the selected onboarding plan
*/
func (a *Client) UpdatePlanByID(params *UpdatePlanByIDParams, opts ...ClientOption) (*UpdatePlanByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePlanByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePlanById",
		Method:             "PATCH",
		PathPattern:        "/relocation/onboarding/plan/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePlanByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePlanByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePlanById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
