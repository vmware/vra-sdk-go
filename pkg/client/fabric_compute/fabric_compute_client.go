// Code generated by go-swagger; DO NOT EDIT.

package fabric_compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new fabric compute API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fabric compute API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetFabricCompute(params *GetFabricComputeParams, opts ...ClientOption) (*GetFabricComputeOK, error)

	GetFabricComputes(params *GetFabricComputesParams, opts ...ClientOption) (*GetFabricComputesOK, error)

	UpdateFabricCompute(params *UpdateFabricComputeParams, opts ...ClientOption) (*UpdateFabricComputeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetFabricCompute gets fabric compute

Get fabric compute with a given id
*/
func (a *Client) GetFabricCompute(params *GetFabricComputeParams, opts ...ClientOption) (*GetFabricComputeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFabricComputeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricCompute",
		Method:             "GET",
		PathPattern:        "/iaas/api/fabric-computes/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFabricComputeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFabricComputeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricCompute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFabricComputes gets fabric computes

Get all fabric computes.
*/
func (a *Client) GetFabricComputes(params *GetFabricComputesParams, opts ...ClientOption) (*GetFabricComputesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFabricComputesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricComputes",
		Method:             "GET",
		PathPattern:        "/iaas/api/fabric-computes",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFabricComputesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFabricComputesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricComputes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateFabricCompute updates fabric compute

Update fabric compute. Only tag updates are supported.
*/
func (a *Client) UpdateFabricCompute(params *UpdateFabricComputeParams, opts ...ClientOption) (*UpdateFabricComputeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFabricComputeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFabricCompute",
		Method:             "PATCH",
		PathPattern:        "/iaas/api/fabric-computes/{id}",
		ProducesMediaTypes: []string{"app/json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateFabricComputeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFabricComputeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateFabricCompute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
