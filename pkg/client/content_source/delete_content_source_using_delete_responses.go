// Code generated by go-swagger; DO NOT EDIT.

package content_source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// DeleteContentSourceUsingDELETEReader is a Reader for the DeleteContentSourceUsingDELETE structure.
type DeleteContentSourceUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteContentSourceUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteContentSourceUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteContentSourceUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteContentSourceUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteContentSourceUsingDELETENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteContentSourceUsingDELETENoContent creates a DeleteContentSourceUsingDELETENoContent with default headers values
func NewDeleteContentSourceUsingDELETENoContent() *DeleteContentSourceUsingDELETENoContent {
	return &DeleteContentSourceUsingDELETENoContent{}
}

/*
DeleteContentSourceUsingDELETENoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteContentSourceUsingDELETENoContent struct {
}

// IsSuccess returns true when this delete content source using d e l e t e no content response has a 2xx status code
func (o *DeleteContentSourceUsingDELETENoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete content source using d e l e t e no content response has a 3xx status code
func (o *DeleteContentSourceUsingDELETENoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content source using d e l e t e no content response has a 4xx status code
func (o *DeleteContentSourceUsingDELETENoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete content source using d e l e t e no content response has a 5xx status code
func (o *DeleteContentSourceUsingDELETENoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content source using d e l e t e no content response a status code equal to that given
func (o *DeleteContentSourceUsingDELETENoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeleteContentSourceUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /content/api/sources/{id}][%d] deleteContentSourceUsingDELETENoContent ", 204)
}

func (o *DeleteContentSourceUsingDELETENoContent) String() string {
	return fmt.Sprintf("[DELETE /content/api/sources/{id}][%d] deleteContentSourceUsingDELETENoContent ", 204)
}

func (o *DeleteContentSourceUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteContentSourceUsingDELETEUnauthorized creates a DeleteContentSourceUsingDELETEUnauthorized with default headers values
func NewDeleteContentSourceUsingDELETEUnauthorized() *DeleteContentSourceUsingDELETEUnauthorized {
	return &DeleteContentSourceUsingDELETEUnauthorized{}
}

/*
DeleteContentSourceUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteContentSourceUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete content source using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteContentSourceUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content source using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteContentSourceUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content source using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteContentSourceUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete content source using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteContentSourceUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content source using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteContentSourceUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteContentSourceUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /content/api/sources/{id}][%d] deleteContentSourceUsingDELETEUnauthorized ", 401)
}

func (o *DeleteContentSourceUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /content/api/sources/{id}][%d] deleteContentSourceUsingDELETEUnauthorized ", 401)
}

func (o *DeleteContentSourceUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteContentSourceUsingDELETEForbidden creates a DeleteContentSourceUsingDELETEForbidden with default headers values
func NewDeleteContentSourceUsingDELETEForbidden() *DeleteContentSourceUsingDELETEForbidden {
	return &DeleteContentSourceUsingDELETEForbidden{}
}

/*
DeleteContentSourceUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteContentSourceUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete content source using d e l e t e forbidden response has a 2xx status code
func (o *DeleteContentSourceUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content source using d e l e t e forbidden response has a 3xx status code
func (o *DeleteContentSourceUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content source using d e l e t e forbidden response has a 4xx status code
func (o *DeleteContentSourceUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete content source using d e l e t e forbidden response has a 5xx status code
func (o *DeleteContentSourceUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content source using d e l e t e forbidden response a status code equal to that given
func (o *DeleteContentSourceUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteContentSourceUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /content/api/sources/{id}][%d] deleteContentSourceUsingDELETEForbidden ", 403)
}

func (o *DeleteContentSourceUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /content/api/sources/{id}][%d] deleteContentSourceUsingDELETEForbidden ", 403)
}

func (o *DeleteContentSourceUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteContentSourceUsingDELETENotFound creates a DeleteContentSourceUsingDELETENotFound with default headers values
func NewDeleteContentSourceUsingDELETENotFound() *DeleteContentSourceUsingDELETENotFound {
	return &DeleteContentSourceUsingDELETENotFound{}
}

/*
DeleteContentSourceUsingDELETENotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteContentSourceUsingDELETENotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete content source using d e l e t e not found response has a 2xx status code
func (o *DeleteContentSourceUsingDELETENotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content source using d e l e t e not found response has a 3xx status code
func (o *DeleteContentSourceUsingDELETENotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content source using d e l e t e not found response has a 4xx status code
func (o *DeleteContentSourceUsingDELETENotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete content source using d e l e t e not found response has a 5xx status code
func (o *DeleteContentSourceUsingDELETENotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content source using d e l e t e not found response a status code equal to that given
func (o *DeleteContentSourceUsingDELETENotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteContentSourceUsingDELETENotFound) Error() string {
	return fmt.Sprintf("[DELETE /content/api/sources/{id}][%d] deleteContentSourceUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeleteContentSourceUsingDELETENotFound) String() string {
	return fmt.Sprintf("[DELETE /content/api/sources/{id}][%d] deleteContentSourceUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeleteContentSourceUsingDELETENotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteContentSourceUsingDELETENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
