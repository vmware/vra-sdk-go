// Code generated by go-swagger; DO NOT EDIT.

package content_source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetContentSourceUsingGETReader is a Reader for the GetContentSourceUsingGET structure.
type GetContentSourceUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetContentSourceUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetContentSourceUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetContentSourceUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetContentSourceUsingGETOK creates a GetContentSourceUsingGETOK with default headers values
func NewGetContentSourceUsingGETOK() *GetContentSourceUsingGETOK {
	return &GetContentSourceUsingGETOK{}
}

/*GetContentSourceUsingGETOK handles this case with default header values.

Content source
*/
type GetContentSourceUsingGETOK struct {
	Payload *models.ContentSource
}

func (o *GetContentSourceUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /content/api/sources/{id}][%d] getContentSourceUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetContentSourceUsingGETOK) GetPayload() *models.ContentSource {
	return o.Payload
}

func (o *GetContentSourceUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ContentSource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentSourceUsingGETNotFound creates a GetContentSourceUsingGETNotFound with default headers values
func NewGetContentSourceUsingGETNotFound() *GetContentSourceUsingGETNotFound {
	return &GetContentSourceUsingGETNotFound{}
}

/*GetContentSourceUsingGETNotFound handles this case with default header values.

Content source not found
*/
type GetContentSourceUsingGETNotFound struct {
}

func (o *GetContentSourceUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /content/api/sources/{id}][%d] getContentSourceUsingGETNotFound ", 404)
}

func (o *GetContentSourceUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
