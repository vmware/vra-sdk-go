// Code generated by go-swagger; DO NOT EDIT.

package content_source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetContentSourcesUsingGETParams creates a new GetContentSourcesUsingGETParams object
// with the default values initialized.
func NewGetContentSourcesUsingGETParams() *GetContentSourcesUsingGETParams {
	var ()
	return &GetContentSourcesUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetContentSourcesUsingGETParamsWithTimeout creates a new GetContentSourcesUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetContentSourcesUsingGETParamsWithTimeout(timeout time.Duration) *GetContentSourcesUsingGETParams {
	var ()
	return &GetContentSourcesUsingGETParams{

		timeout: timeout,
	}
}

// NewGetContentSourcesUsingGETParamsWithContext creates a new GetContentSourcesUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetContentSourcesUsingGETParamsWithContext(ctx context.Context) *GetContentSourcesUsingGETParams {
	var ()
	return &GetContentSourcesUsingGETParams{

		Context: ctx,
	}
}

// NewGetContentSourcesUsingGETParamsWithHTTPClient creates a new GetContentSourcesUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetContentSourcesUsingGETParamsWithHTTPClient(client *http.Client) *GetContentSourcesUsingGETParams {
	var ()
	return &GetContentSourcesUsingGETParams{
		HTTPClient: client,
	}
}

/*GetContentSourcesUsingGETParams contains all the parameters to send to the API endpoint
for the get content sources using g e t operation typically these are written to a http.Request
*/
type GetContentSourcesUsingGETParams struct {

	/*APIVersion
	  The version of the API in yyyy-MM-dd format (UTC). For versioning information, please refer to /content/api/about

	*/
	APIVersion *string
	/*ContentType
	  Search based on Content Type

	*/
	ContentType *string
	/*IntegrationID
	  Search based on integrationId

	*/
	IntegrationID *string
	/*Name
	  Search based on Content Source name

	*/
	Name *string
	/*ProjectIds
	  Search based on associated projects

	*/
	ProjectIds []string
	/*SyncEnabled
	  Search based on whether sync is enabled or not

	*/
	SyncEnabled *bool
	/*TypeIds
	  Search based on Content Source Type Ids

	*/
	TypeIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) WithTimeout(timeout time.Duration) *GetContentSourcesUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) WithContext(ctx context.Context) *GetContentSourcesUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) WithHTTPClient(client *http.Client) *GetContentSourcesUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) WithAPIVersion(aPIVersion *string) *GetContentSourcesUsingGETParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithContentType adds the contentType to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) WithContentType(contentType *string) *GetContentSourcesUsingGETParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) SetContentType(contentType *string) {
	o.ContentType = contentType
}

// WithIntegrationID adds the integrationID to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) WithIntegrationID(integrationID *string) *GetContentSourcesUsingGETParams {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) SetIntegrationID(integrationID *string) {
	o.IntegrationID = integrationID
}

// WithName adds the name to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) WithName(name *string) *GetContentSourcesUsingGETParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) SetName(name *string) {
	o.Name = name
}

// WithProjectIds adds the projectIds to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) WithProjectIds(projectIds []string) *GetContentSourcesUsingGETParams {
	o.SetProjectIds(projectIds)
	return o
}

// SetProjectIds adds the projectIds to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) SetProjectIds(projectIds []string) {
	o.ProjectIds = projectIds
}

// WithSyncEnabled adds the syncEnabled to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) WithSyncEnabled(syncEnabled *bool) *GetContentSourcesUsingGETParams {
	o.SetSyncEnabled(syncEnabled)
	return o
}

// SetSyncEnabled adds the syncEnabled to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) SetSyncEnabled(syncEnabled *bool) {
	o.SyncEnabled = syncEnabled
}

// WithTypeIds adds the typeIds to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) WithTypeIds(typeIds []string) *GetContentSourcesUsingGETParams {
	o.SetTypeIds(typeIds)
	return o
}

// SetTypeIds adds the typeIds to the get content sources using get params
func (o *GetContentSourcesUsingGETParams) SetTypeIds(typeIds []string) {
	o.TypeIds = typeIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetContentSourcesUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// query param apiVersion
		var qrAPIVersion string
		if o.APIVersion != nil {
			qrAPIVersion = *o.APIVersion
		}
		qAPIVersion := qrAPIVersion
		if qAPIVersion != "" {
			if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
				return err
			}
		}

	}

	if o.ContentType != nil {

		// query param contentType
		var qrContentType string
		if o.ContentType != nil {
			qrContentType = *o.ContentType
		}
		qContentType := qrContentType
		if qContentType != "" {
			if err := r.SetQueryParam("contentType", qContentType); err != nil {
				return err
			}
		}

	}

	if o.IntegrationID != nil {

		// query param integrationId
		var qrIntegrationID string
		if o.IntegrationID != nil {
			qrIntegrationID = *o.IntegrationID
		}
		qIntegrationID := qrIntegrationID
		if qIntegrationID != "" {
			if err := r.SetQueryParam("integrationId", qIntegrationID); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	valuesProjectIds := o.ProjectIds

	joinedProjectIds := swag.JoinByFormat(valuesProjectIds, "multi")
	// query array param projectIds
	if err := r.SetQueryParam("projectIds", joinedProjectIds...); err != nil {
		return err
	}

	if o.SyncEnabled != nil {

		// query param syncEnabled
		var qrSyncEnabled bool
		if o.SyncEnabled != nil {
			qrSyncEnabled = *o.SyncEnabled
		}
		qSyncEnabled := swag.FormatBool(qrSyncEnabled)
		if qSyncEnabled != "" {
			if err := r.SetQueryParam("syncEnabled", qSyncEnabled); err != nil {
				return err
			}
		}

	}

	valuesTypeIds := o.TypeIds

	joinedTypeIds := swag.JoinByFormat(valuesTypeIds, "multi")
	// query array param typeIds
	if err := r.SetQueryParam("typeIds", joinedTypeIds...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
