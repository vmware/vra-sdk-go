// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// DryRunPolicyUsingPOST2Reader is a Reader for the DryRunPolicyUsingPOST2 structure.
type DryRunPolicyUsingPOST2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DryRunPolicyUsingPOST2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDryRunPolicyUsingPOST2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewDryRunPolicyUsingPOST2Accepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDryRunPolicyUsingPOST2BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDryRunPolicyUsingPOST2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDryRunPolicyUsingPOST2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDryRunPolicyUsingPOST2OK creates a DryRunPolicyUsingPOST2OK with default headers values
func NewDryRunPolicyUsingPOST2OK() *DryRunPolicyUsingPOST2OK {
	return &DryRunPolicyUsingPOST2OK{}
}

/*
DryRunPolicyUsingPOST2OK describes a response with status code 200, with default header values.

OK
*/
type DryRunPolicyUsingPOST2OK struct {
}

// IsSuccess returns true when this dry run policy using p o s t2 o k response has a 2xx status code
func (o *DryRunPolicyUsingPOST2OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this dry run policy using p o s t2 o k response has a 3xx status code
func (o *DryRunPolicyUsingPOST2OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this dry run policy using p o s t2 o k response has a 4xx status code
func (o *DryRunPolicyUsingPOST2OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this dry run policy using p o s t2 o k response has a 5xx status code
func (o *DryRunPolicyUsingPOST2OK) IsServerError() bool {
	return false
}

// IsCode returns true when this dry run policy using p o s t2 o k response a status code equal to that given
func (o *DryRunPolicyUsingPOST2OK) IsCode(code int) bool {
	return code == 200
}

func (o *DryRunPolicyUsingPOST2OK) Error() string {
	return fmt.Sprintf("[POST /policy/api/policies][%d] dryRunPolicyUsingPOST2OK ", 200)
}

func (o *DryRunPolicyUsingPOST2OK) String() string {
	return fmt.Sprintf("[POST /policy/api/policies][%d] dryRunPolicyUsingPOST2OK ", 200)
}

func (o *DryRunPolicyUsingPOST2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDryRunPolicyUsingPOST2Accepted creates a DryRunPolicyUsingPOST2Accepted with default headers values
func NewDryRunPolicyUsingPOST2Accepted() *DryRunPolicyUsingPOST2Accepted {
	return &DryRunPolicyUsingPOST2Accepted{}
}

/*
DryRunPolicyUsingPOST2Accepted describes a response with status code 202, with default header values.

Accepted
*/
type DryRunPolicyUsingPOST2Accepted struct {
}

// IsSuccess returns true when this dry run policy using p o s t2 accepted response has a 2xx status code
func (o *DryRunPolicyUsingPOST2Accepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this dry run policy using p o s t2 accepted response has a 3xx status code
func (o *DryRunPolicyUsingPOST2Accepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this dry run policy using p o s t2 accepted response has a 4xx status code
func (o *DryRunPolicyUsingPOST2Accepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this dry run policy using p o s t2 accepted response has a 5xx status code
func (o *DryRunPolicyUsingPOST2Accepted) IsServerError() bool {
	return false
}

// IsCode returns true when this dry run policy using p o s t2 accepted response a status code equal to that given
func (o *DryRunPolicyUsingPOST2Accepted) IsCode(code int) bool {
	return code == 202
}

func (o *DryRunPolicyUsingPOST2Accepted) Error() string {
	return fmt.Sprintf("[POST /policy/api/policies][%d] dryRunPolicyUsingPOST2Accepted ", 202)
}

func (o *DryRunPolicyUsingPOST2Accepted) String() string {
	return fmt.Sprintf("[POST /policy/api/policies][%d] dryRunPolicyUsingPOST2Accepted ", 202)
}

func (o *DryRunPolicyUsingPOST2Accepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDryRunPolicyUsingPOST2BadRequest creates a DryRunPolicyUsingPOST2BadRequest with default headers values
func NewDryRunPolicyUsingPOST2BadRequest() *DryRunPolicyUsingPOST2BadRequest {
	return &DryRunPolicyUsingPOST2BadRequest{}
}

/*
DryRunPolicyUsingPOST2BadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DryRunPolicyUsingPOST2BadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this dry run policy using p o s t2 bad request response has a 2xx status code
func (o *DryRunPolicyUsingPOST2BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this dry run policy using p o s t2 bad request response has a 3xx status code
func (o *DryRunPolicyUsingPOST2BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this dry run policy using p o s t2 bad request response has a 4xx status code
func (o *DryRunPolicyUsingPOST2BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this dry run policy using p o s t2 bad request response has a 5xx status code
func (o *DryRunPolicyUsingPOST2BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this dry run policy using p o s t2 bad request response a status code equal to that given
func (o *DryRunPolicyUsingPOST2BadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DryRunPolicyUsingPOST2BadRequest) Error() string {
	return fmt.Sprintf("[POST /policy/api/policies][%d] dryRunPolicyUsingPOST2BadRequest  %+v", 400, o.Payload)
}

func (o *DryRunPolicyUsingPOST2BadRequest) String() string {
	return fmt.Sprintf("[POST /policy/api/policies][%d] dryRunPolicyUsingPOST2BadRequest  %+v", 400, o.Payload)
}

func (o *DryRunPolicyUsingPOST2BadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DryRunPolicyUsingPOST2BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDryRunPolicyUsingPOST2Unauthorized creates a DryRunPolicyUsingPOST2Unauthorized with default headers values
func NewDryRunPolicyUsingPOST2Unauthorized() *DryRunPolicyUsingPOST2Unauthorized {
	return &DryRunPolicyUsingPOST2Unauthorized{}
}

/*
DryRunPolicyUsingPOST2Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DryRunPolicyUsingPOST2Unauthorized struct {
}

// IsSuccess returns true when this dry run policy using p o s t2 unauthorized response has a 2xx status code
func (o *DryRunPolicyUsingPOST2Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this dry run policy using p o s t2 unauthorized response has a 3xx status code
func (o *DryRunPolicyUsingPOST2Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this dry run policy using p o s t2 unauthorized response has a 4xx status code
func (o *DryRunPolicyUsingPOST2Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this dry run policy using p o s t2 unauthorized response has a 5xx status code
func (o *DryRunPolicyUsingPOST2Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this dry run policy using p o s t2 unauthorized response a status code equal to that given
func (o *DryRunPolicyUsingPOST2Unauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DryRunPolicyUsingPOST2Unauthorized) Error() string {
	return fmt.Sprintf("[POST /policy/api/policies][%d] dryRunPolicyUsingPOST2Unauthorized ", 401)
}

func (o *DryRunPolicyUsingPOST2Unauthorized) String() string {
	return fmt.Sprintf("[POST /policy/api/policies][%d] dryRunPolicyUsingPOST2Unauthorized ", 401)
}

func (o *DryRunPolicyUsingPOST2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDryRunPolicyUsingPOST2Forbidden creates a DryRunPolicyUsingPOST2Forbidden with default headers values
func NewDryRunPolicyUsingPOST2Forbidden() *DryRunPolicyUsingPOST2Forbidden {
	return &DryRunPolicyUsingPOST2Forbidden{}
}

/*
DryRunPolicyUsingPOST2Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DryRunPolicyUsingPOST2Forbidden struct {
}

// IsSuccess returns true when this dry run policy using p o s t2 forbidden response has a 2xx status code
func (o *DryRunPolicyUsingPOST2Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this dry run policy using p o s t2 forbidden response has a 3xx status code
func (o *DryRunPolicyUsingPOST2Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this dry run policy using p o s t2 forbidden response has a 4xx status code
func (o *DryRunPolicyUsingPOST2Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this dry run policy using p o s t2 forbidden response has a 5xx status code
func (o *DryRunPolicyUsingPOST2Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this dry run policy using p o s t2 forbidden response a status code equal to that given
func (o *DryRunPolicyUsingPOST2Forbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DryRunPolicyUsingPOST2Forbidden) Error() string {
	return fmt.Sprintf("[POST /policy/api/policies][%d] dryRunPolicyUsingPOST2Forbidden ", 403)
}

func (o *DryRunPolicyUsingPOST2Forbidden) String() string {
	return fmt.Sprintf("[POST /policy/api/policies][%d] dryRunPolicyUsingPOST2Forbidden ", 403)
}

func (o *DryRunPolicyUsingPOST2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
