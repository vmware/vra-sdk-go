// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPolicyUsingGET1Params creates a new GetPolicyUsingGET1Params object
// with the default values initialized.
func NewGetPolicyUsingGET1Params() *GetPolicyUsingGET1Params {
	var ()
	return &GetPolicyUsingGET1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPolicyUsingGET1ParamsWithTimeout creates a new GetPolicyUsingGET1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPolicyUsingGET1ParamsWithTimeout(timeout time.Duration) *GetPolicyUsingGET1Params {
	var ()
	return &GetPolicyUsingGET1Params{

		timeout: timeout,
	}
}

// NewGetPolicyUsingGET1ParamsWithContext creates a new GetPolicyUsingGET1Params object
// with the default values initialized, and the ability to set a context for a request
func NewGetPolicyUsingGET1ParamsWithContext(ctx context.Context) *GetPolicyUsingGET1Params {
	var ()
	return &GetPolicyUsingGET1Params{

		Context: ctx,
	}
}

// NewGetPolicyUsingGET1ParamsWithHTTPClient creates a new GetPolicyUsingGET1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPolicyUsingGET1ParamsWithHTTPClient(client *http.Client) *GetPolicyUsingGET1Params {
	var ()
	return &GetPolicyUsingGET1Params{
		HTTPClient: client,
	}
}

/*GetPolicyUsingGET1Params contains all the parameters to send to the API endpoint
for the get policy using get1 operation typically these are written to a http.Request
*/
type GetPolicyUsingGET1Params struct {

	/*ComputeStats
	  computeStats

	*/
	ComputeStats *bool
	/*ID
	  Policy ID

	*/
	ID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get policy using get1 params
func (o *GetPolicyUsingGET1Params) WithTimeout(timeout time.Duration) *GetPolicyUsingGET1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get policy using get1 params
func (o *GetPolicyUsingGET1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get policy using get1 params
func (o *GetPolicyUsingGET1Params) WithContext(ctx context.Context) *GetPolicyUsingGET1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get policy using get1 params
func (o *GetPolicyUsingGET1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get policy using get1 params
func (o *GetPolicyUsingGET1Params) WithHTTPClient(client *http.Client) *GetPolicyUsingGET1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get policy using get1 params
func (o *GetPolicyUsingGET1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComputeStats adds the computeStats to the get policy using get1 params
func (o *GetPolicyUsingGET1Params) WithComputeStats(computeStats *bool) *GetPolicyUsingGET1Params {
	o.SetComputeStats(computeStats)
	return o
}

// SetComputeStats adds the computeStats to the get policy using get1 params
func (o *GetPolicyUsingGET1Params) SetComputeStats(computeStats *bool) {
	o.ComputeStats = computeStats
}

// WithID adds the id to the get policy using get1 params
func (o *GetPolicyUsingGET1Params) WithID(id strfmt.UUID) *GetPolicyUsingGET1Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the get policy using get1 params
func (o *GetPolicyUsingGET1Params) SetID(id strfmt.UUID) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *GetPolicyUsingGET1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ComputeStats != nil {

		// query param computeStats
		var qrComputeStats bool
		if o.ComputeStats != nil {
			qrComputeStats = *o.ComputeStats
		}
		qComputeStats := swag.FormatBool(qrComputeStats)
		if qComputeStats != "" {
			if err := r.SetQueryParam("computeStats", qComputeStats); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
