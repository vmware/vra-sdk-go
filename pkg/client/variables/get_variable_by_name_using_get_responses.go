// Code generated by go-swagger; DO NOT EDIT.

package variables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetVariableByNameUsingGETReader is a Reader for the GetVariableByNameUsingGET structure.
type GetVariableByNameUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVariableByNameUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVariableByNameUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetVariableByNameUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetVariableByNameUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVariableByNameUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetVariableByNameUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVariableByNameUsingGETOK creates a GetVariableByNameUsingGETOK with default headers values
func NewGetVariableByNameUsingGETOK() *GetVariableByNameUsingGETOK {
	return &GetVariableByNameUsingGETOK{}
}

/*
GetVariableByNameUsingGETOK describes a response with status code 200, with default header values.

'Success' with the requested Variable
*/
type GetVariableByNameUsingGETOK struct {
	Payload *models.Variable
}

// IsSuccess returns true when this get variable by name using g e t o k response has a 2xx status code
func (o *GetVariableByNameUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get variable by name using g e t o k response has a 3xx status code
func (o *GetVariableByNameUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get variable by name using g e t o k response has a 4xx status code
func (o *GetVariableByNameUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get variable by name using g e t o k response has a 5xx status code
func (o *GetVariableByNameUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get variable by name using g e t o k response a status code equal to that given
func (o *GetVariableByNameUsingGETOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetVariableByNameUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/variables/{project}/{name}][%d] getVariableByNameUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetVariableByNameUsingGETOK) String() string {
	return fmt.Sprintf("[GET /codestream/api/variables/{project}/{name}][%d] getVariableByNameUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetVariableByNameUsingGETOK) GetPayload() *models.Variable {
	return o.Payload
}

func (o *GetVariableByNameUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Variable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVariableByNameUsingGETUnauthorized creates a GetVariableByNameUsingGETUnauthorized with default headers values
func NewGetVariableByNameUsingGETUnauthorized() *GetVariableByNameUsingGETUnauthorized {
	return &GetVariableByNameUsingGETUnauthorized{}
}

/*
GetVariableByNameUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type GetVariableByNameUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get variable by name using g e t unauthorized response has a 2xx status code
func (o *GetVariableByNameUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get variable by name using g e t unauthorized response has a 3xx status code
func (o *GetVariableByNameUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get variable by name using g e t unauthorized response has a 4xx status code
func (o *GetVariableByNameUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get variable by name using g e t unauthorized response has a 5xx status code
func (o *GetVariableByNameUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get variable by name using g e t unauthorized response a status code equal to that given
func (o *GetVariableByNameUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetVariableByNameUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/variables/{project}/{name}][%d] getVariableByNameUsingGETUnauthorized ", 401)
}

func (o *GetVariableByNameUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /codestream/api/variables/{project}/{name}][%d] getVariableByNameUsingGETUnauthorized ", 401)
}

func (o *GetVariableByNameUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVariableByNameUsingGETForbidden creates a GetVariableByNameUsingGETForbidden with default headers values
func NewGetVariableByNameUsingGETForbidden() *GetVariableByNameUsingGETForbidden {
	return &GetVariableByNameUsingGETForbidden{}
}

/*
GetVariableByNameUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetVariableByNameUsingGETForbidden struct {
}

// IsSuccess returns true when this get variable by name using g e t forbidden response has a 2xx status code
func (o *GetVariableByNameUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get variable by name using g e t forbidden response has a 3xx status code
func (o *GetVariableByNameUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get variable by name using g e t forbidden response has a 4xx status code
func (o *GetVariableByNameUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get variable by name using g e t forbidden response has a 5xx status code
func (o *GetVariableByNameUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get variable by name using g e t forbidden response a status code equal to that given
func (o *GetVariableByNameUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetVariableByNameUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/variables/{project}/{name}][%d] getVariableByNameUsingGETForbidden ", 403)
}

func (o *GetVariableByNameUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /codestream/api/variables/{project}/{name}][%d] getVariableByNameUsingGETForbidden ", 403)
}

func (o *GetVariableByNameUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVariableByNameUsingGETNotFound creates a GetVariableByNameUsingGETNotFound with default headers values
func NewGetVariableByNameUsingGETNotFound() *GetVariableByNameUsingGETNotFound {
	return &GetVariableByNameUsingGETNotFound{}
}

/*
GetVariableByNameUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetVariableByNameUsingGETNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get variable by name using g e t not found response has a 2xx status code
func (o *GetVariableByNameUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get variable by name using g e t not found response has a 3xx status code
func (o *GetVariableByNameUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get variable by name using g e t not found response has a 4xx status code
func (o *GetVariableByNameUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get variable by name using g e t not found response has a 5xx status code
func (o *GetVariableByNameUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get variable by name using g e t not found response a status code equal to that given
func (o *GetVariableByNameUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetVariableByNameUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/variables/{project}/{name}][%d] getVariableByNameUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetVariableByNameUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /codestream/api/variables/{project}/{name}][%d] getVariableByNameUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetVariableByNameUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVariableByNameUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVariableByNameUsingGETInternalServerError creates a GetVariableByNameUsingGETInternalServerError with default headers values
func NewGetVariableByNameUsingGETInternalServerError() *GetVariableByNameUsingGETInternalServerError {
	return &GetVariableByNameUsingGETInternalServerError{}
}

/*
GetVariableByNameUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetVariableByNameUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get variable by name using g e t internal server error response has a 2xx status code
func (o *GetVariableByNameUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get variable by name using g e t internal server error response has a 3xx status code
func (o *GetVariableByNameUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get variable by name using g e t internal server error response has a 4xx status code
func (o *GetVariableByNameUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get variable by name using g e t internal server error response has a 5xx status code
func (o *GetVariableByNameUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get variable by name using g e t internal server error response a status code equal to that given
func (o *GetVariableByNameUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetVariableByNameUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/variables/{project}/{name}][%d] getVariableByNameUsingGETInternalServerError ", 500)
}

func (o *GetVariableByNameUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /codestream/api/variables/{project}/{name}][%d] getVariableByNameUsingGETInternalServerError ", 500)
}

func (o *GetVariableByNameUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
