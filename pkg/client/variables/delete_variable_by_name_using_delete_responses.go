// Code generated by go-swagger; DO NOT EDIT.

package variables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// DeleteVariableByNameUsingDELETEReader is a Reader for the DeleteVariableByNameUsingDELETE structure.
type DeleteVariableByNameUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVariableByNameUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteVariableByNameUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteVariableByNameUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteVariableByNameUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteVariableByNameUsingDELETENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteVariableByNameUsingDELETEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteVariableByNameUsingDELETEOK creates a DeleteVariableByNameUsingDELETEOK with default headers values
func NewDeleteVariableByNameUsingDELETEOK() *DeleteVariableByNameUsingDELETEOK {
	return &DeleteVariableByNameUsingDELETEOK{}
}

/*
DeleteVariableByNameUsingDELETEOK describes a response with status code 200, with default header values.

'Success' with deleted Variable
*/
type DeleteVariableByNameUsingDELETEOK struct {
	Payload *models.Variable
}

// IsSuccess returns true when this delete variable by name using d e l e t e o k response has a 2xx status code
func (o *DeleteVariableByNameUsingDELETEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete variable by name using d e l e t e o k response has a 3xx status code
func (o *DeleteVariableByNameUsingDELETEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete variable by name using d e l e t e o k response has a 4xx status code
func (o *DeleteVariableByNameUsingDELETEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete variable by name using d e l e t e o k response has a 5xx status code
func (o *DeleteVariableByNameUsingDELETEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete variable by name using d e l e t e o k response a status code equal to that given
func (o *DeleteVariableByNameUsingDELETEOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeleteVariableByNameUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/variables/{project}/{name}][%d] deleteVariableByNameUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *DeleteVariableByNameUsingDELETEOK) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/variables/{project}/{name}][%d] deleteVariableByNameUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *DeleteVariableByNameUsingDELETEOK) GetPayload() *models.Variable {
	return o.Payload
}

func (o *DeleteVariableByNameUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Variable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVariableByNameUsingDELETEUnauthorized creates a DeleteVariableByNameUsingDELETEUnauthorized with default headers values
func NewDeleteVariableByNameUsingDELETEUnauthorized() *DeleteVariableByNameUsingDELETEUnauthorized {
	return &DeleteVariableByNameUsingDELETEUnauthorized{}
}

/*
DeleteVariableByNameUsingDELETEUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type DeleteVariableByNameUsingDELETEUnauthorized struct {
}

// IsSuccess returns true when this delete variable by name using d e l e t e unauthorized response has a 2xx status code
func (o *DeleteVariableByNameUsingDELETEUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete variable by name using d e l e t e unauthorized response has a 3xx status code
func (o *DeleteVariableByNameUsingDELETEUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete variable by name using d e l e t e unauthorized response has a 4xx status code
func (o *DeleteVariableByNameUsingDELETEUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete variable by name using d e l e t e unauthorized response has a 5xx status code
func (o *DeleteVariableByNameUsingDELETEUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete variable by name using d e l e t e unauthorized response a status code equal to that given
func (o *DeleteVariableByNameUsingDELETEUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeleteVariableByNameUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/variables/{project}/{name}][%d] deleteVariableByNameUsingDELETEUnauthorized ", 401)
}

func (o *DeleteVariableByNameUsingDELETEUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/variables/{project}/{name}][%d] deleteVariableByNameUsingDELETEUnauthorized ", 401)
}

func (o *DeleteVariableByNameUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVariableByNameUsingDELETEForbidden creates a DeleteVariableByNameUsingDELETEForbidden with default headers values
func NewDeleteVariableByNameUsingDELETEForbidden() *DeleteVariableByNameUsingDELETEForbidden {
	return &DeleteVariableByNameUsingDELETEForbidden{}
}

/*
DeleteVariableByNameUsingDELETEForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteVariableByNameUsingDELETEForbidden struct {
}

// IsSuccess returns true when this delete variable by name using d e l e t e forbidden response has a 2xx status code
func (o *DeleteVariableByNameUsingDELETEForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete variable by name using d e l e t e forbidden response has a 3xx status code
func (o *DeleteVariableByNameUsingDELETEForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete variable by name using d e l e t e forbidden response has a 4xx status code
func (o *DeleteVariableByNameUsingDELETEForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete variable by name using d e l e t e forbidden response has a 5xx status code
func (o *DeleteVariableByNameUsingDELETEForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete variable by name using d e l e t e forbidden response a status code equal to that given
func (o *DeleteVariableByNameUsingDELETEForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteVariableByNameUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/variables/{project}/{name}][%d] deleteVariableByNameUsingDELETEForbidden ", 403)
}

func (o *DeleteVariableByNameUsingDELETEForbidden) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/variables/{project}/{name}][%d] deleteVariableByNameUsingDELETEForbidden ", 403)
}

func (o *DeleteVariableByNameUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVariableByNameUsingDELETENotFound creates a DeleteVariableByNameUsingDELETENotFound with default headers values
func NewDeleteVariableByNameUsingDELETENotFound() *DeleteVariableByNameUsingDELETENotFound {
	return &DeleteVariableByNameUsingDELETENotFound{}
}

/*
DeleteVariableByNameUsingDELETENotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteVariableByNameUsingDELETENotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete variable by name using d e l e t e not found response has a 2xx status code
func (o *DeleteVariableByNameUsingDELETENotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete variable by name using d e l e t e not found response has a 3xx status code
func (o *DeleteVariableByNameUsingDELETENotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete variable by name using d e l e t e not found response has a 4xx status code
func (o *DeleteVariableByNameUsingDELETENotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete variable by name using d e l e t e not found response has a 5xx status code
func (o *DeleteVariableByNameUsingDELETENotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete variable by name using d e l e t e not found response a status code equal to that given
func (o *DeleteVariableByNameUsingDELETENotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteVariableByNameUsingDELETENotFound) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/variables/{project}/{name}][%d] deleteVariableByNameUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeleteVariableByNameUsingDELETENotFound) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/variables/{project}/{name}][%d] deleteVariableByNameUsingDELETENotFound  %+v", 404, o.Payload)
}

func (o *DeleteVariableByNameUsingDELETENotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteVariableByNameUsingDELETENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVariableByNameUsingDELETEInternalServerError creates a DeleteVariableByNameUsingDELETEInternalServerError with default headers values
func NewDeleteVariableByNameUsingDELETEInternalServerError() *DeleteVariableByNameUsingDELETEInternalServerError {
	return &DeleteVariableByNameUsingDELETEInternalServerError{}
}

/*
DeleteVariableByNameUsingDELETEInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type DeleteVariableByNameUsingDELETEInternalServerError struct {
}

// IsSuccess returns true when this delete variable by name using d e l e t e internal server error response has a 2xx status code
func (o *DeleteVariableByNameUsingDELETEInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete variable by name using d e l e t e internal server error response has a 3xx status code
func (o *DeleteVariableByNameUsingDELETEInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete variable by name using d e l e t e internal server error response has a 4xx status code
func (o *DeleteVariableByNameUsingDELETEInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete variable by name using d e l e t e internal server error response has a 5xx status code
func (o *DeleteVariableByNameUsingDELETEInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete variable by name using d e l e t e internal server error response a status code equal to that given
func (o *DeleteVariableByNameUsingDELETEInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteVariableByNameUsingDELETEInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /codestream/api/variables/{project}/{name}][%d] deleteVariableByNameUsingDELETEInternalServerError ", 500)
}

func (o *DeleteVariableByNameUsingDELETEInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /codestream/api/variables/{project}/{name}][%d] deleteVariableByNameUsingDELETEInternalServerError ", 500)
}

func (o *DeleteVariableByNameUsingDELETEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
