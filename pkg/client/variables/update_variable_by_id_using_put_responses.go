// Code generated by go-swagger; DO NOT EDIT.

package variables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateVariableByIDUsingPUTReader is a Reader for the UpdateVariableByIDUsingPUT structure.
type UpdateVariableByIDUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVariableByIDUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVariableByIDUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateVariableByIDUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateVariableByIDUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVariableByIDUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVariableByIDUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateVariableByIDUsingPUTOK creates a UpdateVariableByIDUsingPUTOK with default headers values
func NewUpdateVariableByIDUsingPUTOK() *UpdateVariableByIDUsingPUTOK {
	return &UpdateVariableByIDUsingPUTOK{}
}

/*
UpdateVariableByIDUsingPUTOK describes a response with status code 200, with default header values.

'Success' with the updated Variable
*/
type UpdateVariableByIDUsingPUTOK struct {
	Payload *models.Variable
}

// IsSuccess returns true when this update variable by Id using p u t o k response has a 2xx status code
func (o *UpdateVariableByIDUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update variable by Id using p u t o k response has a 3xx status code
func (o *UpdateVariableByIDUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update variable by Id using p u t o k response has a 4xx status code
func (o *UpdateVariableByIDUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update variable by Id using p u t o k response has a 5xx status code
func (o *UpdateVariableByIDUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update variable by Id using p u t o k response a status code equal to that given
func (o *UpdateVariableByIDUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateVariableByIDUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/variables/{id}][%d] updateVariableByIdUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateVariableByIDUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /codestream/api/variables/{id}][%d] updateVariableByIdUsingPUTOK  %+v", 200, o.Payload)
}

func (o *UpdateVariableByIDUsingPUTOK) GetPayload() *models.Variable {
	return o.Payload
}

func (o *UpdateVariableByIDUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Variable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVariableByIDUsingPUTUnauthorized creates a UpdateVariableByIDUsingPUTUnauthorized with default headers values
func NewUpdateVariableByIDUsingPUTUnauthorized() *UpdateVariableByIDUsingPUTUnauthorized {
	return &UpdateVariableByIDUsingPUTUnauthorized{}
}

/*
UpdateVariableByIDUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized Request
*/
type UpdateVariableByIDUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update variable by Id using p u t unauthorized response has a 2xx status code
func (o *UpdateVariableByIDUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update variable by Id using p u t unauthorized response has a 3xx status code
func (o *UpdateVariableByIDUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update variable by Id using p u t unauthorized response has a 4xx status code
func (o *UpdateVariableByIDUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update variable by Id using p u t unauthorized response has a 5xx status code
func (o *UpdateVariableByIDUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update variable by Id using p u t unauthorized response a status code equal to that given
func (o *UpdateVariableByIDUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateVariableByIDUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/variables/{id}][%d] updateVariableByIdUsingPUTUnauthorized ", 401)
}

func (o *UpdateVariableByIDUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /codestream/api/variables/{id}][%d] updateVariableByIdUsingPUTUnauthorized ", 401)
}

func (o *UpdateVariableByIDUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVariableByIDUsingPUTForbidden creates a UpdateVariableByIDUsingPUTForbidden with default headers values
func NewUpdateVariableByIDUsingPUTForbidden() *UpdateVariableByIDUsingPUTForbidden {
	return &UpdateVariableByIDUsingPUTForbidden{}
}

/*
UpdateVariableByIDUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateVariableByIDUsingPUTForbidden struct {
}

// IsSuccess returns true when this update variable by Id using p u t forbidden response has a 2xx status code
func (o *UpdateVariableByIDUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update variable by Id using p u t forbidden response has a 3xx status code
func (o *UpdateVariableByIDUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update variable by Id using p u t forbidden response has a 4xx status code
func (o *UpdateVariableByIDUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update variable by Id using p u t forbidden response has a 5xx status code
func (o *UpdateVariableByIDUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update variable by Id using p u t forbidden response a status code equal to that given
func (o *UpdateVariableByIDUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateVariableByIDUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/variables/{id}][%d] updateVariableByIdUsingPUTForbidden ", 403)
}

func (o *UpdateVariableByIDUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /codestream/api/variables/{id}][%d] updateVariableByIdUsingPUTForbidden ", 403)
}

func (o *UpdateVariableByIDUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVariableByIDUsingPUTNotFound creates a UpdateVariableByIDUsingPUTNotFound with default headers values
func NewUpdateVariableByIDUsingPUTNotFound() *UpdateVariableByIDUsingPUTNotFound {
	return &UpdateVariableByIDUsingPUTNotFound{}
}

/*
UpdateVariableByIDUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateVariableByIDUsingPUTNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update variable by Id using p u t not found response has a 2xx status code
func (o *UpdateVariableByIDUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update variable by Id using p u t not found response has a 3xx status code
func (o *UpdateVariableByIDUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update variable by Id using p u t not found response has a 4xx status code
func (o *UpdateVariableByIDUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update variable by Id using p u t not found response has a 5xx status code
func (o *UpdateVariableByIDUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update variable by Id using p u t not found response a status code equal to that given
func (o *UpdateVariableByIDUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateVariableByIDUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/variables/{id}][%d] updateVariableByIdUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVariableByIDUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /codestream/api/variables/{id}][%d] updateVariableByIdUsingPUTNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVariableByIDUsingPUTNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVariableByIDUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVariableByIDUsingPUTInternalServerError creates a UpdateVariableByIDUsingPUTInternalServerError with default headers values
func NewUpdateVariableByIDUsingPUTInternalServerError() *UpdateVariableByIDUsingPUTInternalServerError {
	return &UpdateVariableByIDUsingPUTInternalServerError{}
}

/*
UpdateVariableByIDUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateVariableByIDUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update variable by Id using p u t internal server error response has a 2xx status code
func (o *UpdateVariableByIDUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update variable by Id using p u t internal server error response has a 3xx status code
func (o *UpdateVariableByIDUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update variable by Id using p u t internal server error response has a 4xx status code
func (o *UpdateVariableByIDUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update variable by Id using p u t internal server error response has a 5xx status code
func (o *UpdateVariableByIDUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update variable by Id using p u t internal server error response a status code equal to that given
func (o *UpdateVariableByIDUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateVariableByIDUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/variables/{id}][%d] updateVariableByIdUsingPUTInternalServerError ", 500)
}

func (o *UpdateVariableByIDUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /codestream/api/variables/{id}][%d] updateVariableByIdUsingPUTInternalServerError ", 500)
}

func (o *UpdateVariableByIDUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
