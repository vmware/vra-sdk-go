// Code generated by go-swagger; DO NOT EDIT.

package variables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// NewUpdateVariableByNameUsingPUTParams creates a new UpdateVariableByNameUsingPUTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateVariableByNameUsingPUTParams() *UpdateVariableByNameUsingPUTParams {
	return &UpdateVariableByNameUsingPUTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateVariableByNameUsingPUTParamsWithTimeout creates a new UpdateVariableByNameUsingPUTParams object
// with the ability to set a timeout on a request.
func NewUpdateVariableByNameUsingPUTParamsWithTimeout(timeout time.Duration) *UpdateVariableByNameUsingPUTParams {
	return &UpdateVariableByNameUsingPUTParams{
		timeout: timeout,
	}
}

// NewUpdateVariableByNameUsingPUTParamsWithContext creates a new UpdateVariableByNameUsingPUTParams object
// with the ability to set a context for a request.
func NewUpdateVariableByNameUsingPUTParamsWithContext(ctx context.Context) *UpdateVariableByNameUsingPUTParams {
	return &UpdateVariableByNameUsingPUTParams{
		Context: ctx,
	}
}

// NewUpdateVariableByNameUsingPUTParamsWithHTTPClient creates a new UpdateVariableByNameUsingPUTParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateVariableByNameUsingPUTParamsWithHTTPClient(client *http.Client) *UpdateVariableByNameUsingPUTParams {
	return &UpdateVariableByNameUsingPUTParams{
		HTTPClient: client,
	}
}

/*
UpdateVariableByNameUsingPUTParams contains all the parameters to send to the API endpoint

	for the update variable by name using p u t operation.

	Typically these are written to a http.Request.
*/
type UpdateVariableByNameUsingPUTParams struct {

	/* Authorization.

	   Bearer token
	*/
	Authorization string

	/* APIVersion.

	   The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about
	*/
	APIVersion string

	/* Body.

	   Variable specification
	*/
	Body models.VariableSpec

	/* Name.

	   The name of the Variable
	*/
	Name string

	/* Project.

	   The project the Variable belongs to
	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update variable by name using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateVariableByNameUsingPUTParams) WithDefaults() *UpdateVariableByNameUsingPUTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update variable by name using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateVariableByNameUsingPUTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) WithTimeout(timeout time.Duration) *UpdateVariableByNameUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) WithContext(ctx context.Context) *UpdateVariableByNameUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) WithHTTPClient(client *http.Client) *UpdateVariableByNameUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) WithAuthorization(authorization string) *UpdateVariableByNameUsingPUTParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithAPIVersion adds the aPIVersion to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) WithAPIVersion(aPIVersion string) *UpdateVariableByNameUsingPUTParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithBody adds the body to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) WithBody(body models.VariableSpec) *UpdateVariableByNameUsingPUTParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) SetBody(body models.VariableSpec) {
	o.Body = body
}

// WithName adds the name to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) WithName(name string) *UpdateVariableByNameUsingPUTParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) SetName(name string) {
	o.Name = name
}

// WithProject adds the project to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) WithProject(project string) *UpdateVariableByNameUsingPUTParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the update variable by name using p u t params
func (o *UpdateVariableByNameUsingPUTParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateVariableByNameUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// query param apiVersion
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion

	if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
		return err
	}
	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
