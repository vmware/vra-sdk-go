// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// PatchDeploymentUsingPATCHReader is a Reader for the PatchDeploymentUsingPATCH structure.
type PatchDeploymentUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchDeploymentUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchDeploymentUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchDeploymentUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchDeploymentUsingPATCHNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchDeploymentUsingPATCHOK creates a PatchDeploymentUsingPATCHOK with default headers values
func NewPatchDeploymentUsingPATCHOK() *PatchDeploymentUsingPATCHOK {
	return &PatchDeploymentUsingPATCHOK{}
}

/*PatchDeploymentUsingPATCHOK handles this case with default header values.

OK
*/
type PatchDeploymentUsingPATCHOK struct {
	Payload *models.Deployment
}

func (o *PatchDeploymentUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /deployment/api/deployments/{depId}][%d] patchDeploymentUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *PatchDeploymentUsingPATCHOK) GetPayload() *models.Deployment {
	return o.Payload
}

func (o *PatchDeploymentUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Deployment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDeploymentUsingPATCHUnauthorized creates a PatchDeploymentUsingPATCHUnauthorized with default headers values
func NewPatchDeploymentUsingPATCHUnauthorized() *PatchDeploymentUsingPATCHUnauthorized {
	return &PatchDeploymentUsingPATCHUnauthorized{}
}

/*PatchDeploymentUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type PatchDeploymentUsingPATCHUnauthorized struct {
}

func (o *PatchDeploymentUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /deployment/api/deployments/{depId}][%d] patchDeploymentUsingPATCHUnauthorized ", 401)
}

func (o *PatchDeploymentUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDeploymentUsingPATCHNotFound creates a PatchDeploymentUsingPATCHNotFound with default headers values
func NewPatchDeploymentUsingPATCHNotFound() *PatchDeploymentUsingPATCHNotFound {
	return &PatchDeploymentUsingPATCHNotFound{}
}

/*PatchDeploymentUsingPATCHNotFound handles this case with default header values.

Not Found
*/
type PatchDeploymentUsingPATCHNotFound struct {
}

func (o *PatchDeploymentUsingPATCHNotFound) Error() string {
	return fmt.Sprintf("[PATCH /deployment/api/deployments/{depId}][%d] patchDeploymentUsingPATCHNotFound ", 404)
}

func (o *PatchDeploymentUsingPATCHNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
