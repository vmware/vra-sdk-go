// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCheckDeploymentNameExistsUsingGET2Params creates a new CheckDeploymentNameExistsUsingGET2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCheckDeploymentNameExistsUsingGET2Params() *CheckDeploymentNameExistsUsingGET2Params {
	return &CheckDeploymentNameExistsUsingGET2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewCheckDeploymentNameExistsUsingGET2ParamsWithTimeout creates a new CheckDeploymentNameExistsUsingGET2Params object
// with the ability to set a timeout on a request.
func NewCheckDeploymentNameExistsUsingGET2ParamsWithTimeout(timeout time.Duration) *CheckDeploymentNameExistsUsingGET2Params {
	return &CheckDeploymentNameExistsUsingGET2Params{
		timeout: timeout,
	}
}

// NewCheckDeploymentNameExistsUsingGET2ParamsWithContext creates a new CheckDeploymentNameExistsUsingGET2Params object
// with the ability to set a context for a request.
func NewCheckDeploymentNameExistsUsingGET2ParamsWithContext(ctx context.Context) *CheckDeploymentNameExistsUsingGET2Params {
	return &CheckDeploymentNameExistsUsingGET2Params{
		Context: ctx,
	}
}

// NewCheckDeploymentNameExistsUsingGET2ParamsWithHTTPClient creates a new CheckDeploymentNameExistsUsingGET2Params object
// with the ability to set a custom HTTPClient for a request.
func NewCheckDeploymentNameExistsUsingGET2ParamsWithHTTPClient(client *http.Client) *CheckDeploymentNameExistsUsingGET2Params {
	return &CheckDeploymentNameExistsUsingGET2Params{
		HTTPClient: client,
	}
}

/* CheckDeploymentNameExistsUsingGET2Params contains all the parameters to send to the API endpoint
   for the check deployment name exists using g e t 2 operation.

   Typically these are written to a http.Request.
*/
type CheckDeploymentNameExistsUsingGET2Params struct {

	/* APIVersion.

	   The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.
	*/
	APIVersion *string

	/* Name.

	   Deployment name
	*/
	Name *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the check deployment name exists using g e t 2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CheckDeploymentNameExistsUsingGET2Params) WithDefaults() *CheckDeploymentNameExistsUsingGET2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the check deployment name exists using g e t 2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CheckDeploymentNameExistsUsingGET2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the check deployment name exists using g e t 2 params
func (o *CheckDeploymentNameExistsUsingGET2Params) WithTimeout(timeout time.Duration) *CheckDeploymentNameExistsUsingGET2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the check deployment name exists using g e t 2 params
func (o *CheckDeploymentNameExistsUsingGET2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the check deployment name exists using g e t 2 params
func (o *CheckDeploymentNameExistsUsingGET2Params) WithContext(ctx context.Context) *CheckDeploymentNameExistsUsingGET2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the check deployment name exists using g e t 2 params
func (o *CheckDeploymentNameExistsUsingGET2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the check deployment name exists using g e t 2 params
func (o *CheckDeploymentNameExistsUsingGET2Params) WithHTTPClient(client *http.Client) *CheckDeploymentNameExistsUsingGET2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the check deployment name exists using g e t 2 params
func (o *CheckDeploymentNameExistsUsingGET2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the check deployment name exists using g e t 2 params
func (o *CheckDeploymentNameExistsUsingGET2Params) WithAPIVersion(aPIVersion *string) *CheckDeploymentNameExistsUsingGET2Params {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the check deployment name exists using g e t 2 params
func (o *CheckDeploymentNameExistsUsingGET2Params) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithName adds the name to the check deployment name exists using g e t 2 params
func (o *CheckDeploymentNameExistsUsingGET2Params) WithName(name *string) *CheckDeploymentNameExistsUsingGET2Params {
	o.SetName(name)
	return o
}

// SetName adds the name to the check deployment name exists using g e t 2 params
func (o *CheckDeploymentNameExistsUsingGET2Params) SetName(name *string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *CheckDeploymentNameExistsUsingGET2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// query param apiVersion
		var qrAPIVersion string

		if o.APIVersion != nil {
			qrAPIVersion = *o.APIVersion
		}
		qAPIVersion := qrAPIVersion
		if qAPIVersion != "" {

			if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
