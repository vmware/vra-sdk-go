// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new deployments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deployments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CheckDeploymentNameExistsUsingGET2(params *CheckDeploymentNameExistsUsingGET2Params, opts ...ClientOption) (*CheckDeploymentNameExistsUsingGET2OK, error)

	CheckDeploymentNameUsingGET2(params *CheckDeploymentNameUsingGET2Params, opts ...ClientOption) (*CheckDeploymentNameUsingGET2OK, error)

	DeleteDeploymentUsingDELETE2(params *DeleteDeploymentUsingDELETE2Params, opts ...ClientOption) (*DeleteDeploymentUsingDELETE2OK, error)

	DeleteResourceUsingDELETE2(params *DeleteResourceUsingDELETE2Params, opts ...ClientOption) (*DeleteResourceUsingDELETE2OK, error)

	GetDeploymentByIDV3UsingGET(params *GetDeploymentByIDV3UsingGETParams, opts ...ClientOption) (*GetDeploymentByIDV3UsingGETOK, error)

	GetDeploymentExpenseHistoryByIDUsingGET2(params *GetDeploymentExpenseHistoryByIDUsingGET2Params, opts ...ClientOption) (*GetDeploymentExpenseHistoryByIDUsingGET2OK, error)

	GetDeploymentFilterByIDUsingGET2(params *GetDeploymentFilterByIDUsingGET2Params, opts ...ClientOption) (*GetDeploymentFilterByIDUsingGET2OK, error)

	GetDeploymentFiltersUsingGET2(params *GetDeploymentFiltersUsingGET2Params, opts ...ClientOption) (*GetDeploymentFiltersUsingGET2OK, error)

	GetDeploymentResourcesUsingGET2(params *GetDeploymentResourcesUsingGET2Params, opts ...ClientOption) (*GetDeploymentResourcesUsingGET2OK, error)

	GetDeploymentsForProjectUsingGET2(params *GetDeploymentsForProjectUsingGET2Params, opts ...ClientOption) (*GetDeploymentsForProjectUsingGET2OK, error)

	GetDeploymentsV3UsingGET(params *GetDeploymentsV3UsingGETParams, opts ...ClientOption) (*GetDeploymentsV3UsingGETOK, error)

	GetResourceByIDUsingGET4(params *GetResourceByIDUsingGET4Params, opts ...ClientOption) (*GetResourceByIDUsingGET4OK, error)

	PatchDeploymentUsingPATCH2(params *PatchDeploymentUsingPATCH2Params, opts ...ClientOption) (*PatchDeploymentUsingPATCH2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CheckDeploymentNameExistsUsingGET2 checks if a deployment exists

  Returns OK if a deployment with the supplied name exists.
*/
func (a *Client) CheckDeploymentNameExistsUsingGET2(params *CheckDeploymentNameExistsUsingGET2Params, opts ...ClientOption) (*CheckDeploymentNameExistsUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckDeploymentNameExistsUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkDeploymentNameExistsUsingGET_2",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckDeploymentNameExistsUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckDeploymentNameExistsUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkDeploymentNameExistsUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckDeploymentNameUsingGET2 checks if a deployment exists

  Returns OK if a deployment with the supplied name exists.
*/
func (a *Client) CheckDeploymentNameUsingGET2(params *CheckDeploymentNameUsingGET2Params, opts ...ClientOption) (*CheckDeploymentNameUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckDeploymentNameUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkDeploymentNameUsingGET_2",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/names/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckDeploymentNameUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckDeploymentNameUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkDeploymentNameUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDeploymentUsingDELETE2 deletes a deployment effectively triggers a delete day2 operation

  Deletes the deployment with the supplied ID, cleans up the associated resources from the Cloud Provider.
*/
func (a *Client) DeleteDeploymentUsingDELETE2(params *DeleteDeploymentUsingDELETE2Params, opts ...ClientOption) (*DeleteDeploymentUsingDELETE2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeploymentUsingDELETE2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDeploymentUsingDELETE_2",
		Method:             "DELETE",
		PathPattern:        "/deployment/api/deployments/{deploymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDeploymentUsingDELETE2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeploymentUsingDELETE2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDeploymentUsingDELETE_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteResourceUsingDELETE2 deletes resource associated with a deployment effectively triggers a delete day2 operation

  Deletes the resource with the specified ID and attempts to delete resource from the Cloud Provider.
*/
func (a *Client) DeleteResourceUsingDELETE2(params *DeleteResourceUsingDELETE2Params, opts ...ClientOption) (*DeleteResourceUsingDELETE2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourceUsingDELETE2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteResourceUsingDELETE_2",
		Method:             "DELETE",
		PathPattern:        "/deployment/api/deployments/{deploymentId}/resources/{resourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteResourceUsingDELETE2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteResourceUsingDELETE2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteResourceUsingDELETE_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentByIDV3UsingGET fetches a specific deployment

  Returns the deployment with the supplied ID.
*/
func (a *Client) GetDeploymentByIDV3UsingGET(params *GetDeploymentByIDV3UsingGETParams, opts ...ClientOption) (*GetDeploymentByIDV3UsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentByIDV3UsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentByIdV3UsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/{deploymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentByIDV3UsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentByIDV3UsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentByIdV3UsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentExpenseHistoryByIDUsingGET2 fetches a specific deployment s expense history

  Returns the deployment expense history with the supplied ID.
*/
func (a *Client) GetDeploymentExpenseHistoryByIDUsingGET2(params *GetDeploymentExpenseHistoryByIDUsingGET2Params, opts ...ClientOption) (*GetDeploymentExpenseHistoryByIDUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentExpenseHistoryByIDUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentExpenseHistoryByIdUsingGET_2",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/{deploymentId}/expense-history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentExpenseHistoryByIDUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentExpenseHistoryByIDUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentExpenseHistoryByIdUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentFilterByIDUsingGET2 returns the deployment filter with the supplied ID
*/
func (a *Client) GetDeploymentFilterByIDUsingGET2(params *GetDeploymentFilterByIDUsingGET2Params, opts ...ClientOption) (*GetDeploymentFilterByIDUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentFilterByIDUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentFilterByIdUsingGET_2",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/filters/{filterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentFilterByIDUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentFilterByIDUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentFilterByIdUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentFiltersUsingGET2 returns the deployment filters in context of given user
*/
func (a *Client) GetDeploymentFiltersUsingGET2(params *GetDeploymentFiltersUsingGET2Params, opts ...ClientOption) (*GetDeploymentFiltersUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentFiltersUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentFiltersUsingGET_2",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentFiltersUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentFiltersUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentFiltersUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentResourcesUsingGET2 fetches resources associated with a deployment

  Returns a paginated list of resources corresponding to the deployment with the supplied ID.
*/
func (a *Client) GetDeploymentResourcesUsingGET2(params *GetDeploymentResourcesUsingGET2Params, opts ...ClientOption) (*GetDeploymentResourcesUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentResourcesUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentResourcesUsingGET_2",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/{deploymentId}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentResourcesUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentResourcesUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentResourcesUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentsForProjectUsingGET2 returns a count of deployments using the project
*/
func (a *Client) GetDeploymentsForProjectUsingGET2(params *GetDeploymentsForProjectUsingGET2Params, opts ...ClientOption) (*GetDeploymentsForProjectUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentsForProjectUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentsForProjectUsingGET_2",
		Method:             "GET",
		PathPattern:        "/deployment/api/projects/{projectId}/deployment-count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentsForProjectUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentsForProjectUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentsForProjectUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentsV3UsingGET fetches all deployments

  Returns a paginated list of deployments.
*/
func (a *Client) GetDeploymentsV3UsingGET(params *GetDeploymentsV3UsingGETParams, opts ...ClientOption) (*GetDeploymentsV3UsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentsV3UsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentsV3UsingGET",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentsV3UsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentsV3UsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentsV3UsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourceByIDUsingGET4 fetches resource associated with a deployment

  Returns the resource with the specified ID that is correlated with the supplied deployment.
*/
func (a *Client) GetResourceByIDUsingGET4(params *GetResourceByIDUsingGET4Params, opts ...ClientOption) (*GetResourceByIDUsingGET4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceByIDUsingGET4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourceByIdUsingGET_4",
		Method:             "GET",
		PathPattern:        "/deployment/api/deployments/{deploymentId}/resources/{resourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceByIDUsingGET4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceByIDUsingGET4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceByIdUsingGET_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchDeploymentUsingPATCH2 updates deployment

  Updates the deployment with the supplied ID.
*/
func (a *Client) PatchDeploymentUsingPATCH2(params *PatchDeploymentUsingPATCH2Params, opts ...ClientOption) (*PatchDeploymentUsingPATCH2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeploymentUsingPATCH2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchDeploymentUsingPATCH_2",
		Method:             "PATCH",
		PathPattern:        "/deployment/api/deployments/{deploymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeploymentUsingPATCH2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchDeploymentUsingPATCH2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchDeploymentUsingPATCH_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
