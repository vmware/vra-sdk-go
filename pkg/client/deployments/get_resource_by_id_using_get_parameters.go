// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetResourceByIDUsingGETParams creates a new GetResourceByIDUsingGETParams object
// with the default values initialized.
func NewGetResourceByIDUsingGETParams() *GetResourceByIDUsingGETParams {
	var ()
	return &GetResourceByIDUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetResourceByIDUsingGETParamsWithTimeout creates a new GetResourceByIDUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetResourceByIDUsingGETParamsWithTimeout(timeout time.Duration) *GetResourceByIDUsingGETParams {
	var ()
	return &GetResourceByIDUsingGETParams{

		timeout: timeout,
	}
}

// NewGetResourceByIDUsingGETParamsWithContext creates a new GetResourceByIDUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetResourceByIDUsingGETParamsWithContext(ctx context.Context) *GetResourceByIDUsingGETParams {
	var ()
	return &GetResourceByIDUsingGETParams{

		Context: ctx,
	}
}

// NewGetResourceByIDUsingGETParamsWithHTTPClient creates a new GetResourceByIDUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetResourceByIDUsingGETParamsWithHTTPClient(client *http.Client) *GetResourceByIDUsingGETParams {
	var ()
	return &GetResourceByIDUsingGETParams{
		HTTPClient: client,
	}
}

/*GetResourceByIDUsingGETParams contains all the parameters to send to the API endpoint
for the get resource by Id using g e t operation typically these are written to a http.Request
*/
type GetResourceByIDUsingGETParams struct {

	/*DepID
	  Deployment ID

	*/
	DepID strfmt.UUID
	/*ForceCachedResources
	  Retrieves the resource from a cache for a faster query.

	*/
	ForceCachedResources *bool
	/*ForceRefreshResources
	  Guarantees the resource is up-to-date.

	*/
	ForceRefreshResources *bool
	/*ResourceID
	  Resource ID

	*/
	ResourceID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get resource by Id using get params
func (o *GetResourceByIDUsingGETParams) WithTimeout(timeout time.Duration) *GetResourceByIDUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get resource by Id using get params
func (o *GetResourceByIDUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get resource by Id using get params
func (o *GetResourceByIDUsingGETParams) WithContext(ctx context.Context) *GetResourceByIDUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get resource by Id using get params
func (o *GetResourceByIDUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get resource by Id using get params
func (o *GetResourceByIDUsingGETParams) WithHTTPClient(client *http.Client) *GetResourceByIDUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get resource by Id using get params
func (o *GetResourceByIDUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDepID adds the depID to the get resource by Id using get params
func (o *GetResourceByIDUsingGETParams) WithDepID(depID strfmt.UUID) *GetResourceByIDUsingGETParams {
	o.SetDepID(depID)
	return o
}

// SetDepID adds the depId to the get resource by Id using get params
func (o *GetResourceByIDUsingGETParams) SetDepID(depID strfmt.UUID) {
	o.DepID = depID
}

// WithForceCachedResources adds the forceCachedResources to the get resource by Id using get params
func (o *GetResourceByIDUsingGETParams) WithForceCachedResources(forceCachedResources *bool) *GetResourceByIDUsingGETParams {
	o.SetForceCachedResources(forceCachedResources)
	return o
}

// SetForceCachedResources adds the forceCachedResources to the get resource by Id using get params
func (o *GetResourceByIDUsingGETParams) SetForceCachedResources(forceCachedResources *bool) {
	o.ForceCachedResources = forceCachedResources
}

// WithForceRefreshResources adds the forceRefreshResources to the get resource by Id using get params
func (o *GetResourceByIDUsingGETParams) WithForceRefreshResources(forceRefreshResources *bool) *GetResourceByIDUsingGETParams {
	o.SetForceRefreshResources(forceRefreshResources)
	return o
}

// SetForceRefreshResources adds the forceRefreshResources to the get resource by Id using get params
func (o *GetResourceByIDUsingGETParams) SetForceRefreshResources(forceRefreshResources *bool) {
	o.ForceRefreshResources = forceRefreshResources
}

// WithResourceID adds the resourceID to the get resource by Id using get params
func (o *GetResourceByIDUsingGETParams) WithResourceID(resourceID strfmt.UUID) *GetResourceByIDUsingGETParams {
	o.SetResourceID(resourceID)
	return o
}

// SetResourceID adds the resourceId to the get resource by Id using get params
func (o *GetResourceByIDUsingGETParams) SetResourceID(resourceID strfmt.UUID) {
	o.ResourceID = resourceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetResourceByIDUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param depId
	if err := r.SetPathParam("depId", o.DepID.String()); err != nil {
		return err
	}

	if o.ForceCachedResources != nil {

		// query param forceCachedResources
		var qrForceCachedResources bool
		if o.ForceCachedResources != nil {
			qrForceCachedResources = *o.ForceCachedResources
		}
		qForceCachedResources := swag.FormatBool(qrForceCachedResources)
		if qForceCachedResources != "" {
			if err := r.SetQueryParam("forceCachedResources", qForceCachedResources); err != nil {
				return err
			}
		}

	}

	if o.ForceRefreshResources != nil {

		// query param forceRefreshResources
		var qrForceRefreshResources bool
		if o.ForceRefreshResources != nil {
			qrForceRefreshResources = *o.ForceRefreshResources
		}
		qForceRefreshResources := swag.FormatBool(qrForceRefreshResources)
		if qForceRefreshResources != "" {
			if err := r.SetQueryParam("forceRefreshResources", qForceRefreshResources); err != nil {
				return err
			}
		}

	}

	// path param resourceId
	if err := r.SetPathParam("resourceId", o.ResourceID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
