// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDeploymentResourcesUsingGET2Params creates a new GetDeploymentResourcesUsingGET2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDeploymentResourcesUsingGET2Params() *GetDeploymentResourcesUsingGET2Params {
	return &GetDeploymentResourcesUsingGET2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeploymentResourcesUsingGET2ParamsWithTimeout creates a new GetDeploymentResourcesUsingGET2Params object
// with the ability to set a timeout on a request.
func NewGetDeploymentResourcesUsingGET2ParamsWithTimeout(timeout time.Duration) *GetDeploymentResourcesUsingGET2Params {
	return &GetDeploymentResourcesUsingGET2Params{
		timeout: timeout,
	}
}

// NewGetDeploymentResourcesUsingGET2ParamsWithContext creates a new GetDeploymentResourcesUsingGET2Params object
// with the ability to set a context for a request.
func NewGetDeploymentResourcesUsingGET2ParamsWithContext(ctx context.Context) *GetDeploymentResourcesUsingGET2Params {
	return &GetDeploymentResourcesUsingGET2Params{
		Context: ctx,
	}
}

// NewGetDeploymentResourcesUsingGET2ParamsWithHTTPClient creates a new GetDeploymentResourcesUsingGET2Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetDeploymentResourcesUsingGET2ParamsWithHTTPClient(client *http.Client) *GetDeploymentResourcesUsingGET2Params {
	return &GetDeploymentResourcesUsingGET2Params{
		HTTPClient: client,
	}
}

/* GetDeploymentResourcesUsingGET2Params contains all the parameters to send to the API endpoint
   for the get deployment resources using g e t 2 operation.

   Typically these are written to a http.Request.
*/
type GetDeploymentResourcesUsingGET2Params struct {

	/* DollarOrderby.

	   Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
	*/
	DollarOrderby []string

	/* DollarSkip.

	   Number of records you want to skip

	   Format: int32
	*/
	DollarSkip *int32

	/* DollarTop.

	   Number of records you want

	   Format: int32
	*/
	DollarTop *int32

	/* APIVersion.

	   The version of the API in yyyy-MM-dd format (UTC). If you do not specify explicitly an exact version, you will be calling the latest supported API version.
	*/
	APIVersion *string

	/* DeploymentID.

	   Deployment ID

	   Format: uuid
	*/
	DeploymentID strfmt.UUID

	/* Expand.

	   The expanded details of the requested comma separated objects. Ex. currentRequest
	*/
	Expand []string

	/* Names.

	   Results must have exactly these resource names.
	*/
	Names []string

	/* ResourceTypes.

	   A comma-separated list. Results must be associated with one of these resourceType Names.
	*/
	ResourceTypes []string

	/* Tags.

	   A comma-separated list. Results must be associated with one of these tags
	*/
	Tags []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get deployment resources using g e t 2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDeploymentResourcesUsingGET2Params) WithDefaults() *GetDeploymentResourcesUsingGET2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get deployment resources using g e t 2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDeploymentResourcesUsingGET2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) WithTimeout(timeout time.Duration) *GetDeploymentResourcesUsingGET2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) WithContext(ctx context.Context) *GetDeploymentResourcesUsingGET2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) WithHTTPClient(client *http.Client) *GetDeploymentResourcesUsingGET2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarOrderby adds the dollarOrderby to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) WithDollarOrderby(dollarOrderby []string) *GetDeploymentResourcesUsingGET2Params {
	o.SetDollarOrderby(dollarOrderby)
	return o
}

// SetDollarOrderby adds the dollarOrderby to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) SetDollarOrderby(dollarOrderby []string) {
	o.DollarOrderby = dollarOrderby
}

// WithDollarSkip adds the dollarSkip to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) WithDollarSkip(dollarSkip *int32) *GetDeploymentResourcesUsingGET2Params {
	o.SetDollarSkip(dollarSkip)
	return o
}

// SetDollarSkip adds the dollarSkip to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) SetDollarSkip(dollarSkip *int32) {
	o.DollarSkip = dollarSkip
}

// WithDollarTop adds the dollarTop to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) WithDollarTop(dollarTop *int32) *GetDeploymentResourcesUsingGET2Params {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithAPIVersion adds the aPIVersion to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) WithAPIVersion(aPIVersion *string) *GetDeploymentResourcesUsingGET2Params {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithDeploymentID adds the deploymentID to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) WithDeploymentID(deploymentID strfmt.UUID) *GetDeploymentResourcesUsingGET2Params {
	o.SetDeploymentID(deploymentID)
	return o
}

// SetDeploymentID adds the deploymentId to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) SetDeploymentID(deploymentID strfmt.UUID) {
	o.DeploymentID = deploymentID
}

// WithExpand adds the expand to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) WithExpand(expand []string) *GetDeploymentResourcesUsingGET2Params {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) SetExpand(expand []string) {
	o.Expand = expand
}

// WithNames adds the names to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) WithNames(names []string) *GetDeploymentResourcesUsingGET2Params {
	o.SetNames(names)
	return o
}

// SetNames adds the names to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) SetNames(names []string) {
	o.Names = names
}

// WithResourceTypes adds the resourceTypes to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) WithResourceTypes(resourceTypes []string) *GetDeploymentResourcesUsingGET2Params {
	o.SetResourceTypes(resourceTypes)
	return o
}

// SetResourceTypes adds the resourceTypes to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) SetResourceTypes(resourceTypes []string) {
	o.ResourceTypes = resourceTypes
}

// WithTags adds the tags to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) WithTags(tags []string) *GetDeploymentResourcesUsingGET2Params {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get deployment resources using g e t 2 params
func (o *GetDeploymentResourcesUsingGET2Params) SetTags(tags []string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeploymentResourcesUsingGET2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarOrderby != nil {

		// binding items for $orderby
		joinedDollarOrderby := o.bindParamDollarOrderby(reg)

		// query array param $orderby
		if err := r.SetQueryParam("$orderby", joinedDollarOrderby...); err != nil {
			return err
		}
	}

	if o.DollarSkip != nil {

		// query param $skip
		var qrDollarSkip int32

		if o.DollarSkip != nil {
			qrDollarSkip = *o.DollarSkip
		}
		qDollarSkip := swag.FormatInt32(qrDollarSkip)
		if qDollarSkip != "" {

			if err := r.SetQueryParam("$skip", qDollarSkip); err != nil {
				return err
			}
		}
	}

	if o.DollarTop != nil {

		// query param $top
		var qrDollarTop int32

		if o.DollarTop != nil {
			qrDollarTop = *o.DollarTop
		}
		qDollarTop := swag.FormatInt32(qrDollarTop)
		if qDollarTop != "" {

			if err := r.SetQueryParam("$top", qDollarTop); err != nil {
				return err
			}
		}
	}

	if o.APIVersion != nil {

		// query param apiVersion
		var qrAPIVersion string

		if o.APIVersion != nil {
			qrAPIVersion = *o.APIVersion
		}
		qAPIVersion := qrAPIVersion
		if qAPIVersion != "" {

			if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
				return err
			}
		}
	}

	// path param deploymentId
	if err := r.SetPathParam("deploymentId", o.DeploymentID.String()); err != nil {
		return err
	}

	if o.Expand != nil {

		// binding items for expand
		joinedExpand := o.bindParamExpand(reg)

		// query array param expand
		if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
			return err
		}
	}

	if o.Names != nil {

		// binding items for names
		joinedNames := o.bindParamNames(reg)

		// query array param names
		if err := r.SetQueryParam("names", joinedNames...); err != nil {
			return err
		}
	}

	if o.ResourceTypes != nil {

		// binding items for resourceTypes
		joinedResourceTypes := o.bindParamResourceTypes(reg)

		// query array param resourceTypes
		if err := r.SetQueryParam("resourceTypes", joinedResourceTypes...); err != nil {
			return err
		}
	}

	if o.Tags != nil {

		// binding items for tags
		joinedTags := o.bindParamTags(reg)

		// query array param tags
		if err := r.SetQueryParam("tags", joinedTags...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetDeploymentResourcesUsingGET2 binds the parameter $orderby
func (o *GetDeploymentResourcesUsingGET2Params) bindParamDollarOrderby(formats strfmt.Registry) []string {
	dollarOrderbyIR := o.DollarOrderby

	var dollarOrderbyIC []string
	for _, dollarOrderbyIIR := range dollarOrderbyIR { // explode []string

		dollarOrderbyIIV := dollarOrderbyIIR // string as string
		dollarOrderbyIC = append(dollarOrderbyIC, dollarOrderbyIIV)
	}

	// items.CollectionFormat: "multi"
	dollarOrderbyIS := swag.JoinByFormat(dollarOrderbyIC, "multi")

	return dollarOrderbyIS
}

// bindParamGetDeploymentResourcesUsingGET2 binds the parameter expand
func (o *GetDeploymentResourcesUsingGET2Params) bindParamExpand(formats strfmt.Registry) []string {
	expandIR := o.Expand

	var expandIC []string
	for _, expandIIR := range expandIR { // explode []string

		expandIIV := expandIIR // string as string
		expandIC = append(expandIC, expandIIV)
	}

	// items.CollectionFormat: "multi"
	expandIS := swag.JoinByFormat(expandIC, "multi")

	return expandIS
}

// bindParamGetDeploymentResourcesUsingGET2 binds the parameter names
func (o *GetDeploymentResourcesUsingGET2Params) bindParamNames(formats strfmt.Registry) []string {
	namesIR := o.Names

	var namesIC []string
	for _, namesIIR := range namesIR { // explode []string

		namesIIV := namesIIR // string as string
		namesIC = append(namesIC, namesIIV)
	}

	// items.CollectionFormat: "multi"
	namesIS := swag.JoinByFormat(namesIC, "multi")

	return namesIS
}

// bindParamGetDeploymentResourcesUsingGET2 binds the parameter resourceTypes
func (o *GetDeploymentResourcesUsingGET2Params) bindParamResourceTypes(formats strfmt.Registry) []string {
	resourceTypesIR := o.ResourceTypes

	var resourceTypesIC []string
	for _, resourceTypesIIR := range resourceTypesIR { // explode []string

		resourceTypesIIV := resourceTypesIIR // string as string
		resourceTypesIC = append(resourceTypesIC, resourceTypesIIV)
	}

	// items.CollectionFormat: "multi"
	resourceTypesIS := swag.JoinByFormat(resourceTypesIC, "multi")

	return resourceTypesIS
}

// bindParamGetDeploymentResourcesUsingGET2 binds the parameter tags
func (o *GetDeploymentResourcesUsingGET2Params) bindParamTags(formats strfmt.Registry) []string {
	tagsIR := o.Tags

	var tagsIC []string
	for _, tagsIIR := range tagsIR { // explode []string

		tagsIIV := tagsIIR // string as string
		tagsIC = append(tagsIC, tagsIIV)
	}

	// items.CollectionFormat: "multi"
	tagsIS := swag.JoinByFormat(tagsIC, "multi")

	return tagsIS
}
