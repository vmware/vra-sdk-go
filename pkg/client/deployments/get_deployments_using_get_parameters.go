// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDeploymentsUsingGETParams creates a new GetDeploymentsUsingGETParams object
// with the default values initialized.
func NewGetDeploymentsUsingGETParams() *GetDeploymentsUsingGETParams {
	var ()
	return &GetDeploymentsUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeploymentsUsingGETParamsWithTimeout creates a new GetDeploymentsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDeploymentsUsingGETParamsWithTimeout(timeout time.Duration) *GetDeploymentsUsingGETParams {
	var ()
	return &GetDeploymentsUsingGETParams{

		timeout: timeout,
	}
}

// NewGetDeploymentsUsingGETParamsWithContext creates a new GetDeploymentsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDeploymentsUsingGETParamsWithContext(ctx context.Context) *GetDeploymentsUsingGETParams {
	var ()
	return &GetDeploymentsUsingGETParams{

		Context: ctx,
	}
}

// NewGetDeploymentsUsingGETParamsWithHTTPClient creates a new GetDeploymentsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDeploymentsUsingGETParamsWithHTTPClient(client *http.Client) *GetDeploymentsUsingGETParams {
	var ()
	return &GetDeploymentsUsingGETParams{
		HTTPClient: client,
	}
}

/*GetDeploymentsUsingGETParams contains all the parameters to send to the API endpoint
for the get deployments using g e t operation typically these are written to a http.Request
*/
type GetDeploymentsUsingGETParams struct {

	/*DollarOrderby
	  Sorting criteria in the format: property (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.

	*/
	DollarOrderby []string
	/*DollarSkip
	  Number of records you want to skip

	*/
	DollarSkip *int32
	/*DollarTop
	  Number of records you want

	*/
	DollarTop *int32
	/*CloudAccounts
	  A comma-separated list. Results must be associated with one of these cloud accounts.

	*/
	CloudAccounts []string
	/*CloudTypes
	  A comma-separated list. Results must be associated with one of these endpoint Types

	*/
	CloudTypes []string
	/*ExpandLastRequest
	  Expands deployment last request.

	*/
	ExpandLastRequest *bool
	/*ExpandProject
	  The 'project' field of each resulting deployment will be retrieved.

	*/
	ExpandProject *bool
	/*ExpandResources
	  The 'resources' field of each resulting deployment will be retrieved.

	*/
	ExpandResources *bool
	/*ForceCachedResources
	  The 'resources' field of each deployment in the result list will be read from a cache for a faster query.

	*/
	ForceCachedResources *bool
	/*ForceRefreshResources
	  The 'resources' field of each deployment in the result list will be guaranteed up-to-date.

	*/
	ForceRefreshResources *bool
	/*Ids
	  A comma-separated list. Only deployments with these IDs will be included in the results.

	*/
	Ids []strfmt.UUID
	/*Name
	  Results must have exactly this name.

	*/
	Name *string
	/*Projects
	  A comma-separated list. Results must be associated with one of these project IDs.

	*/
	Projects []string
	/*RequestedBy
	  A comma-separated list. Results must be associated with one of these requesters

	*/
	RequestedBy []string
	/*ResourceTypes
	  A comma-separated list. Results must be associated with one of these resourceType Names.

	*/
	ResourceTypes []string
	/*Search
	  Results must either have names with this string as a prefix or contain this string in their description.

	*/
	Search *string
	/*Status
	  A comma-separated list. Results must be associated with one of these statuses.

	*/
	Status []string
	/*Tags
	  A comma-separated list. Results must be associated with one of these tags

	*/
	Tags []string
	/*Templates
	  A comma-separated list. Results must be associated with one of these templates.

	*/
	Templates []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithTimeout(timeout time.Duration) *GetDeploymentsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithContext(ctx context.Context) *GetDeploymentsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithHTTPClient(client *http.Client) *GetDeploymentsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarOrderby adds the dollarOrderby to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithDollarOrderby(dollarOrderby []string) *GetDeploymentsUsingGETParams {
	o.SetDollarOrderby(dollarOrderby)
	return o
}

// SetDollarOrderby adds the dollarOrderby to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetDollarOrderby(dollarOrderby []string) {
	o.DollarOrderby = dollarOrderby
}

// WithDollarSkip adds the dollarSkip to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithDollarSkip(dollarSkip *int32) *GetDeploymentsUsingGETParams {
	o.SetDollarSkip(dollarSkip)
	return o
}

// SetDollarSkip adds the dollarSkip to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetDollarSkip(dollarSkip *int32) {
	o.DollarSkip = dollarSkip
}

// WithDollarTop adds the dollarTop to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithDollarTop(dollarTop *int32) *GetDeploymentsUsingGETParams {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetDollarTop(dollarTop *int32) {
	o.DollarTop = dollarTop
}

// WithCloudAccounts adds the cloudAccounts to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithCloudAccounts(cloudAccounts []string) *GetDeploymentsUsingGETParams {
	o.SetCloudAccounts(cloudAccounts)
	return o
}

// SetCloudAccounts adds the cloudAccounts to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetCloudAccounts(cloudAccounts []string) {
	o.CloudAccounts = cloudAccounts
}

// WithCloudTypes adds the cloudTypes to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithCloudTypes(cloudTypes []string) *GetDeploymentsUsingGETParams {
	o.SetCloudTypes(cloudTypes)
	return o
}

// SetCloudTypes adds the cloudTypes to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetCloudTypes(cloudTypes []string) {
	o.CloudTypes = cloudTypes
}

// WithExpandLastRequest adds the expandLastRequest to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithExpandLastRequest(expandLastRequest *bool) *GetDeploymentsUsingGETParams {
	o.SetExpandLastRequest(expandLastRequest)
	return o
}

// SetExpandLastRequest adds the expandLastRequest to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetExpandLastRequest(expandLastRequest *bool) {
	o.ExpandLastRequest = expandLastRequest
}

// WithExpandProject adds the expandProject to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithExpandProject(expandProject *bool) *GetDeploymentsUsingGETParams {
	o.SetExpandProject(expandProject)
	return o
}

// SetExpandProject adds the expandProject to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetExpandProject(expandProject *bool) {
	o.ExpandProject = expandProject
}

// WithExpandResources adds the expandResources to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithExpandResources(expandResources *bool) *GetDeploymentsUsingGETParams {
	o.SetExpandResources(expandResources)
	return o
}

// SetExpandResources adds the expandResources to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetExpandResources(expandResources *bool) {
	o.ExpandResources = expandResources
}

// WithForceCachedResources adds the forceCachedResources to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithForceCachedResources(forceCachedResources *bool) *GetDeploymentsUsingGETParams {
	o.SetForceCachedResources(forceCachedResources)
	return o
}

// SetForceCachedResources adds the forceCachedResources to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetForceCachedResources(forceCachedResources *bool) {
	o.ForceCachedResources = forceCachedResources
}

// WithForceRefreshResources adds the forceRefreshResources to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithForceRefreshResources(forceRefreshResources *bool) *GetDeploymentsUsingGETParams {
	o.SetForceRefreshResources(forceRefreshResources)
	return o
}

// SetForceRefreshResources adds the forceRefreshResources to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetForceRefreshResources(forceRefreshResources *bool) {
	o.ForceRefreshResources = forceRefreshResources
}

// WithIds adds the ids to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithIds(ids []strfmt.UUID) *GetDeploymentsUsingGETParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetIds(ids []strfmt.UUID) {
	o.Ids = ids
}

// WithName adds the name to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithName(name *string) *GetDeploymentsUsingGETParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetName(name *string) {
	o.Name = name
}

// WithProjects adds the projects to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithProjects(projects []string) *GetDeploymentsUsingGETParams {
	o.SetProjects(projects)
	return o
}

// SetProjects adds the projects to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetProjects(projects []string) {
	o.Projects = projects
}

// WithRequestedBy adds the requestedBy to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithRequestedBy(requestedBy []string) *GetDeploymentsUsingGETParams {
	o.SetRequestedBy(requestedBy)
	return o
}

// SetRequestedBy adds the requestedBy to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetRequestedBy(requestedBy []string) {
	o.RequestedBy = requestedBy
}

// WithResourceTypes adds the resourceTypes to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithResourceTypes(resourceTypes []string) *GetDeploymentsUsingGETParams {
	o.SetResourceTypes(resourceTypes)
	return o
}

// SetResourceTypes adds the resourceTypes to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetResourceTypes(resourceTypes []string) {
	o.ResourceTypes = resourceTypes
}

// WithSearch adds the search to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithSearch(search *string) *GetDeploymentsUsingGETParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetSearch(search *string) {
	o.Search = search
}

// WithStatus adds the status to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithStatus(status []string) *GetDeploymentsUsingGETParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetStatus(status []string) {
	o.Status = status
}

// WithTags adds the tags to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithTags(tags []string) *GetDeploymentsUsingGETParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetTags(tags []string) {
	o.Tags = tags
}

// WithTemplates adds the templates to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) WithTemplates(templates []string) *GetDeploymentsUsingGETParams {
	o.SetTemplates(templates)
	return o
}

// SetTemplates adds the templates to the get deployments using get params
func (o *GetDeploymentsUsingGETParams) SetTemplates(templates []string) {
	o.Templates = templates
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeploymentsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesDollarOrderby := o.DollarOrderby

	joinedDollarOrderby := swag.JoinByFormat(valuesDollarOrderby, "multi")
	// query array param $orderby
	if err := r.SetQueryParam("$orderby", joinedDollarOrderby...); err != nil {
		return err
	}

	if o.DollarSkip != nil {

		// query param $skip
		var qrDollarSkip int32
		if o.DollarSkip != nil {
			qrDollarSkip = *o.DollarSkip
		}
		qDollarSkip := swag.FormatInt32(qrDollarSkip)
		if qDollarSkip != "" {
			if err := r.SetQueryParam("$skip", qDollarSkip); err != nil {
				return err
			}
		}

	}

	if o.DollarTop != nil {

		// query param $top
		var qrDollarTop int32
		if o.DollarTop != nil {
			qrDollarTop = *o.DollarTop
		}
		qDollarTop := swag.FormatInt32(qrDollarTop)
		if qDollarTop != "" {
			if err := r.SetQueryParam("$top", qDollarTop); err != nil {
				return err
			}
		}

	}

	valuesCloudAccounts := o.CloudAccounts

	joinedCloudAccounts := swag.JoinByFormat(valuesCloudAccounts, "multi")
	// query array param cloudAccounts
	if err := r.SetQueryParam("cloudAccounts", joinedCloudAccounts...); err != nil {
		return err
	}

	valuesCloudTypes := o.CloudTypes

	joinedCloudTypes := swag.JoinByFormat(valuesCloudTypes, "multi")
	// query array param cloudTypes
	if err := r.SetQueryParam("cloudTypes", joinedCloudTypes...); err != nil {
		return err
	}

	if o.ExpandLastRequest != nil {

		// query param expandLastRequest
		var qrExpandLastRequest bool
		if o.ExpandLastRequest != nil {
			qrExpandLastRequest = *o.ExpandLastRequest
		}
		qExpandLastRequest := swag.FormatBool(qrExpandLastRequest)
		if qExpandLastRequest != "" {
			if err := r.SetQueryParam("expandLastRequest", qExpandLastRequest); err != nil {
				return err
			}
		}

	}

	if o.ExpandProject != nil {

		// query param expandProject
		var qrExpandProject bool
		if o.ExpandProject != nil {
			qrExpandProject = *o.ExpandProject
		}
		qExpandProject := swag.FormatBool(qrExpandProject)
		if qExpandProject != "" {
			if err := r.SetQueryParam("expandProject", qExpandProject); err != nil {
				return err
			}
		}

	}

	if o.ExpandResources != nil {

		// query param expandResources
		var qrExpandResources bool
		if o.ExpandResources != nil {
			qrExpandResources = *o.ExpandResources
		}
		qExpandResources := swag.FormatBool(qrExpandResources)
		if qExpandResources != "" {
			if err := r.SetQueryParam("expandResources", qExpandResources); err != nil {
				return err
			}
		}

	}

	if o.ForceCachedResources != nil {

		// query param forceCachedResources
		var qrForceCachedResources bool
		if o.ForceCachedResources != nil {
			qrForceCachedResources = *o.ForceCachedResources
		}
		qForceCachedResources := swag.FormatBool(qrForceCachedResources)
		if qForceCachedResources != "" {
			if err := r.SetQueryParam("forceCachedResources", qForceCachedResources); err != nil {
				return err
			}
		}

	}

	if o.ForceRefreshResources != nil {

		// query param forceRefreshResources
		var qrForceRefreshResources bool
		if o.ForceRefreshResources != nil {
			qrForceRefreshResources = *o.ForceRefreshResources
		}
		qForceRefreshResources := swag.FormatBool(qrForceRefreshResources)
		if qForceRefreshResources != "" {
			if err := r.SetQueryParam("forceRefreshResources", qForceRefreshResources); err != nil {
				return err
			}
		}

	}

	var valuesIds []string
	for _, v := range o.Ids {
		valuesIds = append(valuesIds, v.String())
	}

	joinedIds := swag.JoinByFormat(valuesIds, "multi")
	// query array param ids
	if err := r.SetQueryParam("ids", joinedIds...); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	valuesProjects := o.Projects

	joinedProjects := swag.JoinByFormat(valuesProjects, "multi")
	// query array param projects
	if err := r.SetQueryParam("projects", joinedProjects...); err != nil {
		return err
	}

	valuesRequestedBy := o.RequestedBy

	joinedRequestedBy := swag.JoinByFormat(valuesRequestedBy, "multi")
	// query array param requestedBy
	if err := r.SetQueryParam("requestedBy", joinedRequestedBy...); err != nil {
		return err
	}

	valuesResourceTypes := o.ResourceTypes

	joinedResourceTypes := swag.JoinByFormat(valuesResourceTypes, "multi")
	// query array param resourceTypes
	if err := r.SetQueryParam("resourceTypes", joinedResourceTypes...); err != nil {
		return err
	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	valuesStatus := o.Status

	joinedStatus := swag.JoinByFormat(valuesStatus, "multi")
	// query array param status
	if err := r.SetQueryParam("status", joinedStatus...); err != nil {
		return err
	}

	valuesTags := o.Tags

	joinedTags := swag.JoinByFormat(valuesTags, "multi")
	// query array param tags
	if err := r.SetQueryParam("tags", joinedTags...); err != nil {
		return err
	}

	valuesTemplates := o.Templates

	joinedTemplates := swag.JoinByFormat(valuesTemplates, "multi")
	// query array param templates
	if err := r.SetQueryParam("templates", joinedTemplates...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
