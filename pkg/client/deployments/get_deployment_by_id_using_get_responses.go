// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetDeploymentByIDUsingGETReader is a Reader for the GetDeploymentByIDUsingGET structure.
type GetDeploymentByIDUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeploymentByIDUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeploymentByIDUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDeploymentByIDUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDeploymentByIDUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDeploymentByIDUsingGETOK creates a GetDeploymentByIDUsingGETOK with default headers values
func NewGetDeploymentByIDUsingGETOK() *GetDeploymentByIDUsingGETOK {
	return &GetDeploymentByIDUsingGETOK{}
}

/*GetDeploymentByIDUsingGETOK handles this case with default header values.

OK
*/
type GetDeploymentByIDUsingGETOK struct {
	Payload *models.Deployment
}

func (o *GetDeploymentByIDUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}][%d] getDeploymentByIdUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetDeploymentByIDUsingGETOK) GetPayload() *models.Deployment {
	return o.Payload
}

func (o *GetDeploymentByIDUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Deployment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeploymentByIDUsingGETUnauthorized creates a GetDeploymentByIDUsingGETUnauthorized with default headers values
func NewGetDeploymentByIDUsingGETUnauthorized() *GetDeploymentByIDUsingGETUnauthorized {
	return &GetDeploymentByIDUsingGETUnauthorized{}
}

/*GetDeploymentByIDUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetDeploymentByIDUsingGETUnauthorized struct {
}

func (o *GetDeploymentByIDUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}][%d] getDeploymentByIdUsingGETUnauthorized ", 401)
}

func (o *GetDeploymentByIDUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeploymentByIDUsingGETNotFound creates a GetDeploymentByIDUsingGETNotFound with default headers values
func NewGetDeploymentByIDUsingGETNotFound() *GetDeploymentByIDUsingGETNotFound {
	return &GetDeploymentByIDUsingGETNotFound{}
}

/*GetDeploymentByIDUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetDeploymentByIDUsingGETNotFound struct {
	Payload *models.Error
}

func (o *GetDeploymentByIDUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /deployment/api/deployments/{depId}][%d] getDeploymentByIdUsingGETNotFound  %+v", 404, o.Payload)
}

func (o *GetDeploymentByIDUsingGETNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDeploymentByIDUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
