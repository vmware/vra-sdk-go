// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmailEventConfig EmailEventConfig
//
// Represents an Email Event configuration.
//
// swagger:discriminator EmailEventConfig Represents an Email Event configuration.
type EmailEventConfig interface {
	runtime.Validatable
	runtime.ContextValidatable

	// Email Body.
	// Example: Pipeline-1 execution was successful
	Body() string
	SetBody(string)

	// endpoint
	Endpoint() string
	SetEndpoint(string)

	// event
	// Enum: [SUCCESS FAILURE WAITING CANCELED STARTED]
	Event() string
	SetEvent(string)

	// stage
	Stage() string
	SetStage(string)

	// Subject for the email notification.
	// Example: Pipeline-1 execution notification
	Subject() string
	SetSubject(string)

	// task
	Task() string
	SetTask(string)

	// List of Email IDs of the recipients.
	// Example: ["abc@vmware.com","def@vmware.com"]
	To() []string
	SetTo([]string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type emailEventConfig struct {
	bodyField string

	endpointField string

	eventField string

	stageField string

	subjectField string

	taskField string

	toField []string
}

// Body gets the body of this polymorphic type
func (m *emailEventConfig) Body() string {
	return m.bodyField
}

// SetBody sets the body of this polymorphic type
func (m *emailEventConfig) SetBody(val string) {
	m.bodyField = val
}

// Endpoint gets the endpoint of this polymorphic type
func (m *emailEventConfig) Endpoint() string {
	return m.endpointField
}

// SetEndpoint sets the endpoint of this polymorphic type
func (m *emailEventConfig) SetEndpoint(val string) {
	m.endpointField = val
}

// Event gets the event of this polymorphic type
func (m *emailEventConfig) Event() string {
	return m.eventField
}

// SetEvent sets the event of this polymorphic type
func (m *emailEventConfig) SetEvent(val string) {
	m.eventField = val
}

// Stage gets the stage of this polymorphic type
func (m *emailEventConfig) Stage() string {
	return m.stageField
}

// SetStage sets the stage of this polymorphic type
func (m *emailEventConfig) SetStage(val string) {
	m.stageField = val
}

// Subject gets the subject of this polymorphic type
func (m *emailEventConfig) Subject() string {
	return m.subjectField
}

// SetSubject sets the subject of this polymorphic type
func (m *emailEventConfig) SetSubject(val string) {
	m.subjectField = val
}

// Task gets the task of this polymorphic type
func (m *emailEventConfig) Task() string {
	return m.taskField
}

// SetTask sets the task of this polymorphic type
func (m *emailEventConfig) SetTask(val string) {
	m.taskField = val
}

// To gets the to of this polymorphic type
func (m *emailEventConfig) To() []string {
	return m.toField
}

// SetTo sets the to of this polymorphic type
func (m *emailEventConfig) SetTo(val []string) {
	m.toField = val
}

// UnmarshalEmailEventConfigSlice unmarshals polymorphic slices of EmailEventConfig
func UnmarshalEmailEventConfigSlice(reader io.Reader, consumer runtime.Consumer) ([]EmailEventConfig, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []EmailEventConfig
	for _, element := range elements {
		obj, err := unmarshalEmailEventConfig(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalEmailEventConfig unmarshals polymorphic EmailEventConfig
func UnmarshalEmailEventConfig(reader io.Reader, consumer runtime.Consumer) (EmailEventConfig, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalEmailEventConfig(data, consumer)
}

func unmarshalEmailEventConfig(data []byte, consumer runtime.Consumer) (EmailEventConfig, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Represents an Email Event configuration. property.
	var getType struct {
		RepresentsAnEmailEventConfiguration string `json:"Represents an Email Event configuration."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Represents an Email Event configuration.", "body", getType.RepresentsAnEmailEventConfiguration); err != nil {
		return nil, err
	}

	// The value of Represents an Email Event configuration. is used to determine which type to create and unmarshal the data into
	switch getType.RepresentsAnEmailEventConfiguration {
	case "EmailEventConfig":
		var result emailEventConfig
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Represents an Email Event configuration. value: %q", getType.RepresentsAnEmailEventConfiguration)
}

// Validate validates this email event config
func (m *emailEventConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var emailEventConfigTypeEventPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCESS","FAILURE","WAITING","CANCELED","STARTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		emailEventConfigTypeEventPropEnum = append(emailEventConfigTypeEventPropEnum, v)
	}
}

const (

	// EmailEventConfigEventSUCCESS captures enum value "SUCCESS"
	EmailEventConfigEventSUCCESS string = "SUCCESS"

	// EmailEventConfigEventFAILURE captures enum value "FAILURE"
	EmailEventConfigEventFAILURE string = "FAILURE"

	// EmailEventConfigEventWAITING captures enum value "WAITING"
	EmailEventConfigEventWAITING string = "WAITING"

	// EmailEventConfigEventCANCELED captures enum value "CANCELED"
	EmailEventConfigEventCANCELED string = "CANCELED"

	// EmailEventConfigEventSTARTED captures enum value "STARTED"
	EmailEventConfigEventSTARTED string = "STARTED"
)

// prop value enum
func (m *emailEventConfig) validateEventEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, emailEventConfigTypeEventPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *emailEventConfig) validateEvent(formats strfmt.Registry) error {
	if swag.IsZero(m.Event()) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventEnum("event", "body", m.Event()); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this email event config based on context it is used
func (m *emailEventConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
