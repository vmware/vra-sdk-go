// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GerritTriggerPatch GerritTriggerPatch
//
// Contains the flag to enable or disable a Gerrit Trigger.
//
// swagger:discriminator GerritTriggerPatch Contains the flag to enable or disable a Gerrit Trigger.
type GerritTriggerPatch interface {
	runtime.Validatable
	runtime.ContextValidatable

	// Enable/Disable a Gerrit Trigger.
	// Example: true
	// Required: true
	Enabled() *bool
	SetEnabled(*bool)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type gerritTriggerPatch struct {
	enabledField *bool
}

// Enabled gets the enabled of this polymorphic type
func (m *gerritTriggerPatch) Enabled() *bool {
	return m.enabledField
}

// SetEnabled sets the enabled of this polymorphic type
func (m *gerritTriggerPatch) SetEnabled(val *bool) {
	m.enabledField = val
}

// UnmarshalGerritTriggerPatchSlice unmarshals polymorphic slices of GerritTriggerPatch
func UnmarshalGerritTriggerPatchSlice(reader io.Reader, consumer runtime.Consumer) ([]GerritTriggerPatch, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []GerritTriggerPatch
	for _, element := range elements {
		obj, err := unmarshalGerritTriggerPatch(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalGerritTriggerPatch unmarshals polymorphic GerritTriggerPatch
func UnmarshalGerritTriggerPatch(reader io.Reader, consumer runtime.Consumer) (GerritTriggerPatch, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalGerritTriggerPatch(data, consumer)
}

func unmarshalGerritTriggerPatch(data []byte, consumer runtime.Consumer) (GerritTriggerPatch, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Contains the flag to enable or disable a Gerrit Trigger. property.
	var getType struct {
		ContainsTheFlagToEnableOrDisableaGerritTrigger string `json:"Contains the flag to enable or disable a Gerrit Trigger."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Contains the flag to enable or disable a Gerrit Trigger.", "body", getType.ContainsTheFlagToEnableOrDisableaGerritTrigger); err != nil {
		return nil, err
	}

	// The value of Contains the flag to enable or disable a Gerrit Trigger. is used to determine which type to create and unmarshal the data into
	switch getType.ContainsTheFlagToEnableOrDisableaGerritTrigger {
	case "GerritTriggerPatch":
		var result gerritTriggerPatch
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Contains the flag to enable or disable a Gerrit Trigger. value: %q", getType.ContainsTheFlagToEnableOrDisableaGerritTrigger)
}

// Validate validates this gerrit trigger patch
func (m *gerritTriggerPatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *gerritTriggerPatch) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled()); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this gerrit trigger patch based on context it is used
func (m *gerritTriggerPatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
