// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateMachineSpecification update machine specification
//
// swagger:model UpdateMachineSpecification
type UpdateMachineSpecification struct {

	// A valid cloud config data in json-escaped yaml syntax
	BootConfig *MachineBootConfig `json:"bootConfig,omitempty"`

	// Additional custom properties that may be used to extend the machine. Internal custom properties (for example, prefixed with: "__") are discarded.
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// Describes machine within the scope of your organization and is not propagated to the cloud
	Description string `json:"description,omitempty"`

	// A set of tag keys and optional values that should be set on any resource that is produced from this specification.
	// Example: [ { \"key\" : \"ownedBy\", \"value\": \"Rainpole\" } ]
	Tags []*Tag `json:"tags"`
}

// Validate validates this update machine specification
func (m *UpdateMachineSpecification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBootConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateMachineSpecification) validateBootConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.BootConfig) { // not required
		return nil
	}

	if m.BootConfig != nil {
		if err := m.BootConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bootConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bootConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateMachineSpecification) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update machine specification based on the context it is used
func (m *UpdateMachineSpecification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBootConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateMachineSpecification) contextValidateBootConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.BootConfig != nil {
		if err := m.BootConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bootConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bootConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateMachineSpecification) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateMachineSpecification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateMachineSpecification) UnmarshalBinary(b []byte) error {
	var res UpdateMachineSpecification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
