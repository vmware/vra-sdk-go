// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GerritListenerSpec GerritListenerSpec
//
// A Gerrit Listener streams for events on the Gerrit server.
//
// swagger:discriminator GerritListenerSpec A Gerrit Listener streams for events on the Gerrit server.
type GerritListenerSpec interface {
	runtime.Validatable
	runtime.ContextValidatable

	// This token is used to authenticate when calling VMware Cloud Services APIs. These tokens are scoped within the organization.
	// Example: cKNNVCSHijnaxlrfnVsxUYr6wM2g5Bg11tfnotmWb9XdA5kpUCvI2ubJojTIGp9g
	// Required: true
	APIToken() *string
	SetAPIToken(*string)

	// Indicates whether the connection with the Gerrit Server to start receiving events is created or not.
	// Example: true
	Connected() bool
	SetConnected(bool)

	// A human-friendly description.
	// Required: true
	Description() *string
	SetDescription(*string)

	// The name of the Gerrit Endpoint.
	// Example: Gerrit-Endpoint
	// Required: true
	Endpoint() *string
	SetEndpoint(*string)

	// A human-friendly name used as an identifier in APIs that support this option
	// Example: My-Name
	// Required: true
	Name() *string
	SetName(*string)

	// The project this entity belongs to.
	// Example: My-Project
	Project() string
	SetProject(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type gerritListenerSpec struct {
	apiTokenField *string

	connectedField bool

	descriptionField *string

	endpointField *string

	nameField *string

	projectField string
}

// APIToken gets the api token of this polymorphic type
func (m *gerritListenerSpec) APIToken() *string {
	return m.apiTokenField
}

// SetAPIToken sets the api token of this polymorphic type
func (m *gerritListenerSpec) SetAPIToken(val *string) {
	m.apiTokenField = val
}

// Connected gets the connected of this polymorphic type
func (m *gerritListenerSpec) Connected() bool {
	return m.connectedField
}

// SetConnected sets the connected of this polymorphic type
func (m *gerritListenerSpec) SetConnected(val bool) {
	m.connectedField = val
}

// Description gets the description of this polymorphic type
func (m *gerritListenerSpec) Description() *string {
	return m.descriptionField
}

// SetDescription sets the description of this polymorphic type
func (m *gerritListenerSpec) SetDescription(val *string) {
	m.descriptionField = val
}

// Endpoint gets the endpoint of this polymorphic type
func (m *gerritListenerSpec) Endpoint() *string {
	return m.endpointField
}

// SetEndpoint sets the endpoint of this polymorphic type
func (m *gerritListenerSpec) SetEndpoint(val *string) {
	m.endpointField = val
}

// Name gets the name of this polymorphic type
func (m *gerritListenerSpec) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *gerritListenerSpec) SetName(val *string) {
	m.nameField = val
}

// Project gets the project of this polymorphic type
func (m *gerritListenerSpec) Project() string {
	return m.projectField
}

// SetProject sets the project of this polymorphic type
func (m *gerritListenerSpec) SetProject(val string) {
	m.projectField = val
}

// UnmarshalGerritListenerSpecSlice unmarshals polymorphic slices of GerritListenerSpec
func UnmarshalGerritListenerSpecSlice(reader io.Reader, consumer runtime.Consumer) ([]GerritListenerSpec, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []GerritListenerSpec
	for _, element := range elements {
		obj, err := unmarshalGerritListenerSpec(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalGerritListenerSpec unmarshals polymorphic GerritListenerSpec
func UnmarshalGerritListenerSpec(reader io.Reader, consumer runtime.Consumer) (GerritListenerSpec, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalGerritListenerSpec(data, consumer)
}

func unmarshalGerritListenerSpec(data []byte, consumer runtime.Consumer) (GerritListenerSpec, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the A Gerrit Listener streams for events on the Gerrit server. property.
	var getType struct {
		AGerritListenerStreamsForEventsOnTheGerritServer string `json:"A Gerrit Listener streams for events on the Gerrit server."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("A Gerrit Listener streams for events on the Gerrit server.", "body", getType.AGerritListenerStreamsForEventsOnTheGerritServer); err != nil {
		return nil, err
	}

	// The value of A Gerrit Listener streams for events on the Gerrit server. is used to determine which type to create and unmarshal the data into
	switch getType.AGerritListenerStreamsForEventsOnTheGerritServer {
	case "GerritListenerSpec":
		var result gerritListenerSpec
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid A Gerrit Listener streams for events on the Gerrit server. value: %q", getType.AGerritListenerStreamsForEventsOnTheGerritServer)
}

// Validate validates this gerrit listener spec
func (m *gerritListenerSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *gerritListenerSpec) validateAPIToken(formats strfmt.Registry) error {

	if err := validate.Required("apiToken", "body", m.APIToken()); err != nil {
		return err
	}

	return nil
}

func (m *gerritListenerSpec) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description()); err != nil {
		return err
	}

	return nil
}

func (m *gerritListenerSpec) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint()); err != nil {
		return err
	}

	return nil
}

func (m *gerritListenerSpec) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this gerrit listener spec based on context it is used
func (m *gerritListenerSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
