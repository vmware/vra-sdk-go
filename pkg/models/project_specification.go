// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectSpecification ProjectSpecification
//
// Represents a specification for a project. A Project is a group of users.
//
// swagger:discriminator ProjectSpecification Represents a specification for a project. A Project is a group of users.
type ProjectSpecification interface {
	runtime.Validatable
	runtime.ContextValidatable

	Administrators() []Principal
	SetAdministrators([]Principal)

	// List of constraints of the project.
	// Example: {"network":{"conditions":[{"enforcement":"HARD","expression":{"key":"key","value":"value"},"occurrence":"MUST_OCCUR","type":"TAG"}]}}
	Constraints() map[string]ProjectConstraint
	SetConstraints(map[string]ProjectConstraint)

	Cost() ProjectCost
	SetCost(ProjectCost)

	// A human-friendly description.
	// Example: my-description
	Description() string
	SetDescription(string)

	Members() []Principal
	SetMembers([]Principal)

	// A human-friendly name used as an identifier in APIs that support this option.
	// Example: my-name
	// Required: true
	Name() *string
	SetName(*string)

	// The timeout that should be used for Blueprint operations and Provisioning tasks. The timeout is in seconds.
	OperationTimeout() int64
	SetOperationTimeout(int64)

	// List of properties of the project, to be applied to any resource provisioned within the project.
	//
	// The project placement policy is set through the property with key: __projectPlacementPolicy, which can take 1 of only 2 possible values DEFAULT or SPREAD. If not specified, it is set as DEFAULT.
	//
	// The naming template of resources provisioned in this project can be specified through the property with key: __namingTemplate.
	// Hint: Avoid conflicting names by generating digits in names with ${######}
	//
	// You can allow Terraform cloudzone mapping through the property with key: __allowTerraformCloudzoneMapping. It can be set to either true or false. By default, it is set to false.
	// Example: {"__allowTerraformCloudzoneMapping":"true","__namingTemplate":"my-resource-template-${######}","__projectPlacementPolicy":"SPREAD","myproperty":"enforcement"}
	Properties() map[string]string
	SetProperties(map[string]string)

	// Specifies whether the resources in this projects are shared or not.
	SharedResources() *bool
	SetSharedResources(*bool)

	Viewers() []Principal
	SetViewers([]Principal)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type projectSpecification struct {
	administratorsField []Principal

	constraintsField map[string]ProjectConstraint

	costField ProjectCost

	descriptionField string

	membersField []Principal

	nameField *string

	operationTimeoutField int64

	propertiesField map[string]string

	sharedResourcesField *bool

	viewersField []Principal
}

// Administrators gets the administrators of this polymorphic type
func (m *projectSpecification) Administrators() []Principal {
	return m.administratorsField
}

// SetAdministrators sets the administrators of this polymorphic type
func (m *projectSpecification) SetAdministrators(val []Principal) {
	m.administratorsField = val
}

// Constraints gets the constraints of this polymorphic type
func (m *projectSpecification) Constraints() map[string]ProjectConstraint {
	return m.constraintsField
}

// SetConstraints sets the constraints of this polymorphic type
func (m *projectSpecification) SetConstraints(val map[string]ProjectConstraint) {
	m.constraintsField = val
}

// Cost gets the cost of this polymorphic type
func (m *projectSpecification) Cost() ProjectCost {
	return m.costField
}

// SetCost sets the cost of this polymorphic type
func (m *projectSpecification) SetCost(val ProjectCost) {
	m.costField = val
}

// Description gets the description of this polymorphic type
func (m *projectSpecification) Description() string {
	return m.descriptionField
}

// SetDescription sets the description of this polymorphic type
func (m *projectSpecification) SetDescription(val string) {
	m.descriptionField = val
}

// Members gets the members of this polymorphic type
func (m *projectSpecification) Members() []Principal {
	return m.membersField
}

// SetMembers sets the members of this polymorphic type
func (m *projectSpecification) SetMembers(val []Principal) {
	m.membersField = val
}

// Name gets the name of this polymorphic type
func (m *projectSpecification) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *projectSpecification) SetName(val *string) {
	m.nameField = val
}

// OperationTimeout gets the operation timeout of this polymorphic type
func (m *projectSpecification) OperationTimeout() int64 {
	return m.operationTimeoutField
}

// SetOperationTimeout sets the operation timeout of this polymorphic type
func (m *projectSpecification) SetOperationTimeout(val int64) {
	m.operationTimeoutField = val
}

// Properties gets the properties of this polymorphic type
func (m *projectSpecification) Properties() map[string]string {
	return m.propertiesField
}

// SetProperties sets the properties of this polymorphic type
func (m *projectSpecification) SetProperties(val map[string]string) {
	m.propertiesField = val
}

// SharedResources gets the shared resources of this polymorphic type
func (m *projectSpecification) SharedResources() *bool {
	return m.sharedResourcesField
}

// SetSharedResources sets the shared resources of this polymorphic type
func (m *projectSpecification) SetSharedResources(val *bool) {
	m.sharedResourcesField = val
}

// Viewers gets the viewers of this polymorphic type
func (m *projectSpecification) Viewers() []Principal {
	return m.viewersField
}

// SetViewers sets the viewers of this polymorphic type
func (m *projectSpecification) SetViewers(val []Principal) {
	m.viewersField = val
}

// UnmarshalProjectSpecificationSlice unmarshals polymorphic slices of ProjectSpecification
func UnmarshalProjectSpecificationSlice(reader io.Reader, consumer runtime.Consumer) ([]ProjectSpecification, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ProjectSpecification
	for _, element := range elements {
		obj, err := unmarshalProjectSpecification(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalProjectSpecification unmarshals polymorphic ProjectSpecification
func UnmarshalProjectSpecification(reader io.Reader, consumer runtime.Consumer) (ProjectSpecification, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalProjectSpecification(data, consumer)
}

func unmarshalProjectSpecification(data []byte, consumer runtime.Consumer) (ProjectSpecification, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Represents a specification for a project. A Project is a group of users. property.
	var getType struct {
		RepresentsaSpecificationForaProjectAProjectIsaGroupOfUsers string `json:"Represents a specification for a project. A Project is a group of users."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Represents a specification for a project. A Project is a group of users.", "body", getType.RepresentsaSpecificationForaProjectAProjectIsaGroupOfUsers); err != nil {
		return nil, err
	}

	// The value of Represents a specification for a project. A Project is a group of users. is used to determine which type to create and unmarshal the data into
	switch getType.RepresentsaSpecificationForaProjectAProjectIsaGroupOfUsers {
	case "ProjectSpecification":
		var result projectSpecification
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Represents a specification for a project. A Project is a group of users. value: %q", getType.RepresentsaSpecificationForaProjectAProjectIsaGroupOfUsers)
}

// Validate validates this project specification
func (m *projectSpecification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdministrators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstraints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *projectSpecification) validateAdministrators(formats strfmt.Registry) error {
	if swag.IsZero(m.Administrators()) { // not required
		return nil
	}

	for i := 0; i < len(m.Administrators()); i++ {

		if err := m.administratorsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("administrators" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *projectSpecification) validateConstraints(formats strfmt.Registry) error {
	if swag.IsZero(m.Constraints()) { // not required
		return nil
	}

	for k := range m.Constraints() {

		if err := validate.Required("constraints"+"."+k, "body", m.Constraints()[k]); err != nil {
			return err
		}
		if val, ok := m.Constraints()[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *projectSpecification) validateCost(formats strfmt.Registry) error {
	if swag.IsZero(m.Cost()) { // not required
		return nil
	}

	if err := m.Cost().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cost")
		}
		return err
	}

	return nil
}

func (m *projectSpecification) validateMembers(formats strfmt.Registry) error {
	if swag.IsZero(m.Members()) { // not required
		return nil
	}

	for i := 0; i < len(m.Members()); i++ {

		if err := m.membersField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("members" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *projectSpecification) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

func (m *projectSpecification) validateViewers(formats strfmt.Registry) error {
	if swag.IsZero(m.Viewers()) { // not required
		return nil
	}

	for i := 0; i < len(m.Viewers()); i++ {

		if err := m.viewersField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewers" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this project specification based on the context it is used
func (m *projectSpecification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdministrators(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConstraints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMembers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *projectSpecification) contextValidateAdministrators(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Administrators()); i++ {

		if err := m.administratorsField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("administrators" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *projectSpecification) contextValidateConstraints(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Constraints() {

		if val, ok := m.Constraints()[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *projectSpecification) contextValidateCost(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Cost().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cost")
		}
		return err
	}

	return nil
}

func (m *projectSpecification) contextValidateMembers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Members()); i++ {

		if err := m.membersField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("members" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *projectSpecification) contextValidateViewers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Viewers()); i++ {

		if err := m.viewersField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewers" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}
