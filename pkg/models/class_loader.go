// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ClassLoader class loader
// swagger:model ClassLoader
type ClassLoader struct {

	// defined packages
	DefinedPackages []*Package `json:"definedPackages"`

	// name
	Name string `json:"name,omitempty"`

	// parent
	Parent *ClassLoader `json:"parent,omitempty"`

	// registered as parallel capable
	RegisteredAsParallelCapable bool `json:"registeredAsParallelCapable,omitempty"`

	// unnamed module
	UnnamedModule *Module `json:"unnamedModule,omitempty"`
}

// Validate validates this class loader
func (m *ClassLoader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefinedPackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnnamedModule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClassLoader) validateDefinedPackages(formats strfmt.Registry) error {

	if swag.IsZero(m.DefinedPackages) { // not required
		return nil
	}

	for i := 0; i < len(m.DefinedPackages); i++ {
		if swag.IsZero(m.DefinedPackages[i]) { // not required
			continue
		}

		if m.DefinedPackages[i] != nil {
			if err := m.DefinedPackages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("definedPackages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClassLoader) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *ClassLoader) validateUnnamedModule(formats strfmt.Registry) error {

	if swag.IsZero(m.UnnamedModule) { // not required
		return nil
	}

	if m.UnnamedModule != nil {
		if err := m.UnnamedModule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unnamedModule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClassLoader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClassLoader) UnmarshalBinary(b []byte) error {
	var res ClassLoader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
