// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogSource CatalogSource
//
// # Represents a source of templates from which Catalog Items can be created
//
// swagger:model CatalogSource
type CatalogSource struct {

	// Source custom configuration
	// Required: true
	Config interface{} `json:"config"`

	// Creation time
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Created By
	CreatedBy string `json:"createdBy,omitempty"`

	// Catalog Source description
	Description string `json:"description,omitempty"`

	// Global flag indicating that all the items can be requested across all projects.
	Global bool `json:"global,omitempty"`

	// Default Icon Id
	// Format: uuid
	IconID strfmt.UUID `json:"iconId,omitempty"`

	// Catalog Source id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Number of items found
	ItemsFound int32 `json:"itemsFound,omitempty"`

	// Number of items imported.
	ItemsImported int32 `json:"itemsImported,omitempty"`

	// Last import completion time
	// Format: date-time
	LastImportCompletedAt strfmt.DateTime `json:"lastImportCompletedAt,omitempty"`

	// Last import error(s)
	LastImportErrors []string `json:"lastImportErrors"`

	// Last import start time
	// Format: date-time
	LastImportStartedAt strfmt.DateTime `json:"lastImportStartedAt,omitempty"`

	// Update time
	// Format: date-time
	LastUpdatedAt strfmt.DateTime `json:"lastUpdatedAt,omitempty"`

	// Updated By
	LastUpdatedBy string `json:"lastUpdatedBy,omitempty"`

	// Catalog Source name
	// Required: true
	Name *string `json:"name"`

	// Project id where the source belongs
	ProjectID string `json:"projectId,omitempty"`

	// Type of source, e.g. blueprint, CFT... etc
	// Required: true
	TypeID *string `json:"typeId"`
}

// Validate validates this catalog source
func (m *CatalogSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastImportCompletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastImportStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogSource) validateConfig(formats strfmt.Registry) error {

	if m.Config == nil {
		return errors.Required("config", "body", nil)
	}

	return nil
}

func (m *CatalogSource) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CatalogSource) validateIconID(formats strfmt.Registry) error {
	if swag.IsZero(m.IconID) { // not required
		return nil
	}

	if err := validate.FormatOf("iconId", "body", "uuid", m.IconID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CatalogSource) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CatalogSource) validateLastImportCompletedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastImportCompletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("lastImportCompletedAt", "body", "date-time", m.LastImportCompletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CatalogSource) validateLastImportStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastImportStartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("lastImportStartedAt", "body", "date-time", m.LastImportStartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CatalogSource) validateLastUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedAt", "body", "date-time", m.LastUpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CatalogSource) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CatalogSource) validateTypeID(formats strfmt.Registry) error {

	if err := validate.Required("typeId", "body", m.TypeID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this catalog source based on context it is used
func (m *CatalogSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CatalogSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogSource) UnmarshalBinary(b []byte) error {
	var res CatalogSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
