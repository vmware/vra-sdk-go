// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyDecisionPolicy PolicyDecisionPolicy
//
// Element of a decision.
// swagger:model PolicyDecisionPolicy
type PolicyDecisionPolicy struct {

	// enforcement type
	// Enum: [SOFT HARD]
	EnforcementType string `json:"enforcementType,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// rank
	Rank int32 `json:"rank,omitempty"`

	// status
	// Enum: [NOT_ENFORCED ENFORCED CONFLICT]
	Status string `json:"status,omitempty"`
}

// Validate validates this policy decision policy
func (m *PolicyDecisionPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnforcementType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var policyDecisionPolicyTypeEnforcementTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SOFT","HARD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyDecisionPolicyTypeEnforcementTypePropEnum = append(policyDecisionPolicyTypeEnforcementTypePropEnum, v)
	}
}

const (

	// PolicyDecisionPolicyEnforcementTypeSOFT captures enum value "SOFT"
	PolicyDecisionPolicyEnforcementTypeSOFT string = "SOFT"

	// PolicyDecisionPolicyEnforcementTypeHARD captures enum value "HARD"
	PolicyDecisionPolicyEnforcementTypeHARD string = "HARD"
)

// prop value enum
func (m *PolicyDecisionPolicy) validateEnforcementTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, policyDecisionPolicyTypeEnforcementTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PolicyDecisionPolicy) validateEnforcementType(formats strfmt.Registry) error {

	if swag.IsZero(m.EnforcementType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnforcementTypeEnum("enforcementType", "body", m.EnforcementType); err != nil {
		return err
	}

	return nil
}

func (m *PolicyDecisionPolicy) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var policyDecisionPolicyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOT_ENFORCED","ENFORCED","CONFLICT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyDecisionPolicyTypeStatusPropEnum = append(policyDecisionPolicyTypeStatusPropEnum, v)
	}
}

const (

	// PolicyDecisionPolicyStatusNOTENFORCED captures enum value "NOT_ENFORCED"
	PolicyDecisionPolicyStatusNOTENFORCED string = "NOT_ENFORCED"

	// PolicyDecisionPolicyStatusENFORCED captures enum value "ENFORCED"
	PolicyDecisionPolicyStatusENFORCED string = "ENFORCED"

	// PolicyDecisionPolicyStatusCONFLICT captures enum value "CONFLICT"
	PolicyDecisionPolicyStatusCONFLICT string = "CONFLICT"
)

// prop value enum
func (m *PolicyDecisionPolicy) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, policyDecisionPolicyTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PolicyDecisionPolicy) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyDecisionPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyDecisionPolicy) UnmarshalBinary(b []byte) error {
	var res PolicyDecisionPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
