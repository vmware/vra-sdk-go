// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectRoles ProjectRoles
//
// swagger:model ProjectRoles
type ProjectRoles struct {
	administratorsField PrincipalRoleAssignment

	membersField PrincipalRoleAssignment

	viewersField PrincipalRoleAssignment
}

// Administrators gets the administrators of this base type
func (m *ProjectRoles) Administrators() PrincipalRoleAssignment {
	return m.administratorsField
}

// SetAdministrators sets the administrators of this base type
func (m *ProjectRoles) SetAdministrators(val PrincipalRoleAssignment) {
	m.administratorsField = val
}

// Members gets the members of this base type
func (m *ProjectRoles) Members() PrincipalRoleAssignment {
	return m.membersField
}

// SetMembers sets the members of this base type
func (m *ProjectRoles) SetMembers(val PrincipalRoleAssignment) {
	m.membersField = val
}

// Viewers gets the viewers of this base type
func (m *ProjectRoles) Viewers() PrincipalRoleAssignment {
	return m.viewersField
}

// SetViewers sets the viewers of this base type
func (m *ProjectRoles) SetViewers(val PrincipalRoleAssignment) {
	m.viewersField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ProjectRoles) UnmarshalJSON(raw []byte) error {
	var data struct {
		Administrators json.RawMessage `json:"administrators,omitempty"`

		Members json.RawMessage `json:"members,omitempty"`

		Viewers json.RawMessage `json:"viewers,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var propAdministrators PrincipalRoleAssignment
	if string(data.Administrators) != "null" {
		administrators, err := UnmarshalPrincipalRoleAssignment(bytes.NewBuffer(data.Administrators), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propAdministrators = administrators
	}
	var propMembers PrincipalRoleAssignment
	if string(data.Members) != "null" {
		members, err := UnmarshalPrincipalRoleAssignment(bytes.NewBuffer(data.Members), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propMembers = members
	}
	var propViewers PrincipalRoleAssignment
	if string(data.Viewers) != "null" {
		viewers, err := UnmarshalPrincipalRoleAssignment(bytes.NewBuffer(data.Viewers), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propViewers = viewers
	}

	var result ProjectRoles

	// administrators
	result.administratorsField = propAdministrators

	// members
	result.membersField = propMembers

	// viewers
	result.viewersField = propViewers

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ProjectRoles) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Administrators PrincipalRoleAssignment `json:"administrators,omitempty"`

		Members PrincipalRoleAssignment `json:"members,omitempty"`

		Viewers PrincipalRoleAssignment `json:"viewers,omitempty"`
	}{

		Administrators: m.administratorsField,

		Members: m.membersField,

		Viewers: m.viewersField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this project roles
func (m *ProjectRoles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdministrators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectRoles) validateAdministrators(formats strfmt.Registry) error {
	if swag.IsZero(m.Administrators()) { // not required
		return nil
	}

	if err := m.Administrators().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("administrators")
		}
		return err
	}

	return nil
}

func (m *ProjectRoles) validateMembers(formats strfmt.Registry) error {
	if swag.IsZero(m.Members()) { // not required
		return nil
	}

	if err := m.Members().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("members")
		}
		return err
	}

	return nil
}

func (m *ProjectRoles) validateViewers(formats strfmt.Registry) error {
	if swag.IsZero(m.Viewers()) { // not required
		return nil
	}

	if err := m.Viewers().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("viewers")
		}
		return err
	}

	return nil
}

// ContextValidate validate this project roles based on the context it is used
func (m *ProjectRoles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdministrators(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMembers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectRoles) contextValidateAdministrators(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Administrators().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("administrators")
		}
		return err
	}

	return nil
}

func (m *ProjectRoles) contextValidateMembers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Members().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("members")
		}
		return err
	}

	return nil
}

func (m *ProjectRoles) contextValidateViewers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Viewers().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("viewers")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectRoles) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectRoles) UnmarshalBinary(b []byte) error {
	var res ProjectRoles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
