// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CustomIntegrationPatchRequest CustomIntegrationPatchRequest
//
// # Patch Request for a CustomIntegration
//
// swagger:discriminator CustomIntegrationPatchRequest Patch Request for a CustomIntegration
type CustomIntegrationPatchRequest interface {
	runtime.Validatable
	runtime.ContextValidatable

	// Indicates if a version of CustomIntegration should be set as 'LATEST'
	// Example: true
	SetLatest() bool
	SetSetLatest(bool)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type customIntegrationPatchRequest struct {
	setLatestField bool
}

// SetLatest gets the set latest of this polymorphic type
func (m *customIntegrationPatchRequest) SetLatest() bool {
	return m.setLatestField
}

// SetSetLatest sets the set latest of this polymorphic type
func (m *customIntegrationPatchRequest) SetSetLatest(val bool) {
	m.setLatestField = val
}

// UnmarshalCustomIntegrationPatchRequestSlice unmarshals polymorphic slices of CustomIntegrationPatchRequest
func UnmarshalCustomIntegrationPatchRequestSlice(reader io.Reader, consumer runtime.Consumer) ([]CustomIntegrationPatchRequest, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []CustomIntegrationPatchRequest
	for _, element := range elements {
		obj, err := unmarshalCustomIntegrationPatchRequest(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalCustomIntegrationPatchRequest unmarshals polymorphic CustomIntegrationPatchRequest
func UnmarshalCustomIntegrationPatchRequest(reader io.Reader, consumer runtime.Consumer) (CustomIntegrationPatchRequest, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalCustomIntegrationPatchRequest(data, consumer)
}

func unmarshalCustomIntegrationPatchRequest(data []byte, consumer runtime.Consumer) (CustomIntegrationPatchRequest, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Patch Request for a CustomIntegration property.
	var getType struct {
		PatchRequestForaCustomIntegration string `json:"Patch Request for a CustomIntegration"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Patch Request for a CustomIntegration", "body", getType.PatchRequestForaCustomIntegration); err != nil {
		return nil, err
	}

	// The value of Patch Request for a CustomIntegration is used to determine which type to create and unmarshal the data into
	switch getType.PatchRequestForaCustomIntegration {
	case "CustomIntegrationPatchRequest":
		var result customIntegrationPatchRequest
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Patch Request for a CustomIntegration value: %q", getType.PatchRequestForaCustomIntegration)
}

// Validate validates this custom integration patch request
func (m *customIntegrationPatchRequest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this custom integration patch request based on context it is used
func (m *customIntegrationPatchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
