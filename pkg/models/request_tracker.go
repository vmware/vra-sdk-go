// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestTracker An object used to track long-running operations.
// swagger:model RequestTracker
type RequestTracker struct {

	// ID of the deployment, this request is connected to.
	DeploymentID string `json:"deploymentId,omitempty"`

	// ID of this request.
	// Required: true
	ID *string `json:"id"`

	// Status message of the request.
	Message string `json:"message,omitempty"`

	// Name of the operation.
	Name string `json:"name,omitempty"`

	// Progress of the request as percentage.
	// Required: true
	Progress *int32 `json:"progress"`

	// Collection of resources.
	Resources []string `json:"resources"`

	// Self link of this request.
	// Required: true
	SelfLink *string `json:"selfLink"`

	// Status of the request.
	// Required: true
	// Enum: [FINISHED INPROGRESS FAILED]
	Status *string `json:"status"`
}

// Validate validates this request tracker
func (m *RequestTracker) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestTracker) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RequestTracker) validateProgress(formats strfmt.Registry) error {

	if err := validate.Required("progress", "body", m.Progress); err != nil {
		return err
	}

	return nil
}

func (m *RequestTracker) validateSelfLink(formats strfmt.Registry) error {

	if err := validate.Required("selfLink", "body", m.SelfLink); err != nil {
		return err
	}

	return nil
}

var requestTrackerTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FINISHED","INPROGRESS","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestTrackerTypeStatusPropEnum = append(requestTrackerTypeStatusPropEnum, v)
	}
}

const (

	// RequestTrackerStatusFINISHED captures enum value "FINISHED"
	RequestTrackerStatusFINISHED string = "FINISHED"

	// RequestTrackerStatusINPROGRESS captures enum value "INPROGRESS"
	RequestTrackerStatusINPROGRESS string = "INPROGRESS"

	// RequestTrackerStatusFAILED captures enum value "FAILED"
	RequestTrackerStatusFAILED string = "FAILED"
)

// prop value enum
func (m *RequestTracker) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, requestTrackerTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RequestTracker) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RequestTracker) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestTracker) UnmarshalBinary(b []byte) error {
	var res RequestTracker
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
