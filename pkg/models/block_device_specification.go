// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlockDeviceSpecification block device specification
// swagger:model BlockDeviceSpecification
type BlockDeviceSpecification struct {

	// Capacity of the block device in GB.
	// Required: true
	CapacityInGB *int32 `json:"capacityInGB"`

	// Constraints that are used to drive placement policies for the block device that is produced from this specification. Constraint expressions are matched against tags on existing placement targets.
	Constraints []*Constraint `json:"constraints"`

	// Additional custom properties that may be used to extend the block device.
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// A human-friendly description.
	Description string `json:"description,omitempty"`

	// Content of a disk, base64 encoded.
	DiskContentBase64 string `json:"diskContentBase64,omitempty"`

	// Indicates whether the block device should be encrypted or not.
	Encrypted bool `json:"encrypted,omitempty"`

	// A human-friendly name used as an identifier in APIs that support this option.
	// Required: true
	Name *string `json:"name"`

	// The id of the project the current user belongs to.
	// Required: true
	ProjectID *string `json:"projectId"`

	// Reference to URI using which the block device has to be created.
	SourceReference string `json:"sourceReference,omitempty"`

	// A set of tag keys and optional values that should be set on any resource that is produced from this specification.
	Tags []*Tag `json:"tags"`
}

// Validate validates this block device specification
func (m *BlockDeviceSpecification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacityInGB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstraints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockDeviceSpecification) validateCapacityInGB(formats strfmt.Registry) error {

	if err := validate.Required("capacityInGB", "body", m.CapacityInGB); err != nil {
		return err
	}

	return nil
}

func (m *BlockDeviceSpecification) validateConstraints(formats strfmt.Registry) error {

	if swag.IsZero(m.Constraints) { // not required
		return nil
	}

	for i := 0; i < len(m.Constraints); i++ {
		if swag.IsZero(m.Constraints[i]) { // not required
			continue
		}

		if m.Constraints[i] != nil {
			if err := m.Constraints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("constraints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BlockDeviceSpecification) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BlockDeviceSpecification) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *BlockDeviceSpecification) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockDeviceSpecification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockDeviceSpecification) UnmarshalBinary(b []byte) error {
	var res BlockDeviceSpecification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
