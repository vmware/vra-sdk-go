// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GerritListener GerritListener
//
// A Gerrit Listener streams for events on the Gerrit server.
//
// swagger:discriminator GerritListener A Gerrit Listener streams for events on the Gerrit server.
type GerritListener interface {
	runtime.Validatable
	runtime.ContextValidatable

	// This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds
	// Example: 1568625938000000
	CreateTimeInMicros() int64
	SetCreateTimeInMicros(int64)

	// Date when the API token will expire.
	// Example: 2019-09-16 09:25:38.065065+00
	ExpiresAt() string
	SetExpiresAt(string)

	// Partial URL that provides details of the resource.
	// Example: /codestream/api/\u003cprefix\u003e/8365ef3b-8bf3-48aa-bd5d-7113fcff827c
	Link() string
	SetLink(string)

	// Contains project id of the entity
	// Example: abcd-abcd-abcd
	ProjectID() string
	SetProjectID(string)

	// Contains reasons for validation failure.
	// Example: Validation Failed due to invalid credentials
	Reason() string
	SetReason(string)

	// This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds
	// Example: 1568625938000000
	UpdateTimeInMicros() int64
	SetUpdateTimeInMicros(int64)

	// This token is used to authenticate when calling VMware Cloud Services APIs. These tokens are scoped within the organization.
	// Example: cKNNVCSHijnaxlrfnVsxUYr6wM2g5Bg11tfnotmWb9XdA5kpUCvI2ubJojTIGp9g
	APIToken() string
	SetAPIToken(string)

	// Indicates whether the connection with the Gerrit Server to start receiving events is created or not.
	// Example: true
	Connected() bool
	SetConnected(bool)

	// Date when the entity was created. The date is in ISO 8601 with time zone
	// Example: 2019-09-16 09:25:38.065065+00
	CreatedAt() string
	SetCreatedAt(string)

	// The user that created this entity
	// Example: exampleuser
	CreatedBy() string
	SetCreatedBy(string)

	// A human-friendly description.
	// Required: true
	Description() *string
	SetDescription(*string)

	// The name of the Gerrit Endpoint.
	// Example: Gerrit-Endpoint
	Endpoint() string
	SetEndpoint(string)

	// The id of this resource.
	// Example: 8365ef3b-8bf3-48aa-bd5d-7113fcff827c
	ID() string
	SetID(string)

	// A human-friendly name used as an identifier in APIs that support this option
	// Example: My-Name
	// Required: true
	Name() *string
	SetName(*string)

	// The project this entity belongs to.
	// Example: My-Project
	Project() string
	SetProject(string)

	// Date when the entity was last updated. The date is in ISO 8601 with time zone.
	// Example: 2019-09-16 09:25:38.065065+00
	UpdatedAt() string
	SetUpdatedAt(string)

	// The user that last updated this entity
	// Example: exampleuser
	UpdatedBy() string
	SetUpdatedBy(string)

	// Version of the resource.
	// Example: v1
	Version() string
	SetVersion(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type gerritListener struct {
	createTimeInMicrosField int64

	expiresAtField string

	linkField string

	projectIdField string

	reasonField string

	updateTimeInMicrosField int64

	apiTokenField string

	connectedField bool

	createdAtField string

	createdByField string

	descriptionField *string

	endpointField string

	idField string

	nameField *string

	projectField string

	updatedAtField string

	updatedByField string

	versionField string
}

// CreateTimeInMicros gets the create time in micros of this polymorphic type
func (m *gerritListener) CreateTimeInMicros() int64 {
	return m.createTimeInMicrosField
}

// SetCreateTimeInMicros sets the create time in micros of this polymorphic type
func (m *gerritListener) SetCreateTimeInMicros(val int64) {
	m.createTimeInMicrosField = val
}

// ExpiresAt gets the expires at of this polymorphic type
func (m *gerritListener) ExpiresAt() string {
	return m.expiresAtField
}

// SetExpiresAt sets the expires at of this polymorphic type
func (m *gerritListener) SetExpiresAt(val string) {
	m.expiresAtField = val
}

// Link gets the link of this polymorphic type
func (m *gerritListener) Link() string {
	return m.linkField
}

// SetLink sets the link of this polymorphic type
func (m *gerritListener) SetLink(val string) {
	m.linkField = val
}

// ProjectID gets the project Id of this polymorphic type
func (m *gerritListener) ProjectID() string {
	return m.projectIdField
}

// SetProjectID sets the project Id of this polymorphic type
func (m *gerritListener) SetProjectID(val string) {
	m.projectIdField = val
}

// Reason gets the reason of this polymorphic type
func (m *gerritListener) Reason() string {
	return m.reasonField
}

// SetReason sets the reason of this polymorphic type
func (m *gerritListener) SetReason(val string) {
	m.reasonField = val
}

// UpdateTimeInMicros gets the update time in micros of this polymorphic type
func (m *gerritListener) UpdateTimeInMicros() int64 {
	return m.updateTimeInMicrosField
}

// SetUpdateTimeInMicros sets the update time in micros of this polymorphic type
func (m *gerritListener) SetUpdateTimeInMicros(val int64) {
	m.updateTimeInMicrosField = val
}

// APIToken gets the api token of this polymorphic type
func (m *gerritListener) APIToken() string {
	return m.apiTokenField
}

// SetAPIToken sets the api token of this polymorphic type
func (m *gerritListener) SetAPIToken(val string) {
	m.apiTokenField = val
}

// Connected gets the connected of this polymorphic type
func (m *gerritListener) Connected() bool {
	return m.connectedField
}

// SetConnected sets the connected of this polymorphic type
func (m *gerritListener) SetConnected(val bool) {
	m.connectedField = val
}

// CreatedAt gets the created at of this polymorphic type
func (m *gerritListener) CreatedAt() string {
	return m.createdAtField
}

// SetCreatedAt sets the created at of this polymorphic type
func (m *gerritListener) SetCreatedAt(val string) {
	m.createdAtField = val
}

// CreatedBy gets the created by of this polymorphic type
func (m *gerritListener) CreatedBy() string {
	return m.createdByField
}

// SetCreatedBy sets the created by of this polymorphic type
func (m *gerritListener) SetCreatedBy(val string) {
	m.createdByField = val
}

// Description gets the description of this polymorphic type
func (m *gerritListener) Description() *string {
	return m.descriptionField
}

// SetDescription sets the description of this polymorphic type
func (m *gerritListener) SetDescription(val *string) {
	m.descriptionField = val
}

// Endpoint gets the endpoint of this polymorphic type
func (m *gerritListener) Endpoint() string {
	return m.endpointField
}

// SetEndpoint sets the endpoint of this polymorphic type
func (m *gerritListener) SetEndpoint(val string) {
	m.endpointField = val
}

// ID gets the id of this polymorphic type
func (m *gerritListener) ID() string {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *gerritListener) SetID(val string) {
	m.idField = val
}

// Name gets the name of this polymorphic type
func (m *gerritListener) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *gerritListener) SetName(val *string) {
	m.nameField = val
}

// Project gets the project of this polymorphic type
func (m *gerritListener) Project() string {
	return m.projectField
}

// SetProject sets the project of this polymorphic type
func (m *gerritListener) SetProject(val string) {
	m.projectField = val
}

// UpdatedAt gets the updated at of this polymorphic type
func (m *gerritListener) UpdatedAt() string {
	return m.updatedAtField
}

// SetUpdatedAt sets the updated at of this polymorphic type
func (m *gerritListener) SetUpdatedAt(val string) {
	m.updatedAtField = val
}

// UpdatedBy gets the updated by of this polymorphic type
func (m *gerritListener) UpdatedBy() string {
	return m.updatedByField
}

// SetUpdatedBy sets the updated by of this polymorphic type
func (m *gerritListener) SetUpdatedBy(val string) {
	m.updatedByField = val
}

// Version gets the version of this polymorphic type
func (m *gerritListener) Version() string {
	return m.versionField
}

// SetVersion sets the version of this polymorphic type
func (m *gerritListener) SetVersion(val string) {
	m.versionField = val
}

// UnmarshalGerritListenerSlice unmarshals polymorphic slices of GerritListener
func UnmarshalGerritListenerSlice(reader io.Reader, consumer runtime.Consumer) ([]GerritListener, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []GerritListener
	for _, element := range elements {
		obj, err := unmarshalGerritListener(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalGerritListener unmarshals polymorphic GerritListener
func UnmarshalGerritListener(reader io.Reader, consumer runtime.Consumer) (GerritListener, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalGerritListener(data, consumer)
}

func unmarshalGerritListener(data []byte, consumer runtime.Consumer) (GerritListener, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the A Gerrit Listener streams for events on the Gerrit server. property.
	var getType struct {
		AGerritListenerStreamsForEventsOnTheGerritServer string `json:"A Gerrit Listener streams for events on the Gerrit server."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("A Gerrit Listener streams for events on the Gerrit server.", "body", getType.AGerritListenerStreamsForEventsOnTheGerritServer); err != nil {
		return nil, err
	}

	// The value of A Gerrit Listener streams for events on the Gerrit server. is used to determine which type to create and unmarshal the data into
	switch getType.AGerritListenerStreamsForEventsOnTheGerritServer {
	case "GerritListener":
		var result gerritListener
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid A Gerrit Listener streams for events on the Gerrit server. value: %q", getType.AGerritListenerStreamsForEventsOnTheGerritServer)
}

// Validate validates this gerrit listener
func (m *gerritListener) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *gerritListener) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description()); err != nil {
		return err
	}

	return nil
}

func (m *gerritListener) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this gerrit listener based on context it is used
func (m *gerritListener) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
