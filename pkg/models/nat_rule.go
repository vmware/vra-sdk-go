// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NatRule NAT Rule
// swagger:model NatRule
type NatRule struct {

	// Description of the NAT rule.
	Description string `json:"description,omitempty"`

	// The edge gateway port
	// Required: true
	DestinationPorts *string `json:"destinationPorts"`

	// Index in which the rule must be applied
	// Required: true
	Index *int32 `json:"index"`

	// Kind of NAT: NAT44/NAT64/NAT66. Only NAT44 is supported currently
	Kind string `json:"kind,omitempty"`

	// The protocol of the incoming requests. Default is TCP.
	Protocol string `json:"protocol,omitempty"`

	// The IP of the external source. Default is `any`
	SourceIPs string `json:"sourceIPs,omitempty"`

	// Ports from where the request is originating. Default is `any`
	SourcePorts string `json:"sourcePorts,omitempty"`

	// A links to target load balancer or a machine's network interface where the request will be forwarded.
	// Required: true
	TargetLink *string `json:"targetLink"`

	// The machine port where the request will be forwarded
	// Required: true
	TranslatedPorts *string `json:"translatedPorts"`

	// Type of the NAT rule. Only DNAT is supported currently.
	Type string `json:"type,omitempty"`
}

// Validate validates this nat rule
func (m *NatRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTranslatedPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NatRule) validateDestinationPorts(formats strfmt.Registry) error {

	if err := validate.Required("destinationPorts", "body", m.DestinationPorts); err != nil {
		return err
	}

	return nil
}

func (m *NatRule) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *NatRule) validateTargetLink(formats strfmt.Registry) error {

	if err := validate.Required("targetLink", "body", m.TargetLink); err != nil {
		return err
	}

	return nil
}

func (m *NatRule) validateTranslatedPorts(formats strfmt.Registry) error {

	if err := validate.Required("translatedPorts", "body", m.TranslatedPorts); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NatRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NatRule) UnmarshalBinary(b []byte) error {
	var res NatRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
