// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryTerm query term
// swagger:model QueryTerm
type QueryTerm struct {

	// match type
	// Enum: [WILDCARD TERM PHRASE PREFIX]
	MatchType string `json:"matchType,omitempty"`

	// match value
	MatchValue string `json:"matchValue,omitempty"`

	// property name
	PropertyName string `json:"propertyName,omitempty"`

	// property type
	// Enum: [LONG STRING BYTES PODO COLLECTION MAP BOOLEAN DOUBLE InternetAddressV4 InternetAddressV6 DATE URI ENUM]
	PropertyType string `json:"propertyType,omitempty"`

	// range
	Range *NumericRangeObject `json:"range,omitempty"`

	// sort order
	// Enum: [ASC DESC]
	SortOrder string `json:"sortOrder,omitempty"`
}

// Validate validates this query term
func (m *QueryTerm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropertyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var queryTermTypeMatchTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WILDCARD","TERM","PHRASE","PREFIX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryTermTypeMatchTypePropEnum = append(queryTermTypeMatchTypePropEnum, v)
	}
}

const (

	// QueryTermMatchTypeWILDCARD captures enum value "WILDCARD"
	QueryTermMatchTypeWILDCARD string = "WILDCARD"

	// QueryTermMatchTypeTERM captures enum value "TERM"
	QueryTermMatchTypeTERM string = "TERM"

	// QueryTermMatchTypePHRASE captures enum value "PHRASE"
	QueryTermMatchTypePHRASE string = "PHRASE"

	// QueryTermMatchTypePREFIX captures enum value "PREFIX"
	QueryTermMatchTypePREFIX string = "PREFIX"
)

// prop value enum
func (m *QueryTerm) validateMatchTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, queryTermTypeMatchTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *QueryTerm) validateMatchType(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMatchTypeEnum("matchType", "body", m.MatchType); err != nil {
		return err
	}

	return nil
}

var queryTermTypePropertyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LONG","STRING","BYTES","PODO","COLLECTION","MAP","BOOLEAN","DOUBLE","InternetAddressV4","InternetAddressV6","DATE","URI","ENUM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryTermTypePropertyTypePropEnum = append(queryTermTypePropertyTypePropEnum, v)
	}
}

const (

	// QueryTermPropertyTypeLONG captures enum value "LONG"
	QueryTermPropertyTypeLONG string = "LONG"

	// QueryTermPropertyTypeSTRING captures enum value "STRING"
	QueryTermPropertyTypeSTRING string = "STRING"

	// QueryTermPropertyTypeBYTES captures enum value "BYTES"
	QueryTermPropertyTypeBYTES string = "BYTES"

	// QueryTermPropertyTypePODO captures enum value "PODO"
	QueryTermPropertyTypePODO string = "PODO"

	// QueryTermPropertyTypeCOLLECTION captures enum value "COLLECTION"
	QueryTermPropertyTypeCOLLECTION string = "COLLECTION"

	// QueryTermPropertyTypeMAP captures enum value "MAP"
	QueryTermPropertyTypeMAP string = "MAP"

	// QueryTermPropertyTypeBOOLEAN captures enum value "BOOLEAN"
	QueryTermPropertyTypeBOOLEAN string = "BOOLEAN"

	// QueryTermPropertyTypeDOUBLE captures enum value "DOUBLE"
	QueryTermPropertyTypeDOUBLE string = "DOUBLE"

	// QueryTermPropertyTypeInternetAddressV4 captures enum value "InternetAddressV4"
	QueryTermPropertyTypeInternetAddressV4 string = "InternetAddressV4"

	// QueryTermPropertyTypeInternetAddressV6 captures enum value "InternetAddressV6"
	QueryTermPropertyTypeInternetAddressV6 string = "InternetAddressV6"

	// QueryTermPropertyTypeDATE captures enum value "DATE"
	QueryTermPropertyTypeDATE string = "DATE"

	// QueryTermPropertyTypeURI captures enum value "URI"
	QueryTermPropertyTypeURI string = "URI"

	// QueryTermPropertyTypeENUM captures enum value "ENUM"
	QueryTermPropertyTypeENUM string = "ENUM"
)

// prop value enum
func (m *QueryTerm) validatePropertyTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, queryTermTypePropertyTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *QueryTerm) validatePropertyType(formats strfmt.Registry) error {

	if swag.IsZero(m.PropertyType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePropertyTypeEnum("propertyType", "body", m.PropertyType); err != nil {
		return err
	}

	return nil
}

func (m *QueryTerm) validateRange(formats strfmt.Registry) error {

	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if m.Range != nil {
		if err := m.Range.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

var queryTermTypeSortOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ASC","DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryTermTypeSortOrderPropEnum = append(queryTermTypeSortOrderPropEnum, v)
	}
}

const (

	// QueryTermSortOrderASC captures enum value "ASC"
	QueryTermSortOrderASC string = "ASC"

	// QueryTermSortOrderDESC captures enum value "DESC"
	QueryTermSortOrderDESC string = "DESC"
)

// prop value enum
func (m *QueryTerm) validateSortOrderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, queryTermTypeSortOrderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *QueryTerm) validateSortOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.SortOrder) { // not required
		return nil
	}

	// value enum
	if err := m.validateSortOrderEnum("sortOrder", "body", m.SortOrder); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryTerm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryTerm) UnmarshalBinary(b []byte) error {
	var res QueryTerm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
