// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskState task state
//
// swagger:model TaskState
type TaskState struct {

	// duration micros
	DurationMicros int64 `json:"durationMicros,omitempty"`

	// failure
	Failure *ServiceErrorResponse `json:"failure,omitempty"`

	// is direct
	IsDirect bool `json:"isDirect,omitempty"`

	// stage
	// Enum: [CREATED STARTED FINISHED FAILED CANCELLED]
	Stage string `json:"stage,omitempty"`
}

// Validate validates this task state
func (m *TaskState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskState) validateFailure(formats strfmt.Registry) error {
	if swag.IsZero(m.Failure) { // not required
		return nil
	}

	if m.Failure != nil {
		if err := m.Failure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failure")
			}
			return err
		}
	}

	return nil
}

var taskStateTypeStagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATED","STARTED","FINISHED","FAILED","CANCELLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskStateTypeStagePropEnum = append(taskStateTypeStagePropEnum, v)
	}
}

const (

	// TaskStateStageCREATED captures enum value "CREATED"
	TaskStateStageCREATED string = "CREATED"

	// TaskStateStageSTARTED captures enum value "STARTED"
	TaskStateStageSTARTED string = "STARTED"

	// TaskStateStageFINISHED captures enum value "FINISHED"
	TaskStateStageFINISHED string = "FINISHED"

	// TaskStateStageFAILED captures enum value "FAILED"
	TaskStateStageFAILED string = "FAILED"

	// TaskStateStageCANCELLED captures enum value "CANCELLED"
	TaskStateStageCANCELLED string = "CANCELLED"
)

// prop value enum
func (m *TaskState) validateStageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskStateTypeStagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskState) validateStage(formats strfmt.Registry) error {
	if swag.IsZero(m.Stage) { // not required
		return nil
	}

	// value enum
	if err := m.validateStageEnum("stage", "body", m.Stage); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this task state based on the context it is used
func (m *TaskState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFailure(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskState) contextValidateFailure(ctx context.Context, formats strfmt.Registry) error {

	if m.Failure != nil {
		if err := m.Failure.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failure")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskState) UnmarshalBinary(b []byte) error {
	var res TaskState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
