// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DockerRegistryWebHookSpec DockerRegistryWebHookSpec
//
// Docker Registry Webhook specification.
//
// swagger:discriminator DockerRegistryWebHookSpec Docker Registry Webhook specification.
type DockerRegistryWebHookSpec interface {
	runtime.Validatable
	runtime.ContextValidatable

	// Docker webhook description.
	// Example: It is a docker saas webhook
	Description() string
	SetDescription(string)

	// Indicates whether Docker webhook is enabled or not.
	// Example: true
	Enabled() bool
	SetEnabled(bool)

	// Docker endpoint.
	// Example: Dcocker-SaaS
	Endpoint() string
	SetEndpoint(string)

	// Docker webhook listener link.
	// Example: /codestream/api/registry-webhook-listeners/412aa461-6d46-47d6-af93-152bb0d88682
	ExternalListenerLink() string
	SetExternalListenerLink(string)

	// If provided then the pipeline execution is triggered only when the given image name regex matches the image name in the received payload.
	// Example: admin/wordpress
	ImageNameRegExPattern() string
	SetImageNameRegExPattern(string)

	// Pipeline Execution input properties.
	// Example: {"test":{"description":"test-value","mandatory":false}}
	Input() interface{}
	SetInput(interface{})

	// A human-friendly name used as an identifier in APIs that support this option
	// Example: My-Name
	// Required: true
	Name() *string
	SetName(*string)

	// Pipeline name which is meant to be triggered when a docker event occur.
	// Example: CD-Pipeline
	Pipeline() string
	SetPipeline(string)

	// The project this entity belongs to.
	// Example: My-Project
	Project() string
	SetProject(string)

	// Codestream API token.
	// Example: I5FLA8iQhlZwoos6OL3goKciAF5e
	RefreshToken() string
	SetRefreshToken(string)

	// Docker Repo Name.
	// Example: codestream
	RepoName() string
	SetRepoName(string)

	// Secret token to validate received payloads.
	// Example: DSkUyJJ8KA8rOSk=Ci
	SecretToken() string
	SetSecretToken(string)

	// Docker server type.
	// Example: DockerHub/Docker_Trusted_Registry
	ServerType() string
	SetServerType(string)

	// Docker webhook name.
	// Example: docker-webhook
	Slug() string
	SetSlug(string)

	// If provided then the pipeline execution is triggered only when the given tag name regex matches the tag name(s) in the received payload.
	// Example: tag1
	TagNamePattern() string
	SetTagNamePattern(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type dockerRegistryWebHookSpec struct {
	descriptionField string

	enabledField bool

	endpointField string

	externalListenerLinkField string

	imageNameRegExPatternField string

	inputField interface{}

	nameField *string

	pipelineField string

	projectField string

	refreshTokenField string

	repoNameField string

	secretTokenField string

	serverTypeField string

	slugField string

	tagNamePatternField string
}

// Description gets the description of this polymorphic type
func (m *dockerRegistryWebHookSpec) Description() string {
	return m.descriptionField
}

// SetDescription sets the description of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetDescription(val string) {
	m.descriptionField = val
}

// Enabled gets the enabled of this polymorphic type
func (m *dockerRegistryWebHookSpec) Enabled() bool {
	return m.enabledField
}

// SetEnabled sets the enabled of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetEnabled(val bool) {
	m.enabledField = val
}

// Endpoint gets the endpoint of this polymorphic type
func (m *dockerRegistryWebHookSpec) Endpoint() string {
	return m.endpointField
}

// SetEndpoint sets the endpoint of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetEndpoint(val string) {
	m.endpointField = val
}

// ExternalListenerLink gets the external listener link of this polymorphic type
func (m *dockerRegistryWebHookSpec) ExternalListenerLink() string {
	return m.externalListenerLinkField
}

// SetExternalListenerLink sets the external listener link of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetExternalListenerLink(val string) {
	m.externalListenerLinkField = val
}

// ImageNameRegExPattern gets the image name reg ex pattern of this polymorphic type
func (m *dockerRegistryWebHookSpec) ImageNameRegExPattern() string {
	return m.imageNameRegExPatternField
}

// SetImageNameRegExPattern sets the image name reg ex pattern of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetImageNameRegExPattern(val string) {
	m.imageNameRegExPatternField = val
}

// Input gets the input of this polymorphic type
func (m *dockerRegistryWebHookSpec) Input() interface{} {
	return m.inputField
}

// SetInput sets the input of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetInput(val interface{}) {
	m.inputField = val
}

// Name gets the name of this polymorphic type
func (m *dockerRegistryWebHookSpec) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetName(val *string) {
	m.nameField = val
}

// Pipeline gets the pipeline of this polymorphic type
func (m *dockerRegistryWebHookSpec) Pipeline() string {
	return m.pipelineField
}

// SetPipeline sets the pipeline of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetPipeline(val string) {
	m.pipelineField = val
}

// Project gets the project of this polymorphic type
func (m *dockerRegistryWebHookSpec) Project() string {
	return m.projectField
}

// SetProject sets the project of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetProject(val string) {
	m.projectField = val
}

// RefreshToken gets the refresh token of this polymorphic type
func (m *dockerRegistryWebHookSpec) RefreshToken() string {
	return m.refreshTokenField
}

// SetRefreshToken sets the refresh token of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetRefreshToken(val string) {
	m.refreshTokenField = val
}

// RepoName gets the repo name of this polymorphic type
func (m *dockerRegistryWebHookSpec) RepoName() string {
	return m.repoNameField
}

// SetRepoName sets the repo name of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetRepoName(val string) {
	m.repoNameField = val
}

// SecretToken gets the secret token of this polymorphic type
func (m *dockerRegistryWebHookSpec) SecretToken() string {
	return m.secretTokenField
}

// SetSecretToken sets the secret token of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetSecretToken(val string) {
	m.secretTokenField = val
}

// ServerType gets the server type of this polymorphic type
func (m *dockerRegistryWebHookSpec) ServerType() string {
	return m.serverTypeField
}

// SetServerType sets the server type of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetServerType(val string) {
	m.serverTypeField = val
}

// Slug gets the slug of this polymorphic type
func (m *dockerRegistryWebHookSpec) Slug() string {
	return m.slugField
}

// SetSlug sets the slug of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetSlug(val string) {
	m.slugField = val
}

// TagNamePattern gets the tag name pattern of this polymorphic type
func (m *dockerRegistryWebHookSpec) TagNamePattern() string {
	return m.tagNamePatternField
}

// SetTagNamePattern sets the tag name pattern of this polymorphic type
func (m *dockerRegistryWebHookSpec) SetTagNamePattern(val string) {
	m.tagNamePatternField = val
}

// UnmarshalDockerRegistryWebHookSpecSlice unmarshals polymorphic slices of DockerRegistryWebHookSpec
func UnmarshalDockerRegistryWebHookSpecSlice(reader io.Reader, consumer runtime.Consumer) ([]DockerRegistryWebHookSpec, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []DockerRegistryWebHookSpec
	for _, element := range elements {
		obj, err := unmarshalDockerRegistryWebHookSpec(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalDockerRegistryWebHookSpec unmarshals polymorphic DockerRegistryWebHookSpec
func UnmarshalDockerRegistryWebHookSpec(reader io.Reader, consumer runtime.Consumer) (DockerRegistryWebHookSpec, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalDockerRegistryWebHookSpec(data, consumer)
}

func unmarshalDockerRegistryWebHookSpec(data []byte, consumer runtime.Consumer) (DockerRegistryWebHookSpec, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Docker Registry Webhook specification. property.
	var getType struct {
		DockerRegistryWebhookSpecification string `json:"Docker Registry Webhook specification."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Docker Registry Webhook specification.", "body", getType.DockerRegistryWebhookSpecification); err != nil {
		return nil, err
	}

	// The value of Docker Registry Webhook specification. is used to determine which type to create and unmarshal the data into
	switch getType.DockerRegistryWebhookSpecification {
	case "DockerRegistryWebHookSpec":
		var result dockerRegistryWebHookSpec
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Docker Registry Webhook specification. value: %q", getType.DockerRegistryWebhookSpecification)
}

// Validate validates this docker registry web hook spec
func (m *dockerRegistryWebHookSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *dockerRegistryWebHookSpec) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this docker registry web hook spec based on context it is used
func (m *dockerRegistryWebHookSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
