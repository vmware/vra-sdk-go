// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Meta Meta
//
// swagger:model Meta
type Meta struct {

	// annotations
	Annotations interface{} `json:"annotations,omitempty"`

	// creation time
	CreationTime string `json:"creationTime,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// generation
	Generation string `json:"generation,omitempty"`

	// labels
	Labels interface{} `json:"labels,omitempty"`

	// parent references
	ParentReferences []*Reference `json:"parentReferences"`

	// resource version
	ResourceVersion string `json:"resourceVersion,omitempty"`

	// uid
	UID string `json:"uid,omitempty"`

	// update time
	UpdateTime string `json:"updateTime,omitempty"`
}

// Validate validates this meta
func (m *Meta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParentReferences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Meta) validateParentReferences(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentReferences) { // not required
		return nil
	}

	for i := 0; i < len(m.ParentReferences); i++ {
		if swag.IsZero(m.ParentReferences[i]) { // not required
			continue
		}

		if m.ParentReferences[i] != nil {
			if err := m.ParentReferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parentReferences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parentReferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this meta based on the context it is used
func (m *Meta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParentReferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Meta) contextValidateParentReferences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ParentReferences); i++ {

		if m.ParentReferences[i] != nil {
			if err := m.ParentReferences[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parentReferences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parentReferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Meta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Meta) UnmarshalBinary(b []byte) error {
	var res Meta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
