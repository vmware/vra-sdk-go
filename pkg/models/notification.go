// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Notification Notification
//
// Notifications are ways to communicate with your teams and let them know the status of your Pipelines in Code Stream.
//
// swagger:discriminator Notification Notifications are ways to communicate with your teams and let them know the status of your Pipelines in Code Stream.
type Notification interface {
	runtime.Validatable
	runtime.ContextValidatable

	// The event on which this Notification is triggered.
	// Example: COMPLETED
	EventGroup() string
	SetEventGroup(string)

	// Only for Jira. Contains the Jira issue ID for creating a ticket.
	// Example: {"ID":"VRCS-23","link":"/link/to/Jira/issue/VRCS-23"}
	JiraResponse() map[string]string
	SetJiraResponse(map[string]string)

	// Mode of transmission of this Notification.
	// Example: Email/Slack/Jira
	ProviderType() string
	SetProviderType(string)

	// Only for Jira/Webhook. Specifies any HTTP response code received from any REST calls related to the Notification.
	// Example: 200
	ResponseCode() string
	SetResponseCode(string)

	// Only for Jira/Webhook. Specifies any HTTP response message received from any REST calls related to the Notification.
	// Example: 200
	ResponseMessage() string
	SetResponseMessage(string)

	// Stage that this Notification belongs to.
	Stage() string
	SetStage(string)

	// Flag that represents if the Notification was successfully posted or not.
	// Example: true
	Success() bool
	SetSuccess(bool)

	// Task that this Notification belongs to.
	Task() string
	SetTask(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type notification struct {
	eventGroupField string

	jiraResponseField map[string]string

	providerTypeField string

	responseCodeField string

	responseMessageField string

	stageField string

	successField bool

	taskField string
}

// EventGroup gets the event group of this polymorphic type
func (m *notification) EventGroup() string {
	return m.eventGroupField
}

// SetEventGroup sets the event group of this polymorphic type
func (m *notification) SetEventGroup(val string) {
	m.eventGroupField = val
}

// JiraResponse gets the jira response of this polymorphic type
func (m *notification) JiraResponse() map[string]string {
	return m.jiraResponseField
}

// SetJiraResponse sets the jira response of this polymorphic type
func (m *notification) SetJiraResponse(val map[string]string) {
	m.jiraResponseField = val
}

// ProviderType gets the provider type of this polymorphic type
func (m *notification) ProviderType() string {
	return m.providerTypeField
}

// SetProviderType sets the provider type of this polymorphic type
func (m *notification) SetProviderType(val string) {
	m.providerTypeField = val
}

// ResponseCode gets the response code of this polymorphic type
func (m *notification) ResponseCode() string {
	return m.responseCodeField
}

// SetResponseCode sets the response code of this polymorphic type
func (m *notification) SetResponseCode(val string) {
	m.responseCodeField = val
}

// ResponseMessage gets the response message of this polymorphic type
func (m *notification) ResponseMessage() string {
	return m.responseMessageField
}

// SetResponseMessage sets the response message of this polymorphic type
func (m *notification) SetResponseMessage(val string) {
	m.responseMessageField = val
}

// Stage gets the stage of this polymorphic type
func (m *notification) Stage() string {
	return m.stageField
}

// SetStage sets the stage of this polymorphic type
func (m *notification) SetStage(val string) {
	m.stageField = val
}

// Success gets the success of this polymorphic type
func (m *notification) Success() bool {
	return m.successField
}

// SetSuccess sets the success of this polymorphic type
func (m *notification) SetSuccess(val bool) {
	m.successField = val
}

// Task gets the task of this polymorphic type
func (m *notification) Task() string {
	return m.taskField
}

// SetTask sets the task of this polymorphic type
func (m *notification) SetTask(val string) {
	m.taskField = val
}

// UnmarshalNotificationSlice unmarshals polymorphic slices of Notification
func UnmarshalNotificationSlice(reader io.Reader, consumer runtime.Consumer) ([]Notification, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Notification
	for _, element := range elements {
		obj, err := unmarshalNotification(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalNotification unmarshals polymorphic Notification
func UnmarshalNotification(reader io.Reader, consumer runtime.Consumer) (Notification, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalNotification(data, consumer)
}

func unmarshalNotification(data []byte, consumer runtime.Consumer) (Notification, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Notifications are ways to communicate with your teams and let them know the status of your Pipelines in Code Stream. property.
	var getType struct {
		NotificationsAreWaysToCommunicateWithYourTeamsAndLetThemKnowTheStatusOfYourPipelinesInCodeStream string `json:"Notifications are ways to communicate with your teams and let them know the status of your Pipelines in Code Stream."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Notifications are ways to communicate with your teams and let them know the status of your Pipelines in Code Stream.", "body", getType.NotificationsAreWaysToCommunicateWithYourTeamsAndLetThemKnowTheStatusOfYourPipelinesInCodeStream); err != nil {
		return nil, err
	}

	// The value of Notifications are ways to communicate with your teams and let them know the status of your Pipelines in Code Stream. is used to determine which type to create and unmarshal the data into
	switch getType.NotificationsAreWaysToCommunicateWithYourTeamsAndLetThemKnowTheStatusOfYourPipelinesInCodeStream {
	case "Notification":
		var result notification
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Notifications are ways to communicate with your teams and let them know the status of your Pipelines in Code Stream. value: %q", getType.NotificationsAreWaysToCommunicateWithYourTeamsAndLetThemKnowTheStatusOfYourPipelinesInCodeStream)
}

// Validate validates this notification
func (m *notification) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this notification based on context it is used
func (m *notification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
