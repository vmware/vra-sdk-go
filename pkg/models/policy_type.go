// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyType PolicyType
//
// A type of policy that includes the schema of the policy itself and the schema of the objects affected by the policy
// swagger:model PolicyType
type PolicyType struct {

	// Defines configuration options for policy type
	Config *PolicyFeatureConfig `json:"config,omitempty"`

	// Schema describing a policy object of this type
	// Required: true
	DefinitionSchema interface{} `json:"definitionSchema"`

	// Policy type display-name/label
	// Required: true
	DisplayName *string `json:"displayName"`

	// Policy type ID
	// Required: true
	ID *string `json:"id"`

	// Policy type name
	// Required: true
	Name *string `json:"name"`

	// Schema describing objects that can be affected by this policy
	// Required: true
	TargetSchema interface{} `json:"targetSchema"`
}

// Validate validates this policy type
func (m *PolicyType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefinitionSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetSchema(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyType) validateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyType) validateDefinitionSchema(formats strfmt.Registry) error {

	if err := validate.Required("definitionSchema", "body", m.DefinitionSchema); err != nil {
		return err
	}

	return nil
}

func (m *PolicyType) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *PolicyType) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PolicyType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PolicyType) validateTargetSchema(formats strfmt.Registry) error {

	if err := validate.Required("targetSchema", "body", m.TargetSchema); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyType) UnmarshalBinary(b []byte) error {
	var res PolicyType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
