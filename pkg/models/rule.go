// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Rule A rule used in a security group.
// swagger:model Rule
type Rule struct {

	// Type of access (allow or deny) for the security rule. Traffic that does not match any rules will be denied.
	// Required: true
	// Enum: [Allow Deny]
	Access *string `json:"access"`

	// Direction of the security rule (inbound or outboud).
	// Required: true
	// Enum: [Inbound Outbound]
	Direction *string `json:"direction"`

	// IP address(es) in CIDR format which the security rule applies to.
	// Required: true
	IPRangeCidr *string `json:"ipRangeCidr"`

	// Name of security rule.
	Name string `json:"name,omitempty"`

	// Ports the security rule applies to.
	// Required: true
	Ports *string `json:"ports"`

	// Protocol the security rule applies to.
	Protocol string `json:"protocol,omitempty"`

	// Service defined by the provider (such as: SSH, HTTPS). Either service or protocol have to be specified.
	Service string `json:"service,omitempty"`
}

// Validate validates this rule
func (m *Rule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPRangeCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ruleTypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allow","Deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ruleTypeAccessPropEnum = append(ruleTypeAccessPropEnum, v)
	}
}

const (

	// RuleAccessAllow captures enum value "Allow"
	RuleAccessAllow string = "Allow"

	// RuleAccessDeny captures enum value "Deny"
	RuleAccessDeny string = "Deny"
)

// prop value enum
func (m *Rule) validateAccessEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ruleTypeAccessPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Rule) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", m.Access); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccessEnum("access", "body", *m.Access); err != nil {
		return err
	}

	return nil
}

var ruleTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Inbound","Outbound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ruleTypeDirectionPropEnum = append(ruleTypeDirectionPropEnum, v)
	}
}

const (

	// RuleDirectionInbound captures enum value "Inbound"
	RuleDirectionInbound string = "Inbound"

	// RuleDirectionOutbound captures enum value "Outbound"
	RuleDirectionOutbound string = "Outbound"
)

// prop value enum
func (m *Rule) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ruleTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Rule) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("direction", "body", m.Direction); err != nil {
		return err
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *Rule) validateIPRangeCidr(formats strfmt.Registry) error {

	if err := validate.Required("ipRangeCidr", "body", m.IPRangeCidr); err != nil {
		return err
	}

	return nil
}

func (m *Rule) validatePorts(formats strfmt.Registry) error {

	if err := validate.Required("ports", "body", m.Ports); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rule) UnmarshalBinary(b []byte) error {
	var res Rule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
