// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationScenarioConfig NotificationScenarioConfig
//
// Represents a notification configuration.
//
// swagger:model NotificationScenarioConfig
type NotificationScenarioConfig struct {

	// Notification scenario body
	Body string `json:"body,omitempty"`

	// Notification scenario enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// Notification scenario category
	ScenarioCategory string `json:"scenarioCategory,omitempty"`

	// Notification scenario description
	ScenarioDescription string `json:"scenarioDescription,omitempty"`

	// Notification scenario id
	// Required: true
	ScenarioID *string `json:"scenarioId"`

	// Notification scenario name
	ScenarioName string `json:"scenarioName,omitempty"`

	// Notification scenario subject
	Subject string `json:"subject,omitempty"`
}

// Validate validates this notification scenario config
func (m *NotificationScenarioConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScenarioID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationScenarioConfig) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *NotificationScenarioConfig) validateScenarioID(formats strfmt.Registry) error {

	if err := validate.Required("scenarioId", "body", m.ScenarioID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this notification scenario config based on context it is used
func (m *NotificationScenarioConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NotificationScenarioConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationScenarioConfig) UnmarshalBinary(b []byte) error {
	var res NotificationScenarioConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
