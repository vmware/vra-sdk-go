// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogItemType CatalogItemType
//
// Represents a type of Catalog Item.
// swagger:model CatalogItemType
type CatalogItemType struct {

	// Base callback URI for import operations
	BaseURI string `json:"baseUri,omitempty"`

	// Configuration schema for this type, requests to create a source of this type should have a compliant 'config' field
	ConfigSchema interface{} `json:"configSchema,omitempty"`

	// Creation time
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Service that created this type
	CreatedBy string `json:"createdBy,omitempty"`

	// Default Icon Id
	// Format: uuid
	IconID strfmt.UUID `json:"iconId,omitempty"`

	// Human-readable unique ID containing only lowercase letters and periods, neither starting nor ending with a period, and never having two consecutive periods
	ID string `json:"id,omitempty"`

	// Unique Catalog Item Type name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this catalog item type
func (m *CatalogItemType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogItemType) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CatalogItemType) validateIconID(formats strfmt.Registry) error {

	if swag.IsZero(m.IconID) { // not required
		return nil
	}

	if err := validate.FormatOf("iconId", "body", "uuid", m.IconID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CatalogItemType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogItemType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogItemType) UnmarshalBinary(b []byte) error {
	var res CatalogItemType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
