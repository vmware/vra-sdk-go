// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MarketplaceDownloadHistoryItem MarketplaceDownloadHistoryItem
// swagger:model MarketplaceDownloadHistoryItem
type MarketplaceDownloadHistoryItem struct {

	// Downloaded Content Id
	ContentID string `json:"contentId,omitempty"`

	// Downloaded Content Name
	ContentName string `json:"contentName,omitempty"`

	// Downloaded Content Type
	// Enum: [BLUEPRINT IMAGE ABX_SCRIPTS]
	ContentType string `json:"contentType,omitempty"`

	// Downloaded On
	// Format: date-time
	DownloadedOn strfmt.DateTime `json:"downloadedOn,omitempty"`

	// History Id
	ID string `json:"id,omitempty"`

	// Download Status
	// Enum: [FAILED ADDED]
	Status string `json:"status,omitempty"`

	// Target Id
	TargetID string `json:"targetId,omitempty"`

	// Target Name
	TargetName string `json:"targetName,omitempty"`

	// Target Type
	// Enum: [PROJECT]
	TargetType string `json:"targetType,omitempty"`

	// Updated On
	// Format: date-time
	UpdatedOn strfmt.DateTime `json:"updatedOn,omitempty"`

	// Username
	Username string `json:"username,omitempty"`
}

// Validate validates this marketplace download history item
func (m *MarketplaceDownloadHistoryItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var marketplaceDownloadHistoryItemTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BLUEPRINT","IMAGE","ABX_SCRIPTS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		marketplaceDownloadHistoryItemTypeContentTypePropEnum = append(marketplaceDownloadHistoryItemTypeContentTypePropEnum, v)
	}
}

const (

	// MarketplaceDownloadHistoryItemContentTypeBLUEPRINT captures enum value "BLUEPRINT"
	MarketplaceDownloadHistoryItemContentTypeBLUEPRINT string = "BLUEPRINT"

	// MarketplaceDownloadHistoryItemContentTypeIMAGE captures enum value "IMAGE"
	MarketplaceDownloadHistoryItemContentTypeIMAGE string = "IMAGE"

	// MarketplaceDownloadHistoryItemContentTypeABXSCRIPTS captures enum value "ABX_SCRIPTS"
	MarketplaceDownloadHistoryItemContentTypeABXSCRIPTS string = "ABX_SCRIPTS"
)

// prop value enum
func (m *MarketplaceDownloadHistoryItem) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, marketplaceDownloadHistoryItemTypeContentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MarketplaceDownloadHistoryItem) validateContentType(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateContentTypeEnum("contentType", "body", m.ContentType); err != nil {
		return err
	}

	return nil
}

func (m *MarketplaceDownloadHistoryItem) validateDownloadedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.DownloadedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("downloadedOn", "body", "date-time", m.DownloadedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

var marketplaceDownloadHistoryItemTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FAILED","ADDED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		marketplaceDownloadHistoryItemTypeStatusPropEnum = append(marketplaceDownloadHistoryItemTypeStatusPropEnum, v)
	}
}

const (

	// MarketplaceDownloadHistoryItemStatusFAILED captures enum value "FAILED"
	MarketplaceDownloadHistoryItemStatusFAILED string = "FAILED"

	// MarketplaceDownloadHistoryItemStatusADDED captures enum value "ADDED"
	MarketplaceDownloadHistoryItemStatusADDED string = "ADDED"
)

// prop value enum
func (m *MarketplaceDownloadHistoryItem) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, marketplaceDownloadHistoryItemTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MarketplaceDownloadHistoryItem) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var marketplaceDownloadHistoryItemTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROJECT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		marketplaceDownloadHistoryItemTypeTargetTypePropEnum = append(marketplaceDownloadHistoryItemTypeTargetTypePropEnum, v)
	}
}

const (

	// MarketplaceDownloadHistoryItemTargetTypePROJECT captures enum value "PROJECT"
	MarketplaceDownloadHistoryItemTargetTypePROJECT string = "PROJECT"
)

// prop value enum
func (m *MarketplaceDownloadHistoryItem) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, marketplaceDownloadHistoryItemTypeTargetTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MarketplaceDownloadHistoryItem) validateTargetType(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTargetTypeEnum("targetType", "body", m.TargetType); err != nil {
		return err
	}

	return nil
}

func (m *MarketplaceDownloadHistoryItem) validateUpdatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedOn", "body", "date-time", m.UpdatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MarketplaceDownloadHistoryItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MarketplaceDownloadHistoryItem) UnmarshalBinary(b []byte) error {
	var res MarketplaceDownloadHistoryItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
