// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomNamingProject A representation of a Project.
//
// swagger:model CustomNamingProject
type CustomNamingProject struct {

	// Flag to check if project is active
	// Example: true
	Active bool `json:"active,omitempty"`

	// Flag to represent if custom name is default for org
	// Example: true
	DefaultOrg bool `json:"defaultOrg,omitempty"`

	// Unique id of custom naming project
	// Example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Org id
	// Example: 3fa85f64-5717-4562-b3fc-2c963f76afa6
	OrgID string `json:"orgId,omitempty"`

	// Project id mapped to custom name
	// Example: 3fa85f64-5717-4562-b3fc-2c963f66afa7
	ProjectID string `json:"projectId,omitempty"`

	// Name of mapped project
	// Example: Project name
	ProjectName string `json:"projectName,omitempty"`
}

// Validate validates this custom naming project
func (m *CustomNamingProject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomNamingProject) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this custom naming project based on context it is used
func (m *CustomNamingProject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomNamingProject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomNamingProject) UnmarshalBinary(b []byte) error {
	var res CustomNamingProject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
