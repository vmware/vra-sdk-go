// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceErrorResponse ServiceErrorResponse
//
// swagger:model ServiceErrorResponse
type ServiceErrorResponse struct {

	// details
	Details []string `json:"details"`

	// document kind
	DocumentKind string `json:"documentKind,omitempty"`

	// error code
	ErrorCode int32 `json:"errorCode,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// message Id
	MessageID string `json:"messageId,omitempty"`

	// stack trace
	StackTrace []string `json:"stackTrace"`

	// status code
	StatusCode int32 `json:"statusCode,omitempty"`
}

// Validate validates this service error response
func (m *ServiceErrorResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceErrorResponseDetailsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SHOULD_RETRY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceErrorResponseDetailsItemsEnum = append(serviceErrorResponseDetailsItemsEnum, v)
	}
}

func (m *ServiceErrorResponse) validateDetailsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceErrorResponseDetailsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceErrorResponse) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.Details) { // not required
		return nil
	}

	for i := 0; i < len(m.Details); i++ {

		// value enum
		if err := m.validateDetailsItemsEnum("details"+"."+strconv.Itoa(i), "body", m.Details[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this service error response based on context it is used
func (m *ServiceErrorResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceErrorResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceErrorResponse) UnmarshalBinary(b []byte) error {
	var res ServiceErrorResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
