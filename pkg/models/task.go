// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Task Task
//
// Represents the individual Tasks in a Pipeline.
//
// swagger:discriminator Task Represents the individual Tasks in a Pipeline.
type Task interface {
	runtime.Validatable
	runtime.ContextValidatable

	// Map representing the Output properties for the Task.
	// Example: [{"deployedMachineIP":"10.108.35.54","result":"true"}]
	Endpoints() map[string]string
	SetEndpoints(map[string]string)

	// Ignores the failure of the Task execution if set to true, and continues with the Pipeline execution.
	// Example: true
	IgnoreFailure() bool
	SetIgnoreFailure(bool)

	// Map representing the Input properties for the Task.
	// Example: [{"ip":"10.5.23.84","script":"testScript.sh"}]
	Input() interface{}
	SetInput(interface{})

	// The Task is executed only if this field evaluates to true.
	// Example: ${input.buildNumber} != '100'
	PreCondition() string
	SetPreCondition(string)

	// A set of tag keys and optional values that were set on on the resource.
	// Example: [{"key":"env","value":"dev"}]
	Tags() []string
	SetTags([]string)

	// Type of the Task.
	// Example: jenkins
	Type() string
	SetType(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type task struct {
	endpointsField map[string]string

	ignoreFailureField bool

	inputField interface{}

	preConditionField string

	tagsField []string

	typeField string
}

// Endpoints gets the endpoints of this polymorphic type
func (m *task) Endpoints() map[string]string {
	return m.endpointsField
}

// SetEndpoints sets the endpoints of this polymorphic type
func (m *task) SetEndpoints(val map[string]string) {
	m.endpointsField = val
}

// IgnoreFailure gets the ignore failure of this polymorphic type
func (m *task) IgnoreFailure() bool {
	return m.ignoreFailureField
}

// SetIgnoreFailure sets the ignore failure of this polymorphic type
func (m *task) SetIgnoreFailure(val bool) {
	m.ignoreFailureField = val
}

// Input gets the input of this polymorphic type
func (m *task) Input() interface{} {
	return m.inputField
}

// SetInput sets the input of this polymorphic type
func (m *task) SetInput(val interface{}) {
	m.inputField = val
}

// PreCondition gets the pre condition of this polymorphic type
func (m *task) PreCondition() string {
	return m.preConditionField
}

// SetPreCondition sets the pre condition of this polymorphic type
func (m *task) SetPreCondition(val string) {
	m.preConditionField = val
}

// Tags gets the tags of this polymorphic type
func (m *task) Tags() []string {
	return m.tagsField
}

// SetTags sets the tags of this polymorphic type
func (m *task) SetTags(val []string) {
	m.tagsField = val
}

// Type gets the type of this polymorphic type
func (m *task) Type() string {
	return m.typeField
}

// SetType sets the type of this polymorphic type
func (m *task) SetType(val string) {
	m.typeField = val
}

// UnmarshalTaskSlice unmarshals polymorphic slices of Task
func UnmarshalTaskSlice(reader io.Reader, consumer runtime.Consumer) ([]Task, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Task
	for _, element := range elements {
		obj, err := unmarshalTask(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalTask unmarshals polymorphic Task
func UnmarshalTask(reader io.Reader, consumer runtime.Consumer) (Task, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalTask(data, consumer)
}

func unmarshalTask(data []byte, consumer runtime.Consumer) (Task, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Represents the individual Tasks in a Pipeline. property.
	var getType struct {
		RepresentsTheIndividualTasksInaPipeline string `json:"Represents the individual Tasks in a Pipeline."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Represents the individual Tasks in a Pipeline.", "body", getType.RepresentsTheIndividualTasksInaPipeline); err != nil {
		return nil, err
	}

	// The value of Represents the individual Tasks in a Pipeline. is used to determine which type to create and unmarshal the data into
	switch getType.RepresentsTheIndividualTasksInaPipeline {
	case "Task":
		var result task
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Represents the individual Tasks in a Pipeline. value: %q", getType.RepresentsTheIndividualTasksInaPipeline)
}

// Validate validates this task
func (m *task) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this task based on context it is used
func (m *task) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
