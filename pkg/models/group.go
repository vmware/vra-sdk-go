// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Group Group
//
// # A representation of a group
//
// swagger:discriminator Group A representation of a group
type Group interface {
	runtime.Validatable
	runtime.ContextValidatable

	// The account identifier string of the group.
	// Example: cloudadmin@coke.sqa-horizon.local
	// Required: true
	DisplayName() *string
	SetDisplayName(*string)

	// The domain of the group.
	// Example: vmware.com
	Domain() string
	SetDomain(string)

	// The type of the group
	// Example: AD_GROUP, USER_GROUP
	GroupType() string
	SetGroupType(string)

	// Group's Identity Provider ID
	// Example: c493a95e-c4d1-4496-8595-e73902701c95:fe69d7ca-40a6-4de5-8f33-d462f4656938
	ID() string
	SetID(string)

	// The number of users added in the group.
	// Example: 1
	UsersCount() int32
	SetUsersCount(int32)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type group struct {
	displayNameField *string

	domainField string

	groupTypeField string

	idField string

	usersCountField int32
}

// DisplayName gets the display name of this polymorphic type
func (m *group) DisplayName() *string {
	return m.displayNameField
}

// SetDisplayName sets the display name of this polymorphic type
func (m *group) SetDisplayName(val *string) {
	m.displayNameField = val
}

// Domain gets the domain of this polymorphic type
func (m *group) Domain() string {
	return m.domainField
}

// SetDomain sets the domain of this polymorphic type
func (m *group) SetDomain(val string) {
	m.domainField = val
}

// GroupType gets the group type of this polymorphic type
func (m *group) GroupType() string {
	return m.groupTypeField
}

// SetGroupType sets the group type of this polymorphic type
func (m *group) SetGroupType(val string) {
	m.groupTypeField = val
}

// ID gets the id of this polymorphic type
func (m *group) ID() string {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *group) SetID(val string) {
	m.idField = val
}

// UsersCount gets the users count of this polymorphic type
func (m *group) UsersCount() int32 {
	return m.usersCountField
}

// SetUsersCount sets the users count of this polymorphic type
func (m *group) SetUsersCount(val int32) {
	m.usersCountField = val
}

// UnmarshalGroupSlice unmarshals polymorphic slices of Group
func UnmarshalGroupSlice(reader io.Reader, consumer runtime.Consumer) ([]Group, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Group
	for _, element := range elements {
		obj, err := unmarshalGroup(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalGroup unmarshals polymorphic Group
func UnmarshalGroup(reader io.Reader, consumer runtime.Consumer) (Group, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalGroup(data, consumer)
}

func unmarshalGroup(data []byte, consumer runtime.Consumer) (Group, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the A representation of a group property.
	var getType struct {
		ARepresentationOfaGroup string `json:"A representation of a group"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("A representation of a group", "body", getType.ARepresentationOfaGroup); err != nil {
		return nil, err
	}

	// The value of A representation of a group is used to determine which type to create and unmarshal the data into
	switch getType.ARepresentationOfaGroup {
	case "Group":
		var result group
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid A representation of a group value: %q", getType.ARepresentationOfaGroup)
}

// Validate validates this group
func (m *group) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *group) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName()); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this group based on context it is used
func (m *group) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
