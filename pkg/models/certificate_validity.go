// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CertificateValidity CertificateValidity
//
// Describes the validity of the Certificate in terms of dates.
//
// swagger:discriminator CertificateValidity Describes the validity of the Certificate in terms of dates.
type CertificateValidity interface {
	runtime.Validatable
	runtime.ContextValidatable

	// A UNIX timestamp in microseconds represnting when the validaty of the Certificate begins.
	// Example: 1541116800000
	BeginsOn() int64
	SetBeginsOn(int64)

	// A UNIX timestamp in microseconds represnting when the validaty of the Certificate expires.
	// Example: 1924991999000
	ExpiresOn() int64
	SetExpiresOn(int64)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type certificateValidity struct {
	beginsOnField int64

	expiresOnField int64
}

// BeginsOn gets the begins on of this polymorphic type
func (m *certificateValidity) BeginsOn() int64 {
	return m.beginsOnField
}

// SetBeginsOn sets the begins on of this polymorphic type
func (m *certificateValidity) SetBeginsOn(val int64) {
	m.beginsOnField = val
}

// ExpiresOn gets the expires on of this polymorphic type
func (m *certificateValidity) ExpiresOn() int64 {
	return m.expiresOnField
}

// SetExpiresOn sets the expires on of this polymorphic type
func (m *certificateValidity) SetExpiresOn(val int64) {
	m.expiresOnField = val
}

// UnmarshalCertificateValiditySlice unmarshals polymorphic slices of CertificateValidity
func UnmarshalCertificateValiditySlice(reader io.Reader, consumer runtime.Consumer) ([]CertificateValidity, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []CertificateValidity
	for _, element := range elements {
		obj, err := unmarshalCertificateValidity(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalCertificateValidity unmarshals polymorphic CertificateValidity
func UnmarshalCertificateValidity(reader io.Reader, consumer runtime.Consumer) (CertificateValidity, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalCertificateValidity(data, consumer)
}

func unmarshalCertificateValidity(data []byte, consumer runtime.Consumer) (CertificateValidity, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Describes the validity of the Certificate in terms of dates. property.
	var getType struct {
		DescribesTheValidityOfTheCertificateInTermsOfDates string `json:"Describes the validity of the Certificate in terms of dates."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Describes the validity of the Certificate in terms of dates.", "body", getType.DescribesTheValidityOfTheCertificateInTermsOfDates); err != nil {
		return nil, err
	}

	// The value of Describes the validity of the Certificate in terms of dates. is used to determine which type to create and unmarshal the data into
	switch getType.DescribesTheValidityOfTheCertificateInTermsOfDates {
	case "CertificateValidity":
		var result certificateValidity
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Describes the validity of the Certificate in terms of dates. value: %q", getType.DescribesTheValidityOfTheCertificateInTermsOfDates)
}

// Validate validates this certificate validity
func (m *certificateValidity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate validity based on context it is used
func (m *certificateValidity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
