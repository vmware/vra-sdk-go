// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ExecutionActionRequest ExecutionActionRequest
//
// Request body for acting on an Execution.
//
// swagger:discriminator ExecutionActionRequest Request body for acting on an Execution.
type ExecutionActionRequest interface {
	runtime.Validatable
	runtime.ContextValidatable

	// Reason for performing the action on the given Execution.
	// Example: Pipeline cancelled due to infra issues.
	Reason() string
	SetReason(string)

	// A set of tag keys and optional values that were set on on the resource.
	// Example: [{"key":"env","value":"dev"}]
	Tags() []string
	SetTags([]string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type executionActionRequest struct {
	reasonField string

	tagsField []string
}

// Reason gets the reason of this polymorphic type
func (m *executionActionRequest) Reason() string {
	return m.reasonField
}

// SetReason sets the reason of this polymorphic type
func (m *executionActionRequest) SetReason(val string) {
	m.reasonField = val
}

// Tags gets the tags of this polymorphic type
func (m *executionActionRequest) Tags() []string {
	return m.tagsField
}

// SetTags sets the tags of this polymorphic type
func (m *executionActionRequest) SetTags(val []string) {
	m.tagsField = val
}

// UnmarshalExecutionActionRequestSlice unmarshals polymorphic slices of ExecutionActionRequest
func UnmarshalExecutionActionRequestSlice(reader io.Reader, consumer runtime.Consumer) ([]ExecutionActionRequest, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ExecutionActionRequest
	for _, element := range elements {
		obj, err := unmarshalExecutionActionRequest(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalExecutionActionRequest unmarshals polymorphic ExecutionActionRequest
func UnmarshalExecutionActionRequest(reader io.Reader, consumer runtime.Consumer) (ExecutionActionRequest, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalExecutionActionRequest(data, consumer)
}

func unmarshalExecutionActionRequest(data []byte, consumer runtime.Consumer) (ExecutionActionRequest, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Request body for acting on an Execution. property.
	var getType struct {
		RequestBodyForActingOnAnExecution string `json:"Request body for acting on an Execution."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Request body for acting on an Execution.", "body", getType.RequestBodyForActingOnAnExecution); err != nil {
		return nil, err
	}

	// The value of Request body for acting on an Execution. is used to determine which type to create and unmarshal the data into
	switch getType.RequestBodyForActingOnAnExecution {
	case "ExecutionActionRequest":
		var result executionActionRequest
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Request body for acting on an Execution. value: %q", getType.RequestBodyForActingOnAnExecution)
}

// Validate validates this execution action request
func (m *executionActionRequest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this execution action request based on context it is used
func (m *executionActionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
