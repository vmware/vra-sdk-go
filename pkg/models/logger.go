// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Logger logger
// swagger:model Logger
type Logger struct {

	// filter
	Filter Filter `json:"filter,omitempty"`

	// handlers
	Handlers []*Handler `json:"handlers"`

	// level
	Level *Level `json:"level,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// parent
	Parent *Logger `json:"parent,omitempty"`

	// resource bundle
	ResourceBundle *ResourceBundle `json:"resourceBundle,omitempty"`

	// resource bundle name
	ResourceBundleName string `json:"resourceBundleName,omitempty"`

	// use parent handlers
	UseParentHandlers bool `json:"useParentHandlers,omitempty"`
}

// Validate validates this logger
func (m *Logger) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHandlers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceBundle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Logger) validateHandlers(formats strfmt.Registry) error {

	if swag.IsZero(m.Handlers) { // not required
		return nil
	}

	for i := 0; i < len(m.Handlers); i++ {
		if swag.IsZero(m.Handlers[i]) { // not required
			continue
		}

		if m.Handlers[i] != nil {
			if err := m.Handlers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("handlers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Logger) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	if m.Level != nil {
		if err := m.Level.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("level")
			}
			return err
		}
	}

	return nil
}

func (m *Logger) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *Logger) validateResourceBundle(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceBundle) { // not required
		return nil
	}

	if m.ResourceBundle != nil {
		if err := m.ResourceBundle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceBundle")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Logger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Logger) UnmarshalBinary(b []byte) error {
	var res Logger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
