// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// About About
//
// # State object representing an about page that includes api versioning information
//
// swagger:discriminator About State object representing an about page that includes api versioning information
type About interface {
	runtime.Validatable
	runtime.ContextValidatable

	// The latest version of the API in yyyy-MM-dd format (UTC).
	// Required: true
	LatestAPIVersion() *string
	SetLatestAPIVersion(*string)

	// A collection of all currently supported api versions.
	// Required: true
	SupportedApis() []*AboutAPIDescription
	SetSupportedApis([]*AboutAPIDescription)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type about struct {
	latestApiVersionField *string

	supportedApisField []*AboutAPIDescription
}

// LatestAPIVersion gets the latest Api version of this polymorphic type
func (m *about) LatestAPIVersion() *string {
	return m.latestApiVersionField
}

// SetLatestAPIVersion sets the latest Api version of this polymorphic type
func (m *about) SetLatestAPIVersion(val *string) {
	m.latestApiVersionField = val
}

// SupportedApis gets the supported apis of this polymorphic type
func (m *about) SupportedApis() []*AboutAPIDescription {
	return m.supportedApisField
}

// SetSupportedApis sets the supported apis of this polymorphic type
func (m *about) SetSupportedApis(val []*AboutAPIDescription) {
	m.supportedApisField = val
}

// UnmarshalAboutSlice unmarshals polymorphic slices of About
func UnmarshalAboutSlice(reader io.Reader, consumer runtime.Consumer) ([]About, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []About
	for _, element := range elements {
		obj, err := unmarshalAbout(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalAbout unmarshals polymorphic About
func UnmarshalAbout(reader io.Reader, consumer runtime.Consumer) (About, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalAbout(data, consumer)
}

func unmarshalAbout(data []byte, consumer runtime.Consumer) (About, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the State object representing an about page that includes api versioning information property.
	var getType struct {
		StateObjectRepresentingAnAboutPageThatIncludesAPIVersioningInformation string `json:"State object representing an about page that includes api versioning information"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("State object representing an about page that includes api versioning information", "body", getType.StateObjectRepresentingAnAboutPageThatIncludesAPIVersioningInformation); err != nil {
		return nil, err
	}

	// The value of State object representing an about page that includes api versioning information is used to determine which type to create and unmarshal the data into
	switch getType.StateObjectRepresentingAnAboutPageThatIncludesAPIVersioningInformation {
	case "About":
		var result about
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid State object representing an about page that includes api versioning information value: %q", getType.StateObjectRepresentingAnAboutPageThatIncludesAPIVersioningInformation)
}

// Validate validates this about
func (m *about) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLatestAPIVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedApis(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *about) validateLatestAPIVersion(formats strfmt.Registry) error {

	if err := validate.Required("latestApiVersion", "body", m.LatestAPIVersion()); err != nil {
		return err
	}

	return nil
}

func (m *about) validateSupportedApis(formats strfmt.Registry) error {

	if err := validate.Required("supportedApis", "body", m.SupportedApis()); err != nil {
		return err
	}

	for i := 0; i < len(m.SupportedApis()); i++ {
		if swag.IsZero(m.supportedApisField[i]) { // not required
			continue
		}

		if m.supportedApisField[i] != nil {
			if err := m.supportedApisField[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportedApis" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("supportedApis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this about based on the context it is used
func (m *about) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSupportedApis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *about) contextValidateSupportedApis(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SupportedApis()); i++ {

		if m.supportedApisField[i] != nil {
			if err := m.supportedApisField[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportedApis" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("supportedApis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
