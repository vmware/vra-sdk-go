// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Entitlement Entitlement
//
// Represents an entitlement that is configured by admins to enforce user access to catalog items, services, etc., within their own organizations.
// swagger:model Entitlement
type Entitlement struct {

	// Entitlement definition that contains the Catalog Item or Catalog Source data.
	// Required: true
	Definition *ContentDefinition `json:"definition"`

	// Entitlement id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Project id
	// Required: true
	ProjectID *string `json:"projectId"`
}

// Validate validates this entitlement
func (m *Entitlement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Entitlement) validateDefinition(formats strfmt.Registry) error {

	if err := validate.Required("definition", "body", m.Definition); err != nil {
		return err
	}

	if m.Definition != nil {
		if err := m.Definition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("definition")
			}
			return err
		}
	}

	return nil
}

func (m *Entitlement) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Entitlement) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Entitlement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Entitlement) UnmarshalBinary(b []byte) error {
	var res Entitlement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
