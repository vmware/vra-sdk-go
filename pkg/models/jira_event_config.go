// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JiraEventConfig JiraEventConfig
//
// Represents a Jira Event configuration.
//
// swagger:discriminator JiraEventConfig Represents a Jira Event configuration.
type JiraEventConfig interface {
	runtime.Validatable
	runtime.ContextValidatable

	// User to whom the Jira will be assigned.
	// Example: jason@vmware.com
	Assignee() string
	SetAssignee(string)

	// Description for the Jira ticket.
	// Example: Details about the issue being reported
	Description() string
	SetDescription(string)

	// endpoint
	Endpoint() string
	SetEndpoint(string)

	// event
	// Enum: [SUCCESS FAILURE WAITING CANCELED STARTED]
	Event() string
	SetEvent(string)

	// Jira Issue Type.
	// Example: Bug/Story
	Issuetype() string
	SetIssuetype(string)

	// Jira Project Name.
	// Example: VRCS
	Project() string
	SetProject(string)

	// stage
	Stage() string
	SetStage(string)

	// Summary for the Jira ticket.
	// Example: Pipeline-1 execution failed
	Summary() string
	SetSummary(string)

	// task
	Task() string
	SetTask(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type jiraEventConfig struct {
	assigneeField string

	descriptionField string

	endpointField string

	eventField string

	issuetypeField string

	projectField string

	stageField string

	summaryField string

	taskField string
}

// Assignee gets the assignee of this polymorphic type
func (m *jiraEventConfig) Assignee() string {
	return m.assigneeField
}

// SetAssignee sets the assignee of this polymorphic type
func (m *jiraEventConfig) SetAssignee(val string) {
	m.assigneeField = val
}

// Description gets the description of this polymorphic type
func (m *jiraEventConfig) Description() string {
	return m.descriptionField
}

// SetDescription sets the description of this polymorphic type
func (m *jiraEventConfig) SetDescription(val string) {
	m.descriptionField = val
}

// Endpoint gets the endpoint of this polymorphic type
func (m *jiraEventConfig) Endpoint() string {
	return m.endpointField
}

// SetEndpoint sets the endpoint of this polymorphic type
func (m *jiraEventConfig) SetEndpoint(val string) {
	m.endpointField = val
}

// Event gets the event of this polymorphic type
func (m *jiraEventConfig) Event() string {
	return m.eventField
}

// SetEvent sets the event of this polymorphic type
func (m *jiraEventConfig) SetEvent(val string) {
	m.eventField = val
}

// Issuetype gets the issuetype of this polymorphic type
func (m *jiraEventConfig) Issuetype() string {
	return m.issuetypeField
}

// SetIssuetype sets the issuetype of this polymorphic type
func (m *jiraEventConfig) SetIssuetype(val string) {
	m.issuetypeField = val
}

// Project gets the project of this polymorphic type
func (m *jiraEventConfig) Project() string {
	return m.projectField
}

// SetProject sets the project of this polymorphic type
func (m *jiraEventConfig) SetProject(val string) {
	m.projectField = val
}

// Stage gets the stage of this polymorphic type
func (m *jiraEventConfig) Stage() string {
	return m.stageField
}

// SetStage sets the stage of this polymorphic type
func (m *jiraEventConfig) SetStage(val string) {
	m.stageField = val
}

// Summary gets the summary of this polymorphic type
func (m *jiraEventConfig) Summary() string {
	return m.summaryField
}

// SetSummary sets the summary of this polymorphic type
func (m *jiraEventConfig) SetSummary(val string) {
	m.summaryField = val
}

// Task gets the task of this polymorphic type
func (m *jiraEventConfig) Task() string {
	return m.taskField
}

// SetTask sets the task of this polymorphic type
func (m *jiraEventConfig) SetTask(val string) {
	m.taskField = val
}

// UnmarshalJiraEventConfigSlice unmarshals polymorphic slices of JiraEventConfig
func UnmarshalJiraEventConfigSlice(reader io.Reader, consumer runtime.Consumer) ([]JiraEventConfig, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []JiraEventConfig
	for _, element := range elements {
		obj, err := unmarshalJiraEventConfig(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalJiraEventConfig unmarshals polymorphic JiraEventConfig
func UnmarshalJiraEventConfig(reader io.Reader, consumer runtime.Consumer) (JiraEventConfig, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalJiraEventConfig(data, consumer)
}

func unmarshalJiraEventConfig(data []byte, consumer runtime.Consumer) (JiraEventConfig, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Represents a Jira Event configuration. property.
	var getType struct {
		RepresentsaJiraEventConfiguration string `json:"Represents a Jira Event configuration."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Represents a Jira Event configuration.", "body", getType.RepresentsaJiraEventConfiguration); err != nil {
		return nil, err
	}

	// The value of Represents a Jira Event configuration. is used to determine which type to create and unmarshal the data into
	switch getType.RepresentsaJiraEventConfiguration {
	case "JiraEventConfig":
		var result jiraEventConfig
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Represents a Jira Event configuration. value: %q", getType.RepresentsaJiraEventConfiguration)
}

// Validate validates this jira event config
func (m *jiraEventConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var jiraEventConfigTypeEventPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCESS","FAILURE","WAITING","CANCELED","STARTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jiraEventConfigTypeEventPropEnum = append(jiraEventConfigTypeEventPropEnum, v)
	}
}

const (

	// JiraEventConfigEventSUCCESS captures enum value "SUCCESS"
	JiraEventConfigEventSUCCESS string = "SUCCESS"

	// JiraEventConfigEventFAILURE captures enum value "FAILURE"
	JiraEventConfigEventFAILURE string = "FAILURE"

	// JiraEventConfigEventWAITING captures enum value "WAITING"
	JiraEventConfigEventWAITING string = "WAITING"

	// JiraEventConfigEventCANCELED captures enum value "CANCELED"
	JiraEventConfigEventCANCELED string = "CANCELED"

	// JiraEventConfigEventSTARTED captures enum value "STARTED"
	JiraEventConfigEventSTARTED string = "STARTED"
)

// prop value enum
func (m *jiraEventConfig) validateEventEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, jiraEventConfigTypeEventPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *jiraEventConfig) validateEvent(formats strfmt.Registry) error {
	if swag.IsZero(m.Event()) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventEnum("event", "body", m.Event()); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this jira event config based on context it is used
func (m *jiraEventConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
