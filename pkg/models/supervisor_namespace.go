// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SupervisorNamespace SupervisorNamespace
//
// swagger:model SupervisorNamespace
type SupervisorNamespace struct {

	// address
	Address string `json:"address,omitempty"`

	// cluster
	Cluster string `json:"cluster,omitempty"`

	// cpu used
	CPUUsed int64 `json:"cpuUsed,omitempty"`

	// custom properties
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// document self link
	DocumentSelfLink string `json:"documentSelfLink,omitempty"`

	// edit groups
	EditGroups string `json:"editGroups,omitempty"`

	// edit users
	EditUsers string `json:"editUsers,omitempty"`

	// endpoint link
	EndpointLink string `json:"endpointLink,omitempty"`

	// external link
	ExternalLink string `json:"externalLink,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// memory used
	MemoryUsed int64 `json:"memoryUsed,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner string `json:"owner,omitempty"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// registered
	Registered bool `json:"registered,omitempty"`

	// self link Id
	SelfLinkID string `json:"selfLinkId,omitempty"`

	// status
	// Enum: [READY ALLOCATED ERROR REMOVING]
	Status string `json:"status,omitempty"`

	// status message
	StatusMessage string `json:"statusMessage,omitempty"`

	// storage policies
	StoragePolicies []*StorageSpec `json:"storagePolicies"`

	// storage used
	StorageUsed int64 `json:"storageUsed,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// updated millis
	UpdatedMillis int64 `json:"updatedMillis,omitempty"`

	// view groups
	ViewGroups string `json:"viewGroups,omitempty"`

	// view users
	ViewUsers string `json:"viewUsers,omitempty"`
}

// Validate validates this supervisor namespace
func (m *SupervisorNamespace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var supervisorNamespaceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READY","ALLOCATED","ERROR","REMOVING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		supervisorNamespaceTypeStatusPropEnum = append(supervisorNamespaceTypeStatusPropEnum, v)
	}
}

const (

	// SupervisorNamespaceStatusREADY captures enum value "READY"
	SupervisorNamespaceStatusREADY string = "READY"

	// SupervisorNamespaceStatusALLOCATED captures enum value "ALLOCATED"
	SupervisorNamespaceStatusALLOCATED string = "ALLOCATED"

	// SupervisorNamespaceStatusERROR captures enum value "ERROR"
	SupervisorNamespaceStatusERROR string = "ERROR"

	// SupervisorNamespaceStatusREMOVING captures enum value "REMOVING"
	SupervisorNamespaceStatusREMOVING string = "REMOVING"
)

// prop value enum
func (m *SupervisorNamespace) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, supervisorNamespaceTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SupervisorNamespace) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *SupervisorNamespace) validateStoragePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.StoragePolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.StoragePolicies); i++ {
		if swag.IsZero(m.StoragePolicies[i]) { // not required
			continue
		}

		if m.StoragePolicies[i] != nil {
			if err := m.StoragePolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storagePolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storagePolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this supervisor namespace based on the context it is used
func (m *SupervisorNamespace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStoragePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SupervisorNamespace) contextValidateStoragePolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StoragePolicies); i++ {

		if m.StoragePolicies[i] != nil {
			if err := m.StoragePolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storagePolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storagePolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SupervisorNamespace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SupervisorNamespace) UnmarshalBinary(b []byte) error {
	var res SupervisorNamespace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
