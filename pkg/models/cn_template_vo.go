// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CnTemplateVo cn template vo
//
// swagger:model CnTemplateVo
type CnTemplateVo struct {

	// counters
	Counters []*CnTemplateCounterVo `json:"counters"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// increment step
	IncrementStep int64 `json:"incrementStep,omitempty"`

	// pattern
	Pattern string `json:"pattern,omitempty"`

	// resource default
	ResourceDefault bool `json:"resourceDefault,omitempty"`

	// resource type
	// Enum: [COMPUTE NETWORK COMPUTE_STORAGE LOAD_BALANCER RESOURCE_GROUP GATEWAY NAT SECURITY_GROUP]
	ResourceType string `json:"resourceType,omitempty"`

	// resource type name
	ResourceTypeName string `json:"resourceTypeName,omitempty"`

	// start counter
	StartCounter int64 `json:"startCounter,omitempty"`

	// static pattern
	StaticPattern string `json:"staticPattern,omitempty"`

	// unique name
	UniqueName bool `json:"uniqueName,omitempty"`
}

// Validate validates this cn template vo
func (m *CnTemplateVo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCounters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CnTemplateVo) validateCounters(formats strfmt.Registry) error {
	if swag.IsZero(m.Counters) { // not required
		return nil
	}

	for i := 0; i < len(m.Counters); i++ {
		if swag.IsZero(m.Counters[i]) { // not required
			continue
		}

		if m.Counters[i] != nil {
			if err := m.Counters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("counters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("counters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CnTemplateVo) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var cnTemplateVoTypeResourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COMPUTE","NETWORK","COMPUTE_STORAGE","LOAD_BALANCER","RESOURCE_GROUP","GATEWAY","NAT","SECURITY_GROUP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cnTemplateVoTypeResourceTypePropEnum = append(cnTemplateVoTypeResourceTypePropEnum, v)
	}
}

const (

	// CnTemplateVoResourceTypeCOMPUTE captures enum value "COMPUTE"
	CnTemplateVoResourceTypeCOMPUTE string = "COMPUTE"

	// CnTemplateVoResourceTypeNETWORK captures enum value "NETWORK"
	CnTemplateVoResourceTypeNETWORK string = "NETWORK"

	// CnTemplateVoResourceTypeCOMPUTESTORAGE captures enum value "COMPUTE_STORAGE"
	CnTemplateVoResourceTypeCOMPUTESTORAGE string = "COMPUTE_STORAGE"

	// CnTemplateVoResourceTypeLOADBALANCER captures enum value "LOAD_BALANCER"
	CnTemplateVoResourceTypeLOADBALANCER string = "LOAD_BALANCER"

	// CnTemplateVoResourceTypeRESOURCEGROUP captures enum value "RESOURCE_GROUP"
	CnTemplateVoResourceTypeRESOURCEGROUP string = "RESOURCE_GROUP"

	// CnTemplateVoResourceTypeGATEWAY captures enum value "GATEWAY"
	CnTemplateVoResourceTypeGATEWAY string = "GATEWAY"

	// CnTemplateVoResourceTypeNAT captures enum value "NAT"
	CnTemplateVoResourceTypeNAT string = "NAT"

	// CnTemplateVoResourceTypeSECURITYGROUP captures enum value "SECURITY_GROUP"
	CnTemplateVoResourceTypeSECURITYGROUP string = "SECURITY_GROUP"
)

// prop value enum
func (m *CnTemplateVo) validateResourceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cnTemplateVoTypeResourceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CnTemplateVo) validateResourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateResourceTypeEnum("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cn template vo based on the context it is used
func (m *CnTemplateVo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCounters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CnTemplateVo) contextValidateCounters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Counters); i++ {

		if m.Counters[i] != nil {
			if err := m.Counters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("counters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("counters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CnTemplateVo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CnTemplateVo) UnmarshalBinary(b []byte) error {
	var res CnTemplateVo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
