// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ExecutionResponse ExecutionResponse
//
// Represents the response object for when a Pipeline is executed.
//
// swagger:discriminator ExecutionResponse Represents the response object for when a Pipeline is executed.
type ExecutionResponse interface {
	runtime.Validatable
	runtime.ContextValidatable

	// Id of the Execution.
	// Example: b80254a7-fcff-4918-ad88-501d08096337
	ExecutionID() string
	SetExecutionID(string)

	// Index of the Execution.
	// Example: 3
	ExecutionIndex() int64
	SetExecutionIndex(int64)

	// Link of the Execution.
	// Example: /codestream/api/executions/b80254a7-fcff-4918-ad88-501d08096337
	ExecutionLink() string
	SetExecutionLink(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type executionResponse struct {
	executionIdField string

	executionIndexField int64

	executionLinkField string
}

// ExecutionID gets the execution Id of this polymorphic type
func (m *executionResponse) ExecutionID() string {
	return m.executionIdField
}

// SetExecutionID sets the execution Id of this polymorphic type
func (m *executionResponse) SetExecutionID(val string) {
	m.executionIdField = val
}

// ExecutionIndex gets the execution index of this polymorphic type
func (m *executionResponse) ExecutionIndex() int64 {
	return m.executionIndexField
}

// SetExecutionIndex sets the execution index of this polymorphic type
func (m *executionResponse) SetExecutionIndex(val int64) {
	m.executionIndexField = val
}

// ExecutionLink gets the execution link of this polymorphic type
func (m *executionResponse) ExecutionLink() string {
	return m.executionLinkField
}

// SetExecutionLink sets the execution link of this polymorphic type
func (m *executionResponse) SetExecutionLink(val string) {
	m.executionLinkField = val
}

// UnmarshalExecutionResponseSlice unmarshals polymorphic slices of ExecutionResponse
func UnmarshalExecutionResponseSlice(reader io.Reader, consumer runtime.Consumer) ([]ExecutionResponse, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ExecutionResponse
	for _, element := range elements {
		obj, err := unmarshalExecutionResponse(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalExecutionResponse unmarshals polymorphic ExecutionResponse
func UnmarshalExecutionResponse(reader io.Reader, consumer runtime.Consumer) (ExecutionResponse, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalExecutionResponse(data, consumer)
}

func unmarshalExecutionResponse(data []byte, consumer runtime.Consumer) (ExecutionResponse, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Represents the response object for when a Pipeline is executed. property.
	var getType struct {
		RepresentsTheResponseObjectForWhenaPipelineIsExecuted string `json:"Represents the response object for when a Pipeline is executed."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Represents the response object for when a Pipeline is executed.", "body", getType.RepresentsTheResponseObjectForWhenaPipelineIsExecuted); err != nil {
		return nil, err
	}

	// The value of Represents the response object for when a Pipeline is executed. is used to determine which type to create and unmarshal the data into
	switch getType.RepresentsTheResponseObjectForWhenaPipelineIsExecuted {
	case "ExecutionResponse":
		var result executionResponse
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Represents the response object for when a Pipeline is executed. value: %q", getType.RepresentsTheResponseObjectForWhenaPipelineIsExecuted)
}

// Validate validates this execution response
func (m *executionResponse) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this execution response based on context it is used
func (m *executionResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
