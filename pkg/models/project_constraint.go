// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectConstraint Constraint
//
// Definition of a constraint that one resource may have.
//
// swagger:discriminator ProjectConstraint Definition of a constraint that one resource may have.
type ProjectConstraint interface {
	runtime.Validatable
	runtime.ContextValidatable

	Conditions() []Condition
	SetConditions([]Condition)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type projectConstraint struct {
	conditionsField []Condition
}

// Conditions gets the conditions of this polymorphic type
func (m *projectConstraint) Conditions() []Condition {
	return m.conditionsField
}

// SetConditions sets the conditions of this polymorphic type
func (m *projectConstraint) SetConditions(val []Condition) {
	m.conditionsField = val
}

// UnmarshalProjectConstraintSlice unmarshals polymorphic slices of ProjectConstraint
func UnmarshalProjectConstraintSlice(reader io.Reader, consumer runtime.Consumer) ([]ProjectConstraint, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ProjectConstraint
	for _, element := range elements {
		obj, err := unmarshalProjectConstraint(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalProjectConstraint unmarshals polymorphic ProjectConstraint
func UnmarshalProjectConstraint(reader io.Reader, consumer runtime.Consumer) (ProjectConstraint, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalProjectConstraint(data, consumer)
}

func unmarshalProjectConstraint(data []byte, consumer runtime.Consumer) (ProjectConstraint, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Definition of a constraint that one resource may have. property.
	var getType struct {
		DefinitionOfaConstraintThatOneResourceMayHave string `json:"Definition of a constraint that one resource may have."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Definition of a constraint that one resource may have.", "body", getType.DefinitionOfaConstraintThatOneResourceMayHave); err != nil {
		return nil, err
	}

	// The value of Definition of a constraint that one resource may have. is used to determine which type to create and unmarshal the data into
	switch getType.DefinitionOfaConstraintThatOneResourceMayHave {
	case "ProjectConstraint":
		var result projectConstraint
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Definition of a constraint that one resource may have. value: %q", getType.DefinitionOfaConstraintThatOneResourceMayHave)
}

// Validate validates this project constraint
func (m *projectConstraint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *projectConstraint) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions()) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions()); i++ {

		if err := m.conditionsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this project constraint based on the context it is used
func (m *projectConstraint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *projectConstraint) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions()); i++ {

		if err := m.conditionsField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}
