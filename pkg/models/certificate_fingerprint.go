// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CertificateFingerprint CertificateFingerprint
//
// Certificates are represented in cryptographic hash algorithms (such as SHA-256 and SHA-1). Used during Endpoint creation.
//
// swagger:discriminator CertificateFingerprint Certificates are represented in cryptographic hash algorithms (such as SHA-256 and SHA-1). Used during Endpoint creation.
type CertificateFingerprint interface {
	runtime.Validatable
	runtime.ContextValidatable

	// String representing the SHA-1 encoding of the Certificate.
	// Example: F38585A104F37726CFCCE5CEE223ED63A18F54DC
	SHA1() string
	SetSHA1(string)

	// String representing the SHA-256 encoding of the Certificate.
	// Example: 1E47299CCE0081B73FC6AEA3FD35BA2309A033A858EDD518789477C20C910CA4
	SHA256() string
	SetSHA256(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type certificateFingerprint struct {
	sHA1Field string

	sHA256Field string
}

// SHA1 gets the s h a 1 of this polymorphic type
func (m *certificateFingerprint) SHA1() string {
	return m.sHA1Field
}

// SetSHA1 sets the s h a 1 of this polymorphic type
func (m *certificateFingerprint) SetSHA1(val string) {
	m.sHA1Field = val
}

// SHA256 gets the s h a 256 of this polymorphic type
func (m *certificateFingerprint) SHA256() string {
	return m.sHA256Field
}

// SetSHA256 sets the s h a 256 of this polymorphic type
func (m *certificateFingerprint) SetSHA256(val string) {
	m.sHA256Field = val
}

// UnmarshalCertificateFingerprintSlice unmarshals polymorphic slices of CertificateFingerprint
func UnmarshalCertificateFingerprintSlice(reader io.Reader, consumer runtime.Consumer) ([]CertificateFingerprint, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []CertificateFingerprint
	for _, element := range elements {
		obj, err := unmarshalCertificateFingerprint(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalCertificateFingerprint unmarshals polymorphic CertificateFingerprint
func UnmarshalCertificateFingerprint(reader io.Reader, consumer runtime.Consumer) (CertificateFingerprint, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalCertificateFingerprint(data, consumer)
}

func unmarshalCertificateFingerprint(data []byte, consumer runtime.Consumer) (CertificateFingerprint, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Certificates are represented in cryptographic hash algorithms (such as SHA-256 and SHA-1). Used during Endpoint creation. property.
	var getType struct {
		CertificatesAreRepresentedInCryptographicHashAlgorithmsSuchAsSHA256AndSHA1UsedDuringEndpointCreation string `json:"Certificates are represented in cryptographic hash algorithms (such as SHA-256 and SHA-1). Used during Endpoint creation."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Certificates are represented in cryptographic hash algorithms (such as SHA-256 and SHA-1). Used during Endpoint creation.", "body", getType.CertificatesAreRepresentedInCryptographicHashAlgorithmsSuchAsSHA256AndSHA1UsedDuringEndpointCreation); err != nil {
		return nil, err
	}

	// The value of Certificates are represented in cryptographic hash algorithms (such as SHA-256 and SHA-1). Used during Endpoint creation. is used to determine which type to create and unmarshal the data into
	switch getType.CertificatesAreRepresentedInCryptographicHashAlgorithmsSuchAsSHA256AndSHA1UsedDuringEndpointCreation {
	case "CertificateFingerprint":
		var result certificateFingerprint
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Certificates are represented in cryptographic hash algorithms (such as SHA-256 and SHA-1). Used during Endpoint creation. value: %q", getType.CertificatesAreRepresentedInCryptographicHashAlgorithmsSuchAsSHA256AndSHA1UsedDuringEndpointCreation)
}

// Validate validates this certificate fingerprint
func (m *certificateFingerprint) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate fingerprint based on context it is used
func (m *certificateFingerprint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
