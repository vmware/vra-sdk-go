// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// K8SNamespace K8SNamespace
//
// swagger:model K8SNamespace
type K8SNamespace struct {

	// auth credentials link
	AuthCredentialsLink string `json:"authCredentialsLink,omitempty"`

	// cluster Id
	// Format: uuid
	ClusterID strfmt.UUID `json:"clusterId,omitempty"`

	// content
	Content string `json:"content,omitempty"`

	// created millis
	CreatedMillis int64 `json:"createdMillis,omitempty"`

	// custom properties
	CustomProperties interface{} `json:"customProperties,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// installer Id
	// Format: uuid
	InstallerID strfmt.UUID `json:"installerId,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// org Id
	OrgID string `json:"orgId,omitempty"`

	// owner
	Owner string `json:"owner,omitempty"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// registered
	Registered bool `json:"registered,omitempty"`

	// shared
	Shared bool `json:"shared,omitempty"`

	// status
	// Enum: [ALLOCATED READY FAILED UNREACHABLE TERMINATING REMOVED]
	Status string `json:"status,omitempty"`

	// updated millis
	UpdatedMillis int64 `json:"updatedMillis,omitempty"`

	// zone project assignment Id
	// Format: uuid
	ZoneProjectAssignmentID strfmt.UUID `json:"zoneProjectAssignmentId,omitempty"`
}

// Validate validates this k8 s namespace
func (m *K8SNamespace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstallerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneProjectAssignmentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8SNamespace) validateClusterID(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterID) { // not required
		return nil
	}

	if err := validate.FormatOf("clusterId", "body", "uuid", m.ClusterID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *K8SNamespace) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *K8SNamespace) validateInstallerID(formats strfmt.Registry) error {
	if swag.IsZero(m.InstallerID) { // not required
		return nil
	}

	if err := validate.FormatOf("installerId", "body", "uuid", m.InstallerID.String(), formats); err != nil {
		return err
	}

	return nil
}

var k8SNamespaceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALLOCATED","READY","FAILED","UNREACHABLE","TERMINATING","REMOVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		k8SNamespaceTypeStatusPropEnum = append(k8SNamespaceTypeStatusPropEnum, v)
	}
}

const (

	// K8SNamespaceStatusALLOCATED captures enum value "ALLOCATED"
	K8SNamespaceStatusALLOCATED string = "ALLOCATED"

	// K8SNamespaceStatusREADY captures enum value "READY"
	K8SNamespaceStatusREADY string = "READY"

	// K8SNamespaceStatusFAILED captures enum value "FAILED"
	K8SNamespaceStatusFAILED string = "FAILED"

	// K8SNamespaceStatusUNREACHABLE captures enum value "UNREACHABLE"
	K8SNamespaceStatusUNREACHABLE string = "UNREACHABLE"

	// K8SNamespaceStatusTERMINATING captures enum value "TERMINATING"
	K8SNamespaceStatusTERMINATING string = "TERMINATING"

	// K8SNamespaceStatusREMOVED captures enum value "REMOVED"
	K8SNamespaceStatusREMOVED string = "REMOVED"
)

// prop value enum
func (m *K8SNamespace) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, k8SNamespaceTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *K8SNamespace) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *K8SNamespace) validateZoneProjectAssignmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.ZoneProjectAssignmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("zoneProjectAssignmentId", "body", "uuid", m.ZoneProjectAssignmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this k8 s namespace based on context it is used
func (m *K8SNamespace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *K8SNamespace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *K8SNamespace) UnmarshalBinary(b []byte) error {
	var res K8SNamespace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
