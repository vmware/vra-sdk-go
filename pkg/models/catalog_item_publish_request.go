// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogItemPublishRequest CatalogItemPublishRequest
//
// A request to publish a catalog item to the catalog for the members of a specific project.
//
// swagger:model CatalogItemPublishRequest
type CatalogItemPublishRequest struct {

	// Catalog item description.
	Description string `json:"description,omitempty"`

	// Set to true to allow this catalog to be shared with multiple projects, or false to restrict it to the specified project.
	Global bool `json:"global,omitempty"`

	// ID of the icon to associate with this catalog item.
	// Format: uuid
	IconID strfmt.UUID `json:"iconId,omitempty"`

	// Catalog item name.
	Name string `json:"name,omitempty"`

	// ID of the project to share this catalog item with.
	// Format: uuid
	ProjectID strfmt.UUID `json:"projectId,omitempty"`

	// Information specific to the content type.
	Spec interface{} `json:"spec,omitempty"`

	// Type of content to be published, i.e., the catalog item type
	TypeID string `json:"typeId,omitempty"`
}

// Validate validates this catalog item publish request
func (m *CatalogItemPublishRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIconID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogItemPublishRequest) validateIconID(formats strfmt.Registry) error {
	if swag.IsZero(m.IconID) { // not required
		return nil
	}

	if err := validate.FormatOf("iconId", "body", "uuid", m.IconID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CatalogItemPublishRequest) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this catalog item publish request based on context it is used
func (m *CatalogItemPublishRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CatalogItemPublishRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogItemPublishRequest) UnmarshalBinary(b []byte) error {
	var res CatalogItemPublishRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
