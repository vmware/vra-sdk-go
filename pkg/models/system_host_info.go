// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemHostInfo system host info
// swagger:model SystemHostInfo
type SystemHostInfo struct {

	// available processor count
	AvailableProcessorCount int64 `json:"availableProcessorCount,omitempty"`

	// environment variables
	EnvironmentVariables map[string]string `json:"environmentVariables,omitempty"`

	// free disk byte count
	FreeDiskByteCount int64 `json:"freeDiskByteCount,omitempty"`

	// free memory byte count
	FreeMemoryByteCount int64 `json:"freeMemoryByteCount,omitempty"`

	// ip addresses
	IPAddresses []string `json:"ipAddresses"`

	// max memory byte count
	MaxMemoryByteCount int64 `json:"maxMemoryByteCount,omitempty"`

	// os family
	// Enum: [WINDOWS LINUX MACOS OTHER]
	OsFamily string `json:"osFamily,omitempty"`

	// os name
	OsName string `json:"osName,omitempty"`

	// properties
	Properties map[string]string `json:"properties,omitempty"`

	// total disk byte count
	TotalDiskByteCount int64 `json:"totalDiskByteCount,omitempty"`

	// total memory byte count
	TotalMemoryByteCount int64 `json:"totalMemoryByteCount,omitempty"`

	// usable disk byte count
	UsableDiskByteCount int64 `json:"usableDiskByteCount,omitempty"`
}

// Validate validates this system host info
func (m *SystemHostInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOsFamily(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var systemHostInfoTypeOsFamilyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WINDOWS","LINUX","MACOS","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		systemHostInfoTypeOsFamilyPropEnum = append(systemHostInfoTypeOsFamilyPropEnum, v)
	}
}

const (

	// SystemHostInfoOsFamilyWINDOWS captures enum value "WINDOWS"
	SystemHostInfoOsFamilyWINDOWS string = "WINDOWS"

	// SystemHostInfoOsFamilyLINUX captures enum value "LINUX"
	SystemHostInfoOsFamilyLINUX string = "LINUX"

	// SystemHostInfoOsFamilyMACOS captures enum value "MACOS"
	SystemHostInfoOsFamilyMACOS string = "MACOS"

	// SystemHostInfoOsFamilyOTHER captures enum value "OTHER"
	SystemHostInfoOsFamilyOTHER string = "OTHER"
)

// prop value enum
func (m *SystemHostInfo) validateOsFamilyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, systemHostInfoTypeOsFamilyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SystemHostInfo) validateOsFamily(formats strfmt.Registry) error {

	if swag.IsZero(m.OsFamily) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsFamilyEnum("osFamily", "body", m.OsFamily); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemHostInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemHostInfo) UnmarshalBinary(b []byte) error {
	var res SystemHostInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
