// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// K8SClusterAssignResponseDTO K8SClusterAssignResponseDTO
//
// swagger:model K8SClusterAssignResponseDTO
type K8SClusterAssignResponseDTO struct {

	// cluster count
	ClusterCount int32 `json:"clusterCount,omitempty"`

	// clusters processed count
	ClustersProcessedCount int32 `json:"clustersProcessedCount,omitempty"`

	// current stage
	CurrentStage string `json:"currentStage,omitempty"`

	// failed clusters
	FailedClusters map[string]string `json:"failedClusters,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// request Id
	RequestID string `json:"requestId,omitempty"`

	// status
	// Enum: [INITIALIZING IN_PROGRESS COMPLETED FAILED]
	Status string `json:"status,omitempty"`
}

// Validate validates this k8 s cluster assign response d t o
func (m *K8SClusterAssignResponseDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var k8SClusterAssignResponseDTOTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INITIALIZING","IN_PROGRESS","COMPLETED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		k8SClusterAssignResponseDTOTypeStatusPropEnum = append(k8SClusterAssignResponseDTOTypeStatusPropEnum, v)
	}
}

const (

	// K8SClusterAssignResponseDTOStatusINITIALIZING captures enum value "INITIALIZING"
	K8SClusterAssignResponseDTOStatusINITIALIZING string = "INITIALIZING"

	// K8SClusterAssignResponseDTOStatusINPROGRESS captures enum value "IN_PROGRESS"
	K8SClusterAssignResponseDTOStatusINPROGRESS string = "IN_PROGRESS"

	// K8SClusterAssignResponseDTOStatusCOMPLETED captures enum value "COMPLETED"
	K8SClusterAssignResponseDTOStatusCOMPLETED string = "COMPLETED"

	// K8SClusterAssignResponseDTOStatusFAILED captures enum value "FAILED"
	K8SClusterAssignResponseDTOStatusFAILED string = "FAILED"
)

// prop value enum
func (m *K8SClusterAssignResponseDTO) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, k8SClusterAssignResponseDTOTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *K8SClusterAssignResponseDTO) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this k8 s cluster assign response d t o based on context it is used
func (m *K8SClusterAssignResponseDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *K8SClusterAssignResponseDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *K8SClusterAssignResponseDTO) UnmarshalBinary(b []byte) error {
	var res K8SClusterAssignResponseDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
