// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VcfServiceCredentialCreationResponse VcfServiceCredentialCreationResponse
//
// swagger:model VcfServiceCredentialCreationResponse
type VcfServiceCredentialCreationResponse struct {

	// credentials
	Credentials []*VcfServiceAccount `json:"credentials"`

	// domain Id
	DomainID string `json:"domainId,omitempty"`

	// sddc integration Id
	SddcIntegrationID string `json:"sddcIntegrationId,omitempty"`

	// status
	// Enum: [SUCCESSFUL IN_PROGRESS FAILED]
	Status string `json:"status,omitempty"`

	// task Id
	TaskID string `json:"taskId,omitempty"`
}

// Validate validates this vcf service credential creation response
func (m *VcfServiceCredentialCreationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VcfServiceCredentialCreationResponse) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	for i := 0; i < len(m.Credentials); i++ {
		if swag.IsZero(m.Credentials[i]) { // not required
			continue
		}

		if m.Credentials[i] != nil {
			if err := m.Credentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var vcfServiceCredentialCreationResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCESSFUL","IN_PROGRESS","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vcfServiceCredentialCreationResponseTypeStatusPropEnum = append(vcfServiceCredentialCreationResponseTypeStatusPropEnum, v)
	}
}

const (

	// VcfServiceCredentialCreationResponseStatusSUCCESSFUL captures enum value "SUCCESSFUL"
	VcfServiceCredentialCreationResponseStatusSUCCESSFUL string = "SUCCESSFUL"

	// VcfServiceCredentialCreationResponseStatusINPROGRESS captures enum value "IN_PROGRESS"
	VcfServiceCredentialCreationResponseStatusINPROGRESS string = "IN_PROGRESS"

	// VcfServiceCredentialCreationResponseStatusFAILED captures enum value "FAILED"
	VcfServiceCredentialCreationResponseStatusFAILED string = "FAILED"
)

// prop value enum
func (m *VcfServiceCredentialCreationResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vcfServiceCredentialCreationResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VcfServiceCredentialCreationResponse) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vcf service credential creation response based on the context it is used
func (m *VcfServiceCredentialCreationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VcfServiceCredentialCreationResponse) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Credentials); i++ {

		if m.Credentials[i] != nil {
			if err := m.Credentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VcfServiceCredentialCreationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VcfServiceCredentialCreationResponse) UnmarshalBinary(b []byte) error {
	var res VcfServiceCredentialCreationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
