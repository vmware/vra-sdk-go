// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Route Route
//
// swagger:model Route
type Route struct {

	// action
	// Enum: [GET POST PATCH PUT DELETE OPTIONS]
	Action string `json:"action,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// handler
	Handler *Operation `json:"handler,omitempty"`

	// matcher
	Matcher *Operation `json:"matcher,omitempty"`

	// parameters
	Parameters []*Parameter `json:"parameters"`

	// path
	Path string `json:"path,omitempty"`

	// support level
	// Enum: [NOT_SUPPORTED INTERNAL DEPRECATED PUBLIC]
	SupportLevel string `json:"supportLevel,omitempty"`
}

// Validate validates this route
func (m *Route) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatcher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var routeTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GET","POST","PATCH","PUT","DELETE","OPTIONS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeTypeActionPropEnum = append(routeTypeActionPropEnum, v)
	}
}

const (

	// RouteActionGET captures enum value "GET"
	RouteActionGET string = "GET"

	// RouteActionPOST captures enum value "POST"
	RouteActionPOST string = "POST"

	// RouteActionPATCH captures enum value "PATCH"
	RouteActionPATCH string = "PATCH"

	// RouteActionPUT captures enum value "PUT"
	RouteActionPUT string = "PUT"

	// RouteActionDELETE captures enum value "DELETE"
	RouteActionDELETE string = "DELETE"

	// RouteActionOPTIONS captures enum value "OPTIONS"
	RouteActionOPTIONS string = "OPTIONS"
)

// prop value enum
func (m *Route) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Route) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *Route) validateHandler(formats strfmt.Registry) error {
	if swag.IsZero(m.Handler) { // not required
		return nil
	}

	if m.Handler != nil {
		if err := m.Handler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("handler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("handler")
			}
			return err
		}
	}

	return nil
}

func (m *Route) validateMatcher(formats strfmt.Registry) error {
	if swag.IsZero(m.Matcher) { // not required
		return nil
	}

	if m.Matcher != nil {
		if err := m.Matcher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matcher")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matcher")
			}
			return err
		}
	}

	return nil
}

func (m *Route) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var routeTypeSupportLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOT_SUPPORTED","INTERNAL","DEPRECATED","PUBLIC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeTypeSupportLevelPropEnum = append(routeTypeSupportLevelPropEnum, v)
	}
}

const (

	// RouteSupportLevelNOTSUPPORTED captures enum value "NOT_SUPPORTED"
	RouteSupportLevelNOTSUPPORTED string = "NOT_SUPPORTED"

	// RouteSupportLevelINTERNAL captures enum value "INTERNAL"
	RouteSupportLevelINTERNAL string = "INTERNAL"

	// RouteSupportLevelDEPRECATED captures enum value "DEPRECATED"
	RouteSupportLevelDEPRECATED string = "DEPRECATED"

	// RouteSupportLevelPUBLIC captures enum value "PUBLIC"
	RouteSupportLevelPUBLIC string = "PUBLIC"
)

// prop value enum
func (m *Route) validateSupportLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeTypeSupportLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Route) validateSupportLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.SupportLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateSupportLevelEnum("supportLevel", "body", m.SupportLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this route based on the context it is used
func (m *Route) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHandler(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatcher(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Route) contextValidateHandler(ctx context.Context, formats strfmt.Registry) error {

	if m.Handler != nil {
		if err := m.Handler.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("handler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("handler")
			}
			return err
		}
	}

	return nil
}

func (m *Route) contextValidateMatcher(ctx context.Context, formats strfmt.Registry) error {

	if m.Matcher != nil {
		if err := m.Matcher.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matcher")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matcher")
			}
			return err
		}
	}

	return nil
}

func (m *Route) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameters); i++ {

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Route) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Route) UnmarshalBinary(b []byte) error {
	var res Route
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
