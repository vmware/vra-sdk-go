// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationResource ApplicationResource
//
// A resource part of an application.
//
// swagger:model ApplicationResource
type ApplicationResource struct {

	// Creation time
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// A description of the resource
	Description string `json:"description,omitempty"`

	// Expense associated with the deployment.
	// Read Only: true
	Expense *Expense `json:"expense,omitempty"`

	// Unique identifier of the resource
	ID string `json:"id,omitempty"`

	// Name of the resource
	// Required: true
	Name *string `json:"name"`

	// Origin of the resource
	// Enum: [DISCOVERED ONBOARDED MIGRATED]
	Origin string `json:"origin,omitempty"`

	// properties
	Properties interface{} `json:"properties,omitempty"`

	// The current sync status
	// Enum: [SUCCESS MISSING STALE]
	SyncStatus string `json:"syncStatus,omitempty"`

	// tier
	Tier *ApplicationTier `json:"tier,omitempty"`

	// Type of the resource
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this application resource
func (m *ApplicationResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationResource) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationResource) validateExpense(formats strfmt.Registry) error {
	if swag.IsZero(m.Expense) { // not required
		return nil
	}

	if m.Expense != nil {
		if err := m.Expense.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expense")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expense")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationResource) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var applicationResourceTypeOriginPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DISCOVERED","ONBOARDED","MIGRATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationResourceTypeOriginPropEnum = append(applicationResourceTypeOriginPropEnum, v)
	}
}

const (

	// ApplicationResourceOriginDISCOVERED captures enum value "DISCOVERED"
	ApplicationResourceOriginDISCOVERED string = "DISCOVERED"

	// ApplicationResourceOriginONBOARDED captures enum value "ONBOARDED"
	ApplicationResourceOriginONBOARDED string = "ONBOARDED"

	// ApplicationResourceOriginMIGRATED captures enum value "MIGRATED"
	ApplicationResourceOriginMIGRATED string = "MIGRATED"
)

// prop value enum
func (m *ApplicationResource) validateOriginEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationResourceTypeOriginPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationResource) validateOrigin(formats strfmt.Registry) error {
	if swag.IsZero(m.Origin) { // not required
		return nil
	}

	// value enum
	if err := m.validateOriginEnum("origin", "body", m.Origin); err != nil {
		return err
	}

	return nil
}

var applicationResourceTypeSyncStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCESS","MISSING","STALE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationResourceTypeSyncStatusPropEnum = append(applicationResourceTypeSyncStatusPropEnum, v)
	}
}

const (

	// ApplicationResourceSyncStatusSUCCESS captures enum value "SUCCESS"
	ApplicationResourceSyncStatusSUCCESS string = "SUCCESS"

	// ApplicationResourceSyncStatusMISSING captures enum value "MISSING"
	ApplicationResourceSyncStatusMISSING string = "MISSING"

	// ApplicationResourceSyncStatusSTALE captures enum value "STALE"
	ApplicationResourceSyncStatusSTALE string = "STALE"
)

// prop value enum
func (m *ApplicationResource) validateSyncStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, applicationResourceTypeSyncStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ApplicationResource) validateSyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SyncStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateSyncStatusEnum("syncStatus", "body", m.SyncStatus); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationResource) validateTier(formats strfmt.Registry) error {
	if swag.IsZero(m.Tier) { // not required
		return nil
	}

	if m.Tier != nil {
		if err := m.Tier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tier")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationResource) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this application resource based on the context it is used
func (m *ApplicationResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExpense(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationResource) contextValidateExpense(ctx context.Context, formats strfmt.Registry) error {

	if m.Expense != nil {
		if err := m.Expense.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expense")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expense")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationResource) contextValidateTier(ctx context.Context, formats strfmt.Registry) error {

	if m.Tier != nil {
		if err := m.Tier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationResource) UnmarshalBinary(b []byte) error {
	var res ApplicationResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
