// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BatchUserOperationStatus BatchUserOperationStatus
//
// Batch user operation status.
//
// swagger:discriminator BatchUserOperationStatus Batch user operation status.
type BatchUserOperationStatus interface {
	runtime.Validatable
	runtime.ContextValidatable

	// The error message corresponding to the failed approval operation.
	// Example: User operation response received from unauthorized user exampleUser. Ignoring the response.
	Error() string
	SetError(string)

	// The id associated with each entity in the error list in batch approval operation.
	// Example: 9288cad7-eaaa-4e46-83b3-e077d6308b81
	ID() string
	SetID(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type batchUserOperationStatus struct {
	errorField string

	idField string
}

// Error gets the error of this polymorphic type
func (m *batchUserOperationStatus) Error() string {
	return m.errorField
}

// SetError sets the error of this polymorphic type
func (m *batchUserOperationStatus) SetError(val string) {
	m.errorField = val
}

// ID gets the id of this polymorphic type
func (m *batchUserOperationStatus) ID() string {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *batchUserOperationStatus) SetID(val string) {
	m.idField = val
}

// UnmarshalBatchUserOperationStatusSlice unmarshals polymorphic slices of BatchUserOperationStatus
func UnmarshalBatchUserOperationStatusSlice(reader io.Reader, consumer runtime.Consumer) ([]BatchUserOperationStatus, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []BatchUserOperationStatus
	for _, element := range elements {
		obj, err := unmarshalBatchUserOperationStatus(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalBatchUserOperationStatus unmarshals polymorphic BatchUserOperationStatus
func UnmarshalBatchUserOperationStatus(reader io.Reader, consumer runtime.Consumer) (BatchUserOperationStatus, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalBatchUserOperationStatus(data, consumer)
}

func unmarshalBatchUserOperationStatus(data []byte, consumer runtime.Consumer) (BatchUserOperationStatus, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Batch user operation status. property.
	var getType struct {
		BatchUserOperationStatus string `json:"Batch user operation status."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Batch user operation status.", "body", getType.BatchUserOperationStatus); err != nil {
		return nil, err
	}

	// The value of Batch user operation status. is used to determine which type to create and unmarshal the data into
	switch getType.BatchUserOperationStatus {
	case "BatchUserOperationStatus":
		var result batchUserOperationStatus
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Batch user operation status. value: %q", getType.BatchUserOperationStatus)
}

// Validate validates this batch user operation status
func (m *batchUserOperationStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this batch user operation status based on context it is used
func (m *batchUserOperationStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
