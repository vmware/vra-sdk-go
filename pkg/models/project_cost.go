// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ProjectCost ProjectCost
//
// A representation of a project cost.
//
// swagger:discriminator ProjectCost A representation of a project cost.
type ProjectCost interface {
	runtime.Validatable
	runtime.ContextValidatable

	// The unique code for the message.
	Code() string
	SetCode(string)

	// The cost of project.
	Cost() float64
	SetCost(float64)

	// The date as of which project cost is calculated. Timestamp format: YYYY-MM-DDThh:mm:ss.SSSZ
	// Example: 2011-12-03T10:15:30Z
	CostSyncTime() string
	SetCostSyncTime(string)

	// The unit of cost of project. This is a 3 letter currency code.
	// Example: USD
	CostUnit() string
	SetCostUnit(string)

	// The message regarding the project cost.
	Message() string
	SetMessage(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type projectCost struct {
	codeField string

	costField float64

	costSyncTimeField string

	costUnitField string

	messageField string
}

// Code gets the code of this polymorphic type
func (m *projectCost) Code() string {
	return m.codeField
}

// SetCode sets the code of this polymorphic type
func (m *projectCost) SetCode(val string) {
	m.codeField = val
}

// Cost gets the cost of this polymorphic type
func (m *projectCost) Cost() float64 {
	return m.costField
}

// SetCost sets the cost of this polymorphic type
func (m *projectCost) SetCost(val float64) {
	m.costField = val
}

// CostSyncTime gets the cost sync time of this polymorphic type
func (m *projectCost) CostSyncTime() string {
	return m.costSyncTimeField
}

// SetCostSyncTime sets the cost sync time of this polymorphic type
func (m *projectCost) SetCostSyncTime(val string) {
	m.costSyncTimeField = val
}

// CostUnit gets the cost unit of this polymorphic type
func (m *projectCost) CostUnit() string {
	return m.costUnitField
}

// SetCostUnit sets the cost unit of this polymorphic type
func (m *projectCost) SetCostUnit(val string) {
	m.costUnitField = val
}

// Message gets the message of this polymorphic type
func (m *projectCost) Message() string {
	return m.messageField
}

// SetMessage sets the message of this polymorphic type
func (m *projectCost) SetMessage(val string) {
	m.messageField = val
}

// UnmarshalProjectCostSlice unmarshals polymorphic slices of ProjectCost
func UnmarshalProjectCostSlice(reader io.Reader, consumer runtime.Consumer) ([]ProjectCost, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ProjectCost
	for _, element := range elements {
		obj, err := unmarshalProjectCost(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalProjectCost unmarshals polymorphic ProjectCost
func UnmarshalProjectCost(reader io.Reader, consumer runtime.Consumer) (ProjectCost, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalProjectCost(data, consumer)
}

func unmarshalProjectCost(data []byte, consumer runtime.Consumer) (ProjectCost, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the A representation of a project cost. property.
	var getType struct {
		ARepresentationOfaProjectCost string `json:"A representation of a project cost."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("A representation of a project cost.", "body", getType.ARepresentationOfaProjectCost); err != nil {
		return nil, err
	}

	// The value of A representation of a project cost. is used to determine which type to create and unmarshal the data into
	switch getType.ARepresentationOfaProjectCost {
	case "ProjectCost":
		var result projectCost
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid A representation of a project cost. value: %q", getType.ARepresentationOfaProjectCost)
}

// Validate validates this project cost
func (m *projectCost) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this project cost based on context it is used
func (m *projectCost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
