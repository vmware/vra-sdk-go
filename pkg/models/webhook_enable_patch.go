// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// WebhookEnablePatch WebhookEnablePatch
//
// Git/Docker Registry Webhook Patch details.
//
// swagger:discriminator WebhookEnablePatch Git/Docker Registry Webhook Patch details.
type WebhookEnablePatch interface {
	runtime.Validatable
	runtime.ContextValidatable

	// Indicates whether Git/Docker webhook is enabled or not.
	// Example: true
	Enabled() bool
	SetEnabled(bool)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type webhookEnablePatch struct {
	enabledField bool
}

// Enabled gets the enabled of this polymorphic type
func (m *webhookEnablePatch) Enabled() bool {
	return m.enabledField
}

// SetEnabled sets the enabled of this polymorphic type
func (m *webhookEnablePatch) SetEnabled(val bool) {
	m.enabledField = val
}

// UnmarshalWebhookEnablePatchSlice unmarshals polymorphic slices of WebhookEnablePatch
func UnmarshalWebhookEnablePatchSlice(reader io.Reader, consumer runtime.Consumer) ([]WebhookEnablePatch, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []WebhookEnablePatch
	for _, element := range elements {
		obj, err := unmarshalWebhookEnablePatch(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalWebhookEnablePatch unmarshals polymorphic WebhookEnablePatch
func UnmarshalWebhookEnablePatch(reader io.Reader, consumer runtime.Consumer) (WebhookEnablePatch, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalWebhookEnablePatch(data, consumer)
}

func unmarshalWebhookEnablePatch(data []byte, consumer runtime.Consumer) (WebhookEnablePatch, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Git/Docker Registry Webhook Patch details. property.
	var getType struct {
		GitDockerRegistryWebhookPatchDetails string `json:"Git/Docker Registry Webhook Patch details."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Git/Docker Registry Webhook Patch details.", "body", getType.GitDockerRegistryWebhookPatchDetails); err != nil {
		return nil, err
	}

	// The value of Git/Docker Registry Webhook Patch details. is used to determine which type to create and unmarshal the data into
	switch getType.GitDockerRegistryWebhookPatchDetails {
	case "WebhookEnablePatch":
		var result webhookEnablePatch
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Git/Docker Registry Webhook Patch details. value: %q", getType.GitDockerRegistryWebhookPatchDetails)
}

// Validate validates this webhook enable patch
func (m *webhookEnablePatch) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this webhook enable patch based on context it is used
func (m *webhookEnablePatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
