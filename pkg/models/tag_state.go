// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TagState TagState
//
// swagger:model TagState
type TagState struct {

	// deleted
	Deleted bool `json:"deleted,omitempty"`

	// document auth principal link
	DocumentAuthPrincipalLink string `json:"documentAuthPrincipalLink,omitempty"`

	// document description
	DocumentDescription *ServiceDocumentDescription `json:"documentDescription,omitempty"`

	// document epoch
	DocumentEpoch int64 `json:"documentEpoch,omitempty"`

	// document expiration time micros
	DocumentExpirationTimeMicros int64 `json:"documentExpirationTimeMicros,omitempty"`

	// document kind
	DocumentKind string `json:"documentKind,omitempty"`

	// document owner
	DocumentOwner string `json:"documentOwner,omitempty"`

	// document self link
	DocumentSelfLink string `json:"documentSelfLink,omitempty"`

	// document source link
	DocumentSourceLink string `json:"documentSourceLink,omitempty"`

	// document transaction Id
	DocumentTransactionID string `json:"documentTransactionId,omitempty"`

	// document update action
	DocumentUpdateAction string `json:"documentUpdateAction,omitempty"`

	// document update time micros
	DocumentUpdateTimeMicros int64 `json:"documentUpdateTimeMicros,omitempty"`

	// document version
	DocumentVersion int64 `json:"documentVersion,omitempty"`

	// external
	External bool `json:"external,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// msp auth link
	MspAuthLink string `json:"mspAuthLink,omitempty"`

	// org auth link
	OrgAuthLink string `json:"orgAuthLink,omitempty"`

	// origins
	Origins []string `json:"origins"`

	// owner auth link
	OwnerAuthLink string `json:"ownerAuthLink,omitempty"`

	// project auth link
	ProjectAuthLink string `json:"projectAuthLink,omitempty"`

	// tenant links
	TenantLinks []string `json:"tenantLinks"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this tag state
func (m *TagState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDocumentDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigins(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagState) validateDocumentDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.DocumentDescription) { // not required
		return nil
	}

	if m.DocumentDescription != nil {
		if err := m.DocumentDescription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("documentDescription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("documentDescription")
			}
			return err
		}
	}

	return nil
}

var tagStateOriginsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SYSTEM","USER_DEFINED","DISCOVERED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tagStateOriginsItemsEnum = append(tagStateOriginsItemsEnum, v)
	}
}

func (m *TagState) validateOriginsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tagStateOriginsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TagState) validateOrigins(formats strfmt.Registry) error {
	if swag.IsZero(m.Origins) { // not required
		return nil
	}

	for i := 0; i < len(m.Origins); i++ {

		// value enum
		if err := m.validateOriginsItemsEnum("origins"+"."+strconv.Itoa(i), "body", m.Origins[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this tag state based on the context it is used
func (m *TagState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDocumentDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagState) contextValidateDocumentDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.DocumentDescription != nil {
		if err := m.DocumentDescription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("documentDescription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("documentDescription")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TagState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TagState) UnmarshalBinary(b []byte) error {
	var res TagState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
