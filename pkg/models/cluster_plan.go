// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterPlan ClusterPlan
//
// swagger:model ClusterPlan
type ClusterPlan struct {

	// cloud account self link Id
	CloudAccountSelfLinkID string `json:"cloudAccountSelfLinkId,omitempty"`

	// created millis
	CreatedMillis int64 `json:"createdMillis,omitempty"`

	// definition
	Definition interface{} `json:"definition,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// org Id
	OrgID string `json:"orgId,omitempty"`

	// type
	// Enum: [TANZU_CLUSTER_PLAN]
	Type string `json:"type,omitempty"`

	// updated millis
	UpdatedMillis int64 `json:"updatedMillis,omitempty"`
}

// Validate validates this cluster plan
func (m *ClusterPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterPlan) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var clusterPlanTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TANZU_CLUSTER_PLAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterPlanTypeTypePropEnum = append(clusterPlanTypeTypePropEnum, v)
	}
}

const (

	// ClusterPlanTypeTANZUCLUSTERPLAN captures enum value "TANZU_CLUSTER_PLAN"
	ClusterPlanTypeTANZUCLUSTERPLAN string = "TANZU_CLUSTER_PLAN"
)

// prop value enum
func (m *ClusterPlan) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterPlanTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterPlan) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster plan based on context it is used
func (m *ClusterPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterPlan) UnmarshalBinary(b []byte) error {
	var res ClusterPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
