// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TMCEndpointConfigRequest TMCEndpointConfigRequest
//
// swagger:model TMCEndpointConfigRequest
type TMCEndpointConfigRequest struct {

	// custom properties
	CustomProperties *CustomProperties `json:"customProperties,omitempty"`

	// endpoint properties
	EndpointProperties *TMCEndpointProperties `json:"endpointProperties,omitempty"`

	// endpoint type
	EndpointType string `json:"endpointType,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// request type
	RequestType string `json:"requestType,omitempty"`

	// resource reference
	ResourceReference string `json:"resourceReference,omitempty"`

	// task reference
	TaskReference string `json:"taskReference,omitempty"`
}

// Validate validates this t m c endpoint config request
func (m *TMCEndpointConfigRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpointProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TMCEndpointConfigRequest) validateCustomProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomProperties) { // not required
		return nil
	}

	if m.CustomProperties != nil {
		if err := m.CustomProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customProperties")
			}
			return err
		}
	}

	return nil
}

func (m *TMCEndpointConfigRequest) validateEndpointProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.EndpointProperties) { // not required
		return nil
	}

	if m.EndpointProperties != nil {
		if err := m.EndpointProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpointProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endpointProperties")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this t m c endpoint config request based on the context it is used
func (m *TMCEndpointConfigRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndpointProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TMCEndpointConfigRequest) contextValidateCustomProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomProperties != nil {
		if err := m.CustomProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customProperties")
			}
			return err
		}
	}

	return nil
}

func (m *TMCEndpointConfigRequest) contextValidateEndpointProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.EndpointProperties != nil {
		if err := m.EndpointProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpointProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endpointProperties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TMCEndpointConfigRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TMCEndpointConfigRequest) UnmarshalBinary(b []byte) error {
	var res TMCEndpointConfigRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
