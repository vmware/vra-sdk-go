// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyDecisionOfObjectNode PolicyDecisionOfObjectNode
//
// A decision made to enforce policies.
// swagger:model PolicyDecisionOfObjectNode
type PolicyDecisionOfObjectNode struct {

	// description
	Description string `json:"description,omitempty"`

	// dry run Id
	// Format: uuid
	DryRunID strfmt.UUID `json:"dryRunId,omitempty"`

	// dry run sub task Id
	// Format: uuid
	DryRunSubTaskID strfmt.UUID `json:"dryRunSubTaskId,omitempty"`

	// effective policy definition
	EffectivePolicyDefinition interface{} `json:"effectivePolicyDefinition,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// org Id
	OrgID string `json:"orgId,omitempty"`

	// policies
	Policies []*PolicyDecisionPolicy `json:"policies"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// target Id
	TargetID string `json:"targetId,omitempty"`

	// target name
	TargetName string `json:"targetName,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// type Id
	TypeID string `json:"typeId,omitempty"`
}

// Validate validates this policy decision of object node
func (m *PolicyDecisionOfObjectNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDryRunID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDryRunSubTaskID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyDecisionOfObjectNode) validateDryRunID(formats strfmt.Registry) error {

	if swag.IsZero(m.DryRunID) { // not required
		return nil
	}

	if err := validate.FormatOf("dryRunId", "body", "uuid", m.DryRunID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PolicyDecisionOfObjectNode) validateDryRunSubTaskID(formats strfmt.Registry) error {

	if swag.IsZero(m.DryRunSubTaskID) { // not required
		return nil
	}

	if err := validate.FormatOf("dryRunSubTaskId", "body", "uuid", m.DryRunSubTaskID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PolicyDecisionOfObjectNode) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PolicyDecisionOfObjectNode) validatePolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	for i := 0; i < len(m.Policies); i++ {
		if swag.IsZero(m.Policies[i]) { // not required
			continue
		}

		if m.Policies[i] != nil {
			if err := m.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDecisionOfObjectNode) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyDecisionOfObjectNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyDecisionOfObjectNode) UnmarshalBinary(b []byte) error {
	var res PolicyDecisionOfObjectNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
