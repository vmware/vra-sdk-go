// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PropertyMetaData PropertyMetaData
//
// Model for input/output properties.
//
// swagger:discriminator PropertyMetaData Model for input/output properties.
type PropertyMetaData interface {
	runtime.Validatable
	runtime.ContextValidatable

	// Description for the input/output property.
	// Example: Repo Url
	Description() string
	SetDescription(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type propertyMetaData struct {
	descriptionField string
}

// Description gets the description of this polymorphic type
func (m *propertyMetaData) Description() string {
	return m.descriptionField
}

// SetDescription sets the description of this polymorphic type
func (m *propertyMetaData) SetDescription(val string) {
	m.descriptionField = val
}

// UnmarshalPropertyMetaDataSlice unmarshals polymorphic slices of PropertyMetaData
func UnmarshalPropertyMetaDataSlice(reader io.Reader, consumer runtime.Consumer) ([]PropertyMetaData, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []PropertyMetaData
	for _, element := range elements {
		obj, err := unmarshalPropertyMetaData(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalPropertyMetaData unmarshals polymorphic PropertyMetaData
func UnmarshalPropertyMetaData(reader io.Reader, consumer runtime.Consumer) (PropertyMetaData, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalPropertyMetaData(data, consumer)
}

func unmarshalPropertyMetaData(data []byte, consumer runtime.Consumer) (PropertyMetaData, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Model for input/output properties. property.
	var getType struct {
		ModelForInputOutputProperties string `json:"Model for input/output properties."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Model for input/output properties.", "body", getType.ModelForInputOutputProperties); err != nil {
		return nil, err
	}

	// The value of Model for input/output properties. is used to determine which type to create and unmarshal the data into
	switch getType.ModelForInputOutputProperties {
	case "PropertyMetaData":
		var result propertyMetaData
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Model for input/output properties. value: %q", getType.ModelForInputOutputProperties)
}

// Validate validates this property meta data
func (m *propertyMetaData) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this property meta data based on context it is used
func (m *propertyMetaData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
