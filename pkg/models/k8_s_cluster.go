// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// K8SCluster K8SCluster
//
// swagger:model K8SCluster
type K8SCluster struct {

	// address
	Address string `json:"address,omitempty"`

	// auth credentials link
	AuthCredentialsLink string `json:"authCredentialsLink,omitempty"`

	// ca certificate
	CaCertificate string `json:"caCertificate,omitempty"`

	// cluster type
	ClusterType string `json:"clusterType,omitempty"`

	// content
	Content string `json:"content,omitempty"`

	// created millis
	CreatedMillis int64 `json:"createdMillis,omitempty"`

	// credentials
	Credentials *AuthCredentialsServiceState `json:"credentials,omitempty"`

	// custom properties
	CustomProperties interface{} `json:"customProperties,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// direct connection
	DirectConnection bool `json:"directConnection,omitempty"`

	// endpoint Id
	EndpointID string `json:"endpointId,omitempty"`

	// external link
	ExternalLink string `json:"externalLink,omitempty"`

	// global
	Global bool `json:"global,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// installer Id
	// Format: uuid
	InstallerID strfmt.UUID `json:"installerId,omitempty"`

	// kubernetes worker instances
	KubernetesWorkerInstances int32 `json:"kubernetesWorkerInstances,omitempty"`

	// last operation
	LastOperation string `json:"lastOperation,omitempty"`

	// last operation message
	LastOperationMessage string `json:"lastOperationMessage,omitempty"`

	// last operation status
	LastOperationStatus string `json:"lastOperationStatus,omitempty"`

	// last refreshed millis
	LastRefreshedMillis int64 `json:"lastRefreshedMillis,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// nodes
	Nodes []*K8SNode `json:"nodes"`

	// org Id
	OrgID string `json:"orgId,omitempty"`

	// owner
	Owner string `json:"owner,omitempty"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// remaining unreachable retry threshold
	RemainingUnreachableRetryThreshold int32 `json:"remainingUnreachableRetryThreshold,omitempty"`

	// shared
	Shared bool `json:"shared,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// updated millis
	UpdatedMillis int64 `json:"updatedMillis,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this k8 s cluster
func (m *K8SCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstallerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8SCluster) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *K8SCluster) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *K8SCluster) validateInstallerID(formats strfmt.Registry) error {
	if swag.IsZero(m.InstallerID) { // not required
		return nil
	}

	if err := validate.FormatOf("installerId", "body", "uuid", m.InstallerID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *K8SCluster) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(m.Nodes); i++ {
		if swag.IsZero(m.Nodes[i]) { // not required
			continue
		}

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this k8 s cluster based on the context it is used
func (m *K8SCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8SCluster) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {
		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *K8SCluster) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nodes); i++ {

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *K8SCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *K8SCluster) UnmarshalBinary(b []byte) error {
	var res K8SCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
