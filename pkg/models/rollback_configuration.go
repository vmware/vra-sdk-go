// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RollbackConfiguration RollbackConfiguration
//
// Model represents a Rollback configuration.
//
// swagger:discriminator RollbackConfiguration Model represents a Rollback configuration.
type RollbackConfiguration interface {
	runtime.Validatable
	runtime.ContextValidatable

	// Map representing the Input properties for the Rollback Pipeline.
	// Example: {"test":{"description":"test-value","mandatory":false}}
	Inputs() interface{}
	SetInputs(interface{})

	// Rollback Pipeline name.
	// Example: Rolback-Pipeline
	Name() string
	SetName(string)

	// Stage name for which the rollback pipeline is configured.
	// Example: Dev-Stage
	Stage() string
	SetStage(string)

	// Task name for which the rollback pipeline is configured.
	// Example: Publish-Image-Task
	Task() string
	SetTask(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type rollbackConfiguration struct {
	inputsField interface{}

	nameField string

	stageField string

	taskField string
}

// Inputs gets the inputs of this polymorphic type
func (m *rollbackConfiguration) Inputs() interface{} {
	return m.inputsField
}

// SetInputs sets the inputs of this polymorphic type
func (m *rollbackConfiguration) SetInputs(val interface{}) {
	m.inputsField = val
}

// Name gets the name of this polymorphic type
func (m *rollbackConfiguration) Name() string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *rollbackConfiguration) SetName(val string) {
	m.nameField = val
}

// Stage gets the stage of this polymorphic type
func (m *rollbackConfiguration) Stage() string {
	return m.stageField
}

// SetStage sets the stage of this polymorphic type
func (m *rollbackConfiguration) SetStage(val string) {
	m.stageField = val
}

// Task gets the task of this polymorphic type
func (m *rollbackConfiguration) Task() string {
	return m.taskField
}

// SetTask sets the task of this polymorphic type
func (m *rollbackConfiguration) SetTask(val string) {
	m.taskField = val
}

// UnmarshalRollbackConfigurationSlice unmarshals polymorphic slices of RollbackConfiguration
func UnmarshalRollbackConfigurationSlice(reader io.Reader, consumer runtime.Consumer) ([]RollbackConfiguration, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []RollbackConfiguration
	for _, element := range elements {
		obj, err := unmarshalRollbackConfiguration(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalRollbackConfiguration unmarshals polymorphic RollbackConfiguration
func UnmarshalRollbackConfiguration(reader io.Reader, consumer runtime.Consumer) (RollbackConfiguration, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalRollbackConfiguration(data, consumer)
}

func unmarshalRollbackConfiguration(data []byte, consumer runtime.Consumer) (RollbackConfiguration, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Model represents a Rollback configuration. property.
	var getType struct {
		ModelRepresentsaRollbackConfiguration string `json:"Model represents a Rollback configuration."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Model represents a Rollback configuration.", "body", getType.ModelRepresentsaRollbackConfiguration); err != nil {
		return nil, err
	}

	// The value of Model represents a Rollback configuration. is used to determine which type to create and unmarshal the data into
	switch getType.ModelRepresentsaRollbackConfiguration {
	case "RollbackConfiguration":
		var result rollbackConfiguration
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Model represents a Rollback configuration. value: %q", getType.ModelRepresentsaRollbackConfiguration)
}

// Validate validates this rollback configuration
func (m *rollbackConfiguration) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this rollback configuration based on context it is used
func (m *rollbackConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
