// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MeteringPolicy MeteringPolicy
//
// swagger:model MeteringPolicy
type MeteringPolicy struct {

	// charge model
	// Enum: [PAY_AS_YOU_GO]
	ChargeModel string `json:"chargeModel,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// fixed price
	FixedPrice *FixedPrice `json:"fixedPrice,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// last updated at
	// Format: date-time
	LastUpdatedAt strfmt.DateTime `json:"lastUpdatedAt,omitempty"`

	// metering items
	MeteringItems []*MeteringItem `json:"meteringItems"`

	// name
	Name string `json:"name,omitempty"`

	// named metering items
	NamedMeteringItems []*NamedMeteringItem `json:"namedMeteringItems"`

	// one time metering items
	OneTimeMeteringItems []*OneTimeMeteringItem `json:"oneTimeMeteringItems"`

	// org Id
	OrgID string `json:"orgId,omitempty"`

	// Assignment count, assignment entity type
	PricingCardAssignmentInfo *MeteringPolicyAssignmentInfo `json:"pricingCardAssignmentInfo,omitempty"`

	// tag based metering items
	TagBasedMeteringItems []*TagBasedMeteringItem `json:"tagBasedMeteringItems"`

	// tag based one time metering items
	TagBasedOneTimeMeteringItems []*TagBasedOneTimeMeteringItem `json:"tagBasedOneTimeMeteringItems"`

	// tag based rate factor items
	TagBasedRateFactorItems []*TagBasedRateFactorItem `json:"tagBasedRateFactorItems"`
}

// Validate validates this metering policy
func (m *MeteringPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChargeModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeteringItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamedMeteringItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOneTimeMeteringItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingCardAssignmentInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagBasedMeteringItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagBasedOneTimeMeteringItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagBasedRateFactorItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var meteringPolicyTypeChargeModelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PAY_AS_YOU_GO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		meteringPolicyTypeChargeModelPropEnum = append(meteringPolicyTypeChargeModelPropEnum, v)
	}
}

const (

	// MeteringPolicyChargeModelPAYASYOUGO captures enum value "PAY_AS_YOU_GO"
	MeteringPolicyChargeModelPAYASYOUGO string = "PAY_AS_YOU_GO"
)

// prop value enum
func (m *MeteringPolicy) validateChargeModelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, meteringPolicyTypeChargeModelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MeteringPolicy) validateChargeModel(formats strfmt.Registry) error {
	if swag.IsZero(m.ChargeModel) { // not required
		return nil
	}

	// value enum
	if err := m.validateChargeModelEnum("chargeModel", "body", m.ChargeModel); err != nil {
		return err
	}

	return nil
}

func (m *MeteringPolicy) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MeteringPolicy) validateFixedPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.FixedPrice) { // not required
		return nil
	}

	if m.FixedPrice != nil {
		if err := m.FixedPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fixedPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fixedPrice")
			}
			return err
		}
	}

	return nil
}

func (m *MeteringPolicy) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MeteringPolicy) validateLastUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedAt", "body", "date-time", m.LastUpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MeteringPolicy) validateMeteringItems(formats strfmt.Registry) error {
	if swag.IsZero(m.MeteringItems) { // not required
		return nil
	}

	for i := 0; i < len(m.MeteringItems); i++ {
		if swag.IsZero(m.MeteringItems[i]) { // not required
			continue
		}

		if m.MeteringItems[i] != nil {
			if err := m.MeteringItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("meteringItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("meteringItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MeteringPolicy) validateNamedMeteringItems(formats strfmt.Registry) error {
	if swag.IsZero(m.NamedMeteringItems) { // not required
		return nil
	}

	for i := 0; i < len(m.NamedMeteringItems); i++ {
		if swag.IsZero(m.NamedMeteringItems[i]) { // not required
			continue
		}

		if m.NamedMeteringItems[i] != nil {
			if err := m.NamedMeteringItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("namedMeteringItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("namedMeteringItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MeteringPolicy) validateOneTimeMeteringItems(formats strfmt.Registry) error {
	if swag.IsZero(m.OneTimeMeteringItems) { // not required
		return nil
	}

	for i := 0; i < len(m.OneTimeMeteringItems); i++ {
		if swag.IsZero(m.OneTimeMeteringItems[i]) { // not required
			continue
		}

		if m.OneTimeMeteringItems[i] != nil {
			if err := m.OneTimeMeteringItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("oneTimeMeteringItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("oneTimeMeteringItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MeteringPolicy) validatePricingCardAssignmentInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.PricingCardAssignmentInfo) { // not required
		return nil
	}

	if m.PricingCardAssignmentInfo != nil {
		if err := m.PricingCardAssignmentInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pricingCardAssignmentInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pricingCardAssignmentInfo")
			}
			return err
		}
	}

	return nil
}

func (m *MeteringPolicy) validateTagBasedMeteringItems(formats strfmt.Registry) error {
	if swag.IsZero(m.TagBasedMeteringItems) { // not required
		return nil
	}

	for i := 0; i < len(m.TagBasedMeteringItems); i++ {
		if swag.IsZero(m.TagBasedMeteringItems[i]) { // not required
			continue
		}

		if m.TagBasedMeteringItems[i] != nil {
			if err := m.TagBasedMeteringItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagBasedMeteringItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagBasedMeteringItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MeteringPolicy) validateTagBasedOneTimeMeteringItems(formats strfmt.Registry) error {
	if swag.IsZero(m.TagBasedOneTimeMeteringItems) { // not required
		return nil
	}

	for i := 0; i < len(m.TagBasedOneTimeMeteringItems); i++ {
		if swag.IsZero(m.TagBasedOneTimeMeteringItems[i]) { // not required
			continue
		}

		if m.TagBasedOneTimeMeteringItems[i] != nil {
			if err := m.TagBasedOneTimeMeteringItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagBasedOneTimeMeteringItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagBasedOneTimeMeteringItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MeteringPolicy) validateTagBasedRateFactorItems(formats strfmt.Registry) error {
	if swag.IsZero(m.TagBasedRateFactorItems) { // not required
		return nil
	}

	for i := 0; i < len(m.TagBasedRateFactorItems); i++ {
		if swag.IsZero(m.TagBasedRateFactorItems[i]) { // not required
			continue
		}

		if m.TagBasedRateFactorItems[i] != nil {
			if err := m.TagBasedRateFactorItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagBasedRateFactorItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagBasedRateFactorItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this metering policy based on the context it is used
func (m *MeteringPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFixedPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeteringItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamedMeteringItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOneTimeMeteringItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePricingCardAssignmentInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagBasedMeteringItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagBasedOneTimeMeteringItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagBasedRateFactorItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MeteringPolicy) contextValidateFixedPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.FixedPrice != nil {
		if err := m.FixedPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fixedPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fixedPrice")
			}
			return err
		}
	}

	return nil
}

func (m *MeteringPolicy) contextValidateMeteringItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MeteringItems); i++ {

		if m.MeteringItems[i] != nil {
			if err := m.MeteringItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("meteringItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("meteringItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MeteringPolicy) contextValidateNamedMeteringItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NamedMeteringItems); i++ {

		if m.NamedMeteringItems[i] != nil {
			if err := m.NamedMeteringItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("namedMeteringItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("namedMeteringItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MeteringPolicy) contextValidateOneTimeMeteringItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OneTimeMeteringItems); i++ {

		if m.OneTimeMeteringItems[i] != nil {
			if err := m.OneTimeMeteringItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("oneTimeMeteringItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("oneTimeMeteringItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MeteringPolicy) contextValidatePricingCardAssignmentInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.PricingCardAssignmentInfo != nil {
		if err := m.PricingCardAssignmentInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pricingCardAssignmentInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pricingCardAssignmentInfo")
			}
			return err
		}
	}

	return nil
}

func (m *MeteringPolicy) contextValidateTagBasedMeteringItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagBasedMeteringItems); i++ {

		if m.TagBasedMeteringItems[i] != nil {
			if err := m.TagBasedMeteringItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagBasedMeteringItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagBasedMeteringItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MeteringPolicy) contextValidateTagBasedOneTimeMeteringItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagBasedOneTimeMeteringItems); i++ {

		if m.TagBasedOneTimeMeteringItems[i] != nil {
			if err := m.TagBasedOneTimeMeteringItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagBasedOneTimeMeteringItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagBasedOneTimeMeteringItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MeteringPolicy) contextValidateTagBasedRateFactorItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagBasedRateFactorItems); i++ {

		if m.TagBasedRateFactorItems[i] != nil {
			if err := m.TagBasedRateFactorItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tagBasedRateFactorItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tagBasedRateFactorItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MeteringPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MeteringPolicy) UnmarshalBinary(b []byte) error {
	var res MeteringPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
