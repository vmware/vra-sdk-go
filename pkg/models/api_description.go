// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIDescription Api description
//
// swagger:model ApiDescription
type APIDescription struct {

	// The version of the API in yyyy-MM-dd format (UTC).
	// Required: true
	APIVersion *string `json:"apiVersion"`

	// The deprecation policy may contain information whether the api is in deprecated state and when it expires.
	DeprecationPolicy *DeprecationPolicy `json:"deprecationPolicy,omitempty"`

	// The link to the documentation of this api version
	// Required: true
	DocumentationLink *string `json:"documentationLink"`
}

// Validate validates this Api description
func (m *APIDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeprecationPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentationLink(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIDescription) validateAPIVersion(formats strfmt.Registry) error {

	if err := validate.Required("apiVersion", "body", m.APIVersion); err != nil {
		return err
	}

	return nil
}

func (m *APIDescription) validateDeprecationPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.DeprecationPolicy) { // not required
		return nil
	}

	if m.DeprecationPolicy != nil {
		if err := m.DeprecationPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deprecationPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deprecationPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *APIDescription) validateDocumentationLink(formats strfmt.Registry) error {

	if err := validate.Required("documentationLink", "body", m.DocumentationLink); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Api description based on the context it is used
func (m *APIDescription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeprecationPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIDescription) contextValidateDeprecationPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.DeprecationPolicy != nil {
		if err := m.DeprecationPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deprecationPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deprecationPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIDescription) UnmarshalBinary(b []byte) error {
	var res APIDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
