// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TerraformToBlueprintMapping TerraformToBlueprintMapping
//
// Information about a Terraform configuration needed to create a blueprint.
//
// swagger:model TerraformToBlueprintMapping
type TerraformToBlueprintMapping struct {

	// Compatible versions of Terraform that can be used to execute this configuration.
	CompatibleVersions []string `json:"compatibleVersions"`

	// A reference to the location where the Terraform configuration is being hosted.
	ConfigurationSourceReference *TerraformConfigurationSourceReference `json:"configurationSourceReference,omitempty"`

	// Information about output values generated by the Terraform configuration.
	OutputValues []*OutputValue `json:"outputValues"`

	// Information about providers used in the Terraform configuration.
	Providers []*Provider `json:"providers"`

	// Information about variables expected by the Terraform configuration.
	Variables []*Variable `json:"variables"`

	// A list of warnings related to the Terraform configuration.
	Warnings []string `json:"warnings"`
}

// Validate validates this terraform to blueprint mapping
func (m *TerraformToBlueprintMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigurationSourceReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraformToBlueprintMapping) validateConfigurationSourceReference(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigurationSourceReference) { // not required
		return nil
	}

	if m.ConfigurationSourceReference != nil {
		if err := m.ConfigurationSourceReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configurationSourceReference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configurationSourceReference")
			}
			return err
		}
	}

	return nil
}

func (m *TerraformToBlueprintMapping) validateOutputValues(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputValues) { // not required
		return nil
	}

	for i := 0; i < len(m.OutputValues); i++ {
		if swag.IsZero(m.OutputValues[i]) { // not required
			continue
		}

		if m.OutputValues[i] != nil {
			if err := m.OutputValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TerraformToBlueprintMapping) validateProviders(formats strfmt.Registry) error {
	if swag.IsZero(m.Providers) { // not required
		return nil
	}

	for i := 0; i < len(m.Providers); i++ {
		if swag.IsZero(m.Providers[i]) { // not required
			continue
		}

		if m.Providers[i] != nil {
			if err := m.Providers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("providers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("providers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TerraformToBlueprintMapping) validateVariables(formats strfmt.Registry) error {
	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	for i := 0; i < len(m.Variables); i++ {
		if swag.IsZero(m.Variables[i]) { // not required
			continue
		}

		if m.Variables[i] != nil {
			if err := m.Variables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this terraform to blueprint mapping based on the context it is used
func (m *TerraformToBlueprintMapping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigurationSourceReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProviders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVariables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraformToBlueprintMapping) contextValidateConfigurationSourceReference(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigurationSourceReference != nil {
		if err := m.ConfigurationSourceReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configurationSourceReference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configurationSourceReference")
			}
			return err
		}
	}

	return nil
}

func (m *TerraformToBlueprintMapping) contextValidateOutputValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OutputValues); i++ {

		if m.OutputValues[i] != nil {
			if err := m.OutputValues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputValues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputValues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TerraformToBlueprintMapping) contextValidateProviders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Providers); i++ {

		if m.Providers[i] != nil {
			if err := m.Providers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("providers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("providers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TerraformToBlueprintMapping) contextValidateVariables(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Variables); i++ {

		if m.Variables[i] != nil {
			if err := m.Variables[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("variables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TerraformToBlueprintMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraformToBlueprintMapping) UnmarshalBinary(b []byte) error {
	var res TerraformToBlueprintMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
