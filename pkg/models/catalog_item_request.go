// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogItemRequest CatalogItemRequest
//
// # A request to create a deployment based on a catalog item
//
// swagger:model CatalogItemRequest
type CatalogItemRequest struct {

	// Deployment request count; defaults to 1 if not specified.
	// Maximum: 127
	// Minimum: -128
	BulkRequestCount *int32 `json:"bulkRequestCount,omitempty"`

	// Name of the requested deployment
	DeploymentName string `json:"deploymentName,omitempty"`

	// Input parameters for the request. These must be compliant with the schema of the corresponding catalog item
	Inputs interface{} `json:"inputs,omitempty"`

	// Project to be used for the request
	ProjectID string `json:"projectId,omitempty"`

	// Reason for request
	Reason string `json:"reason,omitempty"`

	// Version of the catalog item. e.g. v2.0
	Version string `json:"version,omitempty"`
}

// Validate validates this catalog item request
func (m *CatalogItemRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBulkRequestCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogItemRequest) validateBulkRequestCount(formats strfmt.Registry) error {
	if swag.IsZero(m.BulkRequestCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("bulkRequestCount", "body", int64(*m.BulkRequestCount), -128, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("bulkRequestCount", "body", int64(*m.BulkRequestCount), 127, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this catalog item request based on context it is used
func (m *CatalogItemRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CatalogItemRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogItemRequest) UnmarshalBinary(b []byte) error {
	var res CatalogItemRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
