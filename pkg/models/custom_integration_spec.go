// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CustomIntegrationSpec CustomIntegrationSpec
//
// Custom Integration specification.
//
// swagger:discriminator CustomIntegrationSpec Custom Integration specification.
type CustomIntegrationSpec interface {
	runtime.Validatable
	runtime.ContextValidatable

	// A human-friendly description.
	// Required: true
	Description() *string
	SetDescription(*string)

	// A human-friendly name used as an identifier in APIs that support this option
	// Example: My-Name
	// Required: true
	Name() *string
	SetName(*string)

	// The project this entity belongs to.
	// Example: My-Project
	Project() string
	SetProject(string)

	// YAML describing Custom integration details.
	// Example: ---\nruntime: \"nodejs\"\ncode: |\n    var context = require(\"./context.js\")\n    var start = Date.now();\n    var message = context.getInput(\"message\");\n    console.log(\"starting timer is good \" + message);\n    \n    setTimeout(function() {\n      var millis = Date.now() - start;\n      console.log(\"seconds elapsed = \" + Math.floor(millis/1000));\n      context.setOutput(\"time\", millis);\n    }, 2000);\ninputProperties:\n  - name: message\n    type: text\n    title: Message\n    placeHolder: Time\n    defaultValue: \n    bindable: true\n    labelInfo: true\n    labelMessage: What is time\n    \noutputProperties:\n  - name: time\n    type: label\n    title: Time
	Yaml() string
	SetYaml(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type customIntegrationSpec struct {
	descriptionField *string

	nameField *string

	projectField string

	yamlField string
}

// Description gets the description of this polymorphic type
func (m *customIntegrationSpec) Description() *string {
	return m.descriptionField
}

// SetDescription sets the description of this polymorphic type
func (m *customIntegrationSpec) SetDescription(val *string) {
	m.descriptionField = val
}

// Name gets the name of this polymorphic type
func (m *customIntegrationSpec) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *customIntegrationSpec) SetName(val *string) {
	m.nameField = val
}

// Project gets the project of this polymorphic type
func (m *customIntegrationSpec) Project() string {
	return m.projectField
}

// SetProject sets the project of this polymorphic type
func (m *customIntegrationSpec) SetProject(val string) {
	m.projectField = val
}

// Yaml gets the yaml of this polymorphic type
func (m *customIntegrationSpec) Yaml() string {
	return m.yamlField
}

// SetYaml sets the yaml of this polymorphic type
func (m *customIntegrationSpec) SetYaml(val string) {
	m.yamlField = val
}

// UnmarshalCustomIntegrationSpecSlice unmarshals polymorphic slices of CustomIntegrationSpec
func UnmarshalCustomIntegrationSpecSlice(reader io.Reader, consumer runtime.Consumer) ([]CustomIntegrationSpec, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []CustomIntegrationSpec
	for _, element := range elements {
		obj, err := unmarshalCustomIntegrationSpec(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalCustomIntegrationSpec unmarshals polymorphic CustomIntegrationSpec
func UnmarshalCustomIntegrationSpec(reader io.Reader, consumer runtime.Consumer) (CustomIntegrationSpec, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalCustomIntegrationSpec(data, consumer)
}

func unmarshalCustomIntegrationSpec(data []byte, consumer runtime.Consumer) (CustomIntegrationSpec, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Custom Integration specification. property.
	var getType struct {
		CustomIntegrationSpecification string `json:"Custom Integration specification."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Custom Integration specification.", "body", getType.CustomIntegrationSpecification); err != nil {
		return nil, err
	}

	// The value of Custom Integration specification. is used to determine which type to create and unmarshal the data into
	switch getType.CustomIntegrationSpecification {
	case "CustomIntegrationSpec":
		var result customIntegrationSpec
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Custom Integration specification. value: %q", getType.CustomIntegrationSpecification)
}

// Validate validates this custom integration spec
func (m *customIntegrationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *customIntegrationSpec) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description()); err != nil {
		return err
	}

	return nil
}

func (m *customIntegrationSpec) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this custom integration spec based on context it is used
func (m *customIntegrationSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
