// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogItemVersion CatalogItemVersion
//
// Represents a version of a Catalog Item that can be requested by a consumer.
//
// swagger:model CatalogItemVersion
type CatalogItemVersion struct {

	// Created At
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Description
	Description string `json:"description,omitempty"`

	// External ID
	ExternalID string `json:"externalId,omitempty"`

	// Form ID
	FormID string `json:"formId,omitempty"`

	// Version ID
	ID string `json:"id,omitempty"`

	// Input Schema
	Schema interface{} `json:"schema,omitempty"`
}

// Validate validates this catalog item version
func (m *CatalogItemVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogItemVersion) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this catalog item version based on context it is used
func (m *CatalogItemVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CatalogItemVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogItemVersion) UnmarshalBinary(b []byte) error {
	var res CatalogItemVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
