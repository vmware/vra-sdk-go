// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// X509Certificate X509Certificate
//
// swagger:model X509Certificate
type X509Certificate struct {

	// encoded
	// Format: byte
	Encoded strfmt.Base64 `json:"encoded,omitempty"`

	// issuer d n
	IssuerDN *Principal `json:"issuerDN,omitempty"`

	// not after
	// Format: date-time
	NotAfter strfmt.DateTime `json:"notAfter,omitempty"`

	// not before
	// Format: date-time
	NotBefore strfmt.DateTime `json:"notBefore,omitempty"`

	// public key
	PublicKey *PublicKey `json:"publicKey,omitempty"`

	// serial number
	SerialNumber int64 `json:"serialNumber,omitempty"`

	// sig alg name
	SigAlgName string `json:"sigAlgName,omitempty"`

	// sig alg o ID
	SigAlgOID string `json:"sigAlgOID,omitempty"`

	// sig alg params
	// Format: byte
	SigAlgParams strfmt.Base64 `json:"sigAlgParams,omitempty"`

	// subject d n
	SubjectDN *Principal `json:"subjectDN,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this x509 certificate
func (m *X509Certificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssuerDN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotBefore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectDN(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *X509Certificate) validateIssuerDN(formats strfmt.Registry) error {
	if swag.IsZero(m.IssuerDN) { // not required
		return nil
	}

	if m.IssuerDN != nil {
		if err := m.IssuerDN.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuerDN")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuerDN")
			}
			return err
		}
	}

	return nil
}

func (m *X509Certificate) validateNotAfter(formats strfmt.Registry) error {
	if swag.IsZero(m.NotAfter) { // not required
		return nil
	}

	if err := validate.FormatOf("notAfter", "body", "date-time", m.NotAfter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *X509Certificate) validateNotBefore(formats strfmt.Registry) error {
	if swag.IsZero(m.NotBefore) { // not required
		return nil
	}

	if err := validate.FormatOf("notBefore", "body", "date-time", m.NotBefore.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *X509Certificate) validatePublicKey(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicKey) { // not required
		return nil
	}

	if m.PublicKey != nil {
		if err := m.PublicKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicKey")
			}
			return err
		}
	}

	return nil
}

func (m *X509Certificate) validateSubjectDN(formats strfmt.Registry) error {
	if swag.IsZero(m.SubjectDN) { // not required
		return nil
	}

	if m.SubjectDN != nil {
		if err := m.SubjectDN.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subjectDN")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subjectDN")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this x509 certificate based on the context it is used
func (m *X509Certificate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIssuerDN(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublicKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubjectDN(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *X509Certificate) contextValidateIssuerDN(ctx context.Context, formats strfmt.Registry) error {

	if m.IssuerDN != nil {
		if err := m.IssuerDN.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuerDN")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuerDN")
			}
			return err
		}
	}

	return nil
}

func (m *X509Certificate) contextValidatePublicKey(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicKey != nil {
		if err := m.PublicKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicKey")
			}
			return err
		}
	}

	return nil
}

func (m *X509Certificate) contextValidateSubjectDN(ctx context.Context, formats strfmt.Registry) error {

	if m.SubjectDN != nil {
		if err := m.SubjectDN.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subjectDN")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subjectDN")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *X509Certificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *X509Certificate) UnmarshalBinary(b []byte) error {
	var res X509Certificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
