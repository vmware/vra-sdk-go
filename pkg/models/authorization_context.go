// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthorizationContext AuthorizationContext
//
// swagger:model AuthorizationContext
type AuthorizationContext struct {

	// claims
	Claims *Claims `json:"claims,omitempty"`

	// guest user
	GuestUser bool `json:"guestUser,omitempty"`

	// system user
	SystemUser bool `json:"systemUser,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this authorization context
func (m *AuthorizationContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClaims(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationContext) validateClaims(formats strfmt.Registry) error {
	if swag.IsZero(m.Claims) { // not required
		return nil
	}

	if m.Claims != nil {
		if err := m.Claims.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("claims")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("claims")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this authorization context based on the context it is used
func (m *AuthorizationContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClaims(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationContext) contextValidateClaims(ctx context.Context, formats strfmt.Registry) error {

	if m.Claims != nil {
		if err := m.Claims.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("claims")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("claims")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthorizationContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorizationContext) UnmarshalBinary(b []byte) error {
	var res AuthorizationContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
