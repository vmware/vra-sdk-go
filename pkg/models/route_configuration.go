// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RouteConfiguration Load balancer route configuration.
// swagger:model RouteConfiguration
type RouteConfiguration struct {

	// Algorithm employed for load balancing.
	Algorithm string `json:"algorithm,omitempty"`

	// Parameters need for load balancing algorithm.Use newline to separate multiple parameters.
	AlgorithmParameters string `json:"algorithmParameters,omitempty"`

	// Health check configuration for this route configuration.
	HealthCheckConfiguration *HealthCheckConfiguration `json:"healthCheckConfiguration,omitempty"`

	// Member port where the traffic is routed to.
	// Required: true
	MemberPort *string `json:"memberPort"`

	// The protocol of the member traffic.
	// Required: true
	MemberProtocol *string `json:"memberProtocol"`

	// Port which the load balancer is listening to.
	// Required: true
	Port *string `json:"port"`

	// The protocol of the incoming load balancer requests.
	// Required: true
	Protocol *string `json:"protocol"`
}

// Validate validates this route configuration
func (m *RouteConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealthCheckConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouteConfiguration) validateHealthCheckConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.HealthCheckConfiguration) { // not required
		return nil
	}

	if m.HealthCheckConfiguration != nil {
		if err := m.HealthCheckConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("healthCheckConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *RouteConfiguration) validateMemberPort(formats strfmt.Registry) error {

	if err := validate.Required("memberPort", "body", m.MemberPort); err != nil {
		return err
	}

	return nil
}

func (m *RouteConfiguration) validateMemberProtocol(formats strfmt.Registry) error {

	if err := validate.Required("memberProtocol", "body", m.MemberProtocol); err != nil {
		return err
	}

	return nil
}

func (m *RouteConfiguration) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *RouteConfiguration) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RouteConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouteConfiguration) UnmarshalBinary(b []byte) error {
	var res RouteConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
