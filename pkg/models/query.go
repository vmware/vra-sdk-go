// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Query query
// swagger:model Query
type Query struct {

	// boolean clauses
	BooleanClauses []*Query `json:"booleanClauses"`

	// occurance
	// Enum: [MUST_OCCUR MUST_NOT_OCCUR SHOULD_OCCUR]
	Occurance string `json:"occurance,omitempty"`

	// term
	Term *QueryTerm `json:"term,omitempty"`
}

// Validate validates this query
func (m *Query) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBooleanClauses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOccurance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Query) validateBooleanClauses(formats strfmt.Registry) error {

	if swag.IsZero(m.BooleanClauses) { // not required
		return nil
	}

	for i := 0; i < len(m.BooleanClauses); i++ {
		if swag.IsZero(m.BooleanClauses[i]) { // not required
			continue
		}

		if m.BooleanClauses[i] != nil {
			if err := m.BooleanClauses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("booleanClauses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var queryTypeOccurancePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MUST_OCCUR","MUST_NOT_OCCUR","SHOULD_OCCUR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryTypeOccurancePropEnum = append(queryTypeOccurancePropEnum, v)
	}
}

const (

	// QueryOccuranceMUSTOCCUR captures enum value "MUST_OCCUR"
	QueryOccuranceMUSTOCCUR string = "MUST_OCCUR"

	// QueryOccuranceMUSTNOTOCCUR captures enum value "MUST_NOT_OCCUR"
	QueryOccuranceMUSTNOTOCCUR string = "MUST_NOT_OCCUR"

	// QueryOccuranceSHOULDOCCUR captures enum value "SHOULD_OCCUR"
	QueryOccuranceSHOULDOCCUR string = "SHOULD_OCCUR"
)

// prop value enum
func (m *Query) validateOccuranceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, queryTypeOccurancePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Query) validateOccurance(formats strfmt.Registry) error {

	if swag.IsZero(m.Occurance) { // not required
		return nil
	}

	// value enum
	if err := m.validateOccuranceEnum("occurance", "body", m.Occurance); err != nil {
		return err
	}

	return nil
}

func (m *Query) validateTerm(formats strfmt.Registry) error {

	if swag.IsZero(m.Term) { // not required
		return nil
	}

	if m.Term != nil {
		if err := m.Term.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("term")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Query) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Query) UnmarshalBinary(b []byte) error {
	var res Query
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
