// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskExecution TaskExecution
//
// Contains Task Execution details.
//
// swagger:discriminator TaskExecution Contains Task Execution details.
type TaskExecution interface {
	runtime.Validatable
	runtime.ContextValidatable

	// Execution duration of the Task Execution (in micros).
	// Example: 1568625938000000
	DurationInMicros() int64
	SetDurationInMicros(int64)

	// End time of the Task Execution (in micros)..
	// Example: 1568625938000000
	EndTime() int64
	SetEndTime(int64)

	// Start time of the Task Execution (in micros)..
	// Example: 1568625938000000
	StartTime() int64
	SetStartTime(int64)

	// Endpoints that the Task refers to.
	Endpoints() map[string]string
	SetEndpoints(map[string]string)

	// Failure message associated with a 'FAILED' task.
	FailureMessage() string
	SetFailureMessage(string)

	// The id of this Task.
	// Example: 8365ef3b-8bf3-48aa-bd5d-7113fcff827c~0.0
	ID() string
	SetID(string)

	// Ignores the failure of the Task execution if set to true, and continues with the Pipeline execution.
	// Example: true
	IgnoreFailure() bool
	SetIgnoreFailure(bool)

	// Map representing the Input properties for the Task.
	// Example: [{"ip":"10.5.23.84","script":"testScript.sh"}]
	Input() interface{}
	SetInput(interface{})

	// A human-friendly name used as an identifier For the Task.
	// Example: My-Name
	// Required: true
	Name() *string
	SetName(*string)

	Notifications() []Notification
	SetNotifications([]Notification)

	// Map representing the Output properties for the Task.
	// Example: [{"deployedMachineIP":"10.108.35.54","result":"true"}]
	Output() interface{}
	SetOutput(interface{})

	// The Task is executed only if this field evaluates to true.
	// Example: ${input.buildNumber} != '100'
	PreCondition() string
	SetPreCondition(string)

	RollbackConfiguration() RollbackConfiguration
	SetRollbackConfiguration(RollbackConfiguration)

	RollbackResponse() RollbackResponse
	SetRollbackResponse(RollbackResponse)

	// Execution status of the Task Execution.
	// Example: COMPLETED
	// Enum: [NOT_STARTED STARTED RUNNING CANCELING WAITING RESUMING PAUSING PAUSED CANCELED COMPLETED FAILED SKIPPED QUEUED FAILED_CONTINUE ROLLING_BACK ROLLBACK_FAILED PREPARING_WORKSPACE ROLLBACK_COMPLETED]
	Status() string
	SetStatus(string)

	// Execution status message of the Task Execution.
	// Example: Executing Task0
	StatusMessage() string
	SetStatusMessage(string)

	// Type of the Task.
	// Example: jenkins
	Type() string
	SetType(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type taskExecution struct {
	durationInMicrosField int64

	endTimeField int64

	startTimeField int64

	endpointsField map[string]string

	failureMessageField string

	idField string

	ignoreFailureField bool

	inputField interface{}

	nameField *string

	notificationsField []Notification

	outputField interface{}

	preConditionField string

	rollbackConfigurationField RollbackConfiguration

	rollbackResponseField RollbackResponse

	statusField string

	statusMessageField string

	typeField string
}

// DurationInMicros gets the duration in micros of this polymorphic type
func (m *taskExecution) DurationInMicros() int64 {
	return m.durationInMicrosField
}

// SetDurationInMicros sets the duration in micros of this polymorphic type
func (m *taskExecution) SetDurationInMicros(val int64) {
	m.durationInMicrosField = val
}

// EndTime gets the end time of this polymorphic type
func (m *taskExecution) EndTime() int64 {
	return m.endTimeField
}

// SetEndTime sets the end time of this polymorphic type
func (m *taskExecution) SetEndTime(val int64) {
	m.endTimeField = val
}

// StartTime gets the start time of this polymorphic type
func (m *taskExecution) StartTime() int64 {
	return m.startTimeField
}

// SetStartTime sets the start time of this polymorphic type
func (m *taskExecution) SetStartTime(val int64) {
	m.startTimeField = val
}

// Endpoints gets the endpoints of this polymorphic type
func (m *taskExecution) Endpoints() map[string]string {
	return m.endpointsField
}

// SetEndpoints sets the endpoints of this polymorphic type
func (m *taskExecution) SetEndpoints(val map[string]string) {
	m.endpointsField = val
}

// FailureMessage gets the failure message of this polymorphic type
func (m *taskExecution) FailureMessage() string {
	return m.failureMessageField
}

// SetFailureMessage sets the failure message of this polymorphic type
func (m *taskExecution) SetFailureMessage(val string) {
	m.failureMessageField = val
}

// ID gets the id of this polymorphic type
func (m *taskExecution) ID() string {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *taskExecution) SetID(val string) {
	m.idField = val
}

// IgnoreFailure gets the ignore failure of this polymorphic type
func (m *taskExecution) IgnoreFailure() bool {
	return m.ignoreFailureField
}

// SetIgnoreFailure sets the ignore failure of this polymorphic type
func (m *taskExecution) SetIgnoreFailure(val bool) {
	m.ignoreFailureField = val
}

// Input gets the input of this polymorphic type
func (m *taskExecution) Input() interface{} {
	return m.inputField
}

// SetInput sets the input of this polymorphic type
func (m *taskExecution) SetInput(val interface{}) {
	m.inputField = val
}

// Name gets the name of this polymorphic type
func (m *taskExecution) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *taskExecution) SetName(val *string) {
	m.nameField = val
}

// Notifications gets the notifications of this polymorphic type
func (m *taskExecution) Notifications() []Notification {
	return m.notificationsField
}

// SetNotifications sets the notifications of this polymorphic type
func (m *taskExecution) SetNotifications(val []Notification) {
	m.notificationsField = val
}

// Output gets the output of this polymorphic type
func (m *taskExecution) Output() interface{} {
	return m.outputField
}

// SetOutput sets the output of this polymorphic type
func (m *taskExecution) SetOutput(val interface{}) {
	m.outputField = val
}

// PreCondition gets the pre condition of this polymorphic type
func (m *taskExecution) PreCondition() string {
	return m.preConditionField
}

// SetPreCondition sets the pre condition of this polymorphic type
func (m *taskExecution) SetPreCondition(val string) {
	m.preConditionField = val
}

// RollbackConfiguration gets the rollback configuration of this polymorphic type
func (m *taskExecution) RollbackConfiguration() RollbackConfiguration {
	return m.rollbackConfigurationField
}

// SetRollbackConfiguration sets the rollback configuration of this polymorphic type
func (m *taskExecution) SetRollbackConfiguration(val RollbackConfiguration) {
	m.rollbackConfigurationField = val
}

// RollbackResponse gets the rollback response of this polymorphic type
func (m *taskExecution) RollbackResponse() RollbackResponse {
	return m.rollbackResponseField
}

// SetRollbackResponse sets the rollback response of this polymorphic type
func (m *taskExecution) SetRollbackResponse(val RollbackResponse) {
	m.rollbackResponseField = val
}

// Status gets the status of this polymorphic type
func (m *taskExecution) Status() string {
	return m.statusField
}

// SetStatus sets the status of this polymorphic type
func (m *taskExecution) SetStatus(val string) {
	m.statusField = val
}

// StatusMessage gets the status message of this polymorphic type
func (m *taskExecution) StatusMessage() string {
	return m.statusMessageField
}

// SetStatusMessage sets the status message of this polymorphic type
func (m *taskExecution) SetStatusMessage(val string) {
	m.statusMessageField = val
}

// Type gets the type of this polymorphic type
func (m *taskExecution) Type() string {
	return m.typeField
}

// SetType sets the type of this polymorphic type
func (m *taskExecution) SetType(val string) {
	m.typeField = val
}

// UnmarshalTaskExecutionSlice unmarshals polymorphic slices of TaskExecution
func UnmarshalTaskExecutionSlice(reader io.Reader, consumer runtime.Consumer) ([]TaskExecution, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []TaskExecution
	for _, element := range elements {
		obj, err := unmarshalTaskExecution(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalTaskExecution unmarshals polymorphic TaskExecution
func UnmarshalTaskExecution(reader io.Reader, consumer runtime.Consumer) (TaskExecution, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalTaskExecution(data, consumer)
}

func unmarshalTaskExecution(data []byte, consumer runtime.Consumer) (TaskExecution, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Contains Task Execution details. property.
	var getType struct {
		ContainsTaskExecutionDetails string `json:"Contains Task Execution details."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Contains Task Execution details.", "body", getType.ContainsTaskExecutionDetails); err != nil {
		return nil, err
	}

	// The value of Contains Task Execution details. is used to determine which type to create and unmarshal the data into
	switch getType.ContainsTaskExecutionDetails {
	case "TaskExecution":
		var result taskExecution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid Contains Task Execution details. value: %q", getType.ContainsTaskExecutionDetails)
}

// Validate validates this task execution
func (m *taskExecution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRollbackConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRollbackResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *taskExecution) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

func (m *taskExecution) validateNotifications(formats strfmt.Registry) error {
	if swag.IsZero(m.Notifications()) { // not required
		return nil
	}

	for i := 0; i < len(m.Notifications()); i++ {

		if err := m.notificationsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifications" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *taskExecution) validateRollbackConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.RollbackConfiguration()) { // not required
		return nil
	}

	if err := m.RollbackConfiguration().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rollbackConfiguration")
		}
		return err
	}

	return nil
}

func (m *taskExecution) validateRollbackResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.RollbackResponse()) { // not required
		return nil
	}

	if err := m.RollbackResponse().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rollbackResponse")
		}
		return err
	}

	return nil
}

var taskExecutionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOT_STARTED","STARTED","RUNNING","CANCELING","WAITING","RESUMING","PAUSING","PAUSED","CANCELED","COMPLETED","FAILED","SKIPPED","QUEUED","FAILED_CONTINUE","ROLLING_BACK","ROLLBACK_FAILED","PREPARING_WORKSPACE","ROLLBACK_COMPLETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskExecutionTypeStatusPropEnum = append(taskExecutionTypeStatusPropEnum, v)
	}
}

const (

	// TaskExecutionStatusNOTSTARTED captures enum value "NOT_STARTED"
	TaskExecutionStatusNOTSTARTED string = "NOT_STARTED"

	// TaskExecutionStatusSTARTED captures enum value "STARTED"
	TaskExecutionStatusSTARTED string = "STARTED"

	// TaskExecutionStatusRUNNING captures enum value "RUNNING"
	TaskExecutionStatusRUNNING string = "RUNNING"

	// TaskExecutionStatusCANCELING captures enum value "CANCELING"
	TaskExecutionStatusCANCELING string = "CANCELING"

	// TaskExecutionStatusWAITING captures enum value "WAITING"
	TaskExecutionStatusWAITING string = "WAITING"

	// TaskExecutionStatusRESUMING captures enum value "RESUMING"
	TaskExecutionStatusRESUMING string = "RESUMING"

	// TaskExecutionStatusPAUSING captures enum value "PAUSING"
	TaskExecutionStatusPAUSING string = "PAUSING"

	// TaskExecutionStatusPAUSED captures enum value "PAUSED"
	TaskExecutionStatusPAUSED string = "PAUSED"

	// TaskExecutionStatusCANCELED captures enum value "CANCELED"
	TaskExecutionStatusCANCELED string = "CANCELED"

	// TaskExecutionStatusCOMPLETED captures enum value "COMPLETED"
	TaskExecutionStatusCOMPLETED string = "COMPLETED"

	// TaskExecutionStatusFAILED captures enum value "FAILED"
	TaskExecutionStatusFAILED string = "FAILED"

	// TaskExecutionStatusSKIPPED captures enum value "SKIPPED"
	TaskExecutionStatusSKIPPED string = "SKIPPED"

	// TaskExecutionStatusQUEUED captures enum value "QUEUED"
	TaskExecutionStatusQUEUED string = "QUEUED"

	// TaskExecutionStatusFAILEDCONTINUE captures enum value "FAILED_CONTINUE"
	TaskExecutionStatusFAILEDCONTINUE string = "FAILED_CONTINUE"

	// TaskExecutionStatusROLLINGBACK captures enum value "ROLLING_BACK"
	TaskExecutionStatusROLLINGBACK string = "ROLLING_BACK"

	// TaskExecutionStatusROLLBACKFAILED captures enum value "ROLLBACK_FAILED"
	TaskExecutionStatusROLLBACKFAILED string = "ROLLBACK_FAILED"

	// TaskExecutionStatusPREPARINGWORKSPACE captures enum value "PREPARING_WORKSPACE"
	TaskExecutionStatusPREPARINGWORKSPACE string = "PREPARING_WORKSPACE"

	// TaskExecutionStatusROLLBACKCOMPLETED captures enum value "ROLLBACK_COMPLETED"
	TaskExecutionStatusROLLBACKCOMPLETED string = "ROLLBACK_COMPLETED"
)

// prop value enum
func (m *taskExecution) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskExecutionTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *taskExecution) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status()) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status()); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this task execution based on the context it is used
func (m *taskExecution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNotifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRollbackConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRollbackResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *taskExecution) contextValidateNotifications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Notifications()); i++ {

		if err := m.notificationsField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifications" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *taskExecution) contextValidateRollbackConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RollbackConfiguration().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rollbackConfiguration")
		}
		return err
	}

	return nil
}

func (m *taskExecution) contextValidateRollbackResponse(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RollbackResponse().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rollbackResponse")
		}
		return err
	}

	return nil
}
