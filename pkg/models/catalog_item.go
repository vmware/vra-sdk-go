// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogItem CatalogItem
//
// Represents a Catalog Item that can eventually be requested by a consumer.
//
// swagger:model CatalogItem
type CatalogItem struct {

	// Max number of instances that can be requested at a time
	// Maximum: 127
	// Minimum: -128
	BulkRequestLimit *int32 `json:"bulkRequestLimit,omitempty"`

	// Creation time
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Created By
	CreatedBy string `json:"createdBy,omitempty"`

	// CatalogItem description
	Description string `json:"description,omitempty"`

	// Form ID
	FormID string `json:"formId,omitempty"`

	// Icon ID
	// Format: uuid
	IconID strfmt.UUID `json:"iconId,omitempty"`

	// CatalogItem id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Update time
	// Format: date-time
	LastUpdatedAt strfmt.DateTime `json:"lastUpdatedAt,omitempty"`

	// Updated By
	LastUpdatedBy string `json:"lastUpdatedBy,omitempty"`

	// CatalogItem name
	// Required: true
	Name *string `json:"name"`

	// Associated project IDs that can be used for requesting
	// Required: true
	ProjectIds []string `json:"projectIds"`

	// Associated projects that can be used for requesting
	Projects []*ResourceReference `json:"projects"`

	// Json schema describing request parameters, a simplified version of http://json-schema.org/latest/json-schema-validation.html#rfc.section.5
	Schema interface{} `json:"schema,omitempty"`

	// LibraryItem source ID.
	// Format: uuid
	SourceID strfmt.UUID `json:"sourceId,omitempty"`

	// LibraryItem source name.
	SourceName string `json:"sourceName,omitempty"`

	// ResourceReference to type, e.g. blueprint, CFT... etc
	// Required: true
	Type *ResourceReference `json:"type"`
}

// Validate validates this catalog item
func (m *CatalogItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBulkRequestLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogItem) validateBulkRequestLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.BulkRequestLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("bulkRequestLimit", "body", int64(*m.BulkRequestLimit), -128, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("bulkRequestLimit", "body", int64(*m.BulkRequestLimit), 127, false); err != nil {
		return err
	}

	return nil
}

func (m *CatalogItem) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CatalogItem) validateIconID(formats strfmt.Registry) error {
	if swag.IsZero(m.IconID) { // not required
		return nil
	}

	if err := validate.FormatOf("iconId", "body", "uuid", m.IconID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CatalogItem) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CatalogItem) validateLastUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedAt", "body", "date-time", m.LastUpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CatalogItem) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CatalogItem) validateProjectIds(formats strfmt.Registry) error {

	if err := validate.Required("projectIds", "body", m.ProjectIds); err != nil {
		return err
	}

	return nil
}

func (m *CatalogItem) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	for i := 0; i < len(m.Projects); i++ {
		if swag.IsZero(m.Projects[i]) { // not required
			continue
		}

		if m.Projects[i] != nil {
			if err := m.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogItem) validateSourceID(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceID) { // not required
		return nil
	}

	if err := validate.FormatOf("sourceId", "body", "uuid", m.SourceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CatalogItem) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this catalog item based on the context it is used
func (m *CatalogItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogItem) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Projects); i++ {

		if m.Projects[i] != nil {
			if err := m.Projects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogItem) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogItem) UnmarshalBinary(b []byte) error {
	var res CatalogItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
