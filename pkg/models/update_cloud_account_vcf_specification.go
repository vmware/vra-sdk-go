// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateCloudAccountVcfSpecification Specification for a VCF cloud account.<br><br>A cloud account identifies a cloud account type and an account-specific deployment region or data center where the associated cloud account resources are hosted.
//
// swagger:model UpdateCloudAccountVcfSpecification
type UpdateCloudAccountVcfSpecification struct {

	// Accept self signed certificate when connecting to vSphere and NSX-T
	// Example: false
	AcceptSelfSignedCertificate bool `json:"acceptSelfSignedCertificate,omitempty"`

	// Certificate for a cloud account.
	// Example: {\"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIDHjCCAoegAwIBAgIBATANBgkqhkiG9w0BAQsFADCBpjEUMBIGA1UEChMLVk13\\nYXJlIEluYAAc1pw18GT3iAqQRPx0PrjzJhgjIJMla\\n/1Kg4byY4FPSacNiRgY/FG2bPCqZk1yRfzmkFYCW/vU+Dg==\\n-----END CERTIFICATE-----\\n-\"}
	CertificateInfo *CertificateInfoSpecification `json:"certificateInfo,omitempty"`

	// Create default cloud zones for the enabled regions.
	// Example: true
	CreateDefaultZones bool `json:"createDefaultZones,omitempty"`

	// Identifier of a data collector vm deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collectors.
	// Note: Data collector endpoints are not available in vRA on-prem release.
	// Example: 23959a1e-18bc-4f0c-ac49-b5aeb4b6eef4
	DcID string `json:"dcId,omitempty"`

	// A human-friendly description.
	Description string `json:"description,omitempty"`

	// A human-friendly name used as an identifier in APIs that support this option.
	Name string `json:"name,omitempty"`

	// NSX Certificate
	NsxCertificate string `json:"nsxCertificate,omitempty"`

	// Host name for the NSX endpoint from the specified workload domain.
	// Example: nsxt.mycompany.com
	// Required: true
	NsxHostName *string `json:"nsxHostName"`

	// Password for the user used to authenticate with the NSX-T manager in VCF cloud account
	// Example: cndhjslacd90ascdbasyoucbdh
	// Required: true
	NsxPassword *string `json:"nsxPassword"`

	// User name for the NSX manager in the specified workload domain.
	// Example: administrator@mycompany.com
	// Required: true
	NsxUsername *string `json:"nsxUsername"`

	// A set of regions to enable provisioning on.Refer to /iaas/api/cloud-accounts/region-enumeration.
	// Example: [{ \"name\": \"us-east-1\",\"externalRegionId\": \"us-east-1\"}]
	Regions []*RegionSpecification `json:"regions"`

	// SDDC manager integration id
	SddcManagerID string `json:"sddcManagerId,omitempty"`

	// A set of tag keys and optional values to set on the Cloud Account.Cloud account capability tags may enable different features.
	// Example: [ { \"key\" : \"env\", \"value\": \"dev\" } ]
	Tags []*Tag `json:"tags"`

	// vCenter Certificate
	VcenterCertificate string `json:"vcenterCertificate,omitempty"`

	// Host name for the vSphere from the specified workload domain.
	// Example: vc.mycompany.com
	// Required: true
	VcenterHostName *string `json:"vcenterHostName"`

	// Password for the user used to authenticate with the vCenter in VCF cloud account
	// Example: cndhjslacd90ascdbasyoucbdh
	// Required: true
	VcenterPassword *string `json:"vcenterPassword"`

	// vCenter user name for the specified workload domain.The specified user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
	// Example: administrator@mycompany.com
	// Required: true
	VcenterUsername *string `json:"vcenterUsername"`

	// Id of the workload domain to add as VCF cloud account.
	// Required: true
	WorkloadDomainID *string `json:"workloadDomainId"`

	// Name of the workload domain to add as VCF cloud account.
	// Example: Management
	// Required: true
	WorkloadDomainName *string `json:"workloadDomainName"`
}

// Validate validates this update cloud account vcf specification
func (m *UpdateCloudAccountVcfSpecification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNsxHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNsxPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNsxUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcenterHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcenterPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcenterUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloadDomainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloadDomainName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateCloudAccountVcfSpecification) validateCertificateInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CertificateInfo) { // not required
		return nil
	}

	if m.CertificateInfo != nil {
		if err := m.CertificateInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificateInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificateInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateCloudAccountVcfSpecification) validateNsxHostName(formats strfmt.Registry) error {

	if err := validate.Required("nsxHostName", "body", m.NsxHostName); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCloudAccountVcfSpecification) validateNsxPassword(formats strfmt.Registry) error {

	if err := validate.Required("nsxPassword", "body", m.NsxPassword); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCloudAccountVcfSpecification) validateNsxUsername(formats strfmt.Registry) error {

	if err := validate.Required("nsxUsername", "body", m.NsxUsername); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCloudAccountVcfSpecification) validateRegions(formats strfmt.Registry) error {
	if swag.IsZero(m.Regions) { // not required
		return nil
	}

	for i := 0; i < len(m.Regions); i++ {
		if swag.IsZero(m.Regions[i]) { // not required
			continue
		}

		if m.Regions[i] != nil {
			if err := m.Regions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateCloudAccountVcfSpecification) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateCloudAccountVcfSpecification) validateVcenterHostName(formats strfmt.Registry) error {

	if err := validate.Required("vcenterHostName", "body", m.VcenterHostName); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCloudAccountVcfSpecification) validateVcenterPassword(formats strfmt.Registry) error {

	if err := validate.Required("vcenterPassword", "body", m.VcenterPassword); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCloudAccountVcfSpecification) validateVcenterUsername(formats strfmt.Registry) error {

	if err := validate.Required("vcenterUsername", "body", m.VcenterUsername); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCloudAccountVcfSpecification) validateWorkloadDomainID(formats strfmt.Registry) error {

	if err := validate.Required("workloadDomainId", "body", m.WorkloadDomainID); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCloudAccountVcfSpecification) validateWorkloadDomainName(formats strfmt.Registry) error {

	if err := validate.Required("workloadDomainName", "body", m.WorkloadDomainName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update cloud account vcf specification based on the context it is used
func (m *UpdateCloudAccountVcfSpecification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificateInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateCloudAccountVcfSpecification) contextValidateCertificateInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CertificateInfo != nil {
		if err := m.CertificateInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificateInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificateInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateCloudAccountVcfSpecification) contextValidateRegions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Regions); i++ {

		if m.Regions[i] != nil {
			if err := m.Regions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateCloudAccountVcfSpecification) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateCloudAccountVcfSpecification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateCloudAccountVcfSpecification) UnmarshalBinary(b []byte) error {
	var res UpdateCloudAccountVcfSpecification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
