// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EndpointCertificateChain EndpointCertificateChain
//
// EndpointCertificateChain is a tree of SSL Certificates.
//
// swagger:discriminator EndpointCertificateChain EndpointCertificateChain is a tree of SSL Certificates.
type EndpointCertificateChain interface {
	runtime.Validatable
	runtime.ContextValidatable

	Certificates() []EndpointCertificate
	SetCertificates([]EndpointCertificate)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type endpointCertificateChain struct {
	certificatesField []EndpointCertificate
}

// Certificates gets the certificates of this polymorphic type
func (m *endpointCertificateChain) Certificates() []EndpointCertificate {
	return m.certificatesField
}

// SetCertificates sets the certificates of this polymorphic type
func (m *endpointCertificateChain) SetCertificates(val []EndpointCertificate) {
	m.certificatesField = val
}

// UnmarshalEndpointCertificateChainSlice unmarshals polymorphic slices of EndpointCertificateChain
func UnmarshalEndpointCertificateChainSlice(reader io.Reader, consumer runtime.Consumer) ([]EndpointCertificateChain, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []EndpointCertificateChain
	for _, element := range elements {
		obj, err := unmarshalEndpointCertificateChain(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalEndpointCertificateChain unmarshals polymorphic EndpointCertificateChain
func UnmarshalEndpointCertificateChain(reader io.Reader, consumer runtime.Consumer) (EndpointCertificateChain, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalEndpointCertificateChain(data, consumer)
}

func unmarshalEndpointCertificateChain(data []byte, consumer runtime.Consumer) (EndpointCertificateChain, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the EndpointCertificateChain is a tree of SSL Certificates. property.
	var getType struct {
		EndpointCertificateChainIsaTreeOfSSLCertificates string `json:"EndpointCertificateChain is a tree of SSL Certificates."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("EndpointCertificateChain is a tree of SSL Certificates.", "body", getType.EndpointCertificateChainIsaTreeOfSSLCertificates); err != nil {
		return nil, err
	}

	// The value of EndpointCertificateChain is a tree of SSL Certificates. is used to determine which type to create and unmarshal the data into
	switch getType.EndpointCertificateChainIsaTreeOfSSLCertificates {
	case "EndpointCertificateChain":
		var result endpointCertificateChain
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid EndpointCertificateChain is a tree of SSL Certificates. value: %q", getType.EndpointCertificateChainIsaTreeOfSSLCertificates)
}

// Validate validates this endpoint certificate chain
func (m *endpointCertificateChain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *endpointCertificateChain) validateCertificates(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificates()) { // not required
		return nil
	}

	for i := 0; i < len(m.Certificates()); i++ {

		if err := m.certificatesField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificates" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this endpoint certificate chain based on the context it is used
func (m *endpointCertificateChain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *endpointCertificateChain) contextValidateCertificates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Certificates()); i++ {

		if err := m.certificatesField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificates" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}
