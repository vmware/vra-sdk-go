// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PageOfProjects PageOfProjects
//
// swagger:model PageOfProjects
type PageOfProjects struct {
	contentField []Project

	// empty
	Empty bool `json:"empty,omitempty"`

	// first
	First bool `json:"first,omitempty"`

	// last
	Last bool `json:"last,omitempty"`

	// number
	Number int32 `json:"number,omitempty"`

	// number of elements
	NumberOfElements int32 `json:"numberOfElements,omitempty"`

	// pageable
	Pageable *Pageable `json:"pageable,omitempty"`

	// size
	Size int32 `json:"size,omitempty"`

	// sort
	Sort *Sort `json:"sort,omitempty"`

	// total elements
	TotalElements int64 `json:"totalElements,omitempty"`

	// total pages
	TotalPages int32 `json:"totalPages,omitempty"`
}

// Content gets the content of this base type
func (m *PageOfProjects) Content() []Project {
	return m.contentField
}

// SetContent sets the content of this base type
func (m *PageOfProjects) SetContent(val []Project) {
	m.contentField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *PageOfProjects) UnmarshalJSON(raw []byte) error {
	var data struct {
		Content json.RawMessage `json:"content"`

		Empty bool `json:"empty,omitempty"`

		First bool `json:"first,omitempty"`

		Last bool `json:"last,omitempty"`

		Number int32 `json:"number,omitempty"`

		NumberOfElements int32 `json:"numberOfElements,omitempty"`

		Pageable *Pageable `json:"pageable,omitempty"`

		Size int32 `json:"size,omitempty"`

		Sort *Sort `json:"sort,omitempty"`

		TotalElements int64 `json:"totalElements,omitempty"`

		TotalPages int32 `json:"totalPages,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var propContent []Project
	if string(data.Content) != "null" {
		content, err := UnmarshalProjectSlice(bytes.NewBuffer(data.Content), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propContent = content
	}

	var result PageOfProjects

	// content
	result.contentField = propContent

	// empty
	result.Empty = data.Empty

	// first
	result.First = data.First

	// last
	result.Last = data.Last

	// number
	result.Number = data.Number

	// numberOfElements
	result.NumberOfElements = data.NumberOfElements

	// pageable
	result.Pageable = data.Pageable

	// size
	result.Size = data.Size

	// sort
	result.Sort = data.Sort

	// totalElements
	result.TotalElements = data.TotalElements

	// totalPages
	result.TotalPages = data.TotalPages

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m PageOfProjects) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		Empty bool `json:"empty,omitempty"`

		First bool `json:"first,omitempty"`

		Last bool `json:"last,omitempty"`

		Number int32 `json:"number,omitempty"`

		NumberOfElements int32 `json:"numberOfElements,omitempty"`

		Pageable *Pageable `json:"pageable,omitempty"`

		Size int32 `json:"size,omitempty"`

		Sort *Sort `json:"sort,omitempty"`

		TotalElements int64 `json:"totalElements,omitempty"`

		TotalPages int32 `json:"totalPages,omitempty"`
	}{

		Empty: m.Empty,

		First: m.First,

		Last: m.Last,

		Number: m.Number,

		NumberOfElements: m.NumberOfElements,

		Pageable: m.Pageable,

		Size: m.Size,

		Sort: m.Sort,

		TotalElements: m.TotalElements,

		TotalPages: m.TotalPages,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Content []Project `json:"content"`
	}{

		Content: m.contentField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this page of projects
func (m *PageOfProjects) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageOfProjects) validateContent(formats strfmt.Registry) error {
	if swag.IsZero(m.Content()) { // not required
		return nil
	}

	for i := 0; i < len(m.Content()); i++ {

		if err := m.contentField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PageOfProjects) validatePageable(formats strfmt.Registry) error {
	if swag.IsZero(m.Pageable) { // not required
		return nil
	}

	if m.Pageable != nil {
		if err := m.Pageable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pageable")
			}
			return err
		}
	}

	return nil
}

func (m *PageOfProjects) validateSort(formats strfmt.Registry) error {
	if swag.IsZero(m.Sort) { // not required
		return nil
	}

	if m.Sort != nil {
		if err := m.Sort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sort")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this page of projects based on the context it is used
func (m *PageOfProjects) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePageable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageOfProjects) contextValidateContent(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Content()); i++ {

		if err := m.contentField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PageOfProjects) contextValidatePageable(ctx context.Context, formats strfmt.Registry) error {

	if m.Pageable != nil {
		if err := m.Pageable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pageable")
			}
			return err
		}
	}

	return nil
}

func (m *PageOfProjects) contextValidateSort(ctx context.Context, formats strfmt.Registry) error {

	if m.Sort != nil {
		if err := m.Sort.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sort")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PageOfProjects) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PageOfProjects) UnmarshalBinary(b []byte) error {
	var res PageOfProjects
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
