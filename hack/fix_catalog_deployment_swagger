#!/usr/bin/env python3

import argparse
import json


# This is the location of the IaaS swagger
old_filename = "swagger/vra-catalog-deployment.json"
new_filename = "swagger/vra-catalog-deployment-fixed.json"

def add_typeid_param(swagger):
    # The typeID parameter to insert
    type_id_param = {
        "name": "typeId",
        "in": "query",
        "description": "The type id of the policy.",
        "required": False,
        "type": "string",
        "allowEmptyValue": True
    }

    # Update the needed path
    param_list = swagger['paths']['/policy/api/policies']['get']['parameters']
    param_name_list = [d['name'] for d in param_list]
    if type_id_param['name'] not in param_name_list:
        param_list.insert(0, type_id_param)


def replace_value(d, k, v, new):
    if k in d and d[k] == v:
        d[k] = new
    for child in d.values():
        if isinstance(child, dict):
            replace_value(child, k, v, new)
        elif isinstance(child, list):
            for i in child:
                if isinstance(i, dict):
                    replace_value(i, k, v, new)


def rename_deployment_models(swagger):
    definitions = [
        ('ResourceType', 'DeploymentResourceType', '#/definitions/ResourceType', '#/definitions/DeploymentResourceType'),
        ('PageOfResourceType', 'PageOfDeploymentResourceType', '#/definitions/PageOfResourceType', '#/definitions/PageOfDeploymentResourceType'),
        ('Filter', 'DeploymentFilter', '#/definitions/Filter', '#/definitions/DeploymentFilter'),
        ('FilterSchema', 'DeploymentFilterSchema', '#/definitions/FilterSchema', '#/definitions/DeploymentFilterSchema'),
    ]

    for (oldDef, newDef, oldRef, newRef) in definitions:
        v = swagger['definitions'][oldDef]
        del swagger['definitions'][oldDef]
        swagger['definitions'][newDef] = v
        replace_value(swagger, "$ref", oldRef, newRef)


def rename_deployment_operationid(swagger):
    operations = [
        ("/policy/api/policies", "post", "createPolicyUsingPOST_1"),
    ]

    for (path, op, newOperationid) in operations:
        swagger['paths'][path][op]["operationId"] = newOperationid


def remove_global_security(swagger):
    if 'securityDefinitions' in swagger:
        del swagger['securityDefinitions']


# See https://jira.eng.vmware.com/browse/TCS-4017 for context
def remove_security(swagger):
    for p in swagger['paths']:
        param_list = swagger['paths'][p]
        for method in param_list:
            if 'security' in swagger['paths'][p][method]:
                del swagger['paths'][p][method]['security']


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--omit-security', action='store_false')
    args = parser.parse_args()

    # read in the swagger spec
    swagger = json.loads(open(old_filename).read())

    rename_deployment_models(swagger)

    if args.omit_security:
        remove_global_security(swagger)
        remove_security(swagger)

    add_typeid_param(swagger)
    rename_deployment_operationid(swagger)

    # Overwrite the swagger spec
    f = open(new_filename, "w")
    f.write(json.dumps(swagger, sort_keys=False, indent=2))
    f.write('\n')
